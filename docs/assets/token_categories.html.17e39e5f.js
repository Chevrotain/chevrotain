import{_ as n,o as s,c as a,d as e}from"./app.6ba521a4.js";const t={},p=e(`<h1 id="token-categories" tabindex="-1"><a class="header-anchor" href="#token-categories" aria-hidden="true">#</a> Token Categories</h1><p>When parsing it is sometimes useful to match a terminal against a <strong>set of Token Types</strong>. This can be accomplished by using Token Categories.</p><p>For example:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// &quot;KeywordOrIdentifier&quot; is our Token category used to match any keyword or Identifier</span>
<span class="token keyword">const</span> KeywordOrIdentifier <span class="token operator">=</span> <span class="token function">createToken</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&quot;AnyWord&quot;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">pattern</span><span class="token operator">:</span> Lexer<span class="token punctuation">.</span><span class="token constant">NA</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token comment">// General Identifier</span>
<span class="token keyword">export</span> <span class="token keyword">const</span> Identifier <span class="token operator">=</span> <span class="token function">createToken</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&quot;Identifier&quot;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">pattern</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">[a-zA-Z]\\w*</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>
  <span class="token literal-property property">categories</span><span class="token operator">:</span> <span class="token punctuation">[</span>KeywordOrIdentifier<span class="token punctuation">]</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token comment">// a Keyword</span>
<span class="token keyword">export</span> <span class="token keyword">const</span> Class <span class="token operator">=</span> <span class="token function">createToken</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&quot;Class&quot;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">pattern</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">Class</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>
  <span class="token literal-property property">longer_alt</span><span class="token operator">:</span> Identifier<span class="token punctuation">,</span>
  <span class="token literal-property property">categories</span><span class="token operator">:</span> <span class="token punctuation">[</span>KeywordOrIdentifier<span class="token punctuation">]</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>$<span class="token punctuation">.</span><span class="token constant">RULE</span><span class="token punctuation">(</span><span class="token string">&quot;SomeRule&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token comment">// This would match either an Identifier or a keyword thus allowing for</span>
  <span class="token comment">// &quot;None Reserved keywords&quot;</span>
  $<span class="token punctuation">.</span><span class="token constant">CONSUME</span><span class="token punctuation">(</span>KeywordOrIdentifier<span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Note that:</p><ul><li>A Token category is simply another Token Type.</li><li>A Token Type may have <strong>multiple</strong> Token Categories.</li></ul>`,7),o=[p];function r(i,c){return s(),a("div",null,o)}var u=n(t,[["render",r],["__file","token_categories.html.vue"]]);export{u as default};
