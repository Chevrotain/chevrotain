(window.webpackJsonp=window.webpackJsonp||[]).push([[40],{404:function(t,a,e){"use strict";e.r(a);var n=e(43),s=Object(n.a)({},(function(){var t=this,a=t.$createElement,e=t._self._c||a;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h1",{attrs:{id:"resolving-grammar-errors"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#resolving-grammar-errors"}},[t._v("#")]),t._v(" Resolving Grammar Errors")]),t._v(" "),e("ul",[e("li",[e("a",{attrs:{href:"#COMMON_PREFIX"}},[t._v("Common Prefix Ambiguities.")])]),t._v(" "),e("li",[e("a",{attrs:{href:"#AMBIGUOUS_ALTERNATIVES"}},[t._v("Ambiguous Alternatives Detected.")])]),t._v(" "),e("li",[e("a",{attrs:{href:"#TERMINAL_NAME_NOT_FOUND"}},[t._v("Terminal Token Name Not Found.")])]),t._v(" "),e("li",[e("a",{attrs:{href:"#INFINITE_LOOP"}},[t._v("Infinite Loop Detected.")])]),t._v(" "),e("li",[e("a",{attrs:{href:"#IGNORING_AMBIGUITIES"}},[t._v("Ignoring Ambiguities.")])])]),t._v(" "),e("h2",{attrs:{id:"COMMON_PREFIX"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#COMMON_PREFIX"}},[t._v("#")]),t._v(" Common Prefix Ambiguities")]),t._v(" "),e("p",[t._v("Imagine the following grammar:")]),t._v(" "),e("div",{staticClass:"language-antlr extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('myRule:\n  "A" "B" |\n  "A" "B" "C"\n')])])]),e("p",[t._v('The first alternative is a prefix of the second alternative.\nNow lets consider the input ["A", "B"].\nFor this input the first alternative would be matched as expected.')]),t._v(" "),e("p",[t._v('However for the input ["A", "B", "C"] the first\nalternative would still be matched but this time '),e("strong",[t._v("incorrectly")]),t._v("\nas alternation matches are attempted "),e("strong",[t._v("in order")]),t._v(".")]),t._v(" "),e("p",[t._v("There are two ways to resolve this:")]),t._v(" "),e("ul",[e("li",[e("p",[t._v("Reorder the alternatives so that shorter common prefix lookahead\npaths appears after the longer ones.")]),t._v(" "),e("div",{staticClass:"language-antlr extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('myRule:\n  "A" "B" "C" |\n  "A" "B"\n')])])])]),t._v(" "),e("li",[e("p",[t._v("Refactor the grammar to extract common prefixes.")]),t._v(" "),e("div",{staticClass:"language-antlr extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('  myRule:\n    "A" "B" ("C")?\n')])])])])]),t._v(" "),e("h2",{attrs:{id:"AMBIGUOUS_ALTERNATIVES"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#AMBIGUOUS_ALTERNATIVES"}},[t._v("#")]),t._v(" Ambiguous Alternatives Detected")]),t._v(" "),e("p",[t._v("An Ambiguous Alternatives Error occurs when Chevrotain cannot decide between two alternatives in\nan alternation (OR DSL method).")]),t._v(" "),e("p",[t._v('Chevrotain "looks ahead" at most '),e("a",{attrs:{href:"https://chevrotain.io/documentation/10_1_1/interfaces/IParserConfig.html#maxLookAhead",target:"_blank",rel:"noopener noreferrer"}},[t._v("K (3 by default)"),e("OutboundLink")],1),t._v("\ntokens to determine which alternative to pick. An Ambiguous Alternatives Error indicates\nthat more than K tokens lookahead is needed.")]),t._v(" "),e("p",[t._v("Lets consider a more concrete example:")]),t._v(" "),e("div",{staticClass:"language-antlr extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('fiveTokensLookahead:\n  "A" "B" "C" "D" "1" |\n  "A" "B" "C" "D" "2"\n')])])]),e("p",[t._v('In order to decide between these two alternatives, Chevrotain must "look ahead" '),e("strong",[t._v("five")]),t._v(' tokens as the\ndisambiguating tokens are "1" and "2".\nFive is a larger than the default '),e("a",{attrs:{href:"https://chevrotain.io/documentation/10_1_1/interfaces/IParserConfig.html#maxLookAhead",target:"_blank",rel:"noopener noreferrer"}},[t._v("maxLookahead"),e("OutboundLink")],1),t._v(" of four, so an error will be raised.")]),t._v(" "),e("p",[t._v("We could solve this case by increasing the global "),e("a",{attrs:{href:"https://chevrotain.io/documentation/10_1_1/interfaces/IParserConfig.html#maxLookAhead",target:"_blank",rel:"noopener noreferrer"}},[t._v("maxLookahead"),e("OutboundLink")],1),t._v(" to 5, however this is "),e("strong",[t._v("not")]),t._v(" recommended\ndue to performance and grammar complexity reasons.\nFrom a performance perspective this is particularly problematic as some analysis\ndone on the grammar (during initialization) may become "),e("strong",[t._v("exponentially")]),t._v(" more complex as the maxLookahead grows.")]),t._v(" "),e("p",[t._v("We could also specify the "),e("a",{attrs:{href:"https://chevrotain.io/documentation/10_1_1/interfaces/OrMethodOpts.html#IGNORE_AMBIGUITIES",target:"_blank",rel:"noopener noreferrer"}},[t._v("MAX_LOOKAHEAD"),e("OutboundLink")],1),t._v("\nconfig on the "),e("strong",[t._v("specific")]),t._v(" DSL method invocation where the problem occurs, This is still not the optimal solution in this case.")]),t._v(" "),e("p",[e("strong",[e("em",[t._v("The recommended solution in this case would be to refactor the grammar to require a smaller lookahead")])]),t._v(".\nIn our trivial example the grammar can be refactored to be LL(1), meaning only one token of lookahead is needed.\nThe needed change is a simple "),e("strong",[t._v("extraction of the common prefix before the alternation")]),t._v(".")]),t._v(" "),e("div",{staticClass:"language-antlr extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('oneTokenLookahead:\n  "A" "B" "C" "D"\n  (\n    "1" |\n    "2"\n  )\n')])])]),e("p",[t._v("Note that the number of lookahead tokens needed to choose between alternatives may in fact be "),e("strong",[t._v("infinite")]),t._v(", for example:")]),t._v(" "),e("div",{staticClass:"language-antlr extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('infiniteTokensLookahead:\n  ("A")* "1"  |\n  ("A")* "2"\n')])])]),e("p",[t._v('No matter how large a maxLookahead we choose, the sequence of "A"s could always (potentially) be longer...\nThe solution in this case is the same as before, '),e("strong",[t._v("extraction of the common prefix before the alternation")]),t._v(", for example:")]),t._v(" "),e("div",{staticClass:"language-antlr extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('oneTokenLookahead:\n  ("A")*\n  (\n    "1" |\n    "2"\n  )\n')])])]),e("p",[t._v("In some rare cases refactoring the grammar is not possible, in those cases it is still possible to resolve the\nambiguity using the "),e("RouterLink",{attrs:{to:"/features/backtracking.html"}},[t._v("backtracking feature")]),t._v("\nAlthough this is "),e("strong",[t._v("strongly")]),t._v(" discouraged due to performance and complexity reasons...")],1),t._v(" "),e("h2",{attrs:{id:"TERMINAL_NAME_NOT_FOUND"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#TERMINAL_NAME_NOT_FOUND"}},[t._v("#")]),t._v(" Terminal Token Name Not Found")]),t._v(" "),e("p",[t._v("This problem can no longer occur in versions of Chevrotain after (and including) 6.0.0.\nSee "),e("a",{attrs:{href:"https://github.com/chevrotain/chevrotain/blob/v5.0.0/packages/chevrotain/docs/guide/resolving_grammar_errors.md#terminal-token-name-not-found",target:"_blank",rel:"noopener noreferrer"}},[t._v("V5 of these Docs"),e("OutboundLink")],1),t._v("\nif you have not yet upgraded.")]),t._v(" "),e("h2",{attrs:{id:"INFINITE_LOOP"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#INFINITE_LOOP"}},[t._v("#")]),t._v(" Infinite Loop Detected")]),t._v(" "),e("ul",[e("li",[t._v("Note "),e("strong",[t._v("This error is only relevant in versions prior to 4.4.0")]),t._v("\nSee: https://github.com/chevrotain/chevrotain/issues/958")])]),t._v(" "),e("p",[t._v("A repetition must consume at least one token in each iteration.\nEntering an iteration while failing to do so would cause an "),e("strong",[t._v("infinite loop")]),t._v(" because\nthe condition to entering the next iteration would still be true while the parser state has\nnot been changed. essentially this creates a flow that looks like:")]),t._v(" "),e("div",{staticClass:"language-javascript extra-class"},[e("pre",{pre:!0,attrs:{class:"language-javascript"}},[e("code",[e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// iteration lookahead condition (always true)")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// single iteration grammar")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),e("p",[t._v("Lets look at a few real examples that can cause this error")]),t._v(" "),e("div",{staticClass:"language-javascript extra-class"},[e("pre",{pre:!0,attrs:{class:"language-javascript"}},[e("code",[t._v("$"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token constant"}},[t._v("MANY")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// unreachable code")]),t._v("\n  $"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token constant"}},[t._v("CONSUME")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Plus"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),e("p",[t._v("By returning early in the iteration grammar we prevent the parser from consuming\nThe plus token and thus the next time the parser checks if it should enter the iteration\nThe condition (nextToken === Plus) would still be true.")]),t._v(" "),e("div",{staticClass:"language-javascript extra-class"},[e("pre",{pre:!0,attrs:{class:"language-javascript"}},[e("code",[t._v("$"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token constant"}},[t._v("MANY")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Never wrap Chevrotain grammar in JavaScript control flow constructs.")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("condition"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    $"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token constant"}},[t._v("CONSUME")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Plus"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),e("p",[t._v("This is similar to the previous example as if the condition is false, once\nagain the parser will consume nothing in the iteration.\nModeling conditional grammar paths must be done using Chevrotain grammar constructs\nsuch as OPTION and/or "),e("a",{attrs:{href:"https://chevrotain.io/docs/features/gates.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("GATE"),e("OutboundLink")],1),t._v(".")]),t._v(" "),e("p",[t._v("For example the above example should be written as:")]),t._v(" "),e("div",{staticClass:"language-javascript extra-class"},[e("pre",{pre:!0,attrs:{class:"language-javascript"}},[e("code",[t._v("$"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token constant"}},[t._v("MANY")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  $"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token constant"}},[t._v("OPTION")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    $"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token constant"}},[t._v("CONSUME")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Plus"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),e("h2",{attrs:{id:"IGNORING_AMBIGUITIES"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#IGNORING_AMBIGUITIES"}},[t._v("#")]),t._v(" Ignoring Ambiguities")]),t._v(" "),e("p",[t._v("In some rare cases the Parser may detect ambiguities that are not actually possible or are perhaps implicitly resolved, e.g:")]),t._v(" "),e("ul",[e("li",[t._v("by the order of alternatives (an alternation alternative is attempted in the order listed).")])]),t._v(" "),e("p",[t._v("In such cases the ambiguities may be ignored explicitly by using the "),e("a",{attrs:{href:"https://chevrotain.io/documentation/10_1_1/interfaces/OrMethodOpts.html#IGNORE_AMBIGUITIES",target:"_blank",rel:"noopener noreferrer"}},[t._v("IGNORE_AMBIGUITIES"),e("OutboundLink")],1),t._v(" property\non the relevant DSL method.")]),t._v(" "),e("p",[t._v("For example:")]),t._v(" "),e("ul",[e("li",[e("p",[t._v("Ignoring all ambiguities of an alternation.")]),t._v(" "),e("div",{staticClass:"language-javascript extra-class"},[e("pre",{pre:!0,attrs:{class:"language-javascript"}},[e("code",[t._v("$"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token constant"}},[t._v("OR")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token constant"}},[t._v("IGNORE_AMBIGUITIES")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token constant"}},[t._v("DEF")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("ALT")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" $"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token constant"}},[t._v("SUBRULE")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("$"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("myRule"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("ALT")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" $"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token constant"}},[t._v("SUBRULE")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("$"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("myOtherRule"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])])]),t._v(" "),e("li",[e("p",[t._v("Ignoring ambiguities related to a "),e("strong",[t._v("specific alternative")]),t._v(" of an alternation:")]),t._v(" "),e("div",{staticClass:"language-javascript extra-class"},[e("pre",{pre:!0,attrs:{class:"language-javascript"}},[e("code",[t._v("$"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token constant"}},[t._v("OR")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("ALT")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" $"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token constant"}},[t._v("SUBRULE")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("$"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("myRule"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token constant"}},[t._v("IGNORE_AMBIGUITIES")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("ALT")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" $"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token constant"}},[t._v("SUBRULE")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("$"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("myOtherRule"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])])])])])}),[],!1,null,null,null);a.default=s.exports}}]);