(window.webpackJsonp=window.webpackJsonp||[]).push([[16],{183:function(e,t,n){"use strict";n.r(t);var a=n(0),r=Object(a.a)({},function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("div",{staticClass:"content"},[e._m(0),e._v(" "),n("p",[e._v("Chevrotain can be used to build parsers for "),n("a",{attrs:{href:"https://en.wikipedia.org/wiki/LL_grammar",target:"_blank",rel:"noopener noreferrer"}},[e._v("LL(K)"),n("OutboundLink")],1),e._v(" Grammars.\nThis means that the number of lookahead tokens needed to disambiguate two alternatives must\nbe a fixed number and known in advance.")]),e._v(" "),n("p",[e._v("For example given the grammar")]),e._v(" "),e._m(1),e._m(2),e._v(" "),n("p",[e._v("But given the following grammar")]),e._v(" "),e._m(3),e._m(4)])},[function(){var e=this.$createElement,t=this._self._c||e;return t("h1",{attrs:{id:"ll-k-grammars-support"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#ll-k-grammars-support","aria-hidden":"true"}},[this._v("#")]),this._v(" LL(K) Grammars Support")])},function(){var e=this.$createElement,t=this._self._c||e;return t("div",{staticClass:"language-antlr extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[this._v("statement:\n   A B C |\n   A B D |\n   A B E\n")])])])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("Chevrotain will look "),t("strong",[this._v("three")]),this._v(" tokens ahead to decide between the two alternatives.")])},function(){var e=this.$createElement,t=this._self._c||e;return t("div",{staticClass:"language-antlr extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[this._v("statement:\n   longRule B  |\n   longRule C  |\n   longRule D\n\nlongRule:\n   A+\n")])])])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("Chevrotain will throw a an error during the parser initialization in this case.\nThis is because there is no fixed number of tokens we can use to choose between the alternatives\nthat is due to a potentially "),t("strong",[this._v("infinite")]),this._v(' number of "A" tokens that can appear before the "B" - "C" tokens.')])}],!1,null,null,null);t.default=r.exports}}]);