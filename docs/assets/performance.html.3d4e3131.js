import{_ as o,o as p,c,a as n,b as t,d as e,e as s,r as i}from"./app.111bdffb.js";const l={},u=e(`<h1 id="runtime-performance" tabindex="-1"><a class="header-anchor" href="#runtime-performance" aria-hidden="true">#</a> Runtime Performance</h1><p>This document lists tips and tricks to optimize runtime performance.</p><h2 id="using-a-singleton-parser" tabindex="-1"><a class="header-anchor" href="#using-a-singleton-parser" aria-hidden="true">#</a> Using a Singleton Parser</h2><p>Do not create a new Parser instance for each new input Instead re-use a single instance and reset its state between iterations. For example:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// reuse the same parser instance.</span>
<span class="token keyword">const</span> parser <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JsonParser</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>

module<span class="token punctuation">.</span><span class="token function-variable function">exports</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">text</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> lexResult <span class="token operator">=</span> JsonLexer<span class="token punctuation">.</span><span class="token function">tokenize</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span>

  <span class="token comment">// setting a new input will RESET the parser instance&#39;s state.</span>
  parser<span class="token punctuation">.</span>input <span class="token operator">=</span> lexResult<span class="token punctuation">.</span>tokens

  <span class="token keyword">const</span> value <span class="token operator">=</span> parser<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

  <span class="token keyword">return</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">value</span><span class="token operator">:</span> value<span class="token punctuation">,</span>
    <span class="token literal-property property">lexErrors</span><span class="token operator">:</span> lexResult<span class="token punctuation">.</span>errors<span class="token punctuation">,</span>
    <span class="token literal-property property">parseErrors</span><span class="token operator">:</span> parser<span class="token punctuation">.</span>errors
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Avoiding the creation of new instances is important to avoid re-paying the Parser&#39;s initialization costs Additionally, re-using the same instance may leverage hot-spot optimizations of the respective JavaScript engine.</p>`,6),r=s(`Note that this means that if your parser "carries" additional state, that state should also be reset. Simply override the Parser's `),k={href:"https://chevrotain.io/documentation/10_4_0/classes/CstParser.html#reset",target:"_blank",rel:"noopener noreferrer"},d=s("reset"),v=s(" method to accomplish that."),m=n("h2",{id:"ensuring-lexer-optimizations",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#ensuring-lexer-optimizations","aria-hidden":"true"},"#"),s(" Ensuring Lexer Optimizations")],-1),h=s("Ensure that the lexer's optimizations are enabled. The Chevrotain Lexer performs optimizations by filtering the potential token matches using the next "),b={href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/charCodeAt",target:"_blank",rel:"noopener noreferrer"},g=s("charCode"),f=s(" to be consumed. These optimizations can provide anywhere from a "),_=n("strong",null,"30% boost",-1),y=s(" for small lexers to "),w=n("strong",null,"several multiples",-1),T=s(" improvement in large Lexers with many TokenTypes."),L=n("p",null,[s("To apply this optimization the first possible charCodes for "),n("strong",null,"every"),s(" TokenType must be identified. Sometimes a TokenType's first charCodes cannot be automatically identified. In that case the lexer will "),n("strong",null,"silently"),s(" revert to using the unoptimized algorithms.")],-1),x=s("If the TokenType's first charCodes cannot be automatically identified, you can set the "),S={href:"https://chevrotain.io/documentation/10_4_0/interfaces/ITokenConfig.html#start_chars_hint",target:"_blank",rel:"noopener noreferrer"},E=n("code",null,"start_chars_hint",-1),$=s(" property when calling "),A=n("code",null,"createToken()",-1),C=s(". If you define a custom "),O={href:"https://chevrotain.io/documentation/10_4_0/interfaces/ITokenConfig.html#pattern",target:"_blank",rel:"noopener noreferrer"},N=s("pattern"),R=s(" for your token, then you should set "),U=n("code",null,"start_chars_hint",-1),j=s(" manually for optimal performance."),q=e(`<p>It it possible to configure the Lexer <strong>throw</strong> an error in case the optimizations cannot be enabled by turning on the &quot;ensureOptimizations&quot; flag:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token punctuation">{</span> Lexer <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;chevrotain&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> myLexer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Lexer</span><span class="token punctuation">(</span>
  <span class="token punctuation">[</span>
    <span class="token comment">/* tokens */</span>
  <span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token punctuation">{</span> <span class="token literal-property property">ensureOptimizations</span><span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span>
<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>With the &quot;ensureOptimizations&quot; flag enabled the Lexer will also print error messages to the console with details on how to resolve optimizations errors.</p><h2 id="caching-arrays-of-alternatives" tabindex="-1"><a class="header-anchor" href="#caching-arrays-of-alternatives" aria-hidden="true">#</a> Caching Arrays of Alternatives</h2><p>The syntax for alternatives (OR) requires creating an array on every <strong>single</strong> invocation. For large enough arrays and in rules which are called often this can cause quite a large performance penalty.</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>$<span class="token punctuation">.</span><span class="token constant">RULE</span><span class="token punctuation">(</span><span class="token string">&quot;value&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  $<span class="token punctuation">.</span><span class="token constant">OR</span><span class="token punctuation">(</span><span class="token punctuation">[</span>
    <span class="token comment">// an array with seven alternatives</span>
    <span class="token punctuation">{</span> <span class="token function-variable function">ALT</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> $<span class="token punctuation">.</span><span class="token constant">CONSUME</span><span class="token punctuation">(</span>StringLiteral<span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span> <span class="token function-variable function">ALT</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> $<span class="token punctuation">.</span><span class="token constant">CONSUME</span><span class="token punctuation">(</span>NumberLiteral<span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span> <span class="token function-variable function">ALT</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> $<span class="token punctuation">.</span><span class="token constant">SUBRULE</span><span class="token punctuation">(</span>$<span class="token punctuation">.</span>object<span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span> <span class="token function-variable function">ALT</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> $<span class="token punctuation">.</span><span class="token constant">SUBRULE</span><span class="token punctuation">(</span>$<span class="token punctuation">.</span>array<span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span> <span class="token function-variable function">ALT</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> $<span class="token punctuation">.</span><span class="token constant">CONSUME</span><span class="token punctuation">(</span>True<span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span> <span class="token function-variable function">ALT</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> $<span class="token punctuation">.</span><span class="token constant">CONSUME</span><span class="token punctuation">(</span>False<span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span> <span class="token function-variable function">ALT</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> $<span class="token punctuation">.</span><span class="token constant">CONSUME</span><span class="token punctuation">(</span>Null<span class="token punctuation">)</span> <span class="token punctuation">}</span>
  <span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>A simple JavaScript pattern can avoid this costly re-initialization:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>$<span class="token punctuation">.</span><span class="token constant">RULE</span><span class="token punctuation">(</span><span class="token string">&quot;value&quot;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// c1 is used as a cache, the short circuit &quot;||&quot; will ensure only a single initialization</span>
  $<span class="token punctuation">.</span><span class="token constant">OR</span><span class="token punctuation">(</span>
    $<span class="token punctuation">.</span>c1 <span class="token operator">||</span>
      <span class="token punctuation">(</span>$<span class="token punctuation">.</span>c1 <span class="token operator">=</span> <span class="token punctuation">[</span>
        <span class="token punctuation">{</span> <span class="token function-variable function">ALT</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> $<span class="token punctuation">.</span><span class="token constant">CONSUME</span><span class="token punctuation">(</span>StringLiteral<span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
        <span class="token punctuation">{</span> <span class="token function-variable function">ALT</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> $<span class="token punctuation">.</span><span class="token constant">CONSUME</span><span class="token punctuation">(</span>NumberLiteral<span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
        <span class="token punctuation">{</span> <span class="token function-variable function">ALT</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> $<span class="token punctuation">.</span><span class="token constant">SUBRULE</span><span class="token punctuation">(</span>$<span class="token punctuation">.</span>object<span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
        <span class="token punctuation">{</span> <span class="token function-variable function">ALT</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> $<span class="token punctuation">.</span><span class="token constant">SUBRULE</span><span class="token punctuation">(</span>$<span class="token punctuation">.</span>array<span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
        <span class="token punctuation">{</span> <span class="token function-variable function">ALT</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> $<span class="token punctuation">.</span><span class="token constant">CONSUME</span><span class="token punctuation">(</span>True<span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
        <span class="token punctuation">{</span> <span class="token function-variable function">ALT</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> $<span class="token punctuation">.</span><span class="token constant">CONSUME</span><span class="token punctuation">(</span>False<span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
        <span class="token punctuation">{</span> <span class="token function-variable function">ALT</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> $<span class="token punctuation">.</span><span class="token constant">CONSUME</span><span class="token punctuation">(</span>Null<span class="token punctuation">)</span> <span class="token punctuation">}</span>
      <span class="token punctuation">]</span><span class="token punctuation">)</span>
  <span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Applying this pattern (in just a single location) on a JSON grammar provided 25-30% performance boost (Node.js 8), For a CSS grammar (2 locations) this resulted in about 20% speed boost.</p><p>It is important to note that:</p>`,10),z=e(`<li><p>This pattern should only be applied on largish number of alternatives, testing on node.js 8.0 showed it was only useful when there are at least four alternatives. In cases with fewer alternatives this pattern would actually be <strong>slower</strong>!</p></li><li><p>This pattern can only be applied if there are no vars which can be accessed via closures. Example:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// BAD</span>
$<span class="token punctuation">.</span><span class="token constant">RULE</span><span class="token punctuation">(</span><span class="token string">&quot;value&quot;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> result
  <span class="token comment">// We reference the &quot;result&quot; variable via a closure.</span>
  <span class="token comment">// So a new function is needed each time this grammar rule is invoked.</span>
  $<span class="token punctuation">.</span><span class="token constant">OR</span><span class="token punctuation">(</span>
    $<span class="token punctuation">.</span>c1 <span class="token operator">||</span>
      <span class="token punctuation">(</span>$<span class="token punctuation">.</span>c1 <span class="token operator">=</span> <span class="token punctuation">[</span>
        <span class="token punctuation">{</span>
          <span class="token function-variable function">ALT</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
            result <span class="token operator">=</span> $<span class="token punctuation">.</span><span class="token constant">CONSUME</span><span class="token punctuation">(</span>StringLiteral<span class="token punctuation">)</span>
          <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">]</span><span class="token punctuation">)</span>
  <span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token comment">// GOOD</span>
$<span class="token punctuation">.</span><span class="token constant">RULE</span><span class="token punctuation">(</span><span class="token string">&quot;value&quot;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> result
  <span class="token comment">// no closure for the result variable, we use the returned value of the OR instead.</span>
  result <span class="token operator">=</span> $<span class="token punctuation">.</span><span class="token constant">OR</span><span class="token punctuation">(</span>
    $<span class="token punctuation">.</span>c1 <span class="token operator">||</span>
      <span class="token punctuation">(</span>$<span class="token punctuation">.</span>c1 <span class="token operator">=</span> <span class="token punctuation">[</span>
        <span class="token punctuation">{</span>
          <span class="token function-variable function">ALT</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> $<span class="token punctuation">.</span><span class="token constant">CONSUME</span><span class="token punctuation">(</span>StringLiteral<span class="token punctuation">)</span>
          <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">]</span><span class="token punctuation">)</span>
  <span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>Note that gates often use vars from closures.</li></ul></li>`,2),M=n("p",null,"Avoid dynamically changing the parser instance. The line:",-1),I=n("blockquote",null,[n("p",null,`"$.c1 || ($.c1 = ..." ($ is 'this')`)],-1),P=n("p",null,"Will cause a 'c1' property to be assigned to the parser instance. This may seem innocent but if enough properties are added dynamically to an instance its V8 hidden class will change which could cause a severe performance reduction.",-1),B=s('To avoid this, simply define these "cache properties" in the constructor. See an example in the '),F={href:"https://github.com/chevrotain/chevrotain/blob/ac21570b97a8de0d6b91f29979aed8041455cacd/examples/grammars/ecma5/ecma5_parser.js#L37-L43",target:"_blank",rel:"noopener noreferrer"},J=s("ECMAScript5 grammar's constructor"),D=s("."),V=n("h2",{id:"minor-runtime-optimizations",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#minor-runtime-optimizations","aria-hidden":"true"},"#"),s(" Minor Runtime Optimizations")],-1),W=n("p",null,"These are only required if you are trying to squeeze every tiny bit of performance out of your parser.",-1),G=n("strong",null,"Reduce the amount of Token position tracking",-1),Y=s(" the lexer performs. See The "),H={href:"https://chevrotain.io/documentation/10_4_0/interfaces/ILexerConfig.html",target:"_blank",rel:"noopener noreferrer"},K=s("ILexerConfig.positionTracking"),Q=s(" property."),X=e(`<li><p><strong>Avoid creating parsing rules which only parse a single Terminal.</strong></p><p>There is a certain fixed overhead for the invocation of each parsing rule. Normally there is no reason to pay it for a Rule which only consumes a single Terminal. For example:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">this</span><span class="token punctuation">.</span>myRedundantRule <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token constant">RULE</span><span class="token punctuation">(</span><span class="token string">&quot;myRedundantRule&quot;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  $<span class="token punctuation">.</span><span class="token constant">CONSUME</span><span class="token punctuation">(</span>StringLiteral<span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Instead such a rule&#39;s contents should be (manually) in-lined in its call sites.</p></li><li><p><strong>Avoid *_SEP DSL methods (MANY_SEP / AT_LEAST_ONE_SEP).</strong></p><p>The *_SEP DSL methods also collect the separator Tokens parsed. Creating these arrays has a small overhead (several percentage). Which is a complete waste in most cases where those separators tokens are not needed for any output data structure.</p></li>`,2);function Z(nn,sn){const a=i("ExternalLinkIcon");return p(),c("div",null,[u,n("p",null,[r,n("a",k,[d,t(a)]),v]),m,n("p",null,[h,n("a",b,[g,t(a)]),f,_,y,w,T]),L,n("p",null,[x,n("a",S,[E,t(a)]),$,A,C,n("a",O,[N,t(a)]),R,U,j]),q,n("ul",null,[z,n("li",null,[M,I,P,n("p",null,[B,n("a",F,[J,t(a)]),D])])]),V,W,n("ol",null,[n("li",null,[n("p",null,[G,Y,n("a",H,[K,t(a)]),Q])]),X])])}var tn=o(l,[["render",Z],["__file","performance.html.vue"]]);export{tn as default};
