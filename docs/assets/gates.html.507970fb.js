import{_ as o,o as p,c,a as s,b as t,d as e,e as n,r as i}from"./app.5d78e917.js";const u={},l=e(`<h1 id="gates" tabindex="-1"><a class="header-anchor" href="#gates" aria-hidden="true">#</a> Gates</h1><p>Chevrotain supports Gates on parsing DSL method. Gates act as a type of <strong>guard condition</strong> that prevents an alternative from being taken. Gates are often used in combination with parametrized rules to represent multiple variants of the same parsing rule while avoiding code duplication.</p><p>For example:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// isConst is a parameter passed from another rule.</span>
$<span class="token punctuation">.</span><span class="token constant">RULE</span><span class="token punctuation">(</span><span class="token string">&quot;Value&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">isConst</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  $<span class="token punctuation">.</span><span class="token constant">OR</span><span class="token punctuation">(</span><span class="token punctuation">[</span>
    <span class="token comment">// the Variable alternative is only possible when &quot;isConst&quot; is Falsey</span>
    <span class="token punctuation">{</span> <span class="token function-variable function">GATE</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token operator">!</span>isConst<span class="token punctuation">,</span> <span class="token function-variable function">ALT</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> $<span class="token punctuation">.</span><span class="token constant">SUBRULE</span><span class="token punctuation">(</span>$<span class="token punctuation">.</span>Variable<span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span> <span class="token function-variable function">ALT</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> $<span class="token punctuation">.</span><span class="token constant">CONSUME</span><span class="token punctuation">(</span>IntValue<span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span> <span class="token function-variable function">ALT</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> $<span class="token punctuation">.</span><span class="token constant">CONSUME</span><span class="token punctuation">(</span>FloatValue<span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span> <span class="token function-variable function">ALT</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> $<span class="token punctuation">.</span><span class="token constant">CONSUME</span><span class="token punctuation">(</span>StringValue<span class="token punctuation">)</span> <span class="token punctuation">}</span>
  <span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,4),r=n("Using the "),k={href:"https://chevrotain.io/documentation/10_3_0/classes/CstParser.html#LA",target:"_blank",rel:"noopener noreferrer"},d=n("Look Ahead"),v=n(" method is often helpful with the use of Gates to determine if a path should be followed or not, for example:"),m=e(`<div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// SELECT LIMIT.ID FROM USER_LIMIT LIMIT</span>
<span class="token comment">// SELECT ID, NAME FROM USER_LIMIT LIMIT 1</span>
$<span class="token punctuation">.</span><span class="token constant">RULE</span><span class="token punctuation">(</span><span class="token string">&quot;FromClause&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  $<span class="token punctuation">.</span><span class="token constant">CONSUME</span><span class="token punctuation">(</span>From<span class="token punctuation">)</span>
  $<span class="token punctuation">.</span><span class="token constant">CONSUME</span><span class="token punctuation">(</span>Identifier<span class="token punctuation">)</span>

  $<span class="token punctuation">.</span><span class="token constant">OPTION</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token function-variable function">GATE</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> $<span class="token punctuation">.</span><span class="token constant">LA</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">.</span>tokenType <span class="token operator">!==</span> UnsignedInteger<span class="token punctuation">,</span>
    <span class="token function-variable function">DEF</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> $<span class="token punctuation">.</span><span class="token constant">CONSUME1</span><span class="token punctuation">(</span>Identifier<span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token constant">LABEL</span><span class="token operator">:</span> <span class="token string">&quot;alias&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>If <strong>LIMIT</strong> is an identifier or a keyword based on the surrounding tokens, looking ahead at subsequent tokens is required to know if the token should be consumed as an identifer or should be skipped to be parsed up by a subsequent rule.</p>`,2),h=n("See "),b={href:"https://github.com/chevrotain/chevrotain/tree/master/examples/parser/predicate_lookahead",target:"_blank",rel:"noopener noreferrer"},f=n("executable example"),g=n(" for further details.");function _(E,L){const a=i("ExternalLinkIcon");return p(),c("div",null,[l,s("p",null,[r,s("a",k,[d,t(a)]),v]),m,s("p",null,[h,s("a",b,[f,t(a)]),g])])}var T=o(u,[["render",_],["__file","gates.html.vue"]]);export{T as default};
