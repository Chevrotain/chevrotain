import{_ as o,r as e,o as c,c as i,a as n,b as s,d as a,w as l,e as u}from"./app-4bef62ab.js";const r={},d=n("h1",{id:"semantics-embedded",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#semantics-embedded","aria-hidden":"true"},"#"),s(" Semantics - Embedded")],-1),k=n("h3",{id:"tldr",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#tldr","aria-hidden":"true"},"#"),s(" TLDR")],-1),m={href:"https://github.com/chevrotain/chevrotain/tree/master/examples/tutorial/step3_actions/step3b_actions_embedded.js",target:"_blank",rel:"noopener noreferrer"},v=n("h3",{id:"introduction",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#introduction","aria-hidden":"true"},"#"),s(" Introduction")],-1),b=n("p",null,"This can be accomplished using two features of the Parsing DSL:",-1),h={href:"https://chevrotain.io/documentation/11_0_1/classes/EmbeddedActionsParser.html#CONSUME",target:"_blank",rel:"noopener noreferrer"},g={href:"https://chevrotain.io/documentation/11_0_1/interfaces/IToken.html",target:"_blank",rel:"noopener noreferrer"},f={href:"https://chevrotain.io/documentation/11_0_1/classes/EmbeddedActionsParser.html#SUBRULE",target:"_blank",rel:"noopener noreferrer"},_=u(`<h3 id="enabling-embedded-actions" tabindex="-1"><a class="header-anchor" href="#enabling-embedded-actions" aria-hidden="true">#</a> Enabling embedded actions</h3><p>For embedded actions to work as expected we need to extend the EmbeddedActionsParser class instead of the CstParser class.</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token punctuation">{</span> EmbeddedActionsParser <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;chevrotain&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">class</span> <span class="token class-name">SelectParserEmbedded</span> <span class="token keyword">extends</span> <span class="token class-name">EmbeddedActionsParser</span> <span class="token punctuation">{</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">super</span><span class="token punctuation">(</span>tokenVocabulary<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Failing to disabled the CST creation would cause the Parser to return a CST of the grammar rule we invoked instead of of the expected output structure we will be creating (an AST).</p><h2 id="simple-example" tabindex="-1"><a class="header-anchor" href="#simple-example" aria-hidden="true">#</a> Simple Example</h2><p>Lets inspect a simple contrived example:</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>$<span class="token punctuation">.</span><span class="token constant">RULE</span><span class="token punctuation">(</span><span class="token string">&quot;topRule&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> result <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

  $<span class="token punctuation">.</span><span class="token constant">MANY</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    $<span class="token punctuation">.</span><span class="token constant">OR</span><span class="token punctuation">(</span><span class="token punctuation">[</span>
      <span class="token punctuation">{</span>
        <span class="token function-variable function">ALT</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
          result <span class="token operator">+=</span> $<span class="token punctuation">.</span><span class="token constant">SUBRULE</span><span class="token punctuation">(</span>$<span class="token punctuation">.</span>decimalRule<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token punctuation">{</span>
        <span class="token function-variable function">ALT</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
          result <span class="token operator">+=</span> $<span class="token punctuation">.</span><span class="token constant">SUBRULE</span><span class="token punctuation">(</span>$<span class="token punctuation">.</span>IntegerRule<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">return</span> result<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

$<span class="token punctuation">.</span><span class="token constant">RULE</span><span class="token punctuation">(</span><span class="token string">&quot;decimalRule&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> decimalToken <span class="token operator">=</span> $<span class="token punctuation">.</span><span class="token constant">CONSUME</span><span class="token punctuation">(</span>Decimal<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token function">parseFloat</span><span class="token punctuation">(</span>decimalToken<span class="token punctuation">.</span>image<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

$<span class="token punctuation">.</span><span class="token constant">RULE</span><span class="token punctuation">(</span><span class="token string">&quot;IntegerRule&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> intToken <span class="token operator">=</span> $<span class="token punctuation">.</span><span class="token constant">CONSUME</span><span class="token punctuation">(</span>Integer<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token function">parseInt</span><span class="token punctuation">(</span>intToken<span class="token punctuation">.</span>image<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>The <strong>decimalRule</strong> and <strong>IntegerRule</strong> both return a javascript number (using parseInt/parseFloat). and the <strong>topRule</strong> adds it to the final result.</p><h2 id="sql-grammar" tabindex="-1"><a class="header-anchor" href="#sql-grammar" aria-hidden="true">#</a> SQL Grammar</h2><p>Lets go back to the mini SQL Select grammar.</p><p>For this grammar we will build a more complex data structure (an AST) instead of simply returning a number. Our selectStatement rule will now return an object with four properties:</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>$<span class="token punctuation">.</span><span class="token constant">RULE</span><span class="token punctuation">(</span><span class="token string">&quot;selectStatement&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> select<span class="token punctuation">,</span> from<span class="token punctuation">,</span> where<span class="token punctuation">;</span>

  select <span class="token operator">=</span> $<span class="token punctuation">.</span><span class="token constant">SUBRULE</span><span class="token punctuation">(</span>$<span class="token punctuation">.</span>selectClause<span class="token punctuation">)</span><span class="token punctuation">;</span>
  from <span class="token operator">=</span> $<span class="token punctuation">.</span><span class="token constant">SUBRULE</span><span class="token punctuation">(</span>$<span class="token punctuation">.</span>fromClause<span class="token punctuation">)</span><span class="token punctuation">;</span>
  $<span class="token punctuation">.</span><span class="token constant">OPTION</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    where <span class="token operator">=</span> $<span class="token punctuation">.</span><span class="token constant">SUBRULE</span><span class="token punctuation">(</span>$<span class="token punctuation">.</span>whereClause<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">return</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">&quot;SELECT_STMT&quot;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">selectClause</span><span class="token operator">:</span> select<span class="token punctuation">,</span>
    <span class="token literal-property property">fromClause</span><span class="token operator">:</span> from<span class="token punctuation">,</span>
    <span class="token comment">// may be undefined if the OPTION was not entered.</span>
    <span class="token literal-property property">whereClause</span><span class="token operator">:</span> where<span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Three of those properties (selectClause / fromClause / whereClause) are the results of invoking other parser rules.</p><p>Lets look at the &quot;selectClause&quot; rule implementation:</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>$<span class="token punctuation">.</span><span class="token constant">RULE</span><span class="token punctuation">(</span><span class="token string">&quot;selectClause&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> columns <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

  $<span class="token punctuation">.</span><span class="token constant">CONSUME</span><span class="token punctuation">(</span>Select<span class="token punctuation">)</span><span class="token punctuation">;</span>
  $<span class="token punctuation">.</span><span class="token constant">AT_LEAST_ONE_SEP</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token constant">SEP</span><span class="token operator">:</span> Comma<span class="token punctuation">,</span>
    <span class="token function-variable function">DEF</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token comment">// accessing a token&#39;s original text via the \`image\` property</span>
      columns<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>$<span class="token punctuation">.</span><span class="token constant">CONSUME</span><span class="token punctuation">(</span>Identifier<span class="token punctuation">)</span><span class="token punctuation">.</span>image<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">return</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">&quot;SELECT_CLAUSE&quot;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">columns</span><span class="token operator">:</span> columns<span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>In the selectClause rule we access the <strong>image</strong> property of the Identifier token returned from <strong>CONSUME</strong> and push each of these strings to the <strong>columns</strong> array.</p>`,16);function w(E,S){const t=e("ExternalLinkIcon"),p=e("RouterLink");return c(),i("div",null,[d,k,n("p",null,[n("a",m,[s("Run and Debug the source code"),a(t)]),s(".")]),v,n("p",null,[s("In the "),a(p,{to:"/tutorial/step2_parsing.html"},{default:l(()=>[s("previous")]),_:1}),s(' tutorial step we have implemented a parser for a "mini" SQL Select grammar. The current problem is that our parser only validates the input conforms to the grammar. In most real world use cases the parser will also have to output some result/data structure/value.')]),b,n("ul",null,[n("li",null,[n("a",h,[s("CONSUME"),a(t)]),s(" will return The "),n("a",g,[s("IToken"),a(t)]),s(" object consumed.")]),n("li",null,[n("a",f,[s("SUBRULE"),a(t)]),s(" will return the result of the grammar rule invoked.")])]),_])}const L=o(r,[["render",w],["__file","step3b_adding_actions_embedded.html.vue"]]);export{L as default};
