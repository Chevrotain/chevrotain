import{_ as p,o as c,c as i,a as s,b as a,w as r,d as l,e as n,r as e}from"./app.6ba521a4.js";const u={},d=l(`<h1 id="custom-token-patterns" tabindex="-1"><a class="header-anchor" href="#custom-token-patterns" aria-hidden="true">#</a> Custom Token Patterns</h1><p>Chevrotain is not limited to only using JavaScript regular expressions to define Tokens. Tokens can also be defined using arbitrary JavaScript code, for example:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// our custom matcher</span>
<span class="token keyword">function</span> <span class="token function">matchInteger</span><span class="token punctuation">(</span><span class="token parameter">text<span class="token punctuation">,</span> startOffset</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> endOffset <span class="token operator">=</span> startOffset
  <span class="token keyword">let</span> charCode <span class="token operator">=</span> text<span class="token punctuation">.</span><span class="token function">charCodeAt</span><span class="token punctuation">(</span>endOffset<span class="token punctuation">)</span>
  <span class="token comment">// 0-9 digits</span>
  <span class="token keyword">while</span> <span class="token punctuation">(</span>charCode <span class="token operator">&gt;=</span> <span class="token number">48</span> <span class="token operator">&amp;&amp;</span> charCode <span class="token operator">&lt;=</span> <span class="token number">57</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    endOffset<span class="token operator">++</span>
    charCode <span class="token operator">=</span> text<span class="token punctuation">.</span><span class="token function">charCodeAt</span><span class="token punctuation">(</span>endOffset<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>

  <span class="token comment">// No match, must return null to conform with the RegExp.prototype.exec signature</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>endOffset <span class="token operator">===</span> startOffset<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">null</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> matchedString <span class="token operator">=</span> text<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span>startOffset<span class="token punctuation">,</span> endOffset<span class="token punctuation">)</span>
    <span class="token comment">// according to the RegExp.prototype.exec API the first item in the returned array must be the whole matched string.</span>
    <span class="token keyword">return</span> <span class="token punctuation">[</span>matchedString<span class="token punctuation">]</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">const</span> IntegerToken <span class="token operator">=</span> <span class="token function">createToken</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&quot;IntegerToken&quot;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">pattern</span><span class="token operator">:</span> matchInteger
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,3),k=n("This feature is often used to implement complex lexing logic, such as "),m={href:"https://github.com/chevrotain/chevrotain/tree/master/examples/lexer/python_indentation",target:"_blank",rel:"noopener noreferrer"},v=n("python indentation"),h=n("."),f=n("See "),_=n("in depth guide"),b=n(" for further details.");function g(x,y){const t=e("ExternalLinkIcon"),o=e("RouterLink");return c(),i("div",null,[d,s("p",null,[k,s("a",m,[v,a(t)]),h]),s("p",null,[f,a(o,{to:"/guide/custom_token_patterns.html"},{default:r(()=>[_]),_:1}),b])])}var C=p(u,[["render",g],["__file","custom_token_patterns.html.vue"]]);export{C as default};
