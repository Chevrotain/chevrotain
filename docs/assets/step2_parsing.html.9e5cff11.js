import{_ as c,r as o,o as i,c as l,a as s,b as a,w as u,e as n,d as e}from"./app.406c56db.js";const r={},d=s("h1",{id:"parser",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#parser","aria-hidden":"true"},"#"),n(" Parser")],-1),k=s("h3",{id:"tldr",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#tldr","aria-hidden":"true"},"#"),n(" TLDR")],-1),v={href:"https://github.com/chevrotain/chevrotain/tree/master/examples/tutorial/step2_parsing",target:"_blank",rel:"noopener noreferrer"},m=n("Run and Debug the source code"),h=n("."),b=s("h2",{id:"introduction",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#introduction","aria-hidden":"true"},"#"),n(" Introduction")],-1),g=n("In this tutorial we will implement a Parser for a simple SQL Select statement language introduced in the "),_=n("previous"),f=n(" tutorial step. Note that this parse will only "),E=s("strong",null,"recognize",-1),w=n(" the language and not output any data structure (yet)."),S=e(`<p>The grammar for our language:</p><div class="language-antlr ext-antlr line-numbers-mode"><pre class="language-antlr"><code>selectStatement
   : selectClause fromClause (whereClause)?

selectClause
   : &quot;SELECT&quot; Identifier (&quot;,&quot; Identifier)*

fromClause
   : &quot;FROM&quot; Identifier

whereClause
   : &quot;WHERE&quot; expression

expression
   : atomicExpression relationalOperator atomicExpression

atomicExpression
   : Integer | Identifier

relationalOperator
   : &quot;&gt;&quot; | &quot;&lt;&quot;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,2),T=n("A Chevrotain Parser analyses an "),L={href:"https://chevrotain.io/documentation/10_1_2/interfaces/IToken.html",target:"_blank",rel:"noopener noreferrer"},C=n("IToken"),q=n(" vector that conforms to some grammar. The grammar is defined using the "),U={href:"https://chevrotain.io/documentation/10_1_2/classes/CstParser.html#AT_LEAST_ONE",target:"_blank",rel:"noopener noreferrer"},$=n("parsing DSL"),x=n(", which includes the following methods."),R={href:"https://chevrotain.io/documentation/10_1_2/classes/CstParser.html#CONSUME",target:"_blank",rel:"noopener noreferrer"},y=n("CONSUME"),N=n(" - 'eat' a Token."),I={href:"https://chevrotain.io/documentation/10_1_2/classes/CstParser.html#SUBRULE",target:"_blank",rel:"noopener noreferrer"},O=n("SUBRULE"),P=n(" - reference to another rule."),A={href:"https://chevrotain.io/documentation/10_1_2/classes/CstParser.html#OR",target:"_blank",rel:"noopener noreferrer"},B=n("OR"),M=n(" - Alternation"),j={href:"https://chevrotain.io/documentation/10_1_2/classes/CstParser.html#OPTION",target:"_blank",rel:"noopener noreferrer"},D=n("OPTION"),F=n(" - optional production."),W={href:"https://chevrotain.io/documentation/10_1_2/classes/CstParser.html#MANY",target:"_blank",rel:"noopener noreferrer"},G=n("MANY"),V=n(" - repetition zero or more."),Y={href:"https://chevrotain.io/documentation/10_1_2/classes/CstParser.html#AT_LEAST_ONE",target:"_blank",rel:"noopener noreferrer"},z=n("AT_LEAST_ONE"),H=n(" - repetition one or more."),Q={href:"https://chevrotain.io/documentation/10_1_2/classes/CstParser.html#MANY_SEP",target:"_blank",rel:"noopener noreferrer"},J=n("MANY_SEP"),K=n(" - repetition (zero or more) with a separator between any two items"),X={href:"https://chevrotain.io/documentation/10_1_2/classes/CstParser.html#AT_LEAST_ONE_SEP",target:"_blank",rel:"noopener noreferrer"},Z=n("AT_LEAST_ONE_SEP"),nn=n(" - repetition (one or more) with a separator between any two items"),sn=e(`<h2 id="first-rule" tabindex="-1"><a class="header-anchor" href="#first-rule" aria-hidden="true">#</a> First Rule</h2><p>Let&#39;s implement our first grammar rule.</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// selectStatement</span>
<span class="token comment">//    : selectClause fromClause (whereClause)?;</span>

<span class="token keyword">const</span> $ <span class="token operator">=</span> <span class="token keyword">this</span>
$<span class="token punctuation">.</span><span class="token constant">RULE</span><span class="token punctuation">(</span><span class="token string">&quot;selectStatement&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  $<span class="token punctuation">.</span><span class="token constant">SUBRULE</span><span class="token punctuation">(</span>$<span class="token punctuation">.</span>selectClause<span class="token punctuation">)</span>
  $<span class="token punctuation">.</span><span class="token constant">SUBRULE</span><span class="token punctuation">(</span>$<span class="token punctuation">.</span>fromClause<span class="token punctuation">)</span>
  $<span class="token punctuation">.</span><span class="token constant">OPTION</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    $<span class="token punctuation">.</span><span class="token constant">SUBRULE</span><span class="token punctuation">(</span>$<span class="token punctuation">.</span>whereClause<span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Fairly straight forward translation:</p><ul><li>Non-Terminals --&gt; SUBRULE</li><li>&quot;?&quot; --&gt; OPTION</li></ul><h2 id="structure" tabindex="-1"><a class="header-anchor" href="#structure" aria-hidden="true">#</a> Structure</h2><ul><li>What is &#39;this&#39; in this context?</li><li>where do we write the grammar rules?</li></ul><p>Each grammar rule is a property of a class that extends chevrotain.CstParser.</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token punctuation">{</span> CstParser <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;chevrotain&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> allTokens <span class="token operator">=</span> <span class="token punctuation">[</span>
  WhiteSpace<span class="token punctuation">,</span>
  Select<span class="token punctuation">,</span>
  From<span class="token punctuation">,</span>
  Where<span class="token punctuation">,</span>
  Comma<span class="token punctuation">,</span>
  Identifier<span class="token punctuation">,</span>
  Integer<span class="token punctuation">,</span>
  GreaterThan<span class="token punctuation">,</span>
  LessThan
<span class="token punctuation">]</span>

<span class="token keyword">class</span> <span class="token class-name">SelectParser</span> <span class="token keyword">extends</span> <span class="token class-name">CstParser</span> <span class="token punctuation">{</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">super</span><span class="token punctuation">(</span>allTokens<span class="token punctuation">)</span>

    <span class="token keyword">const</span> $ <span class="token operator">=</span> <span class="token keyword">this</span>

    $<span class="token punctuation">.</span><span class="token constant">RULE</span><span class="token punctuation">(</span><span class="token string">&quot;selectStatement&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      $<span class="token punctuation">.</span><span class="token constant">SUBRULE</span><span class="token punctuation">(</span>$<span class="token punctuation">.</span>selectClause<span class="token punctuation">)</span>
      $<span class="token punctuation">.</span><span class="token constant">SUBRULE</span><span class="token punctuation">(</span>$<span class="token punctuation">.</span>fromClause<span class="token punctuation">)</span>
      $<span class="token punctuation">.</span><span class="token constant">OPTION</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        $<span class="token punctuation">.</span><span class="token constant">SUBRULE</span><span class="token punctuation">(</span>$<span class="token punctuation">.</span>whereClause<span class="token punctuation">)</span>
      <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>

    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">performSelfAnalysis</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Important to note that:</p><ul><li>The <strong>super</strong> invocation has an array of the Tokens as the second parameter. This is the same array we used to define the Lexer, In this context it is used to define the Parser&#39;s <strong>vocabulary</strong>.</li><li>The method <strong>performSelfAnalysis</strong> must be invoked at the end of the constructor. This is where much of the &#39;secret sauce&#39; happens, including creating the inner grammar representation and performing static checks on the grammar.</li></ul><h2 id="more-rules" tabindex="-1"><a class="header-anchor" href="#more-rules" aria-hidden="true">#</a> More Rules</h2><p>Let&#39;s look at two more grammar rule, this time with repetition and alternation.</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>$<span class="token punctuation">.</span><span class="token constant">RULE</span><span class="token punctuation">(</span><span class="token string">&quot;selectClause&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  $<span class="token punctuation">.</span><span class="token constant">CONSUME</span><span class="token punctuation">(</span>Select<span class="token punctuation">)</span>
  $<span class="token punctuation">.</span><span class="token constant">AT_LEAST_ONE_SEP</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token constant">SEP</span><span class="token operator">:</span> Comma<span class="token punctuation">,</span>
    <span class="token function-variable function">DEF</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      $<span class="token punctuation">.</span><span class="token constant">CONSUME</span><span class="token punctuation">(</span>Identifier<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token comment">// atomicExpression</span>
<span class="token comment">//    : INTEGER | IDENTIFIER</span>
$<span class="token punctuation">.</span><span class="token constant">RULE</span><span class="token punctuation">(</span><span class="token string">&quot;atomicExpression&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  $<span class="token punctuation">.</span><span class="token constant">OR</span><span class="token punctuation">(</span><span class="token punctuation">[</span>
    <span class="token punctuation">{</span> <span class="token function-variable function">ALT</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> $<span class="token punctuation">.</span><span class="token constant">CONSUME</span><span class="token punctuation">(</span>Integer<span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span> <span class="token function-variable function">ALT</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> $<span class="token punctuation">.</span><span class="token constant">CONSUME</span><span class="token punctuation">(</span>Identifier<span class="token punctuation">)</span> <span class="token punctuation">}</span>
  <span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="debugging" tabindex="-1"><a class="header-anchor" href="#debugging" aria-hidden="true">#</a> Debugging</h2><ul><li>How can the Parser be debugged?</li></ul><p>The grammar rules above do not only define the grammar, they are also the code that will be run during parsing. This means that you can debug the parser <strong>simply by adding a break point in the grammar</strong>.</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// selectClause</span>
<span class="token comment">//   : &quot;SELECT&quot; IDENTIFIER (&quot;,&quot; IDENTIFIER)*;</span>
$<span class="token punctuation">.</span><span class="token constant">RULE</span><span class="token punctuation">(</span><span class="token string">&quot;selectClause&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  $<span class="token punctuation">.</span><span class="token constant">CONSUME</span><span class="token punctuation">(</span>Select<span class="token punctuation">)</span>
  <span class="token comment">// Can be debugged directly! no code generation.</span>
  <span class="token keyword">debugger</span>
  $<span class="token punctuation">.</span><span class="token constant">AT_LEAST_ONE_SEP</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token constant">SEP</span><span class="token operator">:</span> Comma<span class="token punctuation">,</span>
    <span class="token function-variable function">DEF</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      $<span class="token punctuation">.</span><span class="token constant">CONSUME</span><span class="token punctuation">(</span>Identifier<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,18),an=n("There "),tn=s("strong",null,"do not",-1),en=n(" exist two different representations for the grammar and the runnable implementation (for example, grammar file vs generated code in the case of parser generators). Again, please note that Chevrotain is "),on=s("strong",null,"NOT",-1),pn=n(" a parser generator. Extra details can be found "),cn={href:"https://chevrotain.io/docs/FAQ.html#VS_GENERATORS",target:"_blank",rel:"noopener noreferrer"},ln=n("in the FAQ"),un=n("."),rn=e(`<h2 id="under-the-hood" tabindex="-1"><a class="header-anchor" href="#under-the-hood" aria-hidden="true">#</a> Under The Hood</h2><ul><li>But how does it work? (skip if you don&#39;t care \u{1F603} )</li></ul><p>The code above will be executed as is. Yet we have not implemented a lookahead function to choose between the two OR alternatives <code>( INTEGER | IDENTIFIER)</code>, nor have we implemented logic to identify the next iteration for <code>(&quot;,&quot; IDENTIFIER)*</code>. So how does it work?</p><p>The answer is the &#39;secret sauce&#39; of Chevrotain:</p><ul><li>During the call to <code>this.performSelfAnalysis()</code> the <strong>grammar structure</strong> will be &quot;<strong>recorded</strong>&quot; by replacing the implementations of the parsing DSL methods with matching &quot;recording&quot; variants.</li><li>This grammar structure will then undergo further processing and validation.</li></ul><p>So when the parser needs to choose between the two alternatives:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>$<span class="token punctuation">.</span><span class="token constant">OR</span><span class="token punctuation">(</span><span class="token punctuation">[</span>
  <span class="token punctuation">{</span>
    <span class="token function-variable function">ALT</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      $<span class="token punctuation">.</span><span class="token constant">CONSUME</span><span class="token punctuation">(</span>Integer<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">{</span>
    <span class="token function-variable function">ALT</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      $<span class="token punctuation">.</span><span class="token constant">CONSUME</span><span class="token punctuation">(</span>Identifier<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">]</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>It is aware of:</p><ul><li>Where it is (<code>OR [1] INSIDE_RULE [A] INSIDE_RULE [B] ...</code>)</li><li>What Tokens can come next for each alternative, as it &quot;is aware&quot; of the whole grammar representation.</li></ul><p>Thus, the parser can dynamically create (and cache) the lookahead function to choose between the two alternatives.</p><p>The same applies for any grammar rule where the parser has a choice, and even in somewhere there is no choice as that same in memory representation of the grammar can be used for error messages and fault tolerance as well as deciding which path to take.</p><h2 id="complete-parser" tabindex="-1"><a class="header-anchor" href="#complete-parser" aria-hidden="true">#</a> Complete Parser</h2><p>Let&#39;s finish implementing the whole SelectParser:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token punctuation">{</span> CstParser <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;chevrotain&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> allTokens <span class="token operator">=</span> <span class="token punctuation">[</span>
  WhiteSpace<span class="token punctuation">,</span>
  Select<span class="token punctuation">,</span>
  From<span class="token punctuation">,</span>
  Where<span class="token punctuation">,</span>
  Comma<span class="token punctuation">,</span>
  Identifier<span class="token punctuation">,</span>
  Integer<span class="token punctuation">,</span>
  GreaterThan<span class="token punctuation">,</span>
  LessThan
<span class="token punctuation">]</span>

<span class="token keyword">class</span> <span class="token class-name">SelectParser</span> <span class="token keyword">extends</span> <span class="token class-name">CstParser</span> <span class="token punctuation">{</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">super</span><span class="token punctuation">(</span>allTokens<span class="token punctuation">)</span>

    <span class="token keyword">const</span> $ <span class="token operator">=</span> <span class="token keyword">this</span>

    $<span class="token punctuation">.</span><span class="token constant">RULE</span><span class="token punctuation">(</span><span class="token string">&quot;selectStatement&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      $<span class="token punctuation">.</span><span class="token constant">SUBRULE</span><span class="token punctuation">(</span>$<span class="token punctuation">.</span>selectClause<span class="token punctuation">)</span>
      $<span class="token punctuation">.</span><span class="token constant">SUBRULE</span><span class="token punctuation">(</span>$<span class="token punctuation">.</span>fromClause<span class="token punctuation">)</span>
      $<span class="token punctuation">.</span><span class="token constant">OPTION</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        $<span class="token punctuation">.</span><span class="token constant">SUBRULE</span><span class="token punctuation">(</span>$<span class="token punctuation">.</span>whereClause<span class="token punctuation">)</span>
      <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>

    $<span class="token punctuation">.</span><span class="token constant">RULE</span><span class="token punctuation">(</span><span class="token string">&quot;selectClause&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      $<span class="token punctuation">.</span><span class="token constant">CONSUME</span><span class="token punctuation">(</span>Select<span class="token punctuation">)</span>
      $<span class="token punctuation">.</span><span class="token constant">AT_LEAST_ONE_SEP</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
        <span class="token constant">SEP</span><span class="token operator">:</span> Comma<span class="token punctuation">,</span>
        <span class="token function-variable function">DEF</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
          $<span class="token punctuation">.</span><span class="token constant">CONSUME</span><span class="token punctuation">(</span>Identifier<span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>

    $<span class="token punctuation">.</span><span class="token constant">RULE</span><span class="token punctuation">(</span><span class="token string">&quot;fromClause&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      $<span class="token punctuation">.</span><span class="token constant">CONSUME</span><span class="token punctuation">(</span>From<span class="token punctuation">)</span>
      $<span class="token punctuation">.</span><span class="token constant">CONSUME</span><span class="token punctuation">(</span>Identifier<span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>

    $<span class="token punctuation">.</span><span class="token constant">RULE</span><span class="token punctuation">(</span><span class="token string">&quot;whereClause&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      $<span class="token punctuation">.</span><span class="token constant">CONSUME</span><span class="token punctuation">(</span>Where<span class="token punctuation">)</span>
      $<span class="token punctuation">.</span><span class="token constant">SUBRULE</span><span class="token punctuation">(</span>$<span class="token punctuation">.</span>expression<span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>

    <span class="token comment">// The &quot;rhs&quot; and &quot;lhs&quot; (Right/Left Hand Side) labels will provide easy</span>
    <span class="token comment">// to use names during CST Visitor (step 3a).</span>
    $<span class="token punctuation">.</span><span class="token constant">RULE</span><span class="token punctuation">(</span><span class="token string">&quot;expression&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      $<span class="token punctuation">.</span><span class="token constant">SUBRULE</span><span class="token punctuation">(</span>$<span class="token punctuation">.</span>atomicExpression<span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token constant">LABEL</span><span class="token operator">:</span> <span class="token string">&quot;lhs&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>
      $<span class="token punctuation">.</span><span class="token constant">SUBRULE</span><span class="token punctuation">(</span>$<span class="token punctuation">.</span>relationalOperator<span class="token punctuation">)</span>
      $<span class="token punctuation">.</span><span class="token constant">SUBRULE2</span><span class="token punctuation">(</span>$<span class="token punctuation">.</span>atomicExpression<span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token constant">LABEL</span><span class="token operator">:</span> <span class="token string">&quot;rhs&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token comment">// note the &#39;2&#39; suffix to distinguish</span>
      <span class="token comment">// from the &#39;SUBRULE(atomicExpression)&#39;</span>
      <span class="token comment">// 2 lines above.</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>

    $<span class="token punctuation">.</span><span class="token constant">RULE</span><span class="token punctuation">(</span><span class="token string">&quot;atomicExpression&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      $<span class="token punctuation">.</span><span class="token constant">OR</span><span class="token punctuation">(</span><span class="token punctuation">[</span>
        <span class="token punctuation">{</span> <span class="token function-variable function">ALT</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> $<span class="token punctuation">.</span><span class="token constant">CONSUME</span><span class="token punctuation">(</span>Integer<span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
        <span class="token punctuation">{</span> <span class="token function-variable function">ALT</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> $<span class="token punctuation">.</span><span class="token constant">CONSUME</span><span class="token punctuation">(</span>Identifier<span class="token punctuation">)</span> <span class="token punctuation">}</span>
      <span class="token punctuation">]</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>

    $<span class="token punctuation">.</span><span class="token constant">RULE</span><span class="token punctuation">(</span><span class="token string">&quot;relationalOperator&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      $<span class="token punctuation">.</span><span class="token constant">OR</span><span class="token punctuation">(</span><span class="token punctuation">[</span>
        <span class="token punctuation">{</span> <span class="token function-variable function">ALT</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> $<span class="token punctuation">.</span><span class="token constant">CONSUME</span><span class="token punctuation">(</span>GreaterThan<span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
        <span class="token punctuation">{</span> <span class="token function-variable function">ALT</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> $<span class="token punctuation">.</span><span class="token constant">CONSUME</span><span class="token punctuation">(</span>LessThan<span class="token punctuation">)</span> <span class="token punctuation">}</span>
      <span class="token punctuation">]</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>

    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">performSelfAnalysis</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>Note that as a consequence of the parser having to &#39;know&#39; its position in the grammar during runtime, the Parsing DSL methods need to be distinguishable when appearing in the same rule. Thus, in the <code>&quot;expression&quot;</code> rule above, the second appearance of <code>SUBRULE</code> with <code>atomicExpression</code> parameter has a &#39;2&#39; suffix: <code>$.SUBRULE2($.atomicExpression)</code></li><li>Such errors will be detected during self-analysis, and will prevent the creation of parser instances with a descriptive error message (fail fast...).</li></ul><h2 id="usage" tabindex="-1"><a class="header-anchor" href="#usage" aria-hidden="true">#</a> Usage</h2><ul><li>But, how do we actually use this Parser?</li></ul><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// ONLY ONCE</span>
<span class="token keyword">const</span> parser <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SelectParser</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token keyword">function</span> <span class="token function">parseInput</span><span class="token punctuation">(</span><span class="token parameter">text</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> lexingResult <span class="token operator">=</span> SelectLexer<span class="token punctuation">.</span><span class="token function">tokenize</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span>
  <span class="token comment">// &quot;input&quot; is a setter which will reset the parser&#39;s state.</span>
  parser<span class="token punctuation">.</span>input <span class="token operator">=</span> lexingResult<span class="token punctuation">.</span>tokens
  parser<span class="token punctuation">.</span><span class="token function">selectStatement</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

  <span class="token keyword">if</span> <span class="token punctuation">(</span>parser<span class="token punctuation">.</span>errors<span class="token punctuation">.</span>length <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">&quot;sad sad panda, Parsing errors detected&quot;</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">const</span> inputText <span class="token operator">=</span> <span class="token string">&quot;SELECT column1 FROM table2&quot;</span>
<span class="token function">parseInput</span><span class="token punctuation">(</span>inputText<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>Note that any of the grammar rules can be invoked as the starting rule. There is no &#39;special&#39; top level entry rule.</li></ul>`,19);function dn(kn,vn){const t=o("ExternalLinkIcon"),p=o("RouterLink");return i(),l("div",null,[d,k,s("p",null,[s("a",v,[m,a(t)]),h]),b,s("p",null,[g,a(p,{to:"/tutorial/step1_lexing.html"},{default:u(()=>[_]),_:1}),f,E,w]),S,s("p",null,[T,s("a",L,[C,a(t)]),q,s("a",U,[$,a(t)]),x]),s("ul",null,[s("li",null,[s("a",R,[y,a(t)]),N]),s("li",null,[s("a",I,[O,a(t)]),P]),s("li",null,[s("a",A,[B,a(t)]),M]),s("li",null,[s("a",j,[D,a(t)]),F]),s("li",null,[s("a",W,[G,a(t)]),V]),s("li",null,[s("a",Y,[z,a(t)]),H]),s("li",null,[s("a",Q,[J,a(t)]),K]),s("li",null,[s("a",X,[Z,a(t)]),nn])]),sn,s("p",null,[an,tn,en,on,pn,s("a",cn,[ln,a(t)]),un]),rn])}var hn=c(r,[["render",dn],["__file","step2_parsing.html.vue"]]);export{hn as default};
