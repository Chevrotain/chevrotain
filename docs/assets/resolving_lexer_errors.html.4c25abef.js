import{_ as o,o as i,c as p,a as s,b as a,d as t,e as n,r}from"./app.23f00f41.js";const l={},c=t('<h1 id="resolving-lexer-errors" tabindex="-1"><a class="header-anchor" href="#resolving-lexer-errors" aria-hidden="true">#</a> Resolving Lexer Errors</h1><ul><li><strong>Warnings</strong><ul><li><a href="#LINE_BREAKS">No LINE_BREAKS Found.</a></li><li><a href="#IDENTIFY_TERMINATOR">Unable to identify line terminator usage in pattern.</a></li><li><a href="#CUSTOM_LINE_BREAK">A Custom Token Pattern should specify the &lt;line_breaks&gt; option.</a></li><li><a href="#REGEXP_PARSING">Failed parsing &lt; /.../ &gt; Using the regexp-to-ast library.</a></li><li><a href="#UNICODE_OPTIMIZE">The regexp unicode flag is not currently supported by the regexp-to-ast library.</a></li><li><a href="#COMPLEMENT">Complement Sets cannot be automatically optimized.</a></li></ul></li></ul><ul><li><strong>Errors</strong><ul><li><a href="#ANCHORS">Unexpected RegExp Anchor Error.</a></li><li><a href="#UNREACHABLE">Token Can Never Be Matched.</a></li><li><a href="#CUSTOM_OPTIMIZE">TokenType &lt;...&gt; is using a custom token pattern without providing &lt;char_start_hint&gt; parameter</a></li><li><a href="#MISSING_LINE_TERM_CHARS">Missing &lt;lineTerminatorCharacters&gt; property on the Lexer config.</a></li></ul></li></ul><h1 id="warnings" tabindex="-1"><a class="header-anchor" href="#warnings" aria-hidden="true">#</a> Warnings</h1><h2 id="LINE_BREAKS" tabindex="-1"><a class="header-anchor" href="#LINE_BREAKS" aria-hidden="true">#</a> No LINE_BREAKS Found</h2><p>A Chevrotain Lexer will by default track the full position information for each token. This includes line and column information.</p><p>In order to support this the Lexer must be aware of which Tokens may include line terminators. Normally this information can be computed automatically however in some cases Chevrotain needs some hints.</p><p>This warning means that the Lexer has been defined to track line and column information (perhaps by default). Yet not a single one of the Token definitions passed to it was detected as possibly containing line terminators.</p><p>To resolve this choose one of the following:</p>',9),u=n("Disable the line and column position tracking using the "),d={href:"https://chevrotain.io/documentation/10_5_0/interfaces/ILexerConfig.html#positionTracking",target:"_blank",rel:"noopener noreferrer"},k=n("positionTracking"),h=n(" configuration option."),m=t(`<div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> myTokens <span class="token operator">=</span> <span class="token punctuation">[</span>IntegerLiteral<span class="token punctuation">,</span> StringLiteral<span class="token punctuation">,</span> WhiteSpace <span class="token comment">/*, ... */</span><span class="token punctuation">]</span>
<span class="token keyword">const</span> myLexer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">chevrotain<span class="token punctuation">.</span>Lexer</span><span class="token punctuation">(</span><span class="token punctuation">[</span>myTokens<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">positionTracking</span><span class="token operator">:</span> <span class="token string">&quot;onlyOffset&quot;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),v=t(`<p>Mark the Tokens which may include a line terminator with an explicit line_breaks flag.</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> createToken <span class="token operator">=</span> chevrotain<span class="token punctuation">.</span>createToken

<span class="token keyword">const</span> Whitespace <span class="token operator">=</span> <span class="token function">createToken</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&quot;Whitespace&quot;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">pattern</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\s+</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>
  <span class="token comment">// This is normally computed automatically...</span>
  <span class="token literal-property property">line_breaks</span><span class="token operator">:</span> <span class="token boolean">true</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token keyword">const</span> myTokens <span class="token operator">=</span> <span class="token punctuation">[</span>IntegerLiteral<span class="token punctuation">,</span> StringLiteral<span class="token punctuation">,</span> WhiteSpace <span class="token comment">/*, ... */</span><span class="token punctuation">]</span>

<span class="token keyword">const</span> myLexer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">chevrotain<span class="token punctuation">.</span>Lexer</span><span class="token punctuation">(</span><span class="token punctuation">[</span>myTokens<span class="token punctuation">]</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,2),g=n("Note that the definition of what constitutes a line terminator is controlled by the "),_={href:"https://chevrotain.io/documentation/10_5_0/interfaces/ILexerConfig.html#lineTerminatorsPattern",target:"_blank",rel:"noopener noreferrer"},b=n("lineTerminatorsPattern"),y=n(" lexer configuration property."),f=s("li",null,[s("p",null,"Also note that multi-line tokens such as some types of comments and string literals tokens may contain line terminators.")],-1),x=s("h2",{id:"IDENTIFY_TERMINATOR",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#IDENTIFY_TERMINATOR","aria-hidden":"true"},"#"),n(" Unable to identify line terminator usage in pattern")],-1),T=n("A Chevrotain lexer must be aware which of the Token Types may match a line terminator. This is required to compute the correct line and column position information. Normally Chevrotain can identify this information automatically using the "),w={href:"https://github.com/bd82/regexp-to-ast",target:"_blank",rel:"noopener noreferrer"},q=n("regexp-to-ast library"),I=n(", however sometimes this logic fails. This is only a "),C=s("strong",null,"warning",-1),E=n(" which will cause a small performance loss to the lexer and would "),L=s("strong",null,"not",-1),j=n(" impact its correctness."),A=t(`<p>To resolve this warning, <strong>explicitly</strong> specify the line_breaks option in the offending Token Types:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> MyToken <span class="token operator">=</span> <span class="token function">createToken</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&quot;MyToken&quot;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">pattern</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">abc</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>
  <span class="token literal-property property">line_breaks</span><span class="token operator">:</span> <span class="token boolean">false</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> MultiLineStringLiteral <span class="token operator">=</span> <span class="token function">createToken</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&quot;MultiLineStringLiteral&quot;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">pattern</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\`[^\`]*\`</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>
  <span class="token literal-property property">line_breaks</span><span class="token operator">:</span> <span class="token boolean">true</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,2),M=n("Also please open an issue in the "),N={href:"https://github.com/bd82/regexp-to-ast",target:"_blank",rel:"noopener noreferrer"},S=n("regexp-to-ast library"),R=n(" so the root problem could be tracked and resolved."),z=s("h2",{id:"CUSTOM_LINE_BREAK",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#CUSTOM_LINE_BREAK","aria-hidden":"true"},"#"),n(" A Custom Token Pattern should specify the <line_breaks> option")],-1),O=n("A Chevrotain lexer must be aware which of the Token Types may match a line terminator. It is not possible to do so automatically when using "),P={href:"https://chevrotain.io/docs/guide/custom_token_patterns.html",target:"_blank",rel:"noopener noreferrer"},F=n("custom token patterns"),U=n(". This means it is highly recommended to explicitly provide the line_breaks argument when creating a TokenType:"),B=t(`<div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> MyCustomToken <span class="token operator">=</span> <span class="token function">createToken</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&quot;MyCustomToken&quot;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">pattern</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token literal-property property">exec</span><span class="token operator">:</span> matchFunction <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token literal-property property">line_breaks</span><span class="token operator">:</span> <span class="token boolean">false</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> MyCustomMultiLineToken <span class="token operator">=</span> <span class="token function">createToken</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&quot;MyCustomMultiLineToken&quot;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">pattern</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token literal-property property">exec</span><span class="token operator">:</span> matchFunction2 <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token literal-property property">line_breaks</span><span class="token operator">:</span> <span class="token boolean">true</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),W=n("This is only a "),K=s("strong",null,"warning",-1),G=n(' which will cause a small performance loss to the lexer and would not impact its correctness. If no explicit <line_break> option is provided it would be implicitly treated as "true" for '),D={href:"https://chevrotain.io/docs/guide/custom_token_patterns.html",target:"_blank",rel:"noopener noreferrer"},X=n("custom token patterns"),H=n("."),Z=s("h2",{id:"REGEXP_PARSING",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#REGEXP_PARSING","aria-hidden":"true"},"#"),n(" Failed parsing < /.../ > Using the regexp-to-ast library")],-1),J=n("The Chevrotain Lexer performs optimizations by filtering the potential token matches using the next "),V={href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/charCodeAt",target:"_blank",rel:"noopener noreferrer"},Y=n("charCode"),$=n(" to be consumed. To apply this optimization the first possible charCodes for "),Q=s("strong",null,"every",-1),nn=n(" Token Type must be identified."),sn=n("This analysis is implemented using the "),en={href:"https://github.com/bd82/regexp-to-ast",target:"_blank",rel:"noopener noreferrer"},an=n("regexp-to-ast"),tn=n(" library. Which means this "),on=s("strong",null,"warning",-1),pn=n(" usually indicates a bug in the regexp-to-ast library. The impact is only that the optimization described above would become disabled. Lexing and Parsing will still work correctly, only slower..."),rn=n("Please open a bug for the "),ln={href:"https://github.com/bd82/regexp-to-ast",target:"_blank",rel:"noopener noreferrer"},cn=n("regexp-to-ast"),un=n(" library. This issue can be "),dn=s("strong",null,"worked around",-1),kn=n(' by explicitly providing a "'),hn={href:"https://chevrotain.io/documentation/10_5_0/interfaces/ITokenConfig.html#start_chars_hint",target:"_blank",rel:"noopener noreferrer"},mn=n("start_chars_hint"),vn=n('" property.'),gn=t(`<div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> Integer <span class="token operator">=</span> <span class="token function">createToken</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&quot;Integer&quot;</span><span class="token punctuation">,</span>
  <span class="token comment">// lets assume that this pattern caused an error in regexp-to-ast</span>
  <span class="token literal-property property">pattern</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">[1-9]\\d*</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>
  <span class="token comment">// by explicitly providing the first possible characters of this pattern</span>
  <span class="token comment">// the analysis by the regexp-to-ast library will be skipped</span>
  <span class="token comment">// and the optimization can be enabled.</span>
  <span class="token literal-property property">start_chars_hint</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;1&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;2&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;3&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;4&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;5&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;6&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;7&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;8&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;9&quot;</span><span class="token punctuation">]</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="UNICODE_OPTIMIZE" tabindex="-1"><a class="header-anchor" href="#UNICODE_OPTIMIZE" aria-hidden="true">#</a> The regexp unicode flag is not currently supported by the regexp-to-ast library</h2>`,2),_n=n("The Chevrotain Lexer performs optimizations by filtering the potential token matches using the next "),bn={href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/charCodeAt",target:"_blank",rel:"noopener noreferrer"},yn=n("charCode"),fn=n(" to be consumed. To apply this optimization the first possible charCodes for "),xn=s("strong",null,"every",-1),Tn=n(" TokenType must be identified."),wn=n("This analysis is implemented using the "),qn={href:"https://github.com/bd82/regexp-to-ast",target:"_blank",rel:"noopener noreferrer"},In=n("regexp-to-ast"),Cn=n(" library. This library currently does not support the "),En={href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/unicode",target:"_blank",rel:"noopener noreferrer"},Ln=n("unicode regexp flag"),jn=n(" The impact is that the optimization described above would become disabled. Lexing and Parsing will still work correctly, just slower..."),An=n("This issue can be "),Mn=s("strong",null,"worked around",-1),Nn=n(' by explicitly providing a "'),Sn={href:"https://chevrotain.io/documentation/10_5_0/interfaces/ITokenConfig.html#start_chars_hint",target:"_blank",rel:"noopener noreferrer"},Rn=n("start_chars_hint"),zn=n('" property.'),On=t(`<div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// &#39;\u{1F4A9}&#39; character</span>
<span class="token function">createToken</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&quot;PileOfPoo&quot;</span><span class="token punctuation">,</span>
  <span class="token comment">// \\u{xxxxx} 32bit unicode escape can only be used with the /u flag enabled.</span>
  <span class="token literal-property property">pattern</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\u{1F4A9}</span><span class="token regex-delimiter">/</span><span class="token regex-flags">u</span></span><span class="token punctuation">,</span>
  <span class="token comment">// The &#39;\u{1F4A9}&#39; character is represented by surrogate pairs: &#39;\\uD83D\\uDCA9&#39;</span>
  <span class="token comment">// the start_chars_hint should only be provided the first of the pair.</span>
  <span class="token literal-property property">start_chars_hint</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">55357</span><span class="token punctuation">]</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Another way to <strong>work around</strong> the issue is to define the pattern as a string literal. As that kind can be trivially optimized. This is naturally only relevant for simple patterns. For example:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token function">createToken</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&quot;LCurley&quot;</span><span class="token punctuation">,</span>
  <span class="token comment">// note that the pattern is a string literal, not a regExp literal.</span>
  <span class="token literal-property property">pattern</span><span class="token operator">:</span> <span class="token string">&quot;{&quot;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="COMPLEMENT" tabindex="-1"><a class="header-anchor" href="#COMPLEMENT" aria-hidden="true">#</a> Complement Sets cannot be automatically optimized</h2>`,4),Pn=n("The Chevrotain Lexer performs optimizations by filtering the potential token matches using the next "),Fn={href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/charCodeAt",target:"_blank",rel:"noopener noreferrer"},Un=n("charCode"),Bn=n(" about to be consumed. To apply this optimization the first possible charCodes for "),Wn=s("strong",null,"every",-1),Kn=n(" TokenType must be known in advance."),Gn=t(`<p>When a TokenType pattern uses a regExp complement set as a potential <strong>first</strong> character the optimization is skipped as translating a complement set to a regular set is fairly costly during the Lexer&#39;s initialization.</p><p>For example an XML Text is defined by <strong>everything</strong> except a closing tag.</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> XMLText <span class="token operator">=</span> <span class="token function">createToken</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&quot;XMLText&quot;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">pattern</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">[^&lt;&amp;]+</span><span class="token regex-delimiter">/</span></span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>This means that there are <strong>65533</strong> (65535 - 2) possible starting charCodes For an XMLText token.</p>`,4),Dn=n('If the use of these runtime optimizations is needed and the startup resources cost is acceptable It is possible to enable the optimizations by explicitly providing a "'),Xn={href:"https://chevrotain.io/documentation/10_5_0/interfaces/ITokenConfig.html#start_chars_hint",target:"_blank",rel:"noopener noreferrer"},Hn=n("start_chars_hint"),Zn=n('" property. e.g:'),Jn=t(`<div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> hints <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">65535</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// 38 is &#39;&lt;&#39; and 60 is &#39;&amp;&#39;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">!==</span> <span class="token number">38</span> <span class="token operator">||</span> i <span class="token operator">!==</span> <span class="token number">60</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    hints<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">const</span> XMLText <span class="token operator">=</span> <span class="token function">createToken</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&quot;XMLText&quot;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">pattern</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">[^&lt;&amp;]+</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>
  <span class="token literal-property property">start_chars_hint</span><span class="token operator">:</span> hints
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Please Note that filling such an array can be cpu intensive. So if you are only parsing small inputs and/or starting a new process for each parser invocation the added initialization cost may be counterproductive.</p><p>Another solution to this problem is to re-define the Token pattern without using a complement. For example: the XMLText pattern above could be re-defined as:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> XMLText <span class="token operator">=</span> <span class="token function">createToken</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&quot;XMLText&quot;</span><span class="token punctuation">,</span>
  <span class="token comment">// Equivalent to: /[^&lt;&amp;]+/ but a-lot less clear :(</span>
  <span class="token comment">// Note that:</span>
  <span class="token comment">//   - &quot;\\u0026&quot; === &quot;&amp;&quot;</span>
  <span class="token comment">//   - &quot;\\u003C&quot; === &quot;&lt;&quot;</span>
  <span class="token literal-property property">pattern</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">[\\u0000-\\u0025\\u0027-\\u003B\\u003D-\\uFFFF]+</span><span class="token regex-delimiter">/</span></span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Note that internally Chevrotain avoids creating a 16bits large data structure so this method would be the most optimized both in terms of runtime and initialization time.</p><h1 id="errors" tabindex="-1"><a class="header-anchor" href="#errors" aria-hidden="true">#</a> Errors</h1><h2 id="ANCHORS" tabindex="-1"><a class="header-anchor" href="#ANCHORS" aria-hidden="true">#</a> Unexpected RegExp Anchor Error</h2><p>A Token RegExp pattern used in a chevrotain lexer may not use the start/end of input anchors (&#39;$&#39; and &#39;^&#39;).</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> createToken <span class="token operator">=</span> chevrotain<span class="token punctuation">.</span>createToken

<span class="token comment">// Using createToken API</span>
<span class="token keyword">const</span> Whitespace <span class="token operator">=</span> <span class="token function">createToken</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&quot;Integer&quot;</span><span class="token punctuation">,</span>
  <span class="token comment">// invalid pattern using both anchors</span>
  <span class="token literal-property property">pattern</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^\\d+$</span><span class="token regex-delimiter">/</span></span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token comment">// will throw an error</span>
<span class="token keyword">new</span> <span class="token class-name">chevrotain<span class="token punctuation">.</span>Lexer</span><span class="token punctuation">(</span><span class="token punctuation">[</span>semVer<span class="token punctuation">]</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>To resolve this simply avoid using anchors in your Token Types patterns.</p><h2 id="UNREACHABLE" tabindex="-1"><a class="header-anchor" href="#UNREACHABLE" aria-hidden="true">#</a> Token can never be matched</h2><p>This error means that A Token type can never be successfully matched as a <strong>previous</strong> Token type in the lexer definition will <strong>always</strong> matched instead. This happens because the default behavior of Chevrotain is to attempt to match tokens <strong>by the order</strong> described in the lexer definition.</p><p>For example:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> ForKeyword <span class="token operator">=</span> <span class="token function">createToken</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&quot;ForKeyword&quot;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">pattern</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">for</span><span class="token regex-delimiter">/</span></span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token keyword">const</span> Identifier <span class="token operator">=</span> <span class="token function">createToken</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&quot;Identifier&quot;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">pattern</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">[a-zA-z]+</span><span class="token regex-delimiter">/</span></span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token comment">// Will throw Token &lt;ForKeyword&gt; can never be matched...</span>
<span class="token comment">// Because the input &quot;for&quot; is also a valid identifier</span>
<span class="token comment">// and matching an identifier will be attempted first.</span>
<span class="token keyword">const</span> myLexer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">chevrotain<span class="token punctuation">.</span>Lexer</span><span class="token punctuation">(</span><span class="token punctuation">[</span>Identifier<span class="token punctuation">,</span> ForKeyword<span class="token punctuation">]</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>Note that this validation is limited to simple patterns such as keywords The more general case of any pattern being a strict subset of a preceding pattern will require much more in depth RegExp analysis capabilities.</li></ul><p>To resolve this simply re-arrange the order of Token types in the lexer definition such that the more specific Token types will be listed first.</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// Identifier is now listed as the last Token type.</span>
<span class="token keyword">const</span> myLexer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">chevrotain<span class="token punctuation">.</span>Lexer</span><span class="token punctuation">(</span><span class="token punctuation">[</span>ForKeyword<span class="token punctuation">,</span> Identifier<span class="token punctuation">]</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>Note that the solution provided above will create a new problem. Any identifier <strong>starting with</strong> &quot;for&quot; will be lexed as <strong>two separate</strong> tokens, a ForKeyword and an identifier. For example:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> myLexer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">chevrotain<span class="token punctuation">.</span>Lexer</span><span class="token punctuation">(</span><span class="token punctuation">[</span>ForKeyword<span class="token punctuation">,</span> Identifier<span class="token punctuation">]</span><span class="token punctuation">)</span>

<span class="token comment">// [</span>
<span class="token comment">//    {image:&quot;for&quot;}</span>
<span class="token comment">//    {image:&quot;ward&quot;}</span>
<span class="token comment">// ]</span>
<span class="token keyword">const</span> tokensResult <span class="token operator">=</span> myLexer<span class="token punctuation">.</span><span class="token function">tokenize</span><span class="token punctuation">(</span><span class="token string">&quot;forward&quot;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,19),Vn=n("To resolve this second problem see how to prefer the "),Yn=s("strong",null,"longest match",-1),$n=n(" as demonstrated in the "),Qn={href:"https://github.com/chevrotain/chevrotain/blob/master/examples/lexer/keywords_vs_identifiers/keywords_vs_identifiers.js",target:"_blank",rel:"noopener noreferrer"},ns=n("keywords vs identifiers example"),ss=s("h2",{id:"CUSTOM_OPTIMIZE",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#CUSTOM_OPTIMIZE","aria-hidden":"true"},"#"),n(" TokenType <...> is using a custom token pattern without providing <char_start_hint> parameter")],-1),es=n("The Chevrotain Lexer performs optimizations by filtering the potential token matches using the next "),as={href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/charCodeAt",target:"_blank",rel:"noopener noreferrer"},ts=n("charCode"),os=n(" to be consumed. To apply this optimization the first possible charCodes for "),is=s("strong",null,"every",-1),ps=n(" TokenType must be identified."),rs=n("This information cannot be automatically computed for "),ls={href:"https://chevrotain.io/docs/guide/custom_token_patterns.html",target:"_blank",rel:"noopener noreferrer"},cs=n("custom token patterns"),us=n(" and "),ds=s("strong",null,"should",-1),ks=n(' therefore be explicitly provided using the "'),hs={href:"https://chevrotain.io/documentation/10_5_0/interfaces/ITokenConfig.html#start_chars_hint",target:"_blank",rel:"noopener noreferrer"},ms=n("start_chars_hint"),vs=n('" property.'),gs=t(`<p>For example:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> IntegerToken <span class="token operator">=</span> <span class="token function">createToken</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&quot;IntegerToken&quot;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">pattern</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token function-variable function">exec</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">text<span class="token punctuation">,</span> offset</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token comment">/* ... */</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token literal-property property">start_chars_hint</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;1&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;2&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;3&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;4&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;5&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;6&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;7&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;8&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;9&quot;</span><span class="token punctuation">]</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,2),_s=n('Providing the "'),bs={href:"https://chevrotain.io/documentation/10_5_0/interfaces/ITokenConfig.html#start_chars_hint",target:"_blank",rel:"noopener noreferrer"},ys=n("start_chars_hint"),fs=n('" property is '),xs=s("strong",null,"not",-1),Ts=n(" mandatory. It will only enable performance optimizations in the lexer."),ws=s("h2",{id:"MISSING_LINE_TERM_CHARS",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#MISSING_LINE_TERM_CHARS","aria-hidden":"true"},"#"),n(" Missing <lineTerminatorCharacters> property on the Lexer config")],-1),qs=n("Chevrotain treats "),Is=s("code",null,"/\\n|\\r\\n?/",-1),Cs=n(" as line terminators, but that is insufficient for some grammars. Therefore, it is possible to customize the definition of line terminators using the "),Es={href:"https://chevrotain.io/documentation/10_5_0/interfaces/ILexerConfig.html#lineTerminatorsPattern",target:"_blank",rel:"noopener noreferrer"},Ls=n("lineTerminatorPattern option"),js=n(". When doing so, however, it is also necessary to provide the "),As={href:"https://chevrotain.io/documentation/10_5_0/interfaces/ILexerConfig.html#lineTerminatorCharacters",target:"_blank",rel:"noopener noreferrer"},Ms=n("lineTerminatorCharacters option"),Ns=n(". This causes a bit of duplication and may be simplified in future versions."),Ss=t(`<p>Example:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> myLexer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">chevrotain<span class="token punctuation">.</span>Lexer</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
  <span class="token comment">// For our lexer only &quot;\\n&quot; is a counted as a line terminator</span>
  <span class="token literal-property property">lineTerminatorsPattern</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\n</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>
  <span class="token comment">// Duplicate information, &quot;\\n&quot;.charCodeAt(0) === 10</span>
  <span class="token literal-property property">lineTerminatorCharacters</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,2);function Rs(zs,Os){const e=r("ExternalLinkIcon");return i(),p("div",null,[c,s("ol",null,[s("li",null,[s("p",null,[u,s("a",d,[k,a(e)]),h]),m]),s("li",null,[v,s("ul",null,[s("li",null,[s("p",null,[g,s("a",_,[b,a(e)]),y])]),f])])]),x,s("p",null,[T,s("a",w,[q,a(e)]),I,C,E,L,j]),A,s("p",null,[M,s("a",N,[S,a(e)]),R]),z,s("p",null,[O,s("a",P,[F,a(e)]),U]),B,s("p",null,[W,K,G,s("a",D,[X,a(e)]),H]),Z,s("p",null,[J,s("a",V,[Y,a(e)]),$,Q,nn]),s("p",null,[sn,s("a",en,[an,a(e)]),tn,on,pn]),s("p",null,[rn,s("a",ln,[cn,a(e)]),un,dn,kn,s("a",hn,[mn,a(e)]),vn]),gn,s("p",null,[_n,s("a",bn,[yn,a(e)]),fn,xn,Tn]),s("p",null,[wn,s("a",qn,[In,a(e)]),Cn,s("a",En,[Ln,a(e)]),jn]),s("p",null,[An,Mn,Nn,s("a",Sn,[Rn,a(e)]),zn]),On,s("p",null,[Pn,s("a",Fn,[Un,a(e)]),Bn,Wn,Kn]),Gn,s("p",null,[Dn,s("a",Xn,[Hn,a(e)]),Zn]),Jn,s("p",null,[Vn,Yn,$n,s("a",Qn,[ns,a(e)])]),ss,s("p",null,[es,s("a",as,[ts,a(e)]),os,is,ps]),s("p",null,[rs,s("a",ls,[cs,a(e)]),us,ds,ks,s("a",hs,[ms,a(e)]),vs]),gs,s("p",null,[_s,s("a",bs,[ys,a(e)]),fs,xs,Ts]),ws,s("p",null,[qs,Is,Cs,s("a",Es,[Ls,a(e)]),js,s("a",As,[Ms,a(e)]),Ns]),Ss])}var Fs=o(l,[["render",Rs],["__file","resolving_lexer_errors.html.vue"]]);export{Fs as default};
