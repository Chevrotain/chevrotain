import{_ as l,r as o,o as r,c,a,b as n,d as s,w as p,e as t}from"./app-e26ef647.js";const u={},d=t(`<h1 id="resolving-grammar-errors" tabindex="-1"><a class="header-anchor" href="#resolving-grammar-errors" aria-hidden="true">#</a> Resolving Grammar Errors</h1><ul><li><a href="#COMMON_PREFIX">Common Prefix Ambiguities.</a></li><li><a href="#AMBIGUOUS_ALTERNATIVES">Ambiguous Alternatives Detected.</a></li><li><a href="#TERMINAL_NAME_NOT_FOUND">Terminal Token Name Not Found.</a></li><li><a href="#INFINITE_LOOP">Infinite Loop Detected.</a></li><li><a href="#IGNORING_AMBIGUITIES">Ignoring Ambiguities.</a></li></ul><h2 id="COMMON_PREFIX" tabindex="-1"><a class="header-anchor" href="#COMMON_PREFIX" aria-hidden="true">#</a> Common Prefix Ambiguities</h2><p>Imagine the following grammar:</p><div class="language-antlr line-numbers-mode" data-ext="antlr"><pre class="language-antlr"><code>myRule:
  &quot;A&quot; &quot;B&quot; |
  &quot;A&quot; &quot;B&quot; &quot;C&quot;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>The first alternative is a prefix of the second alternative. Now lets consider the input [&quot;A&quot;, &quot;B&quot;]. For this input the first alternative would be matched as expected.</p><p>However for the input [&quot;A&quot;, &quot;B&quot;, &quot;C&quot;] the first alternative would still be matched but this time <strong>incorrectly</strong> as alternation matches are attempted <strong>in order</strong>.</p><p>There are two ways to resolve this:</p><ul><li><p>Reorder the alternatives so that shorter common prefix lookahead paths appears after the longer ones.</p><div class="language-antlr line-numbers-mode" data-ext="antlr"><pre class="language-antlr"><code>myRule:
  &quot;A&quot; &quot;B&quot; &quot;C&quot; |
  &quot;A&quot; &quot;B&quot;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>Refactor the grammar to extract common prefixes.</p><div class="language-antlr line-numbers-mode" data-ext="antlr"><pre class="language-antlr"><code>  myRule:
    &quot;A&quot; &quot;B&quot; (&quot;C&quot;)?
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h2 id="AMBIGUOUS_ALTERNATIVES" tabindex="-1"><a class="header-anchor" href="#AMBIGUOUS_ALTERNATIVES" aria-hidden="true">#</a> Ambiguous Alternatives Detected</h2><p>An Ambiguous Alternatives Error occurs when Chevrotain cannot decide between two alternatives in an alternation (OR DSL method).</p>`,11),m={href:"https://chevrotain.io/documentation/11_0_0/interfaces/IParserConfig.html#maxLookAhead",target:"_blank",rel:"noopener noreferrer"},h=t(`<p>Lets consider a more concrete example:</p><div class="language-antlr line-numbers-mode" data-ext="antlr"><pre class="language-antlr"><code>fiveTokensLookahead:
  &quot;A&quot; &quot;B&quot; &quot;C&quot; &quot;D&quot; &quot;1&quot; |
  &quot;A&quot; &quot;B&quot; &quot;C&quot; &quot;D&quot; &quot;2&quot;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,2),v=a("strong",null,"five",-1),k={href:"https://chevrotain.io/documentation/11_0_0/interfaces/IParserConfig.html#maxLookAhead",target:"_blank",rel:"noopener noreferrer"},g={href:"https://chevrotain.io/documentation/11_0_0/interfaces/IParserConfig.html#maxLookAhead",target:"_blank",rel:"noopener noreferrer"},b=a("strong",null,"not",-1),f=a("strong",null,"exponentially",-1),_={href:"https://chevrotain.io/documentation/11_0_0/interfaces/OrMethodOpts.html#IGNORE_AMBIGUITIES",target:"_blank",rel:"noopener noreferrer"},q=a("strong",null,"specific",-1),I=t(`<p><strong><em>The recommended solution in this case would be to refactor the grammar to require a smaller lookahead</em></strong>. In our trivial example the grammar can be refactored to be LL(1), meaning only one token of lookahead is needed. The needed change is a simple <strong>extraction of the common prefix before the alternation</strong>.</p><div class="language-antlr line-numbers-mode" data-ext="antlr"><pre class="language-antlr"><code>oneTokenLookahead:
  &quot;A&quot; &quot;B&quot; &quot;C&quot; &quot;D&quot;
  (
    &quot;1&quot; |
    &quot;2&quot;
  )
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Note that the number of lookahead tokens needed to choose between alternatives may in fact be <strong>infinite</strong>, for example:</p><div class="language-antlr line-numbers-mode" data-ext="antlr"><pre class="language-antlr"><code>infiniteTokensLookahead:
  (&quot;A&quot;)* &quot;1&quot;  |
  (&quot;A&quot;)* &quot;2&quot;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>No matter how large a maxLookahead we choose, the sequence of &quot;A&quot;s could always (potentially) be longer... The solution in this case is the same as before, <strong>extraction of the common prefix before the alternation</strong>, for example:</p><div class="language-antlr line-numbers-mode" data-ext="antlr"><pre class="language-antlr"><code>oneTokenLookahead:
  (&quot;A&quot;)*
  (
    &quot;1&quot; |
    &quot;2&quot;
  )
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,6),A=a("strong",null,"strongly",-1),x=a("h2",{id:"TERMINAL_NAME_NOT_FOUND",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#TERMINAL_NAME_NOT_FOUND","aria-hidden":"true"},"#"),n(" Terminal Token Name Not Found")],-1),N={href:"https://github.com/chevrotain/chevrotain/blob/v5.0.0/packages/chevrotain/docs/guide/resolving_grammar_errors.md#terminal-token-name-not-found",target:"_blank",rel:"noopener noreferrer"},T=t(`<h2 id="INFINITE_LOOP" tabindex="-1"><a class="header-anchor" href="#INFINITE_LOOP" aria-hidden="true">#</a> Infinite Loop Detected</h2><ul><li>Note <strong>This error is only relevant in versions prior to 4.4.0</strong> See: https://github.com/chevrotain/chevrotain/issues/958</li></ul><p>A repetition must consume at least one token in each iteration. Entering an iteration while failing to do so would cause an <strong>infinite loop</strong> because the condition to entering the next iteration would still be true while the parser state has not been changed. essentially this creates a flow that looks like:</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// iteration lookahead condition (always true)</span>
<span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// single iteration grammar</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Lets look at a few real examples that can cause this error</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>$<span class="token punctuation">.</span><span class="token constant">MANY</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span><span class="token punctuation">;</span>
  <span class="token comment">// unreachable code</span>
  $<span class="token punctuation">.</span><span class="token constant">CONSUME</span><span class="token punctuation">(</span>Plus<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>By returning early in the iteration grammar we prevent the parser from consuming The plus token and thus the next time the parser checks if it should enter the iteration The condition (nextToken === Plus) would still be true.</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>$<span class="token punctuation">.</span><span class="token constant">MANY</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token comment">// Never wrap Chevrotain grammar in JavaScript control flow constructs.</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>condition<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    $<span class="token punctuation">.</span><span class="token constant">CONSUME</span><span class="token punctuation">(</span>Plus<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,8),E={href:"https://chevrotain.io/docs/features/gates.html",target:"_blank",rel:"noopener noreferrer"},O=t(`<p>For example the above example should be written as:</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>$<span class="token punctuation">.</span><span class="token constant">MANY</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  $<span class="token punctuation">.</span><span class="token constant">OPTION</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    $<span class="token punctuation">.</span><span class="token constant">CONSUME</span><span class="token punctuation">(</span>Plus<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="IGNORING_AMBIGUITIES" tabindex="-1"><a class="header-anchor" href="#IGNORING_AMBIGUITIES" aria-hidden="true">#</a> Ignoring Ambiguities</h2><p>In some rare cases the Parser may detect ambiguities that are not actually possible or are perhaps implicitly resolved, e.g:</p><ul><li>by the order of alternatives (an alternation alternative is attempted in the order listed).</li></ul>`,5),y={href:"https://chevrotain.io/documentation/11_0_0/interfaces/OrMethodOpts.html#IGNORE_AMBIGUITIES",target:"_blank",rel:"noopener noreferrer"},L=t(`<p>For example:</p><ul><li><p>Ignoring all ambiguities of an alternation.</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>$<span class="token punctuation">.</span><span class="token constant">OR</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token constant">IGNORE_AMBIGUITIES</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
  <span class="token constant">DEF</span><span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token punctuation">{</span> <span class="token function-variable function">ALT</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> $<span class="token punctuation">.</span><span class="token constant">SUBRULE</span><span class="token punctuation">(</span>$<span class="token punctuation">.</span>myRule<span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span> <span class="token function-variable function">ALT</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> $<span class="token punctuation">.</span><span class="token constant">SUBRULE</span><span class="token punctuation">(</span>$<span class="token punctuation">.</span>myOtherRule<span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>Ignoring ambiguities related to a <strong>specific alternative</strong> of an alternation:</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>$<span class="token punctuation">.</span><span class="token constant">OR</span><span class="token punctuation">(</span><span class="token punctuation">[</span>
  <span class="token punctuation">{</span> <span class="token function-variable function">ALT</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> $<span class="token punctuation">.</span><span class="token constant">SUBRULE</span><span class="token punctuation">(</span>$<span class="token punctuation">.</span>myRule<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token constant">IGNORE_AMBIGUITIES</span><span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">{</span> <span class="token function-variable function">ALT</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> $<span class="token punctuation">.</span><span class="token constant">SUBRULE</span><span class="token punctuation">(</span>$<span class="token punctuation">.</span>myOtherRule<span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul>`,2);function w(R,M){const e=o("ExternalLinkIcon"),i=o("RouterLink");return r(),c("div",null,[d,a("p",null,[n('Chevrotain "looks ahead" at most '),a("a",m,[n("K (3 by default)"),s(e)]),n(" tokens to determine which alternative to pick. An Ambiguous Alternatives Error indicates that more than K tokens lookahead is needed.")]),h,a("p",null,[n('In order to decide between these two alternatives, Chevrotain must "look ahead" '),v,n(' tokens as the disambiguating tokens are "1" and "2". Five is a larger than the default '),a("a",k,[n("maxLookahead"),s(e)]),n(" of four, so an error will be raised.")]),a("p",null,[n("We could solve this case by increasing the global "),a("a",g,[n("maxLookahead"),s(e)]),n(" to 5, however this is "),b,n(" recommended due to performance and grammar complexity reasons. From a performance perspective this is particularly problematic as some analysis done on the grammar (during initialization) may become "),f,n(" more complex as the maxLookahead grows.")]),a("p",null,[n("We could also specify the "),a("a",_,[n("MAX_LOOKAHEAD"),s(e)]),n(" config on the "),q,n(" DSL method invocation where the problem occurs, This is still not the optimal solution in this case.")]),I,a("p",null,[n("In some rare cases refactoring the grammar is not possible, in those cases it is still possible to resolve the ambiguity using the "),s(i,{to:"/features/backtracking.html"},{default:p(()=>[n("backtracking feature")]),_:1}),n(" Although this is "),A,n(" discouraged due to performance and complexity reasons...")]),x,a("p",null,[n("This problem can no longer occur in versions of Chevrotain after (and including) 6.0.0. See "),a("a",N,[n("V5 of these Docs"),s(e)]),n(" if you have not yet upgraded.")]),T,a("p",null,[n("This is similar to the previous example as if the condition is false, once again the parser will consume nothing in the iteration. Modeling conditional grammar paths must be done using Chevrotain grammar constructs such as OPTION and/or "),a("a",E,[n("GATE"),s(e)]),n(".")]),O,a("p",null,[n("In such cases the ambiguities may be ignored explicitly by using the "),a("a",y,[n("IGNORE_AMBIGUITIES"),s(e)]),n(" property on the relevant DSL method.")]),L])}const S=l(u,[["render",w],["__file","resolving_grammar_errors.html.vue"]]);export{S as default};
