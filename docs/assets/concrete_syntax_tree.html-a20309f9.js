import{_ as p,r as o,o as i,c,a as n,b as s,d as t,e}from"./app-2fd97b94.js";const l={},u=e('<h1 id="cst" tabindex="-1"><a class="header-anchor" href="#cst" aria-hidden="true">#</a> CST</h1><h2 id="automatic-concrete-syntax-tree-creation" tabindex="-1"><a class="header-anchor" href="#automatic-concrete-syntax-tree-creation" aria-hidden="true">#</a> Automatic Concrete Syntax Tree Creation</h2><p>Chevrotain has the capability to <strong>automatically</strong> create a concrete syntax tree (CST) during parsing. A CST is a simple structure which represents the <strong>entire</strong> parse tree. It contains information on every token parsed.</p><p>The main advantage of using the automatic CST creation is that it enables writing &quot;pure&quot; grammars. This means that the semantic actions are <strong>not</strong> embedded into the grammar implementation but are instead completely <strong>separated</strong> from it.</p><p>This separation of concerns makes the grammar easier to maintain and makes it easier to implement different capabilities on the grammar, for example: separate logic for compilation and for IDE support.</p><h2 id="ast-vs-cst" tabindex="-1"><a class="header-anchor" href="#ast-vs-cst" aria-hidden="true">#</a> AST vs CST</h2><p>There are two major differences.</p><ol><li><p>An <strong>A</strong>bstract <strong>S</strong>yntax <strong>T</strong>ree would not normally contain all the syntactic information. This mean the <strong>exact original</strong> text can not always be re-constructed from the AST.</p></li><li><p>An <strong>A</strong>bstract <strong>S</strong>yntax <strong>T</strong>ree would not represent the whole syntactic parse tree. It would normally only contain nodes related to specific parse tree nodes, but not all of those (mostly leaf nodes).</p></li></ol><h2 id="enabling" tabindex="-1"><a class="header-anchor" href="#enabling" aria-hidden="true">#</a> Enabling</h2><p>How to enable CST output?</p>',10),r={href:"https://chevrotain.io/documentation/11_0_3/classes/CstParser.html",target:"_blank",rel:"noopener noreferrer"},d=e(`<div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> CstParser <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;chevrotain&quot;</span><span class="token punctuation">;</span>

<span class="token keyword">class</span> <span class="token class-name">SelectParser</span> <span class="token keyword">extends</span> <span class="token class-name">CstParser</span> <span class="token punctuation">{</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="structure" tabindex="-1"><a class="header-anchor" href="#structure" aria-hidden="true">#</a> Structure</h2><p>The structure of the CST is very simple.</p>`,3),k={href:"https://chevrotain.io/documentation/11_0_3/interfaces/CstNode.html",target:"_blank",rel:"noopener noreferrer"},v={href:"https://chevrotain.io/playground/?example=JSON%20grammar%20and%20automatic%20CST%20output",target:"_blank",rel:"noopener noreferrer"},m=n("strong",null,"online playground",-1),h=n("li",null,[n("p",null,"Note that the following examples are not runnable nor contain the full information. These are just snippets to explain the core concepts.")],-1),b=e(`<div class="language-TypeScript line-numbers-mode" data-ext="TypeScript"><pre class="language-TypeScript"><code>export type CstElement = IToken | CstNode
export type CstChildrenDictionary = { [elementName:string]:CstElement[] }

export interface CstNode {
    readonly name:string

    readonly children:CstChildrenDictionary

    readonly recoveredNode?:boolean
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>A single CstNode corresponds to a single grammar rule&#39;s invocation result.</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>$<span class="token punctuation">.</span><span class="token constant">RULE</span><span class="token punctuation">(</span><span class="token string">&quot;qualifiedName&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

input <span class="token operator">=</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">;</span>

output <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&quot;qualifiedName&quot;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">children</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Each Terminal will appear in the children dictionary using the terminal&#39;s name as the key and an <strong>array</strong> of IToken as the value.</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>$<span class="token punctuation">.</span><span class="token constant">RULE</span><span class="token punctuation">(</span><span class="token string">&quot;qualifiedName&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  $<span class="token punctuation">.</span><span class="token constant">CONSUME</span><span class="token punctuation">(</span>Identifier<span class="token punctuation">)</span><span class="token punctuation">;</span>
  $<span class="token punctuation">.</span><span class="token constant">CONSUME</span><span class="token punctuation">(</span>Dot<span class="token punctuation">)</span><span class="token punctuation">;</span>
  $<span class="token punctuation">.</span><span class="token constant">CONSUME2</span><span class="token punctuation">(</span>Identifier<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

input <span class="token operator">=</span> <span class="token string">&quot;foo.bar&quot;</span><span class="token punctuation">;</span>

output <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&quot;qualifiedName&quot;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">children</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">Dot</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;.&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token literal-property property">Identifier</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;foo&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;bar&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Non-Terminals are handled similarly to Terminals except each item in the value&#39;s array Is the CstNode of the corresponding Grammar Rule (Non-Terminal).</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>$<span class="token punctuation">.</span><span class="token constant">RULE</span><span class="token punctuation">(</span><span class="token string">&quot;qualifiedName&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  $<span class="token punctuation">.</span><span class="token constant">SUBRULE</span><span class="token punctuation">(</span>$<span class="token punctuation">.</span>singleIdent<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

$<span class="token punctuation">.</span><span class="token constant">RULE</span><span class="token punctuation">(</span><span class="token string">&quot;singleIdent&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  $<span class="token punctuation">.</span><span class="token constant">CONSUME</span><span class="token punctuation">(</span>Identifier<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

input <span class="token operator">=</span> <span class="token string">&quot;foo&quot;</span><span class="token punctuation">;</span>

output <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&quot;qualifiedName&quot;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">children</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">singleIdent</span><span class="token operator">:</span> <span class="token punctuation">[</span>
      <span class="token punctuation">{</span>
        <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&quot;singleIdent&quot;</span><span class="token punctuation">,</span>
        <span class="token literal-property property">children</span><span class="token operator">:</span> <span class="token punctuation">{</span>
          <span class="token literal-property property">Identifier</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;foo&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Note that Terminals and Non-Terminals will only appear in the children object if they were actually encountered during parsing. This means that optional grammar productions may or may not appear in a CST node depending on the actual input, e.g:</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>$<span class="token punctuation">.</span><span class="token constant">RULE</span><span class="token punctuation">(</span><span class="token string">&quot;variableStatement&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  $<span class="token punctuation">.</span><span class="token constant">CONSUME</span><span class="token punctuation">(</span>Var<span class="token punctuation">)</span><span class="token punctuation">;</span>
  $<span class="token punctuation">.</span><span class="token constant">CONSUME</span><span class="token punctuation">(</span>Identifier<span class="token punctuation">)</span><span class="token punctuation">;</span>
  $<span class="token punctuation">.</span><span class="token constant">OPTION</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    $<span class="token punctuation">.</span><span class="token constant">CONSUME</span><span class="token punctuation">(</span>Equals<span class="token punctuation">)</span><span class="token punctuation">;</span>
    $<span class="token punctuation">.</span><span class="token constant">CONSUME</span><span class="token punctuation">(</span>Integer<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

input1 <span class="token operator">=</span> <span class="token string">&quot;var x&quot;</span><span class="token punctuation">;</span>

output1 <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&quot;variableStatement&quot;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">children</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">Var</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;var&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token literal-property property">Identifier</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;x&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token comment">// no &quot;Equals&quot; or &quot;Integer&quot; keys</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

input2 <span class="token operator">=</span> <span class="token string">&quot;var x = 5&quot;</span><span class="token punctuation">;</span>

output2 <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&quot;variableStatement&quot;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">children</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">Var</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;var&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token literal-property property">Identifier</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;x&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token literal-property property">Equals</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;=&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token literal-property property">Integer</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;5&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="extracting-alternatives-to-sub-rules" tabindex="-1"><a class="header-anchor" href="#extracting-alternatives-to-sub-rules" aria-hidden="true">#</a> Extracting Alternatives to &quot;sub&quot; rules</h2><p>So far the CST structure is quite simple, but how would a more complex grammar be handled?</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>$<span class="token punctuation">.</span><span class="token constant">RULE</span><span class="token punctuation">(</span><span class="token string">&quot;statements&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  $<span class="token punctuation">.</span><span class="token constant">OR</span><span class="token punctuation">(</span><span class="token punctuation">[</span>
    <span class="token comment">// let x = 5</span>
    <span class="token punctuation">{</span>
      <span class="token function-variable function">ALT</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        $<span class="token punctuation">.</span><span class="token constant">CONSUME</span><span class="token punctuation">(</span>Let<span class="token punctuation">)</span><span class="token punctuation">;</span>
        $<span class="token punctuation">.</span><span class="token constant">CONSUME</span><span class="token punctuation">(</span>Identifer<span class="token punctuation">)</span><span class="token punctuation">;</span>
        $<span class="token punctuation">.</span><span class="token constant">CONSUME</span><span class="token punctuation">(</span>Equals<span class="token punctuation">)</span><span class="token punctuation">;</span>
        $<span class="token punctuation">.</span><span class="token constant">SUBRULE</span><span class="token punctuation">(</span>$<span class="token punctuation">.</span>expression<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token comment">// select age from employee where age = 120</span>
    <span class="token punctuation">{</span>
      <span class="token function-variable function">ALT</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        $<span class="token punctuation">.</span><span class="token constant">CONSUME</span><span class="token punctuation">(</span>Select<span class="token punctuation">)</span><span class="token punctuation">;</span>
        $<span class="token punctuation">.</span><span class="token constant">CONSUME2</span><span class="token punctuation">(</span>Identifer<span class="token punctuation">)</span><span class="token punctuation">;</span>
        $<span class="token punctuation">.</span><span class="token constant">CONSUME</span><span class="token punctuation">(</span>From<span class="token punctuation">)</span><span class="token punctuation">;</span>
        $<span class="token punctuation">.</span><span class="token constant">CONSUME3</span><span class="token punctuation">(</span>Identifer<span class="token punctuation">)</span><span class="token punctuation">;</span>
        $<span class="token punctuation">.</span><span class="token constant">CONSUME</span><span class="token punctuation">(</span>Where<span class="token punctuation">)</span><span class="token punctuation">;</span>
        $<span class="token punctuation">.</span><span class="token constant">SUBRULE</span><span class="token punctuation">(</span>$<span class="token punctuation">.</span>expression<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Some Terminals and Non-Terminals are used in <strong>both</strong> alternatives. It is possible to check for the existence of &quot;distinguishing&quot; terminals such as the &quot;Let&quot; and &quot;Select&quot;. But this is not a robust approach.</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> cstResult <span class="token operator">=</span> parser<span class="token punctuation">.</span><span class="token function">qualifiedName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">if</span> <span class="token punctuation">(</span>cstResult<span class="token punctuation">.</span>children<span class="token punctuation">.</span>Let <span class="token operator">!==</span> <span class="token keyword">undefined</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// Let statement</span>
  <span class="token comment">// do something...</span>
<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>cstResult<span class="token punctuation">.</span>children<span class="token punctuation">.</span>Select <span class="token operator">!==</span> <span class="token keyword">undefined</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// Select statement</span>
  <span class="token comment">// do something else.</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Alternatively it is possible to refactor the grammar in such a way that both alternatives Would be completely wrapped in their own Non-Terminal &quot;sub&quot; rules.</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>$<span class="token punctuation">.</span><span class="token constant">RULE</span><span class="token punctuation">(</span><span class="token string">&quot;statements&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  $<span class="token punctuation">.</span><span class="token constant">OR</span><span class="token punctuation">(</span><span class="token punctuation">[</span>
    <span class="token punctuation">{</span> <span class="token function-variable function">ALT</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> $<span class="token punctuation">.</span><span class="token constant">SUBRULE</span><span class="token punctuation">(</span>$<span class="token punctuation">.</span>letStatement<span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span> <span class="token function-variable function">ALT</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> $<span class="token punctuation">.</span><span class="token constant">SUBRULE</span><span class="token punctuation">(</span>$<span class="token punctuation">.</span>selectStatement<span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>This is the recommended approach in this case as more and more alternations are added the grammar rule will become too difficult to understand and maintain due to verbosity.</p><h2 id="cstnodes-location" tabindex="-1"><a class="header-anchor" href="#cstnodes-location" aria-hidden="true">#</a> CstNodes Location</h2><p>Sometimes the information regarding the textual location (range) of each CstNode is needed. This information is normally <strong>already present</strong> on the CstNodes <strong>nested</strong> children simply because the CstNode&#39;s children include the Tokens provided by the Lexer. However, by default this information is not easily accessible as we would have to fully traverse a CstNode to understands its full location range information.</p>`,19),g=n("strong",null,"disabled by default",-1),f={href:"https://chevrotain.io/documentation/11_0_3/interfaces/IParserConfig.html#nodeLocationTracking",target:"_blank",rel:"noopener noreferrer"},y=e(`<ul><li>&quot;full&quot; (start/end for <strong>all</strong> offset/line/column)</li><li>or &quot;onlyOffset&quot;, (start/end for <strong>only</strong> offsets)</li></ul><p>for example:</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> CstParser <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;chevrotain&quot;</span><span class="token punctuation">;</span>

<span class="token keyword">class</span> <span class="token class-name">SelectParser</span> <span class="token keyword">extends</span> <span class="token class-name">CstParser</span> <span class="token punctuation">{</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
      nodeLocationTracking<span class="token operator">:</span> <span class="token string">&quot;full&quot;</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,3),w={href:"https://chevrotain.io/documentation/11_0_3/interfaces/CstNode.html#location",target:"_blank",rel:"noopener noreferrer"},C=n("p",null,"Caveats",-1),q=n("p",null,[s("In order to track the CstNodes location "),n("strong",null,"every"),s(" Token in the input Token vector must include its own location information.")],-1),S={href:"https://chevrotain.io/documentation/11_0_3/interfaces/ILexerConfig.html#positionTracking",target:"_blank",rel:"noopener noreferrer"},x=n("li",null,[n("p",null,"A CstNode may be empty, for example when the matching grammar rule has not matched any token. In that case the default value for the location properties is NaN.")],-1),_=n("li",null,[n("p",null,[s("This feature has a slight performance and memory cost, this performance impact is "),n("strong",null,"linear"),s(" and was measured at 5-10% for a full lexing + parsing flow. In general the more complex a grammar is (in terms of more CstNodes created per N tokens) the higher the impact. Additionally, if the Parser has activated the error recovery capabilities of Chevrotain the impact would be at the high end of the given range, as the location tracking logic is more complex when some Tokens may be virtual/invalid.")])],-1),T=e(`<h2 id="fault-tolerance" tabindex="-1"><a class="header-anchor" href="#fault-tolerance" aria-hidden="true">#</a> Fault Tolerance</h2><p>CST output is also supported in combination with automatic error recovery. This combination is actually stronger than regular error recovery because even partially formed CstNodes will be present on the CST output and be marked using the <code>recoveredNode</code> boolean property.</p><p>For example given this grammar and assuming the parser re-synced after a token mismatch at the &quot;Where&quot; token:</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>$<span class="token punctuation">.</span><span class="token constant">RULE</span><span class="token punctuation">(</span><span class="token string">&quot;SelectClause&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  $<span class="token punctuation">.</span><span class="token constant">CONSUME</span><span class="token punctuation">(</span>Select<span class="token punctuation">)</span><span class="token punctuation">;</span>
  $<span class="token punctuation">.</span><span class="token constant">CONSUME2</span><span class="token punctuation">(</span>Identifer<span class="token punctuation">)</span><span class="token punctuation">;</span>
  $<span class="token punctuation">.</span><span class="token constant">CONSUME</span><span class="token punctuation">(</span>From<span class="token punctuation">)</span><span class="token punctuation">;</span>
  $<span class="token punctuation">.</span><span class="token constant">CONSUME3</span><span class="token punctuation">(</span>Identifer<span class="token punctuation">)</span><span class="token punctuation">;</span>
  $<span class="token punctuation">.</span><span class="token constant">CONSUME</span><span class="token punctuation">(</span>Where<span class="token punctuation">)</span><span class="token punctuation">;</span>
  $<span class="token punctuation">.</span><span class="token constant">SUBRULE</span><span class="token punctuation">(</span>$<span class="token punctuation">.</span>expression<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// mismatch token due to typo at &quot;wherrrre&quot;, parsing halts and re-syncs to upper rule so</span>
<span class="token comment">// the suffix &quot;wherrrre age &gt; 25&quot; is not parsed.</span>
input <span class="token operator">=</span> <span class="token string">&quot;select age from persons wherrrre age &gt; 25&quot;</span><span class="token punctuation">;</span>

output <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&quot;SelectClause&quot;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">children</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">Select</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;select&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token literal-property property">Identifier</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;age, persons&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token literal-property property">From</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;from&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token comment">// No &quot;Where&quot; key d,ue to the parse error</span>
    <span class="token comment">// No &quot;expression&quot; key due to the parse error</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token comment">// This marks a recovered node.</span>
  <span class="token literal-property property">recoveredNode</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>This accessibility of <strong>partial parsing results</strong> means some post-parsing logic may be able to perform farther analysis. for example: offering auto-fix suggestions or provide better error messages.</p><h2 id="traversing" tabindex="-1"><a class="header-anchor" href="#traversing" aria-hidden="true">#</a> Traversing</h2><p>So, we now know how to create a CST, and it&#39;s internal structure. But how do we traverse this structure and perform semantic actions? Some examples for such semantic actions:</p><ul><li>Creation of an Abstract Syntax Tree (AST) to be later used in the rest of the compilation pipeline.</li><li>Running the input text in an interpreter, for example a Calculator&#39;s grammar and input can be evaluated to a numerical value.</li><li>Extracting specific pieces of information from the input.</li></ul><p>One option would be to &quot;manually&quot; recursively &quot;walk&quot; the output CST structure.</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// Tree Walker</span>
<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">toAst</span><span class="token punctuation">(</span><span class="token parameter">cst</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> children <span class="token operator">=</span> cst<span class="token punctuation">.</span>children<span class="token punctuation">;</span>
  <span class="token keyword">switch</span> <span class="token punctuation">(</span>cst<span class="token punctuation">.</span>name<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">case</span> <span class="token string">&quot;selectStatement&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token keyword">let</span> columnsListCst <span class="token operator">=</span> children<span class="token punctuation">.</span>columnsList<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
      <span class="token keyword">let</span> fromClauseCst <span class="token operator">=</span> children<span class="token punctuation">.</span>fromClause<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

      <span class="token keyword">let</span> columnsListAst <span class="token operator">=</span> <span class="token function">toAst</span><span class="token punctuation">(</span>columnsListCst<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">let</span> fromClauseAst <span class="token operator">=</span> <span class="token function">toAst</span><span class="token punctuation">(</span>fromClauseCst<span class="token punctuation">)</span><span class="token punctuation">;</span>

      <span class="token keyword">return</span> <span class="token punctuation">{</span>
        <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">&quot;SelectStatementAst&quot;</span><span class="token punctuation">,</span>
        <span class="token literal-property property">columns</span><span class="token operator">:</span> columnsListAst<span class="token punctuation">,</span>
        <span class="token literal-property property">from</span><span class="token operator">:</span> fromClauseAst<span class="token punctuation">,</span>
      <span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">case</span> <span class="token string">&quot;columnsList&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token keyword">let</span> columnName <span class="token operator">=</span> children<span class="token punctuation">.</span>identifier<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>image<span class="token punctuation">;</span>
      <span class="token comment">/*...*/</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">case</span> <span class="token string">&quot;fromClause&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token comment">/*...*/</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">default</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span>
        <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">CST case handler not implemented for CST node &lt;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>cst<span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&gt;</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span>
      <span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>This is a valid approach, however it can be somewhat error prone:</p><ul><li>No validation that the case names match the real names of the CST Nodes.</li><li>The validation for missing case handler (default case) depends on attempting to run toAst with invalid input. (Fail slow instead of fail fast...)</li></ul><h2 id="cst-visitor" tabindex="-1"><a class="header-anchor" href="#cst-visitor" aria-hidden="true">#</a> CST Visitor</h2>`,13),N={href:"https://github.com/chevrotain/chevrotain/blob/master/examples/grammars/calculator/calculator_pure_grammar.js",target:"_blank",rel:"noopener noreferrer"},E=e(`<p>Chevrotain provides a CSTVisitor class which can make traversing the CST less error-prone.</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// The base Visitor Class can be accessed via a Parser **instance**.</span>
<span class="token keyword">const</span> BaseCstVisitor <span class="token operator">=</span> myParserInstance<span class="token punctuation">.</span><span class="token function">getBaseCstVisitorConstructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">class</span> <span class="token class-name">SqlToAstVisitor</span> <span class="token keyword">extends</span> <span class="token class-name">BaseCstVisitor</span> <span class="token punctuation">{</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// This helper will detect any missing or redundant methods on this visitor</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">validateVisitor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token function">selectStatement</span><span class="token punctuation">(</span><span class="token parameter">ctx</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// ctx.columnsList is an array, while this.visit accepts a CSTNode</span>
    <span class="token comment">// but if an array is passed to this.visit it will act as though the first element of the array has been passed.</span>
    <span class="token comment">// this means &quot;this.visit(ctx.columnsList)&quot; is equivalent to &quot;this.visit(ctx.columnsList[0])&quot;</span>
    <span class="token keyword">let</span> columnsListAst <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">visit</span><span class="token punctuation">(</span>ctx<span class="token punctuation">.</span>columnsList<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> fromClauseAst <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">visit</span><span class="token punctuation">(</span>ctx<span class="token punctuation">.</span>fromClause<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">return</span> <span class="token punctuation">{</span>
      <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">&quot;SelectStatementAst&quot;</span><span class="token punctuation">,</span>
      <span class="token literal-property property">columns</span><span class="token operator">:</span> columnsListAst<span class="token punctuation">,</span>
      <span class="token literal-property property">from</span><span class="token operator">:</span> fromClauseAst<span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token function">columnsList</span><span class="token punctuation">(</span><span class="token parameter">ctx</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> columnName <span class="token operator">=</span> ctx<span class="token punctuation">.</span>identifier<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>image<span class="token punctuation">;</span>
    <span class="token comment">/*...*/</span>
  <span class="token punctuation">}</span>

  <span class="token comment">// Optional &quot;IN&quot; argument</span>
  <span class="token function">fromClause</span><span class="token punctuation">(</span><span class="token parameter">ctx<span class="token punctuation">,</span> inArg</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">/*...*/</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><p>Each visitor method will be invoked with the respective CSTNode&#39;s children as the first argument (called ctx in the above example).</p></li><li><p>Recursively visiting None-Terminals can be accomplished by using the <strong>this.visit</strong> method. It will invoke the appropriate visit method for the CSTNode argument.</p></li><li><p>The <strong>this.visit</strong> method can also be invoked on an array on CSTNodes in that case It is equivalent to calling it on the first element of the input array.</p></li><li><p>Each visit method can return a value which can be used to combine the traversal results.</p></li><li><p>The <strong>this.validateVisitor()</strong> method can be used to detect missing or redundant visitor methods.</p><ul><li>For example due to a refactoring of the grammar or a typo.</li></ul></li><li><p>Visitor methods support an optional &quot;IN&quot; parameter.</p></li></ul><h3 id="do-we-always-have-to-implement-all-the-visit-methods" tabindex="-1"><a class="header-anchor" href="#do-we-always-have-to-implement-all-the-visit-methods" aria-hidden="true">#</a> Do we always have to implement all the visit methods?</h3><p><strong>No</strong>, sometimes we only need to handle a few specific CST Nodes In that case use <strong>getBaseCstVisitorConstructorWithDefaults()</strong> to get the base visitor constructor. This base visitor includes a default implementation for all visit methods which simply invokes <strong>this.visit</strong> on all none terminals in the CSTNode&#39;s children.</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// The base Visitor Class can be accessed via a Parser **instance**.</span>
<span class="token keyword">const</span> BaseCstVisitorWithDefaults <span class="token operator">=</span>
  myParserInstance<span class="token punctuation">.</span><span class="token function">getBaseCstVisitorConstructorWithDefaults</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">class</span> <span class="token class-name">SqlColumnNamesVisitor</span> <span class="token keyword">extends</span> <span class="token class-name">BaseCstVisitorWithDefaults</span> <span class="token punctuation">{</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>result <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">validateVisitor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token function">fromClause</span><span class="token punctuation">(</span><span class="token parameter">ctx</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// collect only the names of the columns</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>result<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>ctx<span class="token punctuation">.</span>Identifier<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>image<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token comment">// All other visit methods will be &quot;filled&quot; automatically with the default implementation.</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Note that when using a visitor with default visit implementations It is not possible to return values from the visit methods because the default implementation does not return any value, only traverses the CST thus the chain of returned values will be broken.</p><h2 id="cst-typescript-signatures" tabindex="-1"><a class="header-anchor" href="#cst-typescript-signatures" aria-hidden="true">#</a> CST TypeScript Signatures</h2><p>In the sections above we have seen that implementing a Chevrotain <code>CstParser</code> would also <strong>implicitly</strong> define several data structures and APIs:</p><ol><li>A CSTNode for each grammar rule.</li><li>A CST-Visitor API for the whole set of rules</li></ol><p>But what if we want <strong>explicit</strong> definitions for these data structures and APIs?</p><ul><li>For example to easily implement our CST Visitors in TypeScript instead of over-using the <code>any</code> type...</li></ul>`,12),I={href:"https://chevrotain.io/documentation/11_0_3/modules.html#generateCstDts",target:"_blank",rel:"noopener noreferrer"},L=n("code",null,"Rules",-1),A=n("strong",null,"source text",-1),U=e(`<p>For example, given the Parser rules for <strong>arrays</strong> in JSON.</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">class</span> <span class="token class-name">JSONParser</span> <span class="token keyword">extends</span> <span class="token class-name">CstParser</span> <span class="token punctuation">{</span>
  <span class="token keyword">private</span> array <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token constant">RULE</span><span class="token punctuation">(</span><span class="token string">&quot;array&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token constant">CONSUME</span><span class="token punctuation">(</span>LSquare<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token constant">MANY_SEP</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
      <span class="token constant">SEP</span><span class="token operator">:</span> Comma<span class="token punctuation">,</span>
      <span class="token function-variable function">DEF</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token constant">SUBRULE</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token constant">CONSUME</span><span class="token punctuation">(</span>RSquare<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>It would produce the following signatures:</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">export</span> <span class="token keyword">interface</span> <span class="token class-name">ArrayCstNode</span> <span class="token keyword">extends</span> <span class="token class-name">CstNode</span> <span class="token punctuation">{</span>
  name<span class="token operator">:</span> <span class="token string">&quot;array&quot;</span><span class="token punctuation">;</span>
  children<span class="token operator">:</span> ArrayCstChildren<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">export</span> <span class="token keyword">type</span> <span class="token class-name">ArrayCstChildren</span> <span class="token operator">=</span> <span class="token punctuation">{</span>
  LSquare<span class="token operator">:</span> IToken<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  value<span class="token operator">?</span><span class="token operator">:</span> ValueCstNode<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  Comma<span class="token operator">?</span><span class="token operator">:</span> IToken<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  RSquare<span class="token operator">:</span> IToken<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,4),$={href:"https://chevrotain.io/documentation/11_0_3/modules.html#generateCstDts",target:"_blank",rel:"noopener noreferrer"},j=n("strong",null,"source text",-1),O={href:"https://github.com/Chevrotain/chevrotain/tree/master/examples/implementation_languages/typescript/scripts/gen_dts_signatures.js",target:"_blank",rel:"noopener noreferrer"},P=n("h2",{id:"performance",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#performance","aria-hidden":"true"},"#"),s(" Performance")],-1),V=n("p",null,"On V8 (Chrome/Node) building the CST was measured at anywhere from 35%-90% of the performance versus a pure grammar's runtime (no output) depending on the grammar used. Particularly on its level of rules nesting.",-1),R=n("p",null,"This may be substantial yet please consider:",-1),M={href:"https://chevrotain.io/performance/",target:"_blank",rel:"noopener noreferrer"},B=n("li",null,[n("p",null,"This comparison is not fair as a pure grammar that has no output also has very little use... The right comparison would be to versus embedding actions that built some alternative CST/AST output structure.")],-1),D=n("li",null,[n("p",null,"Parsing is usually just one step in a larger flow, so the overall impact even in the slower edge cases would be reduced.")],-1),F=n("p",null,"It is therefore recommended using the CST creation capabilities as its benefits (modularity / ease of maintenance) by far outweigh the costs (potentially reduced performance). except in unique edge cases.",-1);function W(H,J){const a=o("ExternalLinkIcon");return i(),c("div",null,[u,n("p",null,[s("This feature is enabled when a parser extends the "),n("a",r,[s("CstParser class"),t(a)]),s(".")]),d,n("ul",null,[n("li",null,[n("p",null,[s("See the full "),n("a",k,[s("CstNode type signature"),t(a)])])]),n("li",null,[n("p",null,[s("Explore it by running the CST creation example in the "),n("a",v,[m,t(a)]),s(".")])]),h]),b,n("p",null,[s("The feature for providing CstNode location directly on the CstNodes objects is available since version 4.7.0. Tracking the CstNodes location is "),g,s(" and can be enabled by setting the IParserConfig "),n("a",f,[s("nodeLocationTracking"),t(a)]),s(" to:")]),y,n("p",null,[s("Once this feature is enabled the optional "),n("a",w,[s("location property"),t(a)]),s(" on each CstNode would be populated with the relevant information.")]),C,n("ul",null,[n("li",null,[q,n("ul",null,[n("li",null,[s("This is enabled by default in the Chevrotain Lexer, See "),n("a",S,[s("ILexerConfig.positionTracking"),t(a)]),s(". However, if a third party Lexer is used in conjunction with a Chevrotain Parser, the Tokens produced by such a lexer must include the relevant location properties to allow the chevrotain parser to compute the CstNode locations.")])])]),x,_]),T,n("p",null,[s("For the impatient, See a full runnable example: "),n("a",N,[s("Calculator Grammar with CSTVisitor interpreter"),t(a)])]),E,n("p",null,[s("This capability is provided via the "),n("a",I,[s("generateCstDts"),t(a)]),s(" function. Which given a set of grammar "),L,s(" will generate the "),A,s(" for the corresponding TypeScript signatures.")]),U,n("p",null,[s("Note that the "),n("a",$,[s("generateCstDts"),t(a)]),s(" function only produces the "),j,s(" of the TypeScript signatures, and it is the end-user's responsibility to save the contents to a file, see: minimal "),n("a",O,[s("generation script example"),t(a)]),s(".")]),P,V,R,n("ul",null,[n("li",null,[n("p",null,[s("Chevrotain is already "),n("a",M,[s("very fast"),t(a)]),s(' So at worst at will degrade to just "fast"...')])]),B,D]),F])}const Y=p(l,[["render",W],["__file","concrete_syntax_tree.html.vue"]]);export{Y as default};
