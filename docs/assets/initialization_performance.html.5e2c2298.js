import{_ as o,o as i,c as p,a as n,b as e,e as s,d as t,r as c}from"./app.5d78e917.js";const l={},r=n("h1",{id:"initialization-performance",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#initialization-performance","aria-hidden":"true"},"#"),s(" Initialization Performance")],-1),u=n("p",null,"Chevrotain is (mostly) a runtime tool (No code generation). This means there is a fair bit of logic happening every time a Chevrotain Parser or Lexer are initialized. In some use cases this overhead may need to be reduced as much as possible.",-1),d=n("h2",{id:"enabling-initialization-performance-tracing",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#enabling-initialization-performance-tracing","aria-hidden":"true"},"#"),s(" Enabling Initialization Performance Tracing")],-1),k=s("Measuring a Parser's initialization performance can be done by enabling the "),v={href:"https://chevrotain.io/documentation/10_3_0/interfaces/IParserConfig.html#traceInitPerf",target:"_blank",rel:"noopener noreferrer"},m=n("code",null,"IParserConfig.traceInitPerf",-1),h=s(" flag. For example:"),b=t(`<div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">class</span> <span class="token class-name">InitTracingParser</span> <span class="token keyword">extends</span> <span class="token class-name">CstParser</span> <span class="token punctuation">{</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
      <span class="token comment">// Note \`traceInitPerf\` may also accept numerical values</span>
      <span class="token literal-property property">traceInitPerf</span><span class="token operator">:</span> <span class="token boolean">true</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>

    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">performSelfAnalysis</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">new</span> <span class="token class-name">InitTracingParser</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// Will print tracing info to the console.</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),_=s("A Lexer's initialization performance can similarly be measured by enabling the "),g={href:"https://chevrotain.io/documentation/10_3_0/interfaces/ILexerConfig.html#traceInitPerf",target:"_blank",rel:"noopener noreferrer"},f=n("code",null,"ILexerConfig.traceInitPerf",-1),y=s(" flag:"),x=t(`<div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// Will print tracing info to the console.</span>
<span class="token keyword">new</span> <span class="token class-name">Lexer</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
  <span class="token comment">// Note \`traceInitPerf\` may also accept numerical values</span>
  <span class="token literal-property property">traceInitPerf</span><span class="token operator">:</span> <span class="token boolean">true</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="use-a-smaller-global-maxlookahead" tabindex="-1"><a class="header-anchor" href="#use-a-smaller-global-maxlookahead" aria-hidden="true">#</a> Use a smaller Global maxLookahead</h2><p>Chevrotain is a K tokens lookahead Parser, this means it peeks ahead (at most) K Tokens to determine the alternative to pick whenever it encounters a &quot;branching&quot; in the grammar.</p>`,3),w=s("During initialization Chevrotain pre-computes and caches lookahead functions that would later be used at runtime. The global "),P={href:"https://chevrotain.io/documentation/10_3_0/interfaces/IParserConfig.html#maxLookAhead",target:"_blank",rel:"noopener noreferrer"},L=s("maxLookahead"),C=s(' setting can significantly affect the performance of this pre-computation due to the fact the number of possible "paths" in the grammar can grow '),I=n("strong",null,"exponentially",-1),A=s(" as the max length of the possible paths increases."),j=t(`<p>Example:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">class</span> <span class="token class-name">LowLookaheadParser</span> <span class="token keyword">extends</span> <span class="token class-name">CstParser</span> <span class="token punctuation">{</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
      <span class="token comment">// By default this value is 3</span>
      <span class="token literal-property property">maxLookahead</span><span class="token operator">:</span> <span class="token number">2</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>

    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">performSelfAnalysis</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Note that the global maxLookahead can be overridden for <strong>individual</strong> DSL methods(OR/OPTION/MANY/...) invocations, For example:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">class</span> <span class="token class-name">LowLookaheadParser</span> <span class="token keyword">extends</span> <span class="token class-name">CstParser</span> <span class="token punctuation">{</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
      <span class="token comment">// Globally **only one** token lookahead.</span>
      <span class="token literal-property property">maxLookahead</span><span class="token operator">:</span> <span class="token number">1</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>

    $<span class="token punctuation">.</span><span class="token constant">RULE</span><span class="token punctuation">(</span><span class="token string">&quot;value&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      $<span class="token punctuation">.</span><span class="token constant">OR</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
        <span class="token comment">// We need **two** tokens lookahead to distinguish between these two alternatives</span>
        <span class="token constant">MAX_LOOKAHEAD</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>
        <span class="token constant">DEF</span><span class="token operator">:</span> <span class="token punctuation">[</span>
          <span class="token punctuation">{</span>
            <span class="token function-variable function">ALT</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
              $<span class="token punctuation">.</span><span class="token constant">CONSUME</span><span class="token punctuation">(</span><span class="token constant">A</span><span class="token punctuation">)</span>
              $<span class="token punctuation">.</span><span class="token constant">CONSUME</span><span class="token punctuation">(</span><span class="token constant">B</span><span class="token punctuation">)</span>
            <span class="token punctuation">}</span>
          <span class="token punctuation">}</span><span class="token punctuation">,</span>
          <span class="token punctuation">{</span>
            <span class="token function-variable function">ALT</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
              $<span class="token punctuation">.</span><span class="token constant">CONSUME</span><span class="token punctuation">(</span><span class="token constant">A</span><span class="token punctuation">)</span>
              $<span class="token punctuation">.</span><span class="token constant">CONSUME</span><span class="token punctuation">(</span><span class="token constant">C</span><span class="token punctuation">)</span>
            <span class="token punctuation">}</span>
          <span class="token punctuation">}</span>
        <span class="token punctuation">]</span>
      <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>

    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">performSelfAnalysis</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="disabling-grammar-validations" tabindex="-1"><a class="header-anchor" href="#disabling-grammar-validations" aria-hidden="true">#</a> Disabling Grammar Validations</h2><p>Chevrotain performs many validations during Lexer &amp; Parser initialization, however those are not really relevant when the Lexer &amp; Parser are known to be valid, These validations are a <strong>development time</strong> tool, and not really needed during productive flows.</p>`,6),N=s("The "),T={href:"https://chevrotain.io/documentation/10_3_0/interfaces/IParserConfig.html#skipValidations",target:"_blank",rel:"noopener noreferrer"},z=s("IParserConfig.skipValidations"),E=s(" config property can be used to avoid running these validations during "),S=n("strong",null,"Parser",-1),V=s(" initialization."),O=t(`<div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">class</span> <span class="token class-name">NaiveSkippedValidationsParser</span> <span class="token keyword">extends</span> <span class="token class-name">CstParser</span> <span class="token punctuation">{</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
      <span class="token comment">// This could reduce 30-50% of the initialization time</span>
      <span class="token literal-property property">skipValidations</span><span class="token operator">:</span> <span class="token boolean">true</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>

    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">performSelfAnalysis</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),M=s("Similarly the "),q={href:"https://chevrotain.io/documentation/10_3_0/interfaces/ILexerConfig.html#skipValidations",target:"_blank",rel:"noopener noreferrer"},G=s("ILexerConfig.skipValidations"),D=s(" config property can be used to skip the optional validations during "),U=n("strong",null,"Lexer",-1),$=s(" initialization."),B=t(`<div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">new</span> <span class="token class-name">Lexer</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">skipValidations</span><span class="token operator">:</span> <span class="token boolean">true</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>The examples above are a little naive, as the validations are <strong>always</strong> skipped, while we only need to skip them under specific conditions, for example:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">class</span> <span class="token class-name">MoreRealisticSkippedValidationsParser</span> <span class="token keyword">extends</span> <span class="token class-name">CstParser</span> <span class="token punctuation">{</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
      <span class="token comment">// only run the validations when a certain env variable is set.</span>
      <span class="token literal-property property">skipValidations</span><span class="token operator">:</span> process<span class="token punctuation">.</span>env<span class="token punctuation">[</span><span class="token string">&quot;IN_MY_PACKAGE_LOCAL_TESTING&quot;</span><span class="token punctuation">]</span> <span class="token operator">!==</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
      <span class="token comment">// Always Trace init logs when in local testing to hopefully spot regressions.</span>
      <span class="token literal-property property">traceInitPerf</span><span class="token operator">:</span> process<span class="token punctuation">.</span>env<span class="token punctuation">[</span><span class="token string">&quot;IN_MY_PACKAGE_LOCAL_TESTING&quot;</span><span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token boolean">true</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>

    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">performSelfAnalysis</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Note that in a real world scenario the special condition to enable validations/tracing could be anything:</p><ul><li>env variable.</li><li>command line argument.</li><li>existence of a certain config file in the CWD.</li><li>...</li></ul>`,5);function K(R,W){const a=c("ExternalLinkIcon");return i(),p("div",null,[r,u,d,n("p",null,[k,n("a",v,[m,e(a)]),h]),b,n("p",null,[_,n("a",g,[f,e(a)]),y]),x,n("p",null,[w,n("a",P,[L,e(a)]),C,I,A]),j,n("p",null,[N,n("a",T,[z,e(a)]),E,S,V]),O,n("p",null,[M,n("a",q,[G,e(a)]),D,U,$]),B])}var Y=o(l,[["render",K],["__file","initialization_performance.html.vue"]]);export{Y as default};
