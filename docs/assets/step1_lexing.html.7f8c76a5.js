import{_ as l,o as i,c,a as n,b as e,w as p,e as s,d as t,r}from"./app.5d78e917.js";const u={},d=n("h1",{id:"lexer",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#lexer","aria-hidden":"true"},"#"),s(" Lexer")],-1),k=n("h3",{id:"tldr",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#tldr","aria-hidden":"true"},"#"),s(" TLDR")],-1),h={href:"https://github.com/chevrotain/chevrotain/tree/master/examples/tutorial/step1_lexing",target:"_blank",rel:"noopener noreferrer"},m=s("Run and Debug the source code"),g=s("."),v=t(`<h2 id="introduction" tabindex="-1"><a class="header-anchor" href="#introduction" aria-hidden="true">#</a> Introduction</h2><p>In this tutorial we will implement a Lexer for a simple SQL Select statement language:</p><div class="language-sql ext-sql line-numbers-mode"><pre class="language-sql"><code><span class="token keyword">SELECT</span> column1 <span class="token keyword">FROM</span> table2
<span class="token keyword">SELECT</span> name<span class="token punctuation">,</span> age <span class="token keyword">FROM</span> persons <span class="token keyword">WHERE</span> age <span class="token operator">&gt;</span> <span class="token number">100</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,3),x=s("A Lexer transforms a string input into a "),_={href:"https://chevrotain.io/documentation/10_3_0/interfaces/IToken.html",target:"_blank",rel:"noopener noreferrer"},b=s("Token"),y=s(" vector. Chevrotain has a built in Lexer engine based on Javascript Regular Expressions."),f=t(`<h2 id="our-first-token" tabindex="-1"><a class="header-anchor" href="#our-first-token" aria-hidden="true">#</a> Our First Token</h2><p>To use the Chevrotain lexer the Tokens must first be defined. Lets examine the definition for a &quot;FROM&quot; Token:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> createToken <span class="token operator">=</span> chevrotain<span class="token punctuation">.</span>createToken
<span class="token comment">// using createToken API</span>
<span class="token keyword">const</span> From <span class="token operator">=</span> <span class="token function">createToken</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&quot;From&quot;</span><span class="token punctuation">,</span> <span class="token literal-property property">pattern</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">FROM</span><span class="token regex-delimiter">/</span></span> <span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,3),T=s("There is nothing much to it. We simply use the "),w={href:"https://chevrotain.io/documentation/10_3_0/modules.html#createToken",target:"_blank",rel:"noopener noreferrer"},q=n("strong",null,"createToken",-1),L=s(" API"),I=s(" to define the tokens, and provide it with a "),S=n("code",null,"name",-1),j=s(" property and a "),E=n("code",null,"pattern",-1),R=s(" property which is a RegExp which will be used when splitting up the input string into separate Tokens."),W=t(`<h2 id="more-complex-tokens" tabindex="-1"><a class="header-anchor" href="#more-complex-tokens" aria-hidden="true">#</a> More complex Tokens</h2><p>How can we define Tokens for Identifiers or Integers?</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> Identifier <span class="token operator">=</span> <span class="token function">createToken</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&quot;Identifier&quot;</span><span class="token punctuation">,</span> <span class="token literal-property property">pattern</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">[a-zA-Z]\\w*</span><span class="token regex-delimiter">/</span></span> <span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token keyword">const</span> Integer <span class="token operator">=</span> <span class="token function">createToken</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&quot;Integer&quot;</span><span class="token punctuation">,</span> <span class="token literal-property property">pattern</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">0|[1-9]\\d*</span><span class="token regex-delimiter">/</span></span> <span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="skipping-tokens" tabindex="-1"><a class="header-anchor" href="#skipping-tokens" aria-hidden="true">#</a> Skipping Tokens</h2><p>The obvious use case in this language (and many others) is <strong>whitespace</strong>. skipping certain Tokens is easily accomplished by marking them with the SKIP group.</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> WhiteSpace <span class="token operator">=</span> <span class="token function">createToken</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&quot;WhiteSpace&quot;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">pattern</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\s+</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>
  <span class="token literal-property property">group</span><span class="token operator">:</span> chevrotain<span class="token punctuation">.</span>Lexer<span class="token punctuation">.</span><span class="token constant">SKIPPED</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="all-our-tokens" tabindex="-1"><a class="header-anchor" href="#all-our-tokens" aria-hidden="true">#</a> All Our Tokens</h2><p>Lets examine all the needed Tokens definitions&quot;</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> Identifier <span class="token operator">=</span> <span class="token function">createToken</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&quot;Identifier&quot;</span><span class="token punctuation">,</span> <span class="token literal-property property">pattern</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">[a-zA-Z]\\w*</span><span class="token regex-delimiter">/</span></span> <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token comment">// We specify the &quot;longer_alt&quot; property to resolve keywords vs identifiers ambiguity.</span>
<span class="token comment">// See: https://github.com/chevrotain/chevrotain/blob/master/examples/lexer/keywords_vs_identifiers/keywords_vs_identifiers.js</span>
<span class="token keyword">const</span> Select <span class="token operator">=</span> <span class="token function">createToken</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&quot;Select&quot;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">pattern</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">SELECT</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>
  <span class="token literal-property property">longer_alt</span><span class="token operator">:</span> Identifier
<span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> From <span class="token operator">=</span> <span class="token function">createToken</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&quot;From&quot;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">pattern</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">FROM</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>
  <span class="token literal-property property">longer_alt</span><span class="token operator">:</span> Identifier
<span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> Where <span class="token operator">=</span> <span class="token function">createToken</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&quot;Where&quot;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">pattern</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">WHERE</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>
  <span class="token literal-property property">longer_alt</span><span class="token operator">:</span> Identifier
<span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token keyword">const</span> Comma <span class="token operator">=</span> <span class="token function">createToken</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&quot;Comma&quot;</span><span class="token punctuation">,</span> <span class="token literal-property property">pattern</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">,</span><span class="token regex-delimiter">/</span></span> <span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token keyword">const</span> Integer <span class="token operator">=</span> <span class="token function">createToken</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&quot;Integer&quot;</span><span class="token punctuation">,</span> <span class="token literal-property property">pattern</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">0|[1-9]\\d*</span><span class="token regex-delimiter">/</span></span> <span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token keyword">const</span> GreaterThan <span class="token operator">=</span> <span class="token function">createToken</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&quot;GreaterThan&quot;</span><span class="token punctuation">,</span> <span class="token literal-property property">pattern</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">&gt;</span><span class="token regex-delimiter">/</span></span> <span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token keyword">const</span> LessThan <span class="token operator">=</span> <span class="token function">createToken</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&quot;LessThan&quot;</span><span class="token punctuation">,</span> <span class="token literal-property property">pattern</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">&lt;</span><span class="token regex-delimiter">/</span></span> <span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token keyword">const</span> WhiteSpace <span class="token operator">=</span> <span class="token function">createToken</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&quot;WhiteSpace&quot;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">pattern</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\s+</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>
  <span class="token literal-property property">group</span><span class="token operator">:</span> chevrotain<span class="token punctuation">.</span>Lexer<span class="token punctuation">.</span><span class="token constant">SKIPPED</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="creating-the-lexer" tabindex="-1"><a class="header-anchor" href="#creating-the-lexer" aria-hidden="true">#</a> Creating The Lexer</h2><p>We now have Token definitions, but how do we create a Lexer from these?</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// note we are placing WhiteSpace first as it is very common thus it will speed up the lexer.</span>
<span class="token keyword">let</span> allTokens <span class="token operator">=</span> <span class="token punctuation">[</span>
  WhiteSpace<span class="token punctuation">,</span>
  <span class="token comment">// &quot;keywords&quot; appear before the Identifier</span>
  Select<span class="token punctuation">,</span>
  From<span class="token punctuation">,</span>
  Where<span class="token punctuation">,</span>
  Comma<span class="token punctuation">,</span>
  <span class="token comment">// The Identifier must appear after the keywords because all keywords are valid identifiers.</span>
  Identifier<span class="token punctuation">,</span>
  Integer<span class="token punctuation">,</span>
  GreaterThan<span class="token punctuation">,</span>
  LessThan
<span class="token punctuation">]</span>
<span class="token keyword">let</span> SelectLexer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Lexer</span><span class="token punctuation">(</span>allTokens<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Note that:</p>`,13),C=n("p",null,[s("The "),n("strong",null,"order"),s(" of Token definitions passed to the Lexer is "),n("strong",null,"important"),s(". The first PATTERN to match will be chosen not the longest.")],-1),F=s("See how to resolve "),A={href:"https://github.com/chevrotain/chevrotain/blob/master/examples/lexer/keywords_vs_identifiers/keywords_vs_identifiers.js",target:"_blank",rel:"noopener noreferrer"},P=s("Keywords vs Identifiers"),M=s("."),O=n("li",null,[n("p",null,[s("The lexer's "),n("code",null,"Tokenize"),s(" method is a "),n("strong",null,"pure function"),s(", thus only a "),n("strong",null,"single Lexer"),s(" (per grammar) is needed.")])],-1),N=n("p",null,[s("The lexer is "),n("strong",null,"context unaware"),s(", it lexes each token (pattern) individually.")],-1),V=s("If you need to distinguish between different contexts during the lexing phase, take a look at "),z=s("Lexer Modes"),D=s("."),K=s("For more patterns requiring more complex constraints than a regular expression, take a look at "),B=s("Custom Token Patterns"),G=s("."),H=t(`<h2 id="using-the-lexer" tabindex="-1"><a class="header-anchor" href="#using-the-lexer" aria-hidden="true">#</a> Using The Lexer</h2><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">let</span> inputText <span class="token operator">=</span> <span class="token string">&quot;SELECT column1 FROM table2&quot;</span>
<span class="token keyword">let</span> lexingResult <span class="token operator">=</span> SelectLexer<span class="token punctuation">.</span><span class="token function">tokenize</span><span class="token punctuation">(</span>inputText<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>The Lexing Result will contain:</p>`,3),Z=n("li",null,"A Token Vector.",-1),J=n("li",null,"the lexing errors (if any were encountered)",-1),Q=s("And other "),U={href:"https://github.com/chevrotain/chevrotain/blob/master/examples/lexer/token_groups/token_groups.js",target:"_blank",rel:"noopener noreferrer"},X=s("Token groups"),Y=s(" (if grouping was used)");function $(nn,sn){const a=r("ExternalLinkIcon"),o=r("RouterLink");return i(),c("div",null,[d,k,n("p",null,[n("a",h,[m,e(a)]),g]),v,n("p",null,[x,n("a",_,[b,e(a)]),y]),f,n("p",null,[T,n("a",w,[q,L,e(a)]),I,S,j,E,R]),W,n("ul",null,[n("li",null,[C,n("ul",null,[n("li",null,[F,n("a",A,[P,e(a)]),M])])]),O,n("li",null,[N,n("ul",null,[n("li",null,[V,e(o,{to:"/features/lexer_modes.html"},{default:p(()=>[z]),_:1}),D])])]),n("li",null,[n("p",null,[K,e(o,{to:"/features/custom_token_patterns.html"},{default:p(()=>[B]),_:1}),G])])]),H,n("ol",null,[Z,J,n("li",null,[Q,n("a",U,[X,e(a)]),Y])])])}var an=l(u,[["render",$],["__file","step1_lexing.html.vue"]]);export{an as default};
