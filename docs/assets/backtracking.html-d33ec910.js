import{_ as e,r as o,o as i,c,a,b as n,d as t,e as p}from"./app-2fd97b94.js";const l={},u=a("h1",{id:"backtracking",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#backtracking","aria-hidden":"true"},"#"),n(" Backtracking")],-1),r=a("p",null,[n("Chevrotain supports backtracking to resolve ambiguities. Backtracking means "),a("strong",null,"fully"),n(" trying an alternative instead of using a fixed token lookahead, this is similar to a DFS versus a BFS.")],-1),d=a("p",null,[n("Backtracking is not automatic and must be "),a("strong",null,"explicitly"),n(" invoked. This is because it is inefficient and is mutually exclusive with error recovery. It is strongly recommended to avoid using backtracking if possible.")],-1),k={href:"https://chevrotain.io/docs/features/gates.html",target:"_blank",rel:"noopener noreferrer"},v=p(`<p>For example, given the following grammar which is not LL(K), as both the alternatives in &quot;statement&quot; have a potentially infinitely long common prefix.</p><div class="language-antlr line-numbers-mode" data-ext="antlr"><pre class="language-antlr"><code>statement:
   longRule1 |
   longRule2 |

longRule1:
   A+ B

longRule2:
   A+ C
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>We can resolve the ambiguity by using backtracking, effectively fully trying out the alternatives (in order) instead of trying to choose one using a limited token lookahead.</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>$<span class="token punctuation">.</span><span class="token constant">RULE</span><span class="token punctuation">(</span><span class="token string">&quot;statement&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  $<span class="token punctuation">.</span><span class="token constant">OR</span><span class="token punctuation">(</span><span class="token punctuation">[</span>
    <span class="token punctuation">{</span>
      <span class="token constant">GATE</span><span class="token operator">:</span> $<span class="token punctuation">.</span><span class="token constant">BACKTRACK</span><span class="token punctuation">(</span>$<span class="token punctuation">.</span>longRule1<span class="token punctuation">)</span><span class="token punctuation">,</span>
      <span class="token function-variable function">ALT</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> $<span class="token punctuation">.</span><span class="token constant">SUBRULE</span><span class="token punctuation">(</span>$<span class="token punctuation">.</span>longRule1<span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span>
      <span class="token constant">GATE</span><span class="token operator">:</span> $<span class="token punctuation">.</span><span class="token constant">BACKTRACK</span><span class="token punctuation">(</span>$<span class="token punctuation">.</span>longRule2<span class="token punctuation">)</span><span class="token punctuation">,</span>
      <span class="token function-variable function">ALT</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> $<span class="token punctuation">.</span><span class="token constant">SUBRULE</span><span class="token punctuation">(</span>$<span class="token punctuation">.</span>longRule2<span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,4),m={href:"https://github.com/chevrotain/chevrotain/tree/master/examples/parser/backtracking",target:"_blank",rel:"noopener noreferrer"};function g(b,h){const s=o("ExternalLinkIcon");return i(),c("div",null,[u,r,d,a("p",null,[n("Backtracking is implemented by using "),a("a",k,[n("Gates"),t(s)])]),v,a("p",null,[n("See "),a("a",m,[n("executable example"),t(s)]),n(" for further details.")])])}const _=e(l,[["render",g],["__file","backtracking.html.vue"]]);export{_ as default};
