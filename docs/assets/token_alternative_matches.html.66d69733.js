import{_ as s,r as t,o,c as r,a as n,b as p,d as i,e}from"./app.9a2b1ea3.js";const l={},c=i(`<h1 id="token-alternative-matches" tabindex="-1"><a class="header-anchor" href="#token-alternative-matches" aria-hidden="true">#</a> Token Alternative Matches</h1><p>Chevrotain supports attempting a secondary <strong>longer</strong> match after a token has (already) been matched. This capability is most often used to disambiguate the keywords vs identifiers ambiguity.</p><p>For example:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> createToken <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;chevrotain&quot;</span>

<span class="token keyword">const</span> Identifier <span class="token operator">=</span> <span class="token function">createToken</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&quot;Identifier&quot;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">pattern</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">[a-zA-Z][\\w+]</span><span class="token regex-delimiter">/</span></span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token keyword">const</span> ClassKeyword <span class="token operator">=</span> <span class="token function">createToken</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&quot;ClassKeyword&quot;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">pattern</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">class</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>
  <span class="token literal-property property">longer_alt</span><span class="token operator">:</span> Identifier
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Note that the <code>longer_alt</code> capability <strong>cannot be chained</strong>, only a single longer_alt will be checked for a specific Token. A token may define multiple longer alternatives using an array. As per usual with the lexer, the first matching token in the array will be chosen for lexing.</p>`,5),d=e("See "),u={href:"https://github.com/chevrotain/chevrotain/tree/master/examples/lexer/keywords_vs_identifiers",target:"_blank",rel:"noopener noreferrer"},k=e("executable example"),m=e(" for further details.");function v(h,g){const a=t("ExternalLinkIcon");return o(),r("div",null,[c,n("p",null,[d,n("a",u,[k,p(a)]),m])])}var b=s(l,[["render",v],["__file","token_alternative_matches.html.vue"]]);export{b as default};
