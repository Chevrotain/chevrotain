/*! chevrotain - v4.2.0 */
/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 41);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/*
 Utils using lodash style API. (not necessarily 100% compliant) for functional and other utils.
 These utils should replace usage of lodash in the production code base. not because they are any better...
 but for the purpose of being a dependency free library.

 The hotspots in the code are already written in imperative style for performance reasons.
 so writing several dozen utils which may be slower than the original lodash, does not matter as much
 considering they will not be invoked in hotspots...
 */
Object.defineProperty(exports, "__esModule", { value: true });
function isEmpty(arr) {
    return arr && arr.length === 0;
}
exports.isEmpty = isEmpty;
function keys(obj) {
    if (obj === undefined || obj === null) {
        return [];
    }
    return Object.keys(obj);
}
exports.keys = keys;
function values(obj) {
    var vals = [];
    var keys = Object.keys(obj);
    for (var i = 0; i < keys.length; i++) {
        vals.push(obj[keys[i]]);
    }
    return vals;
}
exports.values = values;
function mapValues(obj, callback) {
    var result = [];
    var objKeys = keys(obj);
    for (var idx = 0; idx < objKeys.length; idx++) {
        var currKey = objKeys[idx];
        result.push(callback.call(null, obj[currKey], currKey));
    }
    return result;
}
exports.mapValues = mapValues;
function map(arr, callback) {
    var result = [];
    for (var idx = 0; idx < arr.length; idx++) {
        result.push(callback.call(null, arr[idx], idx));
    }
    return result;
}
exports.map = map;
function flatten(arr) {
    var result = [];
    for (var idx = 0; idx < arr.length; idx++) {
        var currItem = arr[idx];
        if (Array.isArray(currItem)) {
            result = result.concat(flatten(currItem));
        }
        else {
            result.push(currItem);
        }
    }
    return result;
}
exports.flatten = flatten;
function first(arr) {
    return isEmpty(arr) ? undefined : arr[0];
}
exports.first = first;
function last(arr) {
    var len = arr && arr.length;
    return len ? arr[len - 1] : undefined;
}
exports.last = last;
function forEach(collection, iteratorCallback) {
    /* istanbul ignore else */
    if (Array.isArray(collection)) {
        for (var i = 0; i < collection.length; i++) {
            iteratorCallback.call(null, collection[i], i);
        }
    }
    else if (isObject(collection)) {
        var colKeys = keys(collection);
        for (var i = 0; i < colKeys.length; i++) {
            var key = colKeys[i];
            var value = collection[key];
            iteratorCallback.call(null, value, key);
        }
    }
    else {
        throw Error("non exhaustive match");
    }
}
exports.forEach = forEach;
function isString(item) {
    return typeof item === "string";
}
exports.isString = isString;
function isUndefined(item) {
    return item === undefined;
}
exports.isUndefined = isUndefined;
function isFunction(item) {
    return item instanceof Function;
}
exports.isFunction = isFunction;
function drop(arr, howMuch) {
    if (howMuch === void 0) { howMuch = 1; }
    return arr.slice(howMuch, arr.length);
}
exports.drop = drop;
function dropRight(arr, howMuch) {
    if (howMuch === void 0) { howMuch = 1; }
    return arr.slice(0, arr.length - howMuch);
}
exports.dropRight = dropRight;
function filter(arr, predicate) {
    var result = [];
    if (Array.isArray(arr)) {
        for (var i = 0; i < arr.length; i++) {
            var item = arr[i];
            if (predicate.call(null, item)) {
                result.push(item);
            }
        }
    }
    return result;
}
exports.filter = filter;
function reject(arr, predicate) {
    return filter(arr, function (item) { return !predicate(item); });
}
exports.reject = reject;
function pick(obj, predicate) {
    var keys = Object.keys(obj);
    var result = {};
    for (var i = 0; i < keys.length; i++) {
        var currKey = keys[i];
        var currItem = obj[currKey];
        if (predicate(currItem)) {
            result[currKey] = currItem;
        }
    }
    return result;
}
exports.pick = pick;
function has(obj, prop) {
    if (isObject(obj)) {
        return obj.hasOwnProperty(prop);
    }
    return false;
}
exports.has = has;
function contains(arr, item) {
    return find(arr, function (currItem) { return currItem === item; }) !== undefined ? true : false;
}
exports.contains = contains;
/**
 * shallow clone
 */
function cloneArr(arr) {
    var newArr = [];
    for (var i = 0; i < arr.length; i++) {
        newArr.push(arr[i]);
    }
    return newArr;
}
exports.cloneArr = cloneArr;
/**
 * shallow clone
 */
function cloneObj(obj) {
    var clonedObj = {};
    for (var key in obj) {
        /* istanbul ignore else */
        if (Object.prototype.hasOwnProperty.call(obj, key)) {
            clonedObj[key] = obj[key];
        }
    }
    return clonedObj;
}
exports.cloneObj = cloneObj;
function find(arr, predicate) {
    for (var i = 0; i < arr.length; i++) {
        var item = arr[i];
        if (predicate.call(null, item)) {
            return item;
        }
    }
    return undefined;
}
exports.find = find;
function findAll(arr, predicate) {
    var found = [];
    for (var i = 0; i < arr.length; i++) {
        var item = arr[i];
        if (predicate.call(null, item)) {
            found.push(item);
        }
    }
    return found;
}
exports.findAll = findAll;
function reduce(arrOrObj, iterator, initial) {
    var isArr = Array.isArray(arrOrObj);
    var vals = isArr ? arrOrObj : values(arrOrObj);
    var objKeys = isArr ? [] : keys(arrOrObj);
    var accumulator = initial;
    for (var i = 0; i < vals.length; i++) {
        accumulator = iterator.call(null, accumulator, vals[i], isArr ? i : objKeys[i]);
    }
    return accumulator;
}
exports.reduce = reduce;
function compact(arr) {
    return reject(arr, function (item) { return item === null || item === undefined; });
}
exports.compact = compact;
function uniq(arr, identity) {
    if (identity === void 0) { identity = function (item) { return item; }; }
    var identities = [];
    return reduce(arr, function (result, currItem) {
        var currIdentity = identity(currItem);
        if (contains(identities, currIdentity)) {
            return result;
        }
        else {
            identities.push(currIdentity);
            return result.concat(currItem);
        }
    }, []);
}
exports.uniq = uniq;
function partial(func) {
    var restArgs = [];
    for (var _i = 1; _i < arguments.length; _i++) {
        restArgs[_i - 1] = arguments[_i];
    }
    var firstArg = [null];
    var allArgs = firstArg.concat(restArgs);
    return Function.bind.apply(func, allArgs);
}
exports.partial = partial;
function isArray(obj) {
    return Array.isArray(obj);
}
exports.isArray = isArray;
function isRegExp(obj) {
    return obj instanceof RegExp;
}
exports.isRegExp = isRegExp;
function isObject(obj) {
    return obj instanceof Object;
}
exports.isObject = isObject;
function every(arr, predicate) {
    for (var i = 0; i < arr.length; i++) {
        if (!predicate(arr[i], i)) {
            return false;
        }
    }
    return true;
}
exports.every = every;
function difference(arr, values) {
    return reject(arr, function (item) { return contains(values, item); });
}
exports.difference = difference;
function some(arr, predicate) {
    for (var i = 0; i < arr.length; i++) {
        if (predicate(arr[i])) {
            return true;
        }
    }
    return false;
}
exports.some = some;
function indexOf(arr, value) {
    for (var i = 0; i < arr.length; i++) {
        if (arr[i] === value) {
            return i;
        }
    }
    return -1;
}
exports.indexOf = indexOf;
function sortBy(arr, orderFunc) {
    var result = cloneArr(arr);
    result.sort(function (a, b) { return orderFunc(a) - orderFunc(b); });
    return result;
}
exports.sortBy = sortBy;
function zipObject(keys, values) {
    if (keys.length !== values.length) {
        throw Error("can't zipObject with different number of keys and values!");
    }
    var result = {};
    for (var i = 0; i < keys.length; i++) {
        result[keys[i]] = values[i];
    }
    return result;
}
exports.zipObject = zipObject;
/**
 * mutates! (and returns) target
 */
function assign(target) {
    var sources = [];
    for (var _i = 1; _i < arguments.length; _i++) {
        sources[_i - 1] = arguments[_i];
    }
    for (var i = 0; i < sources.length; i++) {
        var curSource = sources[i];
        var currSourceKeys = keys(curSource);
        for (var j = 0; j < currSourceKeys.length; j++) {
            var currKey = currSourceKeys[j];
            target[currKey] = curSource[currKey];
        }
    }
    return target;
}
exports.assign = assign;
/**
 * mutates! (and returns) target
 */
function assignNoOverwrite(target) {
    var sources = [];
    for (var _i = 1; _i < arguments.length; _i++) {
        sources[_i - 1] = arguments[_i];
    }
    for (var i = 0; i < sources.length; i++) {
        var curSource = sources[i];
        if (isUndefined(curSource)) {
            continue;
        }
        var currSourceKeys = keys(curSource);
        for (var j = 0; j < currSourceKeys.length; j++) {
            var currKey = currSourceKeys[j];
            if (!has(target, currKey)) {
                target[currKey] = curSource[currKey];
            }
        }
    }
    return target;
}
exports.assignNoOverwrite = assignNoOverwrite;
function defaults() {
    var sources = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        sources[_i] = arguments[_i];
    }
    return assignNoOverwrite.apply(null, [{}].concat(sources));
}
exports.defaults = defaults;
function groupBy(arr, groupKeyFunc) {
    var result = {};
    forEach(arr, function (item) {
        var currGroupKey = groupKeyFunc(item);
        var currGroupArr = result[currGroupKey];
        if (currGroupArr) {
            currGroupArr.push(item);
        }
        else {
            result[currGroupKey] = [item];
        }
    });
    return result;
}
exports.groupBy = groupBy;
/**
 * Merge obj2 into obj1.
 * Will overwrite existing properties with the same name
 */
function merge(obj1, obj2) {
    var result = cloneObj(obj1);
    var keys2 = keys(obj2);
    for (var i = 0; i < keys2.length; i++) {
        var key = keys2[i];
        var value = obj2[key];
        result[key] = value;
    }
    return result;
}
exports.merge = merge;
function NOOP() { }
exports.NOOP = NOOP;
function IDENTITY(item) {
    return item;
}
exports.IDENTITY = IDENTITY;
/**
 * Will return a new packed array with same values.
 */
function packArray(holeyArr) {
    var result = [];
    for (var i = 0; i < holeyArr.length; i++) {
        var orgValue = holeyArr[i];
        result.push(orgValue !== undefined ? orgValue : undefined);
    }
    return result;
}
exports.packArray = packArray;
function PRINT_ERROR(msg) {
    /* istanbul ignore else - can't override global.console in node.js */
    if (console && console.error) {
        console.error("Error: " + msg);
    }
}
exports.PRINT_ERROR = PRINT_ERROR;
function PRINT_WARNING(msg) {
    /* istanbul ignore else - can't override global.console in node.js*/
    if (console && console.warn) {
        // TODO: modify docs accordingly
        console.warn("Warning: " + msg);
    }
}
exports.PRINT_WARNING = PRINT_WARNING;
function isES2015MapSupported() {
    return typeof Map === "function";
}
exports.isES2015MapSupported = isES2015MapSupported;
function applyMixins(derivedCtor, baseCtors) {
    baseCtors.forEach(function (baseCtor) {
        var baseProto = baseCtor.prototype;
        Object.getOwnPropertyNames(baseProto).forEach(function (propName) {
            if (propName === "constructor") {
                return;
            }
            var basePropDescriptor = Object.getOwnPropertyDescriptor(baseProto, propName);
            // Handle Accessors
            if (basePropDescriptor &&
                (basePropDescriptor.get || basePropDescriptor.set)) {
                Object.defineProperty(derivedCtor.prototype, propName, basePropDescriptor);
            }
            else {
                derivedCtor.prototype[propName] = baseCtor.prototype[propName];
            }
        });
    });
}
exports.applyMixins = applyMixins;
//# sourceMappingURL=utils.js.map

/***/ }),
/* 1 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var utils_1 = __webpack_require__(0);
var lang_extensions_1 = __webpack_require__(7);
var lexer_public_1 = __webpack_require__(9);
var tokens_1 = __webpack_require__(6);
function tokenLabel(clazz) {
    if (hasTokenLabel(clazz)) {
        return clazz.LABEL;
    }
    else {
        return tokenName(clazz);
    }
}
exports.tokenLabel = tokenLabel;
function hasTokenLabel(obj) {
    return utils_1.isString(obj.LABEL) && obj.LABEL !== "";
}
exports.hasTokenLabel = hasTokenLabel;
function tokenName(obj) {
    // The tokenName property is needed under some old versions of node.js (0.10/0.12)
    // where the Function.prototype.name property is not defined as a 'configurable' property
    // enable producing readable error messages.
    /* istanbul ignore if -> will only run in old versions of node.js */
    if (utils_1.isObject(obj) &&
        obj.hasOwnProperty("tokenName") &&
        utils_1.isString(obj.tokenName)) {
        return obj.tokenName;
    }
    else {
        return lang_extensions_1.functionName(obj);
    }
}
exports.tokenName = tokenName;
var PARENT = "parent";
var CATEGORIES = "categories";
var LABEL = "label";
var GROUP = "group";
var PUSH_MODE = "push_mode";
var POP_MODE = "pop_mode";
var LONGER_ALT = "longer_alt";
var LINE_BREAKS = "line_breaks";
var START_CHARS_HINT = "start_chars_hint";
function createToken(config) {
    return createTokenInternal(config);
}
exports.createToken = createToken;
function createTokenInternal(config) {
    var tokenName = config.name;
    var pattern = config.pattern;
    var tokenType = {};
    // can be overwritten according to:
    // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/
    // name?redirectlocale=en-US&redirectslug=JavaScript%2FReference%2FGlobal_Objects%2FFunction%2Fname
    /* istanbul ignore if -> will only run in old versions of node.js */
    if (!lang_extensions_1.defineNameProp(tokenType, tokenName)) {
        // hack to save the tokenName in situations where the constructor's name property cannot be reconfigured
        tokenType.tokenName = tokenName;
    }
    if (!utils_1.isUndefined(pattern)) {
        tokenType.PATTERN = pattern;
    }
    if (utils_1.has(config, PARENT)) {
        throw "The parent property is no longer supported.\n" +
            "See: https://github.com/SAP/chevrotain/issues/564#issuecomment-349062346 for details.";
    }
    if (utils_1.has(config, CATEGORIES)) {
        tokenType.CATEGORIES = config[CATEGORIES];
    }
    tokens_1.augmentTokenTypes([tokenType]);
    if (utils_1.has(config, LABEL)) {
        tokenType.LABEL = config[LABEL];
    }
    if (utils_1.has(config, GROUP)) {
        tokenType.GROUP = config[GROUP];
    }
    if (utils_1.has(config, POP_MODE)) {
        tokenType.POP_MODE = config[POP_MODE];
    }
    if (utils_1.has(config, PUSH_MODE)) {
        tokenType.PUSH_MODE = config[PUSH_MODE];
    }
    if (utils_1.has(config, LONGER_ALT)) {
        tokenType.LONGER_ALT = config[LONGER_ALT];
    }
    if (utils_1.has(config, LINE_BREAKS)) {
        tokenType.LINE_BREAKS = config[LINE_BREAKS];
    }
    if (utils_1.has(config, START_CHARS_HINT)) {
        tokenType.START_CHARS_HINT = config[START_CHARS_HINT];
    }
    return tokenType;
}
exports.EOF = createToken({ name: "EOF", pattern: lexer_public_1.Lexer.NA });
tokens_1.augmentTokenTypes([exports.EOF]);
function createTokenInstance(tokType, image, startOffset, endOffset, startLine, endLine, startColumn, endColumn) {
    return {
        image: image,
        startOffset: startOffset,
        endOffset: endOffset,
        startLine: startLine,
        endLine: endLine,
        startColumn: startColumn,
        endColumn: endColumn,
        tokenTypeIdx: tokType.tokenTypeIdx,
        tokenType: tokType
    };
}
exports.createTokenInstance = createTokenInstance;
function tokenMatcher(token, tokType) {
    return tokens_1.tokenStructuredMatcher(token, tokType);
}
exports.tokenMatcher = tokenMatcher;
//# sourceMappingURL=tokens_public.js.map

/***/ }),
/* 2 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var utils_1 = __webpack_require__(0);
var tokens_public_1 = __webpack_require__(1);
var AbstractProduction = /** @class */ (function () {
    function AbstractProduction(definition) {
        this.definition = definition;
    }
    AbstractProduction.prototype.accept = function (visitor) {
        visitor.visit(this);
        utils_1.forEach(this.definition, function (prod) {
            prod.accept(visitor);
        });
    };
    return AbstractProduction;
}());
exports.AbstractProduction = AbstractProduction;
var NonTerminal = /** @class */ (function (_super) {
    __extends(NonTerminal, _super);
    function NonTerminal(options) {
        var _this = _super.call(this, []) || this;
        _this.idx = 1;
        utils_1.assign(_this, utils_1.pick(options, function (v) { return v !== undefined; }));
        return _this;
    }
    Object.defineProperty(NonTerminal.prototype, "definition", {
        get: function () {
            if (this.referencedRule !== undefined) {
                return this.referencedRule.definition;
            }
            return [];
        },
        set: function (definition) {
            // immutable
        },
        enumerable: true,
        configurable: true
    });
    NonTerminal.prototype.accept = function (visitor) {
        visitor.visit(this);
        // don't visit children of a reference, we will get cyclic infinite loops if we do so
    };
    return NonTerminal;
}(AbstractProduction));
exports.NonTerminal = NonTerminal;
var Rule = /** @class */ (function (_super) {
    __extends(Rule, _super);
    function Rule(options) {
        var _this = _super.call(this, options.definition) || this;
        _this.orgText = "";
        utils_1.assign(_this, utils_1.pick(options, function (v) { return v !== undefined; }));
        return _this;
    }
    return Rule;
}(AbstractProduction));
exports.Rule = Rule;
var Flat = /** @class */ (function (_super) {
    __extends(Flat, _super);
    // A named Flat production is used to indicate a Nested Rule in an alternation
    function Flat(options) {
        var _this = _super.call(this, options.definition) || this;
        utils_1.assign(_this, utils_1.pick(options, function (v) { return v !== undefined; }));
        return _this;
    }
    return Flat;
}(AbstractProduction));
exports.Flat = Flat;
var Option = /** @class */ (function (_super) {
    __extends(Option, _super);
    function Option(options) {
        var _this = _super.call(this, options.definition) || this;
        _this.idx = 1;
        utils_1.assign(_this, utils_1.pick(options, function (v) { return v !== undefined; }));
        return _this;
    }
    return Option;
}(AbstractProduction));
exports.Option = Option;
var RepetitionMandatory = /** @class */ (function (_super) {
    __extends(RepetitionMandatory, _super);
    function RepetitionMandatory(options) {
        var _this = _super.call(this, options.definition) || this;
        _this.idx = 1;
        utils_1.assign(_this, utils_1.pick(options, function (v) { return v !== undefined; }));
        return _this;
    }
    return RepetitionMandatory;
}(AbstractProduction));
exports.RepetitionMandatory = RepetitionMandatory;
var RepetitionMandatoryWithSeparator = /** @class */ (function (_super) {
    __extends(RepetitionMandatoryWithSeparator, _super);
    function RepetitionMandatoryWithSeparator(options) {
        var _this = _super.call(this, options.definition) || this;
        _this.idx = 1;
        utils_1.assign(_this, utils_1.pick(options, function (v) { return v !== undefined; }));
        return _this;
    }
    return RepetitionMandatoryWithSeparator;
}(AbstractProduction));
exports.RepetitionMandatoryWithSeparator = RepetitionMandatoryWithSeparator;
var Repetition = /** @class */ (function (_super) {
    __extends(Repetition, _super);
    function Repetition(options) {
        var _this = _super.call(this, options.definition) || this;
        _this.idx = 1;
        utils_1.assign(_this, utils_1.pick(options, function (v) { return v !== undefined; }));
        return _this;
    }
    return Repetition;
}(AbstractProduction));
exports.Repetition = Repetition;
var RepetitionWithSeparator = /** @class */ (function (_super) {
    __extends(RepetitionWithSeparator, _super);
    function RepetitionWithSeparator(options) {
        var _this = _super.call(this, options.definition) || this;
        _this.idx = 1;
        utils_1.assign(_this, utils_1.pick(options, function (v) { return v !== undefined; }));
        return _this;
    }
    return RepetitionWithSeparator;
}(AbstractProduction));
exports.RepetitionWithSeparator = RepetitionWithSeparator;
var Alternation = /** @class */ (function (_super) {
    __extends(Alternation, _super);
    function Alternation(options) {
        var _this = _super.call(this, options.definition) || this;
        _this.idx = 1;
        utils_1.assign(_this, utils_1.pick(options, function (v) { return v !== undefined; }));
        return _this;
    }
    return Alternation;
}(AbstractProduction));
exports.Alternation = Alternation;
var Terminal = /** @class */ (function () {
    function Terminal(options) {
        this.idx = 1;
        utils_1.assign(this, utils_1.pick(options, function (v) { return v !== undefined; }));
    }
    Terminal.prototype.accept = function (visitor) {
        visitor.visit(this);
    };
    return Terminal;
}());
exports.Terminal = Terminal;
function serializeGrammar(topRules) {
    return utils_1.map(topRules, serializeProduction);
}
exports.serializeGrammar = serializeGrammar;
function serializeProduction(node) {
    function convertDefinition(definition) {
        return utils_1.map(definition, serializeProduction);
    }
    /* istanbul ignore else */
    if (node instanceof NonTerminal) {
        return {
            type: "NonTerminal",
            name: node.nonTerminalName,
            idx: node.idx
        };
    }
    else if (node instanceof Flat) {
        return {
            type: "Flat",
            definition: convertDefinition(node.definition)
        };
    }
    else if (node instanceof Option) {
        return {
            type: "Option",
            idx: node.idx,
            definition: convertDefinition(node.definition)
        };
    }
    else if (node instanceof RepetitionMandatory) {
        return {
            type: "RepetitionMandatory",
            name: node.name,
            idx: node.idx,
            definition: convertDefinition(node.definition)
        };
    }
    else if (node instanceof RepetitionMandatoryWithSeparator) {
        return {
            type: "RepetitionMandatoryWithSeparator",
            name: node.name,
            idx: node.idx,
            separator: (serializeProduction(new Terminal({ terminalType: node.separator }))),
            definition: convertDefinition(node.definition)
        };
    }
    else if (node instanceof RepetitionWithSeparator) {
        return {
            type: "RepetitionWithSeparator",
            name: node.name,
            idx: node.idx,
            separator: (serializeProduction(new Terminal({ terminalType: node.separator }))),
            definition: convertDefinition(node.definition)
        };
    }
    else if (node instanceof Repetition) {
        return {
            type: "Repetition",
            name: node.name,
            idx: node.idx,
            definition: convertDefinition(node.definition)
        };
    }
    else if (node instanceof Alternation) {
        return {
            type: "Alternation",
            name: node.name,
            idx: node.idx,
            definition: convertDefinition(node.definition)
        };
    }
    else if (node instanceof Terminal) {
        var serializedTerminal = {
            type: "Terminal",
            name: tokens_public_1.tokenName(node.terminalType),
            label: tokens_public_1.tokenLabel(node.terminalType),
            idx: node.idx
        };
        var pattern = node.terminalType.PATTERN;
        if (node.terminalType.PATTERN) {
            serializedTerminal.pattern = utils_1.isRegExp(pattern)
                ? pattern.source
                : pattern;
        }
        return serializedTerminal;
    }
    else if (node instanceof Rule) {
        return {
            type: "Rule",
            name: node.name,
            orgText: node.orgText,
            definition: convertDefinition(node.definition)
        };
    }
    else {
        throw Error("non exhaustive match");
    }
}
exports.serializeProduction = serializeProduction;
//# sourceMappingURL=gast_public.js.map

/***/ }),
/* 3 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
function setEquality(actual, expected) {
    expect(actual).to.deep.include.members(expected);
    expect(expected).to.deep.include.members(actual);
    expect(expected).to.have.lengthOf(actual.length);
}
exports.setEquality = setEquality;
function createRegularToken(tokType, image) {
    if (image === void 0) { image = ""; }
    return {
        image: image,
        startOffset: 1,
        tokenTypeIdx: tokType.tokenTypeIdx,
        tokenType: tokType
    };
}
exports.createRegularToken = createRegularToken;
//# sourceMappingURL=matchers.js.map

/***/ }),
/* 4 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var lang_extensions_1 = __webpack_require__(7);
var utils_1 = __webpack_require__(0);
var follow_1 = __webpack_require__(30);
var tokens_public_1 = __webpack_require__(1);
var gast_builder_1 = __webpack_require__(18);
var cst_1 = __webpack_require__(24);
var errors_public_1 = __webpack_require__(12);
var gast_resolver_public_1 = __webpack_require__(25);
var recoverable_1 = __webpack_require__(36);
var looksahead_1 = __webpack_require__(44);
var tree_builder_1 = __webpack_require__(45);
var lexer_adapter_1 = __webpack_require__(47);
var recognizer_api_1 = __webpack_require__(48);
var recognizer_engine_1 = __webpack_require__(49);
var error_handler_1 = __webpack_require__(50);
var context_assist_1 = __webpack_require__(51);
exports.END_OF_FILE = tokens_public_1.createTokenInstance(tokens_public_1.EOF, "", NaN, NaN, NaN, NaN, NaN, NaN);
Object.freeze(exports.END_OF_FILE);
exports.DEFAULT_PARSER_CONFIG = Object.freeze({
    recoveryEnabled: false,
    maxLookahead: 4,
    ignoredIssues: {},
    dynamicTokensEnabled: false,
    outputCst: true,
    errorMessageProvider: errors_public_1.defaultParserErrorProvider,
    serializedGrammar: null
});
exports.DEFAULT_RULE_CONFIG = Object.freeze({
    recoveryValueFunc: function () { return undefined; },
    resyncEnabled: true
});
var ParserDefinitionErrorType;
(function (ParserDefinitionErrorType) {
    ParserDefinitionErrorType[ParserDefinitionErrorType["INVALID_RULE_NAME"] = 0] = "INVALID_RULE_NAME";
    ParserDefinitionErrorType[ParserDefinitionErrorType["DUPLICATE_RULE_NAME"] = 1] = "DUPLICATE_RULE_NAME";
    ParserDefinitionErrorType[ParserDefinitionErrorType["INVALID_RULE_OVERRIDE"] = 2] = "INVALID_RULE_OVERRIDE";
    ParserDefinitionErrorType[ParserDefinitionErrorType["DUPLICATE_PRODUCTIONS"] = 3] = "DUPLICATE_PRODUCTIONS";
    ParserDefinitionErrorType[ParserDefinitionErrorType["UNRESOLVED_SUBRULE_REF"] = 4] = "UNRESOLVED_SUBRULE_REF";
    ParserDefinitionErrorType[ParserDefinitionErrorType["LEFT_RECURSION"] = 5] = "LEFT_RECURSION";
    ParserDefinitionErrorType[ParserDefinitionErrorType["NONE_LAST_EMPTY_ALT"] = 6] = "NONE_LAST_EMPTY_ALT";
    ParserDefinitionErrorType[ParserDefinitionErrorType["AMBIGUOUS_ALTS"] = 7] = "AMBIGUOUS_ALTS";
    ParserDefinitionErrorType[ParserDefinitionErrorType["CONFLICT_TOKENS_RULES_NAMESPACE"] = 8] = "CONFLICT_TOKENS_RULES_NAMESPACE";
    ParserDefinitionErrorType[ParserDefinitionErrorType["INVALID_TOKEN_NAME"] = 9] = "INVALID_TOKEN_NAME";
    ParserDefinitionErrorType[ParserDefinitionErrorType["INVALID_NESTED_RULE_NAME"] = 10] = "INVALID_NESTED_RULE_NAME";
    ParserDefinitionErrorType[ParserDefinitionErrorType["DUPLICATE_NESTED_NAME"] = 11] = "DUPLICATE_NESTED_NAME";
    ParserDefinitionErrorType[ParserDefinitionErrorType["NO_NON_EMPTY_LOOKAHEAD"] = 12] = "NO_NON_EMPTY_LOOKAHEAD";
    ParserDefinitionErrorType[ParserDefinitionErrorType["AMBIGUOUS_PREFIX_ALTS"] = 13] = "AMBIGUOUS_PREFIX_ALTS";
    ParserDefinitionErrorType[ParserDefinitionErrorType["TOO_MANY_ALTS"] = 14] = "TOO_MANY_ALTS";
})(ParserDefinitionErrorType = exports.ParserDefinitionErrorType || (exports.ParserDefinitionErrorType = {}));
function EMPTY_ALT(value) {
    if (value === void 0) { value = undefined; }
    return function () {
        return value;
    };
}
exports.EMPTY_ALT = EMPTY_ALT;
var Parser = /** @class */ (function () {
    function Parser(tokenVocabulary, config) {
        if (config === void 0) { config = exports.DEFAULT_PARSER_CONFIG; }
        this.ignoredIssues = exports.DEFAULT_PARSER_CONFIG.ignoredIssues;
        this.definitionErrors = [];
        this.selfAnalysisDone = false;
        var that = this;
        that.initErrorHandler(config);
        that.initLexerAdapter();
        that.initLooksAhead(config);
        that.initRecognizerEngine(tokenVocabulary, config);
        that.initRecoverable(config);
        that.initTreeBuilder(config);
        that.initContentAssist();
        this.ignoredIssues = utils_1.has(config, "ignoredIssues")
            ? config.ignoredIssues
            : exports.DEFAULT_PARSER_CONFIG.ignoredIssues;
    }
    /**
     *  @deprecated use the **instance** method with the same name instead
     */
    Parser.performSelfAnalysis = function (parserInstance) {
        ;
        parserInstance.performSelfAnalysis();
    };
    Parser.prototype.performSelfAnalysis = function () {
        var _this = this;
        var defErrorsMsgs;
        this.selfAnalysisDone = true;
        var className = lang_extensions_1.classNameFromInstance(this);
        var productions = this.gastProductionsCache;
        if (this.serializedGrammar) {
            var rules = gast_builder_1.deserializeGrammar(this.serializedGrammar, this.tokensMap);
            utils_1.forEach(rules, function (rule) {
                _this.gastProductionsCache.put(rule.name, rule);
            });
        }
        var resolverErrors = gast_resolver_public_1.resolveGrammar({
            rules: productions.values()
        });
        this.definitionErrors.push.apply(this.definitionErrors, resolverErrors); // mutability for the win?
        // only perform additional grammar validations IFF no resolving errors have occurred.
        // as unresolved grammar may lead to unhandled runtime exceptions in the follow up validations.
        if (utils_1.isEmpty(resolverErrors)) {
            var validationErrors = gast_resolver_public_1.validateGrammar({
                rules: productions.values(),
                maxLookahead: this.maxLookahead,
                tokenTypes: utils_1.values(this.tokensMap),
                ignoredIssues: this.ignoredIssues,
                errMsgProvider: errors_public_1.defaultGrammarValidatorErrorProvider,
                grammarName: className
            });
            this.definitionErrors.push.apply(this.definitionErrors, validationErrors); // mutability for the win?
        }
        if (utils_1.isEmpty(this.definitionErrors)) {
            // this analysis may fail if the grammar is not perfectly valid
            var allFollows = follow_1.computeAllProdsFollows(productions.values());
            this.resyncFollows = allFollows;
        }
        var cstAnalysisResult = cst_1.analyzeCst(productions.values(), this.fullRuleNameToShort);
        this.allRuleNames = cstAnalysisResult.allRuleNames;
        if (!Parser.DEFER_DEFINITION_ERRORS_HANDLING &&
            !utils_1.isEmpty(this.definitionErrors)) {
            defErrorsMsgs = utils_1.map(this.definitionErrors, function (defError) { return defError.message; });
            throw new Error("Parser Definition Errors detected:\n " + defErrorsMsgs.join("\n-------------------------------\n"));
        }
    };
    // Set this flag to true if you don't want the Parser to throw error when problems in it's definition are detected.
    // (normally during the parser's constructor).
    // This is a design time flag, it will not affect the runtime error handling of the parser, just design time errors,
    // for example: duplicate rule names, referencing an unresolved subrule, ect...
    // This flag should not be enabled during normal usage, it is used in special situations, for example when
    // needing to display the parser definition errors in some GUI(online playground).
    Parser.DEFER_DEFINITION_ERRORS_HANDLING = false;
    return Parser;
}());
exports.Parser = Parser;
utils_1.applyMixins(Parser, [
    recoverable_1.Recoverable,
    looksahead_1.LooksAhead,
    tree_builder_1.TreeBuilder,
    lexer_adapter_1.LexerAdapter,
    recognizer_engine_1.RecognizerEngine,
    recognizer_api_1.RecognizerApi,
    error_handler_1.ErrorHandler,
    context_assist_1.ContentAssist
]);
//# sourceMappingURL=parser.js.map

/***/ }),
/* 5 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var parser_1 = __webpack_require__(4);
exports.Parser = parser_1.Parser;
//# sourceMappingURL=parser_traits.js.map

/***/ }),
/* 6 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var utils_1 = __webpack_require__(0);
var lang_extensions_1 = __webpack_require__(7);
var tokens_public_1 = __webpack_require__(1);
function tokenStructuredMatcher(tokInstance, tokConstructor) {
    var instanceType = tokInstance.tokenTypeIdx;
    if (instanceType === tokConstructor.tokenTypeIdx) {
        return true;
    }
    else {
        return (tokConstructor.isParent === true &&
            tokConstructor.categoryMatchesMap[instanceType] === true);
    }
}
exports.tokenStructuredMatcher = tokenStructuredMatcher;
// Optimized tokenMatcher in case our grammar does not use token categories
// Being so tiny it is much more likely to be in-lined and this avoid the function call overhead
function tokenStructuredMatcherNoCategories(token, tokType) {
    return token.tokenTypeIdx === tokType.tokenTypeIdx;
}
exports.tokenStructuredMatcherNoCategories = tokenStructuredMatcherNoCategories;
exports.tokenShortNameIdx = 1;
exports.tokenIdxToClass = new lang_extensions_1.HashTable();
function augmentTokenTypes(tokenTypes) {
    // collect the parent Token Types as well.
    var tokenTypesAndParents = expandCategories(tokenTypes);
    // add required tokenType and categoryMatches properties
    assignTokenDefaultProps(tokenTypesAndParents);
    // fill up the categoryMatches
    assignCategoriesMapProp(tokenTypesAndParents);
    assignCategoriesTokensProp(tokenTypesAndParents);
    utils_1.forEach(tokenTypesAndParents, function (tokType) {
        tokType.isParent = tokType.categoryMatches.length > 0;
    });
}
exports.augmentTokenTypes = augmentTokenTypes;
function expandCategories(tokenTypes) {
    var result = utils_1.cloneArr(tokenTypes);
    var categories = tokenTypes;
    var searching = true;
    while (searching) {
        categories = utils_1.compact(utils_1.flatten(utils_1.map(categories, function (currTokType) { return currTokType.CATEGORIES; })));
        var newCategories = utils_1.difference(categories, result);
        result = result.concat(newCategories);
        if (utils_1.isEmpty(newCategories)) {
            searching = false;
        }
        else {
            categories = newCategories;
        }
    }
    return result;
}
exports.expandCategories = expandCategories;
function assignTokenDefaultProps(tokenTypes) {
    utils_1.forEach(tokenTypes, function (currTokType) {
        if (!hasShortKeyProperty(currTokType)) {
            exports.tokenIdxToClass.put(exports.tokenShortNameIdx, currTokType);
            currTokType.tokenTypeIdx = exports.tokenShortNameIdx++;
        }
        // CATEGORIES? : TokenType | TokenType[]
        if (hasCategoriesProperty(currTokType) &&
            !utils_1.isArray(currTokType.CATEGORIES)
        // &&
        // !isUndefined(currTokType.CATEGORIES.PATTERN)
        ) {
            currTokType.CATEGORIES = [currTokType.CATEGORIES];
        }
        if (!hasCategoriesProperty(currTokType)) {
            currTokType.CATEGORIES = [];
        }
        if (!hasExtendingTokensTypesProperty(currTokType)) {
            currTokType.categoryMatches = [];
        }
        if (!hasExtendingTokensTypesMapProperty(currTokType)) {
            currTokType.categoryMatchesMap = {};
        }
        if (!hasTokenNameProperty(currTokType)) {
            // saved for fast access during CST building.
            currTokType.tokenName = tokens_public_1.tokenName(currTokType);
        }
    });
}
exports.assignTokenDefaultProps = assignTokenDefaultProps;
function assignCategoriesTokensProp(tokenTypes) {
    utils_1.forEach(tokenTypes, function (currTokType) {
        // avoid duplications
        currTokType.categoryMatches = [];
        utils_1.forEach(currTokType.categoryMatchesMap, function (val, key) {
            currTokType.categoryMatches.push(exports.tokenIdxToClass.get(key).tokenTypeIdx);
        });
    });
}
exports.assignCategoriesTokensProp = assignCategoriesTokensProp;
function assignCategoriesMapProp(tokenTypes) {
    utils_1.forEach(tokenTypes, function (currTokType) {
        singleAssignCategoriesToksMap([], currTokType);
    });
}
exports.assignCategoriesMapProp = assignCategoriesMapProp;
function singleAssignCategoriesToksMap(path, nextNode) {
    utils_1.forEach(path, function (pathNode) {
        nextNode.categoryMatchesMap[pathNode.tokenTypeIdx] = true;
    });
    utils_1.forEach(nextNode.CATEGORIES, function (nextCategory) {
        var newPath = path.concat(nextNode);
        // avoids infinite loops due to cyclic categories.
        if (!utils_1.contains(newPath, nextCategory)) {
            singleAssignCategoriesToksMap(newPath, nextCategory);
        }
    });
}
exports.singleAssignCategoriesToksMap = singleAssignCategoriesToksMap;
function hasShortKeyProperty(tokType) {
    return utils_1.has(tokType, "tokenTypeIdx");
}
exports.hasShortKeyProperty = hasShortKeyProperty;
function hasCategoriesProperty(tokType) {
    return utils_1.has(tokType, "CATEGORIES");
}
exports.hasCategoriesProperty = hasCategoriesProperty;
function hasExtendingTokensTypesProperty(tokType) {
    return utils_1.has(tokType, "categoryMatches");
}
exports.hasExtendingTokensTypesProperty = hasExtendingTokensTypesProperty;
function hasExtendingTokensTypesMapProperty(tokType) {
    return utils_1.has(tokType, "categoryMatchesMap");
}
exports.hasExtendingTokensTypesMapProperty = hasExtendingTokensTypesMapProperty;
function hasTokenNameProperty(tokType) {
    return utils_1.has(tokType, "tokenName");
}
exports.hasTokenNameProperty = hasTokenNameProperty;
function isTokenType(tokType) {
    return utils_1.has(tokType, "tokenTypeIdx");
}
exports.isTokenType = isTokenType;
//# sourceMappingURL=tokens.js.map

/***/ }),
/* 7 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var utils_1 = __webpack_require__(0);
function classNameFromInstance(instance) {
    return functionName(instance.constructor);
}
exports.classNameFromInstance = classNameFromInstance;
var FUNC_NAME_REGEXP = /^\s*function\s*(\S*)\s*\(/;
var NAME = "name";
/* istanbul ignore next too many hacks for IE/old versions of node.js here*/
function functionName(func) {
    // Engines that support Function.prototype.name OR the nth (n>1) time after
    // the name has been computed in the following else block.
    var existingNameProp = func.name;
    if (existingNameProp) {
        return existingNameProp;
    }
    // hack for IE and engines that do not support Object.defineProperty on function.name (Node.js 0.10 && 0.12)
    var computedName = func.toString().match(FUNC_NAME_REGEXP)[1];
    return computedName;
}
exports.functionName = functionName;
/**
 * @returns {boolean} - has the property been successfully defined
 */
function defineNameProp(obj, nameValue) {
    var namePropDescriptor = Object.getOwnPropertyDescriptor(obj, NAME);
    /* istanbul ignore else -> will only run in old versions of node.js */
    if (utils_1.isUndefined(namePropDescriptor) || namePropDescriptor.configurable) {
        Object.defineProperty(obj, NAME, {
            enumerable: false,
            configurable: true,
            writable: false,
            value: nameValue
        });
        return true;
    }
    /* istanbul ignore next -> will only run in old versions of node.js */
    return false;
}
exports.defineNameProp = defineNameProp;
/**
 * simple Hashtable between a string and some generic value
 * this should be removed once typescript supports ES6 style Hashtable
 */
var HashTable = /** @class */ (function () {
    function HashTable() {
        this._state = {};
    }
    HashTable.prototype.keys = function () {
        return utils_1.keys(this._state);
    };
    HashTable.prototype.values = function () {
        return utils_1.values(this._state);
    };
    HashTable.prototype.put = function (key, value) {
        this._state[key] = value;
    };
    HashTable.prototype.putAll = function (other) {
        this._state = utils_1.assign(this._state, other._state);
    };
    HashTable.prototype.get = function (key) {
        // To avoid edge case with a key called "hasOwnProperty" we need to perform the commented out check below
        // -> if (Object.prototype.hasOwnProperty.call(this._state, key)) { ... } <-
        // however this costs nearly 25% of the parser's runtime.
        // if someone decides to name their Parser class "hasOwnProperty" they deserve what they will get :)
        return this._state[key];
    };
    HashTable.prototype.containsKey = function (key) {
        return utils_1.has(this._state, key);
    };
    HashTable.prototype.clear = function () {
        this._state = {};
    };
    return HashTable;
}());
exports.HashTable = HashTable;
//# sourceMappingURL=lang_extensions.js.map

/***/ }),
/* 8 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var utils_1 = __webpack_require__(0);
var MISMATCHED_TOKEN_EXCEPTION = "MismatchedTokenException";
var NO_VIABLE_ALT_EXCEPTION = "NoViableAltException";
var EARLY_EXIT_EXCEPTION = "EarlyExitException";
var NOT_ALL_INPUT_PARSED_EXCEPTION = "NotAllInputParsedException";
var RECOGNITION_EXCEPTION_NAMES = [
    MISMATCHED_TOKEN_EXCEPTION,
    NO_VIABLE_ALT_EXCEPTION,
    EARLY_EXIT_EXCEPTION,
    NOT_ALL_INPUT_PARSED_EXCEPTION
];
Object.freeze(RECOGNITION_EXCEPTION_NAMES);
// hacks to bypass no support for custom Errors in javascript/typescript
function isRecognitionException(error) {
    // can't do instanceof on hacked custom js exceptions
    return utils_1.contains(RECOGNITION_EXCEPTION_NAMES, error.name);
}
exports.isRecognitionException = isRecognitionException;
function MismatchedTokenException(message, token, previousToken) {
    this.name = MISMATCHED_TOKEN_EXCEPTION;
    this.message = message;
    this.token = token;
    this.previousToken = previousToken;
    this.resyncedTokens = [];
}
exports.MismatchedTokenException = MismatchedTokenException;
// must use the "Error.prototype" instead of "new Error"
// because the stack trace points to where "new Error" was invoked"
MismatchedTokenException.prototype = Error.prototype;
function NoViableAltException(message, token, previousToken) {
    this.name = NO_VIABLE_ALT_EXCEPTION;
    this.message = message;
    this.token = token;
    this.previousToken = previousToken;
    this.resyncedTokens = [];
}
exports.NoViableAltException = NoViableAltException;
NoViableAltException.prototype = Error.prototype;
function NotAllInputParsedException(message, token) {
    this.name = NOT_ALL_INPUT_PARSED_EXCEPTION;
    this.message = message;
    this.token = token;
    this.resyncedTokens = [];
}
exports.NotAllInputParsedException = NotAllInputParsedException;
NotAllInputParsedException.prototype = Error.prototype;
function EarlyExitException(message, token, previousToken) {
    this.name = EARLY_EXIT_EXCEPTION;
    this.message = message;
    this.token = token;
    this.previousToken = previousToken;
    this.resyncedTokens = [];
}
exports.EarlyExitException = EarlyExitException;
EarlyExitException.prototype = Error.prototype;
//# sourceMappingURL=exceptions_public.js.map

/***/ }),
/* 9 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var lexer_1 = __webpack_require__(31);
var utils_1 = __webpack_require__(0);
var tokens_1 = __webpack_require__(6);
var lexer_errors_public_1 = __webpack_require__(21);
var LexerDefinitionErrorType;
(function (LexerDefinitionErrorType) {
    LexerDefinitionErrorType[LexerDefinitionErrorType["MISSING_PATTERN"] = 0] = "MISSING_PATTERN";
    LexerDefinitionErrorType[LexerDefinitionErrorType["INVALID_PATTERN"] = 1] = "INVALID_PATTERN";
    LexerDefinitionErrorType[LexerDefinitionErrorType["EOI_ANCHOR_FOUND"] = 2] = "EOI_ANCHOR_FOUND";
    LexerDefinitionErrorType[LexerDefinitionErrorType["UNSUPPORTED_FLAGS_FOUND"] = 3] = "UNSUPPORTED_FLAGS_FOUND";
    LexerDefinitionErrorType[LexerDefinitionErrorType["DUPLICATE_PATTERNS_FOUND"] = 4] = "DUPLICATE_PATTERNS_FOUND";
    LexerDefinitionErrorType[LexerDefinitionErrorType["INVALID_GROUP_TYPE_FOUND"] = 5] = "INVALID_GROUP_TYPE_FOUND";
    LexerDefinitionErrorType[LexerDefinitionErrorType["PUSH_MODE_DOES_NOT_EXIST"] = 6] = "PUSH_MODE_DOES_NOT_EXIST";
    LexerDefinitionErrorType[LexerDefinitionErrorType["MULTI_MODE_LEXER_WITHOUT_DEFAULT_MODE"] = 7] = "MULTI_MODE_LEXER_WITHOUT_DEFAULT_MODE";
    LexerDefinitionErrorType[LexerDefinitionErrorType["MULTI_MODE_LEXER_WITHOUT_MODES_PROPERTY"] = 8] = "MULTI_MODE_LEXER_WITHOUT_MODES_PROPERTY";
    LexerDefinitionErrorType[LexerDefinitionErrorType["MULTI_MODE_LEXER_DEFAULT_MODE_VALUE_DOES_NOT_EXIST"] = 9] = "MULTI_MODE_LEXER_DEFAULT_MODE_VALUE_DOES_NOT_EXIST";
    LexerDefinitionErrorType[LexerDefinitionErrorType["LEXER_DEFINITION_CANNOT_CONTAIN_UNDEFINED"] = 10] = "LEXER_DEFINITION_CANNOT_CONTAIN_UNDEFINED";
    LexerDefinitionErrorType[LexerDefinitionErrorType["SOI_ANCHOR_FOUND"] = 11] = "SOI_ANCHOR_FOUND";
    LexerDefinitionErrorType[LexerDefinitionErrorType["EMPTY_MATCH_PATTERN"] = 12] = "EMPTY_MATCH_PATTERN";
    LexerDefinitionErrorType[LexerDefinitionErrorType["NO_LINE_BREAKS_FLAGS"] = 13] = "NO_LINE_BREAKS_FLAGS";
    LexerDefinitionErrorType[LexerDefinitionErrorType["UNREACHABLE_PATTERN"] = 14] = "UNREACHABLE_PATTERN";
    LexerDefinitionErrorType[LexerDefinitionErrorType["IDENTIFY_TERMINATOR"] = 15] = "IDENTIFY_TERMINATOR";
    LexerDefinitionErrorType[LexerDefinitionErrorType["CUSTOM_LINE_BREAK"] = 16] = "CUSTOM_LINE_BREAK";
})(LexerDefinitionErrorType = exports.LexerDefinitionErrorType || (exports.LexerDefinitionErrorType = {}));
var DEFAULT_LEXER_CONFIG = {
    deferDefinitionErrorsHandling: false,
    positionTracking: "full",
    lineTerminatorsPattern: /\n|\r\n?/g,
    lineTerminatorCharacters: ["\n", "\r"],
    ensureOptimizations: false,
    safeMode: false,
    errorMessageProvider: lexer_errors_public_1.defaultLexerErrorProvider
};
Object.freeze(DEFAULT_LEXER_CONFIG);
var Lexer = /** @class */ (function () {
    function Lexer(lexerDefinition, config) {
        if (config === void 0) { config = DEFAULT_LEXER_CONFIG; }
        var _this = this;
        this.lexerDefinition = lexerDefinition;
        this.lexerDefinitionErrors = [];
        this.lexerDefinitionWarning = [];
        this.patternIdxToConfig = {};
        this.charCodeToPatternIdxToConfig = {};
        this.modes = [];
        this.emptyGroups = {};
        this.config = undefined;
        this.trackStartLines = true;
        this.trackEndLines = true;
        this.hasCustom = false;
        this.canModeBeOptimized = {};
        if (typeof config === "boolean") {
            throw Error("The second argument to the Lexer constructor is now an ILexerConfig Object.\n" +
                "a boolean 2nd argument is no longer supported");
        }
        // todo: defaults func?
        this.config = utils_1.merge(DEFAULT_LEXER_CONFIG, config);
        if (this.config.lineTerminatorsPattern ===
            DEFAULT_LEXER_CONFIG.lineTerminatorsPattern) {
            // optimized built-in implementation for the defaults definition of lineTerminators
            this.config.lineTerminatorsPattern = lexer_1.LineTerminatorOptimizedTester;
        }
        else {
            if (this.config.lineTerminatorCharacters ===
                DEFAULT_LEXER_CONFIG.lineTerminatorCharacters) {
                throw Error("Error: Missing <lineTerminatorCharacters> property on the Lexer config.\n" +
                    "\tFor details See: https://sap.github.io/chevrotain/docs/guide/resolving_lexer_errors.html#MISSING_LINE_TERM_CHARS");
            }
        }
        if (config.safeMode && config.ensureOptimizations) {
            throw Error('"safeMode" and "ensureOptimizations" flags are mutually exclusive.');
        }
        this.trackStartLines = /full|onlyStart/i.test(this.config.positionTracking);
        this.trackEndLines = /full/i.test(this.config.positionTracking);
        var hasOnlySingleMode = true;
        var actualDefinition;
        // Convert SingleModeLexerDefinition into a IMultiModeLexerDefinition.
        if (utils_1.isArray(lexerDefinition)) {
            actualDefinition = { modes: {} };
            actualDefinition.modes[lexer_1.DEFAULT_MODE] = utils_1.cloneArr((lexerDefinition));
            actualDefinition[lexer_1.DEFAULT_MODE] = lexer_1.DEFAULT_MODE;
        }
        else {
            // no conversion needed, input should already be a IMultiModeLexerDefinition
            hasOnlySingleMode = false;
            actualDefinition = utils_1.cloneObj((lexerDefinition));
        }
        this.lexerDefinitionErrors = this.lexerDefinitionErrors.concat(lexer_1.performRuntimeChecks(actualDefinition, this.trackStartLines, this.config.lineTerminatorCharacters));
        this.lexerDefinitionWarning = this.lexerDefinitionWarning.concat(lexer_1.performWarningRuntimeChecks(actualDefinition, this.trackStartLines, this.config.lineTerminatorCharacters));
        // for extra robustness to avoid throwing an none informative error message
        actualDefinition.modes = actualDefinition.modes
            ? actualDefinition.modes
            : {};
        // an error of undefined TokenTypes will be detected in "performRuntimeChecks" above.
        // this transformation is to increase robustness in the case of partially invalid lexer definition.
        utils_1.forEach(actualDefinition.modes, function (currModeValue, currModeName) {
            actualDefinition.modes[currModeName] = utils_1.reject(currModeValue, function (currTokType) { return utils_1.isUndefined(currTokType); });
        });
        var allModeNames = utils_1.keys(actualDefinition.modes);
        utils_1.forEach(actualDefinition.modes, function (currModDef, currModName) {
            _this.modes.push(currModName);
            _this.lexerDefinitionErrors = _this.lexerDefinitionErrors.concat(lexer_1.validatePatterns(currModDef, allModeNames));
            // If definition errors were encountered, the analysis phase may fail unexpectedly/
            // Considering a lexer with definition errors may never be used, there is no point
            // to performing the analysis anyhow...
            if (utils_1.isEmpty(_this.lexerDefinitionErrors)) {
                tokens_1.augmentTokenTypes(currModDef);
                var currAnalyzeResult = lexer_1.analyzeTokenTypes(currModDef, {
                    lineTerminatorCharacters: _this.config
                        .lineTerminatorCharacters,
                    positionTracking: config.positionTracking,
                    ensureOptimizations: config.ensureOptimizations,
                    safeMode: config.safeMode
                });
                _this.patternIdxToConfig[currModName] =
                    currAnalyzeResult.patternIdxToConfig;
                _this.charCodeToPatternIdxToConfig[currModName] =
                    currAnalyzeResult.charCodeToPatternIdxToConfig;
                _this.emptyGroups = utils_1.merge(_this.emptyGroups, currAnalyzeResult.emptyGroups);
                _this.hasCustom =
                    currAnalyzeResult.hasCustom || _this.hasCustom;
                _this.canModeBeOptimized[currModName] =
                    currAnalyzeResult.canBeOptimized;
            }
        });
        this.defaultMode = actualDefinition.defaultMode;
        if (!utils_1.isEmpty(this.lexerDefinitionErrors) &&
            !this.config.deferDefinitionErrorsHandling) {
            var allErrMessages = utils_1.map(this.lexerDefinitionErrors, function (error) {
                return error.message;
            });
            var allErrMessagesString = allErrMessages.join("-----------------------\n");
            throw new Error("Errors detected in definition of Lexer:\n" +
                allErrMessagesString);
        }
        // Only print warning if there are no errors, This will avoid pl
        utils_1.forEach(this.lexerDefinitionWarning, function (warningDescriptor) {
            utils_1.PRINT_WARNING(warningDescriptor.message);
        });
        // Choose the relevant internal implementations for this specific parser.
        // These implementations should be in-lined by the JavaScript engine
        // to provide optimal performance in each scenario.
        if (lexer_1.SUPPORT_STICKY) {
            this.chopInput = utils_1.IDENTITY;
            this.match = this.matchWithTest;
        }
        else {
            this.updateLastIndex = utils_1.NOOP;
            this.match = this.matchWithExec;
        }
        if (hasOnlySingleMode) {
            this.handleModes = utils_1.NOOP;
        }
        if (this.trackStartLines === false) {
            this.computeNewColumn = utils_1.IDENTITY;
        }
        if (this.trackEndLines === false) {
            this.updateTokenEndLineColumnLocation = utils_1.NOOP;
        }
        if (/full/i.test(this.config.positionTracking)) {
            this.createTokenInstance = this.createFullToken;
        }
        else if (/onlyStart/i.test(this.config.positionTracking)) {
            this.createTokenInstance = this.createStartOnlyToken;
        }
        else if (/onlyOffset/i.test(this.config.positionTracking)) {
            this.createTokenInstance = this.createOffsetOnlyToken;
        }
        else {
            throw Error("Invalid <positionTracking> config option: \"" + this.config.positionTracking + "\"");
        }
        if (this.hasCustom) {
            this.addToken = this.addTokenUsingPush;
        }
        else {
            this.addToken = this.addTokenUsingMemberAccess;
        }
        var unOptimizedModes = utils_1.reduce(this.canModeBeOptimized, function (cannotBeOptimized, canBeOptimized, modeName) {
            if (canBeOptimized === false) {
                cannotBeOptimized.push(modeName);
            }
            return cannotBeOptimized;
        }, []);
        if (config.ensureOptimizations && !utils_1.isEmpty(unOptimizedModes)) {
            throw Error("Lexer Modes: < " + unOptimizedModes.join(", ") + " > cannot be optimized.\n" +
                '\t Disable the "ensureOptimizations" lexer config flag to silently ignore this and run the lexer in an un-optimized mode.\n' +
                "\t Or inspect the console log for details on how to resolve these issues.");
        }
    }
    Lexer.prototype.tokenize = function (text, initialMode) {
        if (initialMode === void 0) { initialMode = this.defaultMode; }
        if (!utils_1.isEmpty(this.lexerDefinitionErrors)) {
            var allErrMessages = utils_1.map(this.lexerDefinitionErrors, function (error) {
                return error.message;
            });
            var allErrMessagesString = allErrMessages.join("-----------------------\n");
            throw new Error("Unable to Tokenize because Errors detected in definition of Lexer:\n" +
                allErrMessagesString);
        }
        var lexResult = this.tokenizeInternal(text, initialMode);
        return lexResult;
    };
    // There is quite a bit of duplication between this and "tokenizeInternalLazy"
    // This is intentional due to performance considerations.
    Lexer.prototype.tokenizeInternal = function (text, initialMode) {
        var _this = this;
        var i, j, matchAltImage, longerAltIdx, matchedImage, imageLength, group, tokType, newToken, errLength, droppedChar, msg, match;
        var orgText = text;
        var orgLength = orgText.length;
        var offset = 0;
        var matchedTokensIndex = 0;
        // initializing the tokensArray to the "guessed" size.
        // guessing too little will still reduce the number of array re-sizes on pushes.
        // guessing too large (Tested by guessing x4 too large) may cost a bit more of memory
        // but would still have a faster runtime by avoiding (All but one) array resizing.
        var guessedNumberOfTokens = this.hasCustom
            ? 0 // will break custom token pattern APIs the matchedTokens array will contain undefined elements.
            : Math.floor(text.length / 10);
        var matchedTokens = new Array(guessedNumberOfTokens);
        var errors = [];
        var line = this.trackStartLines ? 1 : undefined;
        var column = this.trackStartLines ? 1 : undefined;
        var groups = lexer_1.cloneEmptyGroups(this.emptyGroups);
        var trackLines = this.trackStartLines;
        var lineTerminatorPattern = this.config.lineTerminatorsPattern;
        var currModePatternsLength = 0;
        var patternIdxToConfig = [];
        var currCharCodeToPatternIdxToConfig = [];
        var modeStack = [];
        var emptyArray = [];
        Object.freeze(emptyArray);
        var getPossiblePatterns = undefined;
        var pop_mode = function (popToken) {
            // TODO: perhaps avoid this error in the edge case there is no more input?
            if (modeStack.length === 1 &&
                // if we have both a POP_MODE and a PUSH_MODE this is in-fact a "transition"
                // So no error should occur.
                popToken.tokenType.PUSH_MODE === undefined) {
                // if we try to pop the last mode there lexer will no longer have ANY mode.
                // thus the pop is ignored, an error will be created and the lexer will continue parsing in the previous mode.
                var msg_1 = _this.config.errorMessageProvider.buildUnableToPopLexerModeMessage(popToken);
                errors.push({
                    offset: popToken.startOffset,
                    line: popToken.startLine !== undefined
                        ? popToken.startLine
                        : undefined,
                    column: popToken.startColumn !== undefined
                        ? popToken.startColumn
                        : undefined,
                    length: popToken.image.length,
                    message: msg_1
                });
            }
            else {
                modeStack.pop();
                var newMode = utils_1.last(modeStack);
                patternIdxToConfig = _this.patternIdxToConfig[newMode];
                currCharCodeToPatternIdxToConfig = _this
                    .charCodeToPatternIdxToConfig[newMode];
                currModePatternsLength = patternIdxToConfig.length;
                var modeCanBeOptimized = _this.canModeBeOptimized[newMode] &&
                    _this.config.safeMode === false;
                if (currCharCodeToPatternIdxToConfig && modeCanBeOptimized) {
                    getPossiblePatterns = function (charCode) {
                        var possiblePatterns = currCharCodeToPatternIdxToConfig[charCode];
                        if (possiblePatterns === undefined) {
                            return emptyArray;
                        }
                        else {
                            return possiblePatterns;
                        }
                    };
                }
                else {
                    getPossiblePatterns = function () {
                        return patternIdxToConfig;
                    };
                }
            }
        };
        function push_mode(newMode) {
            modeStack.push(newMode);
            currCharCodeToPatternIdxToConfig = this
                .charCodeToPatternIdxToConfig[newMode];
            patternIdxToConfig = this.patternIdxToConfig[newMode];
            currModePatternsLength = patternIdxToConfig.length;
            currModePatternsLength = patternIdxToConfig.length;
            var modeCanBeOptimized = this.canModeBeOptimized[newMode] &&
                this.config.safeMode === false;
            if (currCharCodeToPatternIdxToConfig && modeCanBeOptimized) {
                getPossiblePatterns = function (charCode) {
                    var possiblePatterns = currCharCodeToPatternIdxToConfig[charCode];
                    if (possiblePatterns === undefined) {
                        return emptyArray;
                    }
                    else {
                        return possiblePatterns;
                    }
                };
            }
            else {
                getPossiblePatterns = function () {
                    return patternIdxToConfig;
                };
            }
        }
        // this pattern seems to avoid a V8 de-optimization, although that de-optimization does not
        // seem to matter performance wise.
        push_mode.call(this, initialMode);
        var currConfig;
        while (offset < orgLength) {
            matchedImage = null;
            var nextCharCode = orgText.charCodeAt(offset);
            var chosenPatternIdxToConfig = getPossiblePatterns(nextCharCode);
            var chosenPatternsLength = chosenPatternIdxToConfig.length;
            for (i = 0; i < chosenPatternsLength; i++) {
                currConfig = chosenPatternIdxToConfig[i];
                var currPattern = currConfig.pattern;
                // manually in-lined because > 600 chars won't be in-lined in V8
                var singleCharCode = currConfig.short;
                if (singleCharCode !== false) {
                    if (nextCharCode === singleCharCode) {
                        // single character string
                        matchedImage = currPattern;
                    }
                }
                else if (currConfig.isCustom === true) {
                    match = currPattern.exec(orgText, offset, matchedTokens, groups);
                    matchedImage = match !== null ? match[0] : match;
                }
                else {
                    this.updateLastIndex(currPattern, offset);
                    matchedImage = this.match(currPattern, text, offset);
                }
                if (matchedImage !== null) {
                    // even though this pattern matched we must try a another longer alternative.
                    // this can be used to prioritize keywords over identifiers
                    longerAltIdx = currConfig.longerAlt;
                    if (longerAltIdx !== undefined) {
                        // TODO: micro optimize, avoid extra prop access
                        // by saving/linking longerAlt on the original config?
                        var longerAltConfig = patternIdxToConfig[longerAltIdx];
                        var longerAltPattern = longerAltConfig.pattern;
                        // single Char can never be a longer alt so no need to test it.
                        // manually in-lined because > 600 chars won't be in-lined in V8
                        if (longerAltConfig.isCustom === true) {
                            match = longerAltPattern.exec(orgText, offset, matchedTokens, groups);
                            matchAltImage = match !== null ? match[0] : match;
                        }
                        else {
                            this.updateLastIndex(longerAltPattern, offset);
                            matchAltImage = this.match(longerAltPattern, text, offset);
                        }
                        if (matchAltImage &&
                            matchAltImage.length > matchedImage.length) {
                            matchedImage = matchAltImage;
                            currConfig = longerAltConfig;
                        }
                    }
                    break;
                }
            }
            // successful match
            if (matchedImage !== null) {
                // matchedImage = match[0]
                imageLength = matchedImage.length;
                group = currConfig.group;
                if (group !== undefined) {
                    tokType = currConfig.tokenTypeIdx;
                    // TODO: "offset + imageLength" and the new column may be computed twice in case of "full" location information inside
                    // createFullToken method
                    newToken = this.createTokenInstance(matchedImage, offset, tokType, currConfig.tokenType, line, column, imageLength);
                    if (group === false) {
                        matchedTokensIndex = this.addToken(matchedTokens, matchedTokensIndex, newToken);
                    }
                    else {
                        groups[group].push(newToken);
                    }
                }
                text = this.chopInput(text, imageLength);
                offset = offset + imageLength;
                // TODO: with newlines the column may be assigned twice
                column = this.computeNewColumn(column, imageLength);
                if (trackLines === true &&
                    currConfig.canLineTerminator === true) {
                    var numOfLTsInMatch = 0;
                    var foundTerminator = void 0;
                    var lastLTEndOffset = void 0;
                    lineTerminatorPattern.lastIndex = 0;
                    do {
                        foundTerminator = lineTerminatorPattern.test(matchedImage);
                        if (foundTerminator === true) {
                            lastLTEndOffset =
                                lineTerminatorPattern.lastIndex - 1;
                            numOfLTsInMatch++;
                        }
                    } while (foundTerminator);
                    if (numOfLTsInMatch !== 0) {
                        line = line + numOfLTsInMatch;
                        column = imageLength - lastLTEndOffset;
                        this.updateTokenEndLineColumnLocation(newToken, group, lastLTEndOffset, numOfLTsInMatch, line, column, imageLength);
                    }
                }
                // will be NOOP if no modes present
                this.handleModes(currConfig, pop_mode, push_mode, newToken);
            }
            else {
                // error recovery, drop characters until we identify a valid token's start point
                var errorStartOffset = offset;
                var errorLine = line;
                var errorColumn = column;
                var foundResyncPoint = false;
                while (!foundResyncPoint && offset < orgLength) {
                    // drop chars until we succeed in matching something
                    droppedChar = orgText.charCodeAt(offset);
                    // Identity Func (when sticky flag is enabled)
                    text = this.chopInput(text, 1);
                    offset++;
                    for (j = 0; j < currModePatternsLength; j++) {
                        var currConfig_1 = patternIdxToConfig[j];
                        var currPattern = currConfig_1.pattern;
                        // manually in-lined because > 600 chars won't be in-lined in V8
                        var singleCharCode = currConfig_1.short;
                        if (singleCharCode !== false) {
                            if (orgText.charCodeAt(offset) === singleCharCode) {
                                // single character string
                                foundResyncPoint = true;
                            }
                        }
                        else if (currConfig_1.isCustom === true) {
                            foundResyncPoint =
                                currPattern.exec(orgText, offset, matchedTokens, groups) !== null;
                        }
                        else {
                            this.updateLastIndex(currPattern, offset);
                            foundResyncPoint = currPattern.exec(text) !== null;
                        }
                        if (foundResyncPoint === true) {
                            break;
                        }
                    }
                }
                errLength = offset - errorStartOffset;
                // at this point we either re-synced or reached the end of the input text
                msg = this.config.errorMessageProvider.buildUnexpectedCharactersMessage(orgText, errorStartOffset, errLength, errorLine, errorColumn);
                errors.push({
                    offset: errorStartOffset,
                    line: errorLine,
                    column: errorColumn,
                    length: errLength,
                    message: msg
                });
            }
        }
        // if we do have custom patterns which push directly into the
        if (!this.hasCustom) {
            // if we guessed a too large size for the tokens array this will shrink it to the right size.
            matchedTokens.length = matchedTokensIndex;
        }
        return {
            tokens: matchedTokens,
            groups: groups,
            errors: errors
        };
    };
    Lexer.prototype.handleModes = function (config, pop_mode, push_mode, newToken) {
        if (config.pop === true) {
            // need to save the PUSH_MODE property as if the mode is popped
            // patternIdxToPopMode is updated to reflect the new mode after popping the stack
            var pushMode = config.push;
            pop_mode(newToken);
            if (pushMode !== undefined) {
                push_mode.call(this, pushMode);
            }
        }
        else if (config.push !== undefined) {
            push_mode.call(this, config.push);
        }
    };
    Lexer.prototype.chopInput = function (text, length) {
        return text.substring(length);
    };
    Lexer.prototype.updateLastIndex = function (regExp, newLastIndex) {
        regExp.lastIndex = newLastIndex;
    };
    // TODO: decrease this under 600 characters? inspect stripping comments option in TSC compiler
    Lexer.prototype.updateTokenEndLineColumnLocation = function (newToken, group, lastLTIdx, numOfLTsInMatch, line, column, imageLength) {
        var lastCharIsLT, fixForEndingInLT;
        if (group !== undefined) {
            // a none skipped multi line Token, need to update endLine/endColumn
            lastCharIsLT = lastLTIdx === imageLength - 1;
            fixForEndingInLT = lastCharIsLT ? -1 : 0;
            if (!(numOfLTsInMatch === 1 && lastCharIsLT === true)) {
                // if a token ends in a LT that last LT only affects the line numbering of following Tokens
                newToken.endLine = line + fixForEndingInLT;
                // the last LT in a token does not affect the endColumn either as the [columnStart ... columnEnd)
                // inclusive to exclusive range.
                newToken.endColumn = column - 1 + -fixForEndingInLT;
            }
            // else single LT in the last character of a token, no need to modify the endLine/EndColumn
        }
    };
    Lexer.prototype.computeNewColumn = function (oldColumn, imageLength) {
        return oldColumn + imageLength;
    };
    // Place holder, will be replaced by the correct variant according to the locationTracking option at runtime.
    /* istanbul ignore next - place holder */
    Lexer.prototype.createTokenInstance = function () {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        return null;
    };
    Lexer.prototype.createOffsetOnlyToken = function (image, startOffset, tokenTypeIdx, tokenType) {
        return {
            image: image,
            startOffset: startOffset,
            tokenTypeIdx: tokenTypeIdx,
            tokenType: tokenType
        };
    };
    Lexer.prototype.createStartOnlyToken = function (image, startOffset, tokenTypeIdx, tokenType, startLine, startColumn) {
        return {
            image: image,
            startOffset: startOffset,
            startLine: startLine,
            startColumn: startColumn,
            tokenTypeIdx: tokenTypeIdx,
            tokenType: tokenType
        };
    };
    Lexer.prototype.createFullToken = function (image, startOffset, tokenTypeIdx, tokenType, startLine, startColumn, imageLength) {
        return {
            image: image,
            startOffset: startOffset,
            endOffset: startOffset + imageLength - 1,
            startLine: startLine,
            endLine: startLine,
            startColumn: startColumn,
            endColumn: startColumn + imageLength - 1,
            tokenTypeIdx: tokenTypeIdx,
            tokenType: tokenType
        };
    };
    // Place holder, will be replaced by the correct variant according to the locationTracking option at runtime.
    /* istanbul ignore next - place holder */
    Lexer.prototype.addToken = function (tokenVector, index, tokenToAdd) {
        return 666;
    };
    Lexer.prototype.addTokenUsingPush = function (tokenVector, index, tokenToAdd) {
        tokenVector.push(tokenToAdd);
        return index;
    };
    Lexer.prototype.addTokenUsingMemberAccess = function (tokenVector, index, tokenToAdd) {
        tokenVector[index] = tokenToAdd;
        index++;
        return index;
    };
    /* istanbul ignore next - place holder to be replaced with chosen alternative at runtime */
    Lexer.prototype.match = function (pattern, text, offset) {
        return null;
    };
    Lexer.prototype.matchWithTest = function (pattern, text, offset) {
        var found = pattern.test(text);
        if (found === true) {
            return text.substring(offset, pattern.lastIndex);
        }
        return null;
    };
    Lexer.prototype.matchWithExec = function (pattern, text) {
        var regExpArray = pattern.exec(text);
        return regExpArray !== null ? regExpArray[0] : regExpArray;
    };
    Lexer.SKIPPED = "This marks a skipped Token pattern, this means each token identified by it will" +
        "be consumed and then thrown into oblivion, this can be used to for example to completely ignore whitespace.";
    Lexer.NA = /NOT_APPLICABLE/;
    return Lexer;
}());
exports.Lexer = Lexer;
//# sourceMappingURL=lexer_public.js.map

/***/ }),
/* 10 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var utils_1 = __webpack_require__(0);
var gast_public_1 = __webpack_require__(2);
var gast_visitor_public_1 = __webpack_require__(11);
var tokens_public_1 = __webpack_require__(1);
function isSequenceProd(prod) {
    return (prod instanceof gast_public_1.Flat ||
        prod instanceof gast_public_1.Option ||
        prod instanceof gast_public_1.Repetition ||
        prod instanceof gast_public_1.RepetitionMandatory ||
        prod instanceof gast_public_1.RepetitionMandatoryWithSeparator ||
        prod instanceof gast_public_1.RepetitionWithSeparator ||
        prod instanceof gast_public_1.Terminal ||
        prod instanceof gast_public_1.Rule);
}
exports.isSequenceProd = isSequenceProd;
function isOptionalProd(prod, alreadyVisited) {
    if (alreadyVisited === void 0) { alreadyVisited = []; }
    var isDirectlyOptional = prod instanceof gast_public_1.Option ||
        prod instanceof gast_public_1.Repetition ||
        prod instanceof gast_public_1.RepetitionWithSeparator;
    if (isDirectlyOptional) {
        return true;
    }
    // note that this can cause infinite loop if one optional empty TOP production has a cyclic dependency with another
    // empty optional top rule
    // may be indirectly optional ((A?B?C?) | (D?E?F?))
    if (prod instanceof gast_public_1.Alternation) {
        // for OR its enough for just one of the alternatives to be optional
        return utils_1.some(prod.definition, function (subProd) {
            return isOptionalProd(subProd, alreadyVisited);
        });
    }
    else if (prod instanceof gast_public_1.NonTerminal && utils_1.contains(alreadyVisited, prod)) {
        // avoiding stack overflow due to infinite recursion
        return false;
    }
    else if (prod instanceof gast_public_1.AbstractProduction) {
        if (prod instanceof gast_public_1.NonTerminal) {
            alreadyVisited.push(prod);
        }
        return utils_1.every(prod.definition, function (subProd) {
            return isOptionalProd(subProd, alreadyVisited);
        });
    }
    else {
        return false;
    }
}
exports.isOptionalProd = isOptionalProd;
function isBranchingProd(prod) {
    return prod instanceof gast_public_1.Alternation;
}
exports.isBranchingProd = isBranchingProd;
function getProductionDslName(prod) {
    /* istanbul ignore else */
    if (prod instanceof gast_public_1.NonTerminal) {
        return "SUBRULE";
    }
    else if (prod instanceof gast_public_1.Option) {
        return "OPTION";
    }
    else if (prod instanceof gast_public_1.Alternation) {
        return "OR";
    }
    else if (prod instanceof gast_public_1.RepetitionMandatory) {
        return "AT_LEAST_ONE";
    }
    else if (prod instanceof gast_public_1.RepetitionMandatoryWithSeparator) {
        return "AT_LEAST_ONE_SEP";
    }
    else if (prod instanceof gast_public_1.RepetitionWithSeparator) {
        return "MANY_SEP";
    }
    else if (prod instanceof gast_public_1.Repetition) {
        return "MANY";
    }
    else if (prod instanceof gast_public_1.Terminal) {
        return "CONSUME";
    }
    else {
        throw Error("non exhaustive match");
    }
}
exports.getProductionDslName = getProductionDslName;
var DslMethodsCollectorVisitor = /** @class */ (function (_super) {
    __extends(DslMethodsCollectorVisitor, _super);
    function DslMethodsCollectorVisitor() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        // A minus is never valid in an identifier name
        _this.separator = "-";
        _this.dslMethods = {
            option: [],
            alternation: [],
            repetition: [],
            repetitionWithSeparator: [],
            repetitionMandatory: [],
            repetitionMandatoryWithSeparator: []
        };
        return _this;
    }
    DslMethodsCollectorVisitor.prototype.visitTerminal = function (terminal) {
        var key = tokens_public_1.tokenName(terminal.terminalType) + this.separator + "Terminal";
        if (!utils_1.has(this.dslMethods, key)) {
            this.dslMethods[key] = [];
        }
        this.dslMethods[key].push(terminal);
    };
    DslMethodsCollectorVisitor.prototype.visitNonTerminal = function (subrule) {
        var key = subrule.nonTerminalName + this.separator + "Terminal";
        if (!utils_1.has(this.dslMethods, key)) {
            this.dslMethods[key] = [];
        }
        this.dslMethods[key].push(subrule);
    };
    DslMethodsCollectorVisitor.prototype.visitOption = function (option) {
        this.dslMethods.option.push(option);
    };
    DslMethodsCollectorVisitor.prototype.visitRepetitionWithSeparator = function (manySep) {
        this.dslMethods.repetitionWithSeparator.push(manySep);
    };
    DslMethodsCollectorVisitor.prototype.visitRepetitionMandatory = function (atLeastOne) {
        this.dslMethods.repetitionMandatory.push(atLeastOne);
    };
    DslMethodsCollectorVisitor.prototype.visitRepetitionMandatoryWithSeparator = function (atLeastOneSep) {
        this.dslMethods.repetitionMandatoryWithSeparator.push(atLeastOneSep);
    };
    DslMethodsCollectorVisitor.prototype.visitRepetition = function (many) {
        this.dslMethods.repetition.push(many);
    };
    DslMethodsCollectorVisitor.prototype.visitAlternation = function (or) {
        this.dslMethods.alternation.push(or);
    };
    return DslMethodsCollectorVisitor;
}(gast_visitor_public_1.GAstVisitor));
exports.DslMethodsCollectorVisitor = DslMethodsCollectorVisitor;
//# sourceMappingURL=gast.js.map

/***/ }),
/* 11 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var gast_public_1 = __webpack_require__(2);
var GAstVisitor = /** @class */ (function () {
    function GAstVisitor() {
    }
    GAstVisitor.prototype.visit = function (node) {
        /* istanbul ignore next */
        if (node instanceof gast_public_1.NonTerminal) {
            return this.visitNonTerminal(node);
        }
        else if (node instanceof gast_public_1.Flat) {
            return this.visitFlat(node);
        }
        else if (node instanceof gast_public_1.Option) {
            return this.visitOption(node);
        }
        else if (node instanceof gast_public_1.RepetitionMandatory) {
            return this.visitRepetitionMandatory(node);
        }
        else if (node instanceof gast_public_1.RepetitionMandatoryWithSeparator) {
            return this.visitRepetitionMandatoryWithSeparator(node);
        }
        else if (node instanceof gast_public_1.RepetitionWithSeparator) {
            return this.visitRepetitionWithSeparator(node);
        }
        else if (node instanceof gast_public_1.Repetition) {
            return this.visitRepetition(node);
        }
        else if (node instanceof gast_public_1.Alternation) {
            return this.visitAlternation(node);
        }
        else if (node instanceof gast_public_1.Terminal) {
            return this.visitTerminal(node);
        }
        else if (node instanceof gast_public_1.Rule) {
            return this.visitRule(node);
        }
        else {
            throw Error("non exhaustive match");
        }
    };
    GAstVisitor.prototype.visitNonTerminal = function (node) { };
    GAstVisitor.prototype.visitFlat = function (node) { };
    GAstVisitor.prototype.visitOption = function (node) { };
    GAstVisitor.prototype.visitRepetition = function (node) { };
    GAstVisitor.prototype.visitRepetitionMandatory = function (node) { };
    GAstVisitor.prototype.visitRepetitionMandatoryWithSeparator = function (node) { };
    GAstVisitor.prototype.visitRepetitionWithSeparator = function (node) { };
    GAstVisitor.prototype.visitAlternation = function (node) { };
    GAstVisitor.prototype.visitTerminal = function (node) { };
    GAstVisitor.prototype.visitRule = function (node) { };
    return GAstVisitor;
}());
exports.GAstVisitor = GAstVisitor;
//# sourceMappingURL=gast_visitor_public.js.map

/***/ }),
/* 12 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var tokens_public_1 = __webpack_require__(1);
var utils = __webpack_require__(0);
var utils_1 = __webpack_require__(0);
var gast_public_1 = __webpack_require__(2);
var gast_1 = __webpack_require__(10);
var checks_1 = __webpack_require__(14);
var version_1 = __webpack_require__(17);
var parser_1 = __webpack_require__(4);
exports.defaultParserErrorProvider = {
    buildMismatchTokenMessage: function (_a) {
        var expected = _a.expected, actual = _a.actual, previous = _a.previous, ruleName = _a.ruleName;
        var hasLabel = tokens_public_1.hasTokenLabel(expected);
        var expectedMsg = hasLabel
            ? "--> " + tokens_public_1.tokenLabel(expected) + " <--"
            : "token of type --> " + tokens_public_1.tokenName(expected) + " <--";
        var msg = "Expecting " + expectedMsg + " but found --> '" + actual.image + "' <--";
        return msg;
    },
    buildNotAllInputParsedMessage: function (_a) {
        var firstRedundant = _a.firstRedundant, ruleName = _a.ruleName;
        return ("Redundant input, expecting EOF but found: " + firstRedundant.image);
    },
    buildNoViableAltMessage: function (_a) {
        var expectedPathsPerAlt = _a.expectedPathsPerAlt, actual = _a.actual, previous = _a.previous, customUserDescription = _a.customUserDescription, ruleName = _a.ruleName;
        var errPrefix = "Expecting: ";
        // TODO: issue: No Viable Alternative Error may have incomplete details. #502
        var actualText = utils_1.first(actual).image;
        var errSuffix = "\nbut found: '" + actualText + "'";
        if (customUserDescription) {
            return errPrefix + customUserDescription + errSuffix;
        }
        else {
            var allLookAheadPaths = utils_1.reduce(expectedPathsPerAlt, function (result, currAltPaths) { return result.concat(currAltPaths); }, []);
            var nextValidTokenSequences = utils_1.map(allLookAheadPaths, function (currPath) {
                return "[" + utils_1.map(currPath, function (currTokenType) {
                    return tokens_public_1.tokenLabel(currTokenType);
                }).join(", ") + "]";
            });
            var nextValidSequenceItems = utils_1.map(nextValidTokenSequences, function (itemMsg, idx) { return "  " + (idx + 1) + ". " + itemMsg; });
            var calculatedDescription = "one of these possible Token sequences:\n" + nextValidSequenceItems.join("\n");
            return errPrefix + calculatedDescription + errSuffix;
        }
    },
    buildEarlyExitMessage: function (_a) {
        var expectedIterationPaths = _a.expectedIterationPaths, actual = _a.actual, customUserDescription = _a.customUserDescription, ruleName = _a.ruleName;
        var errPrefix = "Expecting: ";
        // TODO: issue: No Viable Alternative Error may have incomplete details. #502
        var actualText = utils_1.first(actual).image;
        var errSuffix = "\nbut found: '" + actualText + "'";
        if (customUserDescription) {
            return errPrefix + customUserDescription + errSuffix;
        }
        else {
            var nextValidTokenSequences = utils_1.map(expectedIterationPaths, function (currPath) {
                return "[" + utils_1.map(currPath, function (currTokenType) {
                    return tokens_public_1.tokenLabel(currTokenType);
                }).join(",") + "]";
            });
            var calculatedDescription = "expecting at least one iteration which starts with one of these possible Token sequences::\n  " +
                ("<" + nextValidTokenSequences.join(" ,") + ">");
            return errPrefix + calculatedDescription + errSuffix;
        }
    }
};
Object.freeze(exports.defaultParserErrorProvider);
exports.defaultGrammarResolverErrorProvider = {
    buildRuleNotFoundError: function (topLevelRule, undefinedRule) {
        var msg = "Invalid grammar, reference to a rule which is not defined: ->" +
            undefinedRule.nonTerminalName +
            "<-\n" +
            "inside top level rule: ->" +
            topLevelRule.name +
            "<-";
        return msg;
    }
};
exports.defaultGrammarValidatorErrorProvider = {
    buildDuplicateFoundError: function (topLevelRule, duplicateProds) {
        function getExtraProductionArgument(prod) {
            if (prod instanceof gast_public_1.Terminal) {
                return tokens_public_1.tokenName(prod.terminalType);
            }
            else if (prod instanceof gast_public_1.NonTerminal) {
                return prod.nonTerminalName;
            }
            else {
                return "";
            }
        }
        var topLevelName = topLevelRule.name;
        var duplicateProd = utils_1.first(duplicateProds);
        var index = duplicateProd.idx;
        var dslName = gast_1.getProductionDslName(duplicateProd);
        var extraArgument = getExtraProductionArgument(duplicateProd);
        var msg = "->" + dslName + "<- with numerical suffix: ->" + index + "<-\n                  " + (extraArgument ? "and argument: ->" + extraArgument + "<-" : "") + "\n                  appears more than once (" + duplicateProds.length + " times) in the top level rule: ->" + topLevelName + "<-.\n                  " + (index === 0
            ? "Also note that numerical suffix 0 means " + dslName + " without any suffix."
            : "") + "\n                  To fix this make sure each usage of " + dslName + " " + (extraArgument ? "with the argument: ->" + extraArgument + "<-" : "") + "\n                  in the rule ->" + topLevelName + "<- has a different occurrence index (0-5), as that combination acts as a unique\n                  position key in the grammar, which is needed by the parsing engine.\n                  \n                  For further details see: https://sap.github.io/chevrotain/docs/FAQ.html#NUMERICAL_SUFFIXES \n                  ";
        // white space trimming time! better to trim afterwards as it allows to use WELL formatted multi line template strings...
        msg = msg.replace(/[ \t]+/g, " ");
        msg = msg.replace(/\s\s+/g, "\n");
        return msg;
    },
    buildInvalidNestedRuleNameError: function (topLevelRule, nestedProd) {
        var msg = "Invalid nested rule name: ->" + nestedProd.name + "<- inside rule: ->" + topLevelRule.name + "<-\n" +
            ("it must match the pattern: ->" + checks_1.validNestedRuleName.toString() + "<-.\n") +
            "Note that this means a nested rule name must start with the '$'(dollar) sign.";
        return msg;
    },
    buildDuplicateNestedRuleNameError: function (topLevelRule, nestedProd) {
        var duplicateName = utils_1.first(nestedProd).name;
        var errMsg = "Duplicate nested rule name: ->" + duplicateName + "<- inside rule: ->" + topLevelRule.name + "<-\n" +
            "A nested name must be unique in the scope of a top level grammar rule.";
        return errMsg;
    },
    buildNamespaceConflictError: function (rule) {
        var errMsg = "Namespace conflict found in grammar.\n" +
            ("The grammar has both a Terminal(Token) and a Non-Terminal(Rule) named: <" + rule.name + ">.\n") +
            "To resolve this make sure each Terminal and Non-Terminal names are unique\n" +
            "This is easy to accomplish by using the convention that Terminal names start with an uppercase letter\n" +
            "and Non-Terminal names start with a lower case letter.";
        return errMsg;
    },
    buildAlternationPrefixAmbiguityError: function (options) {
        var pathMsg = utils_1.map(options.prefixPath, function (currTok) {
            return tokens_public_1.tokenLabel(currTok);
        }).join(", ");
        var occurrence = options.alternation.idx === 0 ? "" : options.alternation.idx;
        var errMsg = "Ambiguous alternatives: <" + options.ambiguityIndices.join(" ,") + "> due to common lookahead prefix\n" +
            ("in <OR" + occurrence + "> inside <" + options.topLevelRule.name + "> Rule,\n") +
            ("<" + pathMsg + "> may appears as a prefix path in all these alternatives.\n") +
            "https://sap.github.io/chevrotain/docs/guide/resolving_grammar_errors.html#COMMON_PREFIX\n" +
            "For Further details.";
        return errMsg;
    },
    buildAlternationAmbiguityError: function (options) {
        var pathMsg = utils_1.map(options.prefixPath, function (currtok) {
            return tokens_public_1.tokenLabel(currtok);
        }).join(", ");
        var occurrence = options.alternation.idx === 0 ? "" : options.alternation.idx;
        var currMessage = "Ambiguous alternatives: <" + options.ambiguityIndices.join(" ,") + "> in <OR" + occurrence + ">" +
            (" inside <" + options.topLevelRule.name + "> Rule,\n") +
            ("<" + pathMsg + "> may appears as a prefix path in all these alternatives.\n");
        var docs_version = version_1.VERSION.replace(/\./g, "_");
        // Should this information be on the error message or in some common errors docs?
        currMessage =
            currMessage +
                "To Resolve this, try one of of the following: \n" +
                ("1. Refactor your grammar to be LL(K) for the current value of k (by default k=" + parser_1.DEFAULT_PARSER_CONFIG.maxLookahead + "})\n") +
                "2. Increase the value of K for your grammar by providing a larger 'maxLookahead' value in the parser's config\n" +
                "3. This issue can be ignored (if you know what you are doing...), see" +
                " https://sap.github.io/chevrotain/documentation/" +
                docs_version +
                "/interfaces/iparserconfig.html#ignoredissues for more" +
                " details\n";
        return currMessage;
    },
    buildEmptyRepetitionError: function (options) {
        var dslName = gast_1.getProductionDslName(options.repetition);
        if (options.repetition.idx !== 0) {
            dslName += options.repetition.idx;
        }
        var errMsg = "The repetition <" + dslName + "> within Rule <" + options.topLevelRule.name + "> can never consume any tokens.\n" +
            "This could lead to an infinite loop.";
        return errMsg;
    },
    buildTokenNameError: function (options) {
        var tokTypeName = tokens_public_1.tokenName(options.tokenType);
        var errMsg = "Invalid Grammar Token name: ->" + tokTypeName + "<- it must match the pattern: ->" + options.expectedPattern.toString() + "<-";
        return errMsg;
    },
    buildEmptyAlternationError: function (options) {
        var errMsg = "Ambiguous empty alternative: <" + (options.emptyChoiceIdx + 1) + ">" +
            (" in <OR" + options.alternation.idx + "> inside <" + options.topLevelRule.name + "> Rule.\n") +
            "Only the last alternative may be an empty alternative.";
        return errMsg;
    },
    buildTooManyAlternativesError: function (options) {
        var errMsg = "An Alternation cannot have more than 256 alternatives:\n" +
            ("<OR" + options.alternation.idx + "> inside <" + options.topLevelRule.name + "> Rule.\n has " + (options.alternation.definition.length +
                1) + " alternatives.");
        return errMsg;
    },
    buildLeftRecursionError: function (options) {
        var ruleName = options.topLevelRule.name;
        var pathNames = utils.map(options.leftRecursionPath, function (currRule) { return currRule.name; });
        var leftRecursivePath = ruleName + " --> " + pathNames
            .concat([ruleName])
            .join(" --> ");
        var errMsg = "Left Recursion found in grammar.\n" +
            ("rule: <" + ruleName + "> can be invoked from itself (directly or indirectly)\n") +
            ("without consuming any Tokens. The grammar path that causes this is: \n " + leftRecursivePath + "\n") +
            " To fix this refactor your grammar to remove the left recursion.\n" +
            "see: https://en.wikipedia.org/wiki/LL_parser#Left_Factoring.";
        return errMsg;
    },
    buildInvalidRuleNameError: function (options) {
        var ruleName = options.topLevelRule.name;
        var expectedPatternString = options.expectedPattern.toString();
        var errMsg = "Invalid grammar rule name: ->" + ruleName + "<- it must match the pattern: ->" + expectedPatternString + "<-";
        return errMsg;
    },
    buildDuplicateRuleNameError: function (options) {
        var ruleName;
        if (options.topLevelRule instanceof gast_public_1.Rule) {
            ruleName = options.topLevelRule.name;
        }
        else {
            ruleName = options.topLevelRule;
        }
        var errMsg = "Duplicate definition, rule: ->" + ruleName + "<- is already defined in the grammar: ->" + options.grammarName + "<-";
        return errMsg;
    }
};
//# sourceMappingURL=errors_public.js.map

/***/ }),
/* 13 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var gast_public_1 = __webpack_require__(2);
var gast_public_2 = __webpack_require__(2);
var gast_public_3 = __webpack_require__(2);
var gast_public_4 = __webpack_require__(2);
var IdentTok = /** @class */ (function () {
    function IdentTok() {
    }
    IdentTok.PATTERN = /NA/;
    return IdentTok;
}());
exports.IdentTok = IdentTok;
var DotTok = /** @class */ (function () {
    function DotTok() {
    }
    DotTok.PATTERN = /NA/;
    return DotTok;
}());
exports.DotTok = DotTok;
var DotDotTok = /** @class */ (function () {
    function DotDotTok() {
    }
    DotDotTok.PATTERN = /NA/;
    return DotDotTok;
}());
exports.DotDotTok = DotDotTok;
var ColonTok = /** @class */ (function () {
    function ColonTok() {
    }
    ColonTok.PATTERN = /NA/;
    return ColonTok;
}());
exports.ColonTok = ColonTok;
var LSquareTok = /** @class */ (function () {
    function LSquareTok() {
    }
    LSquareTok.PATTERN = /NA/;
    return LSquareTok;
}());
exports.LSquareTok = LSquareTok;
var RSquareTok = /** @class */ (function () {
    function RSquareTok() {
    }
    RSquareTok.PATTERN = /NA/;
    return RSquareTok;
}());
exports.RSquareTok = RSquareTok;
var ActionTok = /** @class */ (function () {
    function ActionTok() {
    }
    ActionTok.PATTERN = /NA/;
    return ActionTok;
}());
exports.ActionTok = ActionTok;
var LParenTok = /** @class */ (function () {
    function LParenTok() {
    }
    LParenTok.PATTERN = /NA/;
    return LParenTok;
}());
exports.LParenTok = LParenTok;
var RParenTok = /** @class */ (function () {
    function RParenTok() {
    }
    RParenTok.PATTERN = /NA/;
    return RParenTok;
}());
exports.RParenTok = RParenTok;
var CommaTok = /** @class */ (function () {
    function CommaTok() {
    }
    CommaTok.PATTERN = /NA/;
    return CommaTok;
}());
exports.CommaTok = CommaTok;
var SemicolonTok = /** @class */ (function () {
    function SemicolonTok() {
    }
    SemicolonTok.PATTERN = /NA/;
    return SemicolonTok;
}());
exports.SemicolonTok = SemicolonTok;
var UnsignedIntegerLiteralTok = /** @class */ (function () {
    function UnsignedIntegerLiteralTok() {
    }
    UnsignedIntegerLiteralTok.PATTERN = /NA/;
    return UnsignedIntegerLiteralTok;
}());
exports.UnsignedIntegerLiteralTok = UnsignedIntegerLiteralTok;
var DefaultTok = /** @class */ (function () {
    function DefaultTok() {
    }
    DefaultTok.PATTERN = /NA/;
    return DefaultTok;
}());
exports.DefaultTok = DefaultTok;
var AsteriskTok = /** @class */ (function () {
    function AsteriskTok() {
    }
    AsteriskTok.PATTERN = /NA/;
    return AsteriskTok;
}());
exports.AsteriskTok = AsteriskTok;
var EntityTok = /** @class */ (function () {
    function EntityTok() {
    }
    EntityTok.PATTERN = /NA/;
    return EntityTok;
}());
exports.EntityTok = EntityTok;
var NamespaceTok = /** @class */ (function () {
    function NamespaceTok() {
    }
    NamespaceTok.PATTERN = /NA/;
    return NamespaceTok;
}());
exports.NamespaceTok = NamespaceTok;
var TypeTok = /** @class */ (function () {
    function TypeTok() {
    }
    TypeTok.PATTERN = /NA/;
    return TypeTok;
}());
exports.TypeTok = TypeTok;
var ConstTok = /** @class */ (function () {
    function ConstTok() {
    }
    ConstTok.PATTERN = /NA/;
    return ConstTok;
}());
exports.ConstTok = ConstTok;
var RequiredTok = /** @class */ (function () {
    function RequiredTok() {
    }
    RequiredTok.PATTERN = /NA/;
    return RequiredTok;
}());
exports.RequiredTok = RequiredTok;
var KeyTok = /** @class */ (function () {
    function KeyTok() {
    }
    KeyTok.PATTERN = /NA/;
    return KeyTok;
}());
exports.KeyTok = KeyTok;
var ElementTok = /** @class */ (function () {
    function ElementTok() {
    }
    ElementTok.PATTERN = /NA/;
    return ElementTok;
}());
exports.ElementTok = ElementTok;
exports.atLeastOneRule = new gast_public_1.Rule({
    name: "atLeastOneRule",
    definition: [
        new gast_public_1.RepetitionMandatory({
            definition: [
                new gast_public_1.RepetitionMandatory({
                    definition: [
                        new gast_public_1.RepetitionMandatory({
                            definition: [
                                new gast_public_1.Terminal({ terminalType: EntityTok })
                            ],
                            idx: 3
                        }),
                        new gast_public_1.Terminal({ terminalType: CommaTok })
                    ],
                    idx: 2
                }),
                new gast_public_1.Terminal({ terminalType: DotTok, idx: 1 })
            ]
        }),
        new gast_public_1.Terminal({ terminalType: DotTok, idx: 2 })
    ]
});
exports.atLeastOneSepRule = new gast_public_1.Rule({
    name: "atLeastOneSepRule",
    definition: [
        new gast_public_1.RepetitionMandatoryWithSeparator({
            definition: [
                new gast_public_1.RepetitionMandatoryWithSeparator({
                    definition: [
                        new gast_public_1.RepetitionMandatoryWithSeparator({
                            definition: [
                                new gast_public_1.Terminal({ terminalType: EntityTok })
                            ],
                            separator: SemicolonTok,
                            idx: 3
                        }),
                        new gast_public_1.Terminal({ terminalType: CommaTok })
                    ],
                    separator: SemicolonTok,
                    idx: 2
                }),
                new gast_public_1.Terminal({ terminalType: DotTok, idx: 1 })
            ],
            separator: SemicolonTok
        }),
        new gast_public_1.Terminal({ terminalType: DotTok, idx: 2 })
    ]
});
exports.qualifiedName = new gast_public_1.Rule({
    name: "qualifiedName",
    definition: [
        new gast_public_1.Terminal({ terminalType: IdentTok }),
        new gast_public_1.Repetition({
            definition: [
                new gast_public_1.Terminal({ terminalType: DotTok }),
                new gast_public_1.Terminal({ terminalType: IdentTok, idx: 2 })
            ]
        })
    ]
});
exports.qualifiedNameSep = new gast_public_1.Rule({
    name: "qualifiedNameSep",
    definition: [
        new gast_public_1.RepetitionMandatoryWithSeparator({
            definition: [new gast_public_1.Terminal({ terminalType: IdentTok, idx: 1 })],
            separator: DotTok
        })
    ]
});
exports.paramSpec = new gast_public_1.Rule({
    name: "paramSpec",
    definition: [
        new gast_public_1.Terminal({ terminalType: IdentTok }),
        new gast_public_1.Terminal({ terminalType: ColonTok }),
        new gast_public_1.NonTerminal({
            nonTerminalName: "qualifiedName",
            referencedRule: exports.qualifiedName
        }),
        new gast_public_1.Option({
            definition: [
                new gast_public_1.Terminal({ terminalType: LSquareTok }),
                new gast_public_1.Terminal({ terminalType: RSquareTok })
            ]
        })
    ]
});
exports.actionDec = new gast_public_1.Rule({
    name: "actionDec",
    definition: [
        new gast_public_1.Terminal({ terminalType: ActionTok }),
        new gast_public_1.Terminal({ terminalType: IdentTok }),
        new gast_public_1.Terminal({ terminalType: LParenTok }),
        new gast_public_1.Option({
            definition: [
                new gast_public_1.NonTerminal({
                    nonTerminalName: "paramSpec",
                    referencedRule: exports.paramSpec
                }),
                new gast_public_1.Repetition({
                    definition: [
                        new gast_public_1.Terminal({ terminalType: CommaTok }),
                        new gast_public_1.NonTerminal({
                            nonTerminalName: "paramSpec",
                            referencedRule: exports.paramSpec,
                            idx: 2
                        })
                    ]
                })
            ]
        }),
        new gast_public_1.Terminal({ terminalType: RParenTok }),
        new gast_public_1.Option({
            definition: [
                new gast_public_1.Terminal({ terminalType: ColonTok }),
                new gast_public_1.NonTerminal({
                    nonTerminalName: "qualifiedName",
                    referencedRule: exports.qualifiedName
                })
            ],
            idx: 2
        }),
        new gast_public_1.Terminal({ terminalType: SemicolonTok })
    ]
});
exports.actionDecSep = new gast_public_1.Rule({
    name: "actionDecSep",
    definition: [
        new gast_public_1.Terminal({ terminalType: ActionTok }),
        new gast_public_1.Terminal({ terminalType: IdentTok }),
        new gast_public_1.Terminal({ terminalType: LParenTok }),
        new gast_public_4.RepetitionWithSeparator({
            definition: [
                new gast_public_1.NonTerminal({
                    nonTerminalName: "paramSpec",
                    referencedRule: exports.paramSpec,
                    idx: 2
                })
            ],
            separator: CommaTok
        }),
        new gast_public_1.Terminal({ terminalType: RParenTok }),
        new gast_public_1.Option({
            definition: [
                new gast_public_1.Terminal({ terminalType: ColonTok }),
                new gast_public_1.NonTerminal({
                    nonTerminalName: "qualifiedName",
                    referencedRule: exports.qualifiedName
                })
            ],
            idx: 2
        }),
        new gast_public_1.Terminal({ terminalType: SemicolonTok })
    ]
});
exports.manyActions = new gast_public_1.Rule({
    name: "manyActions",
    definition: [
        new gast_public_1.Repetition({
            definition: [
                new gast_public_1.NonTerminal({
                    nonTerminalName: "actionDec",
                    referencedRule: exports.actionDec,
                    idx: 1
                })
            ]
        })
    ]
});
exports.cardinality = new gast_public_1.Rule({
    name: "cardinality",
    definition: [
        new gast_public_1.Terminal({ terminalType: LSquareTok }),
        new gast_public_1.Terminal({ terminalType: UnsignedIntegerLiteralTok }),
        new gast_public_1.Terminal({ terminalType: DotDotTok }),
        new gast_public_2.Alternation({
            definition: [
                new gast_public_3.Flat({
                    definition: [
                        new gast_public_1.Terminal({
                            terminalType: UnsignedIntegerLiteralTok,
                            idx: 2
                        })
                    ]
                }),
                new gast_public_3.Flat({
                    definition: [new gast_public_1.Terminal({ terminalType: AsteriskTok })]
                })
            ]
        }),
        new gast_public_1.Terminal({ terminalType: RSquareTok })
    ]
});
exports.assignedTypeSpec = new gast_public_1.Rule({
    name: "assignedTypeSpec",
    definition: [
        new gast_public_1.Terminal({ terminalType: ColonTok }),
        new gast_public_1.NonTerminal({ nonTerminalName: "assignedType" }),
        new gast_public_1.Option({
            definition: [new gast_public_1.NonTerminal({ nonTerminalName: "enumClause" })]
        }),
        new gast_public_1.Option({
            definition: [
                new gast_public_1.Terminal({ terminalType: DefaultTok }),
                new gast_public_1.NonTerminal({ nonTerminalName: "expression" })
            ],
            idx: 2
        })
    ]
});
exports.lotsOfOrs = new gast_public_1.Rule({
    name: "lotsOfOrs",
    definition: [
        new gast_public_2.Alternation({
            definition: [
                new gast_public_3.Flat({
                    definition: [
                        new gast_public_2.Alternation({
                            definition: [
                                new gast_public_3.Flat({
                                    definition: [
                                        new gast_public_1.Terminal({
                                            terminalType: CommaTok,
                                            idx: 1
                                        })
                                    ]
                                }),
                                new gast_public_3.Flat({
                                    definition: [
                                        new gast_public_1.Terminal({
                                            terminalType: KeyTok,
                                            idx: 1
                                        })
                                    ]
                                })
                            ],
                            idx: 2
                        })
                    ]
                }),
                new gast_public_3.Flat({
                    definition: [
                        new gast_public_1.Terminal({
                            terminalType: EntityTok,
                            idx: 1
                        })
                    ]
                })
            ]
        }),
        new gast_public_2.Alternation({
            definition: [
                new gast_public_3.Flat({
                    definition: [
                        new gast_public_1.Terminal({
                            terminalType: DotTok,
                            idx: 1
                        })
                    ]
                })
            ],
            idx: 3
        })
    ]
});
exports.emptyAltOr = new gast_public_1.Rule({
    name: "emptyAltOr",
    definition: [
        new gast_public_2.Alternation({
            definition: [
                new gast_public_3.Flat({
                    definition: [
                        new gast_public_1.Terminal({
                            terminalType: KeyTok,
                            idx: 1
                        })
                    ]
                }),
                new gast_public_3.Flat({
                    definition: [
                        new gast_public_1.Terminal({
                            terminalType: EntityTok,
                            idx: 1
                        })
                    ]
                }),
                new gast_public_3.Flat({ definition: [] }) // an empty alternative
            ]
        })
    ]
});
exports.callArguments = new gast_public_1.Rule({
    name: "callArguments",
    definition: [
        new gast_public_4.RepetitionWithSeparator({
            definition: [new gast_public_1.Terminal({ terminalType: IdentTok, idx: 1 })],
            separator: CommaTok
        }),
        new gast_public_4.RepetitionWithSeparator({
            definition: [new gast_public_1.Terminal({ terminalType: IdentTok, idx: 2 })],
            separator: CommaTok,
            idx: 2
        })
    ]
});
//# sourceMappingURL=samples.js.map

/***/ }),
/* 14 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var utils = __webpack_require__(0);
var utils_1 = __webpack_require__(0);
var parser_1 = __webpack_require__(4);
var gast_1 = __webpack_require__(10);
var tokens_public_1 = __webpack_require__(1);
var lookahead_1 = __webpack_require__(15);
var cst_1 = __webpack_require__(24);
var interpreter_1 = __webpack_require__(16);
var gast_public_1 = __webpack_require__(2);
var gast_visitor_public_1 = __webpack_require__(11);
function validateGrammar(topLevels, maxLookahead, tokenTypes, ignoredIssues, errMsgProvider, grammarName) {
    var duplicateErrors = utils.map(topLevels, function (currTopLevel) {
        return validateDuplicateProductions(currTopLevel, errMsgProvider);
    });
    var leftRecursionErrors = utils.map(topLevels, function (currTopRule) {
        return validateNoLeftRecursion(currTopRule, currTopRule, errMsgProvider);
    });
    var emptyAltErrors = [];
    var ambiguousAltsErrors = [];
    var emptyRepetitionErrors = [];
    // left recursion could cause infinite loops in the following validations.
    // It is safest to first have the user fix the left recursion errors first and only then examine Further issues.
    if (utils_1.every(leftRecursionErrors, utils_1.isEmpty)) {
        emptyAltErrors = utils_1.map(topLevels, function (currTopRule) {
            return validateEmptyOrAlternative(currTopRule, errMsgProvider);
        });
        ambiguousAltsErrors = utils_1.map(topLevels, function (currTopRule) {
            return validateAmbiguousAlternationAlternatives(currTopRule, maxLookahead, ignoredIssues, errMsgProvider);
        });
        emptyRepetitionErrors = validateSomeNonEmptyLookaheadPath(topLevels, maxLookahead, errMsgProvider);
    }
    var termsNamespaceConflictErrors = checkTerminalAndNoneTerminalsNameSpace(topLevels, tokenTypes, errMsgProvider);
    var tokenNameErrors = utils.map(tokenTypes, function (currTokType) {
        return validateTokenName(currTokType, errMsgProvider);
    });
    var nestedRulesNameErrors = validateNestedRulesNames(topLevels, errMsgProvider);
    var nestedRulesDuplicateErrors = validateDuplicateNestedRules(topLevels, errMsgProvider);
    var tooManyAltsErrors = utils_1.map(topLevels, function (curRule) {
        return validateTooManyAlts(curRule, errMsgProvider);
    });
    var ruleNameErrors = utils_1.map(topLevels, function (curRule) {
        return validateRuleName(curRule, errMsgProvider);
    });
    var duplicateRulesError = utils_1.map(topLevels, function (curRule) {
        return validateRuleDoesNotAlreadyExist(curRule, topLevels, grammarName, errMsgProvider);
    });
    return (utils.flatten(duplicateErrors.concat(tokenNameErrors, nestedRulesNameErrors, nestedRulesDuplicateErrors, emptyRepetitionErrors, leftRecursionErrors, emptyAltErrors, ambiguousAltsErrors, termsNamespaceConflictErrors, tooManyAltsErrors, ruleNameErrors, duplicateRulesError)));
}
exports.validateGrammar = validateGrammar;
function validateNestedRulesNames(topLevels, errMsgProvider) {
    var result = [];
    utils_1.forEach(topLevels, function (curTopLevel) {
        var namedCollectorVisitor = new cst_1.NamedDSLMethodsCollectorVisitor("");
        curTopLevel.accept(namedCollectorVisitor);
        var nestedProds = utils_1.map(namedCollectorVisitor.result, function (currItem) { return currItem.orgProd; });
        result.push(utils_1.map(nestedProds, function (currNestedProd) {
            return validateNestedRuleName(curTopLevel, currNestedProd, errMsgProvider);
        }));
    });
    return utils_1.flatten(result);
}
function validateDuplicateProductions(topLevelRule, errMsgProvider) {
    var collectorVisitor = new OccurrenceValidationCollector();
    topLevelRule.accept(collectorVisitor);
    var allRuleProductions = collectorVisitor.allProductions;
    var productionGroups = utils.groupBy(allRuleProductions, identifyProductionForDuplicates);
    var duplicates = utils.pick(productionGroups, function (currGroup) {
        return currGroup.length > 1;
    });
    var errors = utils.map(utils.values(duplicates), function (currDuplicates) {
        var firstProd = utils.first(currDuplicates);
        var msg = errMsgProvider.buildDuplicateFoundError(topLevelRule, currDuplicates);
        var dslName = gast_1.getProductionDslName(firstProd);
        var defError = {
            message: msg,
            type: parser_1.ParserDefinitionErrorType.DUPLICATE_PRODUCTIONS,
            ruleName: topLevelRule.name,
            dslName: dslName,
            occurrence: firstProd.idx
        };
        var param = getExtraProductionArgument(firstProd);
        if (param) {
            defError.parameter = param;
        }
        return defError;
    });
    return errors;
}
function identifyProductionForDuplicates(prod) {
    return gast_1.getProductionDslName(prod) + "_#_" + prod.idx + "_#_" + getExtraProductionArgument(prod);
}
exports.identifyProductionForDuplicates = identifyProductionForDuplicates;
function getExtraProductionArgument(prod) {
    if (prod instanceof gast_public_1.Terminal) {
        return tokens_public_1.tokenName(prod.terminalType);
    }
    else if (prod instanceof gast_public_1.NonTerminal) {
        return prod.nonTerminalName;
    }
    else {
        return "";
    }
}
var OccurrenceValidationCollector = /** @class */ (function (_super) {
    __extends(OccurrenceValidationCollector, _super);
    function OccurrenceValidationCollector() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.allProductions = [];
        return _this;
    }
    OccurrenceValidationCollector.prototype.visitNonTerminal = function (subrule) {
        this.allProductions.push(subrule);
    };
    OccurrenceValidationCollector.prototype.visitOption = function (option) {
        this.allProductions.push(option);
    };
    OccurrenceValidationCollector.prototype.visitRepetitionWithSeparator = function (manySep) {
        this.allProductions.push(manySep);
    };
    OccurrenceValidationCollector.prototype.visitRepetitionMandatory = function (atLeastOne) {
        this.allProductions.push(atLeastOne);
    };
    OccurrenceValidationCollector.prototype.visitRepetitionMandatoryWithSeparator = function (atLeastOneSep) {
        this.allProductions.push(atLeastOneSep);
    };
    OccurrenceValidationCollector.prototype.visitRepetition = function (many) {
        this.allProductions.push(many);
    };
    OccurrenceValidationCollector.prototype.visitAlternation = function (or) {
        this.allProductions.push(or);
    };
    OccurrenceValidationCollector.prototype.visitTerminal = function (terminal) {
        this.allProductions.push(terminal);
    };
    return OccurrenceValidationCollector;
}(gast_visitor_public_1.GAstVisitor));
exports.OccurrenceValidationCollector = OccurrenceValidationCollector;
exports.validTermsPattern = /^[a-zA-Z_]\w*$/;
exports.validNestedRuleName = new RegExp(exports.validTermsPattern.source.replace("^", "^\\$"));
function validateRuleName(rule, errMsgProvider) {
    var errors = [];
    var ruleName = rule.name;
    if (!ruleName.match(exports.validTermsPattern)) {
        errors.push({
            message: errMsgProvider.buildInvalidRuleNameError({
                topLevelRule: rule,
                expectedPattern: exports.validTermsPattern
            }),
            type: parser_1.ParserDefinitionErrorType.INVALID_RULE_NAME,
            ruleName: ruleName
        });
    }
    return errors;
}
exports.validateRuleName = validateRuleName;
function validateNestedRuleName(topLevel, nestedProd, errMsgProvider) {
    var errors = [];
    var errMsg;
    if (!nestedProd.name.match(exports.validNestedRuleName)) {
        errMsg = errMsgProvider.buildInvalidNestedRuleNameError(topLevel, nestedProd);
        errors.push({
            message: errMsg,
            type: parser_1.ParserDefinitionErrorType.INVALID_NESTED_RULE_NAME,
            ruleName: topLevel.name
        });
    }
    return errors;
}
exports.validateNestedRuleName = validateNestedRuleName;
function validateTokenName(tokenType, errMsgProvider) {
    var errors = [];
    var tokTypeName = tokens_public_1.tokenName(tokenType);
    if (!tokTypeName.match(exports.validTermsPattern)) {
        errors.push({
            message: errMsgProvider.buildTokenNameError({
                tokenType: tokenType,
                expectedPattern: exports.validTermsPattern
            }),
            type: parser_1.ParserDefinitionErrorType.INVALID_TOKEN_NAME
        });
    }
    return errors;
}
exports.validateTokenName = validateTokenName;
function validateRuleDoesNotAlreadyExist(rule, allRules, className, errMsgProvider) {
    var errors = [];
    var occurrences = utils_1.reduce(allRules, function (result, curRule) {
        if (curRule.name === rule.name) {
            return result + 1;
        }
        return result;
    }, 0);
    if (occurrences > 1) {
        var errMsg = errMsgProvider.buildDuplicateRuleNameError({
            topLevelRule: rule,
            grammarName: className
        });
        errors.push({
            message: errMsg,
            type: parser_1.ParserDefinitionErrorType.DUPLICATE_RULE_NAME,
            ruleName: rule.name
        });
    }
    return errors;
}
exports.validateRuleDoesNotAlreadyExist = validateRuleDoesNotAlreadyExist;
// TODO: is there anyway to get only the rule names of rules inherited from the super grammars?
// This is not part of the IGrammarErrorProvider because the validation cannot be performed on
// The grammar structure, only at runtime.
function validateRuleIsOverridden(ruleName, definedRulesNames, className) {
    var errors = [];
    var errMsg;
    if (!utils.contains(definedRulesNames, ruleName)) {
        errMsg =
            "Invalid rule override, rule: ->" + ruleName + "<- cannot be overridden in the grammar: ->" + className + "<-" +
                "as it is not defined in any of the super grammars ";
        errors.push({
            message: errMsg,
            type: parser_1.ParserDefinitionErrorType.INVALID_RULE_OVERRIDE,
            ruleName: ruleName
        });
    }
    return errors;
}
exports.validateRuleIsOverridden = validateRuleIsOverridden;
function validateNoLeftRecursion(topRule, currRule, errMsgProvider, path) {
    if (path === void 0) { path = []; }
    var errors = [];
    var nextNonTerminals = getFirstNoneTerminal(currRule.definition);
    if (utils.isEmpty(nextNonTerminals)) {
        return [];
    }
    else {
        var ruleName = topRule.name;
        var foundLeftRecursion = utils.contains(nextNonTerminals, topRule);
        if (foundLeftRecursion) {
            errors.push({
                message: errMsgProvider.buildLeftRecursionError({
                    topLevelRule: topRule,
                    leftRecursionPath: path
                }),
                type: parser_1.ParserDefinitionErrorType.LEFT_RECURSION,
                ruleName: ruleName
            });
        }
        // we are only looking for cyclic paths leading back to the specific topRule
        // other cyclic paths are ignored, we still need this difference to avoid infinite loops...
        var validNextSteps = utils.difference(nextNonTerminals, path.concat([topRule]));
        var errorsFromNextSteps = utils.map(validNextSteps, function (currRefRule) {
            var newPath = utils.cloneArr(path);
            newPath.push(currRefRule);
            return validateNoLeftRecursion(topRule, currRefRule, errMsgProvider, newPath);
        });
        return errors.concat(utils.flatten(errorsFromNextSteps));
    }
}
exports.validateNoLeftRecursion = validateNoLeftRecursion;
function getFirstNoneTerminal(definition) {
    var result = [];
    if (utils.isEmpty(definition)) {
        return result;
    }
    var firstProd = utils.first(definition);
    /* istanbul ignore else */
    if (firstProd instanceof gast_public_1.NonTerminal) {
        result.push(firstProd.referencedRule);
    }
    else if (firstProd instanceof gast_public_1.Flat ||
        firstProd instanceof gast_public_1.Option ||
        firstProd instanceof gast_public_1.RepetitionMandatory ||
        firstProd instanceof gast_public_1.RepetitionMandatoryWithSeparator ||
        firstProd instanceof gast_public_1.RepetitionWithSeparator ||
        firstProd instanceof gast_public_1.Repetition) {
        result = result.concat(getFirstNoneTerminal(firstProd.definition));
    }
    else if (firstProd instanceof gast_public_1.Alternation) {
        // each sub definition in alternation is a FLAT
        result = utils.flatten(utils.map(firstProd.definition, function (currSubDef) {
            return getFirstNoneTerminal(currSubDef.definition);
        }));
    }
    else if (firstProd instanceof gast_public_1.Terminal) {
        // nothing to see, move along
    }
    else {
        throw Error("non exhaustive match");
    }
    var isFirstOptional = gast_1.isOptionalProd(firstProd);
    var hasMore = definition.length > 1;
    if (isFirstOptional && hasMore) {
        var rest = utils.drop(definition);
        return result.concat(getFirstNoneTerminal(rest));
    }
    else {
        return result;
    }
}
exports.getFirstNoneTerminal = getFirstNoneTerminal;
var OrCollector = /** @class */ (function (_super) {
    __extends(OrCollector, _super);
    function OrCollector() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.alternations = [];
        return _this;
    }
    OrCollector.prototype.visitAlternation = function (node) {
        this.alternations.push(node);
    };
    return OrCollector;
}(gast_visitor_public_1.GAstVisitor));
function validateEmptyOrAlternative(topLevelRule, errMsgProvider) {
    var orCollector = new OrCollector();
    topLevelRule.accept(orCollector);
    var ors = orCollector.alternations;
    var errors = utils.reduce(ors, function (errors, currOr) {
        var exceptLast = utils.dropRight(currOr.definition);
        var currErrors = utils.map(exceptLast, function (currAlternative, currAltIdx) {
            var possibleFirstInAlt = interpreter_1.nextPossibleTokensAfter([currAlternative], [], null, 1);
            if (utils.isEmpty(possibleFirstInAlt)) {
                return {
                    message: errMsgProvider.buildEmptyAlternationError({
                        topLevelRule: topLevelRule,
                        alternation: currOr,
                        emptyChoiceIdx: currAltIdx
                    }),
                    type: parser_1.ParserDefinitionErrorType.NONE_LAST_EMPTY_ALT,
                    ruleName: topLevelRule.name,
                    occurrence: currOr.idx,
                    alternative: currAltIdx + 1
                };
            }
            else {
                return null;
            }
        });
        return errors.concat(utils.compact(currErrors));
    }, []);
    return errors;
}
exports.validateEmptyOrAlternative = validateEmptyOrAlternative;
function validateAmbiguousAlternationAlternatives(topLevelRule, maxLookahead, ignoredIssues, errMsgProvider) {
    var orCollector = new OrCollector();
    topLevelRule.accept(orCollector);
    var ors = orCollector.alternations;
    var ignoredIssuesForCurrentRule = ignoredIssues[topLevelRule.name];
    if (ignoredIssuesForCurrentRule) {
        ors = utils_1.reject(ors, function (currOr) {
            return ignoredIssuesForCurrentRule[gast_1.getProductionDslName(currOr) +
                (currOr.idx === 0 ? "" : currOr.idx)];
        });
    }
    var errors = utils.reduce(ors, function (result, currOr) {
        var currOccurrence = currOr.idx;
        var alternatives = lookahead_1.getLookaheadPathsForOr(currOccurrence, topLevelRule, maxLookahead);
        var altsAmbiguityErrors = checkAlternativesAmbiguities(alternatives, currOr, topLevelRule, errMsgProvider);
        var altsPrefixAmbiguityErrors = checkPrefixAlternativesAmbiguities(alternatives, currOr, topLevelRule, errMsgProvider);
        return result.concat(altsAmbiguityErrors, altsPrefixAmbiguityErrors);
    }, []);
    return errors;
}
exports.validateAmbiguousAlternationAlternatives = validateAmbiguousAlternationAlternatives;
var RepetionCollector = /** @class */ (function (_super) {
    __extends(RepetionCollector, _super);
    function RepetionCollector() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.allProductions = [];
        return _this;
    }
    RepetionCollector.prototype.visitRepetitionWithSeparator = function (manySep) {
        this.allProductions.push(manySep);
    };
    RepetionCollector.prototype.visitRepetitionMandatory = function (atLeastOne) {
        this.allProductions.push(atLeastOne);
    };
    RepetionCollector.prototype.visitRepetitionMandatoryWithSeparator = function (atLeastOneSep) {
        this.allProductions.push(atLeastOneSep);
    };
    RepetionCollector.prototype.visitRepetition = function (many) {
        this.allProductions.push(many);
    };
    return RepetionCollector;
}(gast_visitor_public_1.GAstVisitor));
exports.RepetionCollector = RepetionCollector;
function validateTooManyAlts(topLevelRule, errMsgProvider) {
    var orCollector = new OrCollector();
    topLevelRule.accept(orCollector);
    var ors = orCollector.alternations;
    var errors = utils.reduce(ors, function (errors, currOr) {
        if (currOr.definition.length > 255) {
            errors.push({
                message: errMsgProvider.buildTooManyAlternativesError({
                    topLevelRule: topLevelRule,
                    alternation: currOr
                }),
                type: parser_1.ParserDefinitionErrorType.TOO_MANY_ALTS,
                ruleName: topLevelRule.name,
                occurrence: currOr.idx
            });
        }
        return errors;
    }, []);
    return errors;
}
exports.validateTooManyAlts = validateTooManyAlts;
function validateSomeNonEmptyLookaheadPath(topLevelRules, maxLookahead, errMsgProvider) {
    var errors = [];
    utils_1.forEach(topLevelRules, function (currTopRule) {
        var collectorVisitor = new RepetionCollector();
        currTopRule.accept(collectorVisitor);
        var allRuleProductions = collectorVisitor.allProductions;
        utils_1.forEach(allRuleProductions, function (currProd) {
            var prodType = lookahead_1.getProdType(currProd);
            var currOccurrence = currProd.idx;
            var paths = lookahead_1.getLookaheadPathsForOptionalProd(currOccurrence, currTopRule, prodType, maxLookahead);
            var pathsInsideProduction = paths[0];
            if (utils_1.isEmpty(utils_1.flatten(pathsInsideProduction))) {
                var errMsg = errMsgProvider.buildEmptyRepetitionError({
                    topLevelRule: currTopRule,
                    repetition: currProd
                });
                errors.push({
                    message: errMsg,
                    type: parser_1.ParserDefinitionErrorType.NO_NON_EMPTY_LOOKAHEAD,
                    ruleName: currTopRule.name
                });
            }
        });
    });
    return errors;
}
exports.validateSomeNonEmptyLookaheadPath = validateSomeNonEmptyLookaheadPath;
function checkAlternativesAmbiguities(alternatives, alternation, rule, errMsgProvider) {
    var foundAmbiguousPaths = [];
    var identicalAmbiguities = utils_1.reduce(alternatives, function (result, currAlt, currAltIdx) {
        utils_1.forEach(currAlt, function (currPath) {
            var altsCurrPathAppearsIn = [currAltIdx];
            utils_1.forEach(alternatives, function (currOtherAlt, currOtherAltIdx) {
                if (currAltIdx !== currOtherAltIdx &&
                    lookahead_1.containsPath(currOtherAlt, currPath)) {
                    altsCurrPathAppearsIn.push(currOtherAltIdx);
                }
            });
            if (altsCurrPathAppearsIn.length > 1 &&
                !lookahead_1.containsPath(foundAmbiguousPaths, currPath)) {
                foundAmbiguousPaths.push(currPath);
                result.push({
                    alts: altsCurrPathAppearsIn,
                    path: currPath
                });
            }
        });
        return result;
    }, []);
    var currErrors = utils.map(identicalAmbiguities, function (currAmbDescriptor) {
        var ambgIndices = utils_1.map(currAmbDescriptor.alts, function (currAltIdx) { return currAltIdx + 1; });
        var currMessage = errMsgProvider.buildAlternationAmbiguityError({
            topLevelRule: rule,
            alternation: alternation,
            ambiguityIndices: ambgIndices,
            prefixPath: currAmbDescriptor.path
        });
        return {
            message: currMessage,
            type: parser_1.ParserDefinitionErrorType.AMBIGUOUS_ALTS,
            ruleName: rule.name,
            occurrence: alternation.idx,
            alternatives: [currAmbDescriptor.alts]
        };
    });
    return currErrors;
}
function checkPrefixAlternativesAmbiguities(alternatives, alternation, rule, errMsgProvider) {
    var errors = [];
    // flatten
    var pathsAndIndices = utils_1.reduce(alternatives, function (result, currAlt, idx) {
        var currPathsAndIdx = utils_1.map(currAlt, function (currPath) {
            return { idx: idx, path: currPath };
        });
        return result.concat(currPathsAndIdx);
    }, []);
    utils_1.forEach(pathsAndIndices, function (currPathAndIdx) {
        var targetIdx = currPathAndIdx.idx;
        var targetPath = currPathAndIdx.path;
        var prefixAmbiguitiesPathsAndIndices = utils_1.findAll(pathsAndIndices, function (searchPathAndIdx) {
            // prefix ambiguity can only be created from lower idx (higher priority) path
            return (searchPathAndIdx.idx < targetIdx &&
                // checking for strict prefix because identical lookaheads
                // will be be detected using a different validation.
                lookahead_1.isStrictPrefixOfPath(searchPathAndIdx.path, targetPath));
        });
        var currPathPrefixErrors = utils_1.map(prefixAmbiguitiesPathsAndIndices, function (currAmbPathAndIdx) {
            var ambgIndices = [currAmbPathAndIdx.idx + 1, targetIdx + 1];
            var occurrence = alternation.idx === 0 ? "" : alternation.idx;
            var message = errMsgProvider.buildAlternationPrefixAmbiguityError({
                topLevelRule: rule,
                alternation: alternation,
                ambiguityIndices: ambgIndices,
                prefixPath: currAmbPathAndIdx.path
            });
            return {
                message: message,
                type: parser_1.ParserDefinitionErrorType.AMBIGUOUS_PREFIX_ALTS,
                ruleName: rule.name,
                occurrence: occurrence,
                alternatives: ambgIndices
            };
        });
        errors = errors.concat(currPathPrefixErrors);
    });
    return errors;
}
function checkTerminalAndNoneTerminalsNameSpace(topLevels, tokenTypes, errMsgProvider) {
    var errors = [];
    var tokenNames = utils_1.map(tokenTypes, function (currToken) { return tokens_public_1.tokenName(currToken); });
    utils_1.forEach(topLevels, function (currRule) {
        var currRuleName = currRule.name;
        if (utils_1.contains(tokenNames, currRuleName)) {
            var errMsg = errMsgProvider.buildNamespaceConflictError(currRule);
            errors.push({
                message: errMsg,
                type: parser_1.ParserDefinitionErrorType.CONFLICT_TOKENS_RULES_NAMESPACE,
                ruleName: currRuleName
            });
        }
    });
    return errors;
}
function validateDuplicateNestedRules(topLevelRules, errMsgProvider) {
    var errors = [];
    utils_1.forEach(topLevelRules, function (currTopRule) {
        var namedCollectorVisitor = new cst_1.NamedDSLMethodsCollectorVisitor("");
        currTopRule.accept(namedCollectorVisitor);
        var prodsByGroup = utils_1.groupBy(namedCollectorVisitor.result, function (item) { return item.name; });
        var duplicates = utils_1.pick(prodsByGroup, function (currGroup) {
            return currGroup.length > 1;
        });
        utils_1.forEach(utils_1.values(duplicates), function (currDupGroup) {
            var currDupProds = utils_1.map(currDupGroup, function (dupGroup) { return dupGroup.orgProd; });
            var errMsg = errMsgProvider.buildDuplicateNestedRuleNameError(currTopRule, currDupProds);
            errors.push({
                message: errMsg,
                type: parser_1.ParserDefinitionErrorType.DUPLICATE_NESTED_NAME,
                ruleName: currTopRule.name
            });
        });
    });
    return errors;
}
//# sourceMappingURL=checks.js.map

/***/ }),
/* 15 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var utils_1 = __webpack_require__(0);
var interpreter_1 = __webpack_require__(16);
var rest_1 = __webpack_require__(20);
var tokens_1 = __webpack_require__(6);
var gast_public_1 = __webpack_require__(2);
var gast_visitor_public_1 = __webpack_require__(11);
var PROD_TYPE;
(function (PROD_TYPE) {
    PROD_TYPE[PROD_TYPE["OPTION"] = 0] = "OPTION";
    PROD_TYPE[PROD_TYPE["REPETITION"] = 1] = "REPETITION";
    PROD_TYPE[PROD_TYPE["REPETITION_MANDATORY"] = 2] = "REPETITION_MANDATORY";
    PROD_TYPE[PROD_TYPE["REPETITION_MANDATORY_WITH_SEPARATOR"] = 3] = "REPETITION_MANDATORY_WITH_SEPARATOR";
    PROD_TYPE[PROD_TYPE["REPETITION_WITH_SEPARATOR"] = 4] = "REPETITION_WITH_SEPARATOR";
    PROD_TYPE[PROD_TYPE["ALTERNATION"] = 5] = "ALTERNATION";
})(PROD_TYPE = exports.PROD_TYPE || (exports.PROD_TYPE = {}));
function getProdType(prod) {
    /* istanbul ignore else */
    if (prod instanceof gast_public_1.Option) {
        return PROD_TYPE.OPTION;
    }
    else if (prod instanceof gast_public_1.Repetition) {
        return PROD_TYPE.REPETITION;
    }
    else if (prod instanceof gast_public_1.RepetitionMandatory) {
        return PROD_TYPE.REPETITION_MANDATORY;
    }
    else if (prod instanceof gast_public_1.RepetitionMandatoryWithSeparator) {
        return PROD_TYPE.REPETITION_MANDATORY_WITH_SEPARATOR;
    }
    else if (prod instanceof gast_public_1.RepetitionWithSeparator) {
        return PROD_TYPE.REPETITION_WITH_SEPARATOR;
    }
    else if (prod instanceof gast_public_1.Alternation) {
        return PROD_TYPE.ALTERNATION;
    }
    else {
        throw Error("non exhaustive match");
    }
}
exports.getProdType = getProdType;
function buildLookaheadFuncForOr(occurrence, ruleGrammar, k, hasPredicates, dynamicTokensEnabled, laFuncBuilder) {
    var lookAheadPaths = getLookaheadPathsForOr(occurrence, ruleGrammar, k);
    var tokenMatcher = areTokenCategoriesNotUsed(lookAheadPaths)
        ? tokens_1.tokenStructuredMatcherNoCategories
        : tokens_1.tokenStructuredMatcher;
    return laFuncBuilder(lookAheadPaths, hasPredicates, tokenMatcher, dynamicTokensEnabled);
}
exports.buildLookaheadFuncForOr = buildLookaheadFuncForOr;
/**
 *  When dealing with an Optional production (OPTION/MANY/2nd iteration of AT_LEAST_ONE/...) we need to compare
 *  the lookahead "inside" the production and the lookahead immediately "after" it in the same top level rule (context free).
 *
 *  Example: given a production:
 *  ABC(DE)?DF
 *
 *  The optional '(DE)?' should only be entered if we see 'DE'. a single Token 'D' is not sufficient to distinguish between the two
 *  alternatives.
 *
 *  @returns A Lookahead function which will return true IFF the parser should parse the Optional production.
 */
function buildLookaheadFuncForOptionalProd(occurrence, ruleGrammar, k, dynamicTokensEnabled, prodType, lookaheadBuilder) {
    var lookAheadPaths = getLookaheadPathsForOptionalProd(occurrence, ruleGrammar, prodType, k);
    var tokenMatcher = areTokenCategoriesNotUsed(lookAheadPaths)
        ? tokens_1.tokenStructuredMatcherNoCategories
        : tokens_1.tokenStructuredMatcher;
    return lookaheadBuilder(lookAheadPaths[0], tokenMatcher, dynamicTokensEnabled);
}
exports.buildLookaheadFuncForOptionalProd = buildLookaheadFuncForOptionalProd;
function buildAlternativesLookAheadFunc(alts, hasPredicates, tokenMatcher, dynamicTokensEnabled) {
    var numOfAlts = alts.length;
    var areAllOneTokenLookahead = utils_1.every(alts, function (currAlt) {
        return utils_1.every(currAlt, function (currPath) {
            return currPath.length === 1;
        });
    });
    // This version takes into account the predicates as well.
    if (hasPredicates) {
        /**
         * @returns {number} - The chosen alternative index
         */
        return function (orAlts) {
            // unfortunately the predicates must be extracted every single time
            // as they cannot be cached due to references to parameters(vars) which are no longer valid.
            // note that in the common case of no predicates, no cpu time will be wasted on this (see else block)
            var predicates = utils_1.map(orAlts, function (currAlt) { return currAlt.GATE; });
            for (var t = 0; t < numOfAlts; t++) {
                var currAlt = alts[t];
                var currNumOfPaths = currAlt.length;
                var currPredicate = predicates[t];
                if (currPredicate !== undefined &&
                    currPredicate.call(this) === false) {
                    // if the predicate does not match there is no point in checking the paths
                    continue;
                }
                nextPath: for (var j = 0; j < currNumOfPaths; j++) {
                    var currPath = currAlt[j];
                    var currPathLength = currPath.length;
                    for (var i = 0; i < currPathLength; i++) {
                        var nextToken = this.LA(i + 1);
                        if (tokenMatcher(nextToken, currPath[i]) === false) {
                            // mismatch in current path
                            // try the next pth
                            continue nextPath;
                        }
                    }
                    // found a full path that matches.
                    // this will also work for an empty ALT as the loop will be skipped
                    return t;
                }
                // none of the paths for the current alternative matched
                // try the next alternative
            }
            // none of the alternatives could be matched
            return undefined;
        };
    }
    else if (areAllOneTokenLookahead && !dynamicTokensEnabled) {
        // optimized (common) case of all the lookaheads paths requiring only
        // a single token lookahead. These Optimizations cannot work if dynamically defined Tokens are used.
        var singleTokenAlts = utils_1.map(alts, function (currAlt) {
            return utils_1.flatten(currAlt);
        });
        var choiceToAlt_1 = utils_1.reduce(singleTokenAlts, function (result, currAlt, idx) {
            utils_1.forEach(currAlt, function (currTokType) {
                if (!utils_1.has(result, currTokType.tokenTypeIdx)) {
                    result[currTokType.tokenTypeIdx] = idx;
                }
                utils_1.forEach(currTokType.categoryMatches, function (currExtendingType) {
                    if (!utils_1.has(result, currExtendingType)) {
                        result[currExtendingType] = idx;
                    }
                });
            });
            return result;
        }, []);
        /**
         * @returns {number} - The chosen alternative index
         */
        return function () {
            var nextToken = this.LA(1);
            return choiceToAlt_1[nextToken.tokenTypeIdx];
        };
    }
    else {
        // optimized lookahead without needing to check the predicates at all.
        // this causes code duplication which is intentional to improve performance.
        /**
         * @returns {number} - The chosen alternative index
         */
        return function () {
            for (var t = 0; t < numOfAlts; t++) {
                var currAlt = alts[t];
                var currNumOfPaths = currAlt.length;
                nextPath: for (var j = 0; j < currNumOfPaths; j++) {
                    var currPath = currAlt[j];
                    var currPathLength = currPath.length;
                    for (var i = 0; i < currPathLength; i++) {
                        var nextToken = this.LA(i + 1);
                        if (tokenMatcher(nextToken, currPath[i]) === false) {
                            // mismatch in current path
                            // try the next pth
                            continue nextPath;
                        }
                    }
                    // found a full path that matches.
                    // this will also work for an empty ALT as the loop will be skipped
                    return t;
                }
                // none of the paths for the current alternative matched
                // try the next alternative
            }
            // none of the alternatives could be matched
            return undefined;
        };
    }
}
exports.buildAlternativesLookAheadFunc = buildAlternativesLookAheadFunc;
function buildSingleAlternativeLookaheadFunction(alt, tokenMatcher, dynamicTokensEnabled) {
    var areAllOneTokenLookahead = utils_1.every(alt, function (currPath) {
        return currPath.length === 1;
    });
    var numOfPaths = alt.length;
    // optimized (common) case of all the lookaheads paths requiring only
    // a single token lookahead.
    if (areAllOneTokenLookahead && !dynamicTokensEnabled) {
        var singleTokensTypes = utils_1.flatten(alt);
        if (singleTokensTypes.length === 1 &&
            utils_1.isEmpty(singleTokensTypes[0].categoryMatches)) {
            var expectedTokenType = singleTokensTypes[0];
            var expectedTokenUniqueKey_1 = expectedTokenType.tokenTypeIdx;
            return function () {
                return this.LA(1).tokenTypeIdx === expectedTokenUniqueKey_1;
            };
        }
        else {
            var choiceToAlt_2 = utils_1.reduce(singleTokensTypes, function (result, currTokType, idx) {
                result[currTokType.tokenTypeIdx] = true;
                utils_1.forEach(currTokType.categoryMatches, function (currExtendingType) {
                    result[currExtendingType] = true;
                });
                return result;
            }, []);
            return function () {
                var nextToken = this.LA(1);
                return choiceToAlt_2[nextToken.tokenTypeIdx] === true;
            };
        }
    }
    else {
        return function () {
            nextPath: for (var j = 0; j < numOfPaths; j++) {
                var currPath = alt[j];
                var currPathLength = currPath.length;
                for (var i = 0; i < currPathLength; i++) {
                    var nextToken = this.LA(i + 1);
                    if (tokenMatcher(nextToken, currPath[i]) === false) {
                        // mismatch in current path
                        // try the next pth
                        continue nextPath;
                    }
                }
                // found a full path that matches.
                return true;
            }
            // none of the paths matched
            return false;
        };
    }
}
exports.buildSingleAlternativeLookaheadFunction = buildSingleAlternativeLookaheadFunction;
var RestDefinitionFinderWalker = /** @class */ (function (_super) {
    __extends(RestDefinitionFinderWalker, _super);
    function RestDefinitionFinderWalker(topProd, targetOccurrence, targetProdType) {
        var _this = _super.call(this) || this;
        _this.topProd = topProd;
        _this.targetOccurrence = targetOccurrence;
        _this.targetProdType = targetProdType;
        return _this;
    }
    RestDefinitionFinderWalker.prototype.startWalking = function () {
        this.walk(this.topProd);
        return this.restDef;
    };
    RestDefinitionFinderWalker.prototype.checkIsTarget = function (node, expectedProdType, currRest, prevRest) {
        if (node.idx === this.targetOccurrence &&
            this.targetProdType === expectedProdType) {
            this.restDef = currRest.concat(prevRest);
            return true;
        }
        // performance optimization, do not iterate over the entire Grammar ast after we have found the target
        return false;
    };
    RestDefinitionFinderWalker.prototype.walkOption = function (optionProd, currRest, prevRest) {
        if (!this.checkIsTarget(optionProd, PROD_TYPE.OPTION, currRest, prevRest)) {
            _super.prototype.walkOption.call(this, optionProd, currRest, prevRest);
        }
    };
    RestDefinitionFinderWalker.prototype.walkAtLeastOne = function (atLeastOneProd, currRest, prevRest) {
        if (!this.checkIsTarget(atLeastOneProd, PROD_TYPE.REPETITION_MANDATORY, currRest, prevRest)) {
            _super.prototype.walkOption.call(this, atLeastOneProd, currRest, prevRest);
        }
    };
    RestDefinitionFinderWalker.prototype.walkAtLeastOneSep = function (atLeastOneSepProd, currRest, prevRest) {
        if (!this.checkIsTarget(atLeastOneSepProd, PROD_TYPE.REPETITION_MANDATORY_WITH_SEPARATOR, currRest, prevRest)) {
            _super.prototype.walkOption.call(this, atLeastOneSepProd, currRest, prevRest);
        }
    };
    RestDefinitionFinderWalker.prototype.walkMany = function (manyProd, currRest, prevRest) {
        if (!this.checkIsTarget(manyProd, PROD_TYPE.REPETITION, currRest, prevRest)) {
            _super.prototype.walkOption.call(this, manyProd, currRest, prevRest);
        }
    };
    RestDefinitionFinderWalker.prototype.walkManySep = function (manySepProd, currRest, prevRest) {
        if (!this.checkIsTarget(manySepProd, PROD_TYPE.REPETITION_WITH_SEPARATOR, currRest, prevRest)) {
            _super.prototype.walkOption.call(this, manySepProd, currRest, prevRest);
        }
    };
    return RestDefinitionFinderWalker;
}(rest_1.RestWalker));
/**
 * Returns the definition of a target production in a top level level rule.
 */
var InsideDefinitionFinderVisitor = /** @class */ (function (_super) {
    __extends(InsideDefinitionFinderVisitor, _super);
    function InsideDefinitionFinderVisitor(targetOccurrence, targetProdType) {
        var _this = _super.call(this) || this;
        _this.targetOccurrence = targetOccurrence;
        _this.targetProdType = targetProdType;
        _this.result = [];
        return _this;
    }
    InsideDefinitionFinderVisitor.prototype.checkIsTarget = function (node, expectedProdName) {
        if (node.idx === this.targetOccurrence &&
            this.targetProdType === expectedProdName) {
            this.result = node.definition;
        }
    };
    InsideDefinitionFinderVisitor.prototype.visitOption = function (node) {
        this.checkIsTarget(node, PROD_TYPE.OPTION);
    };
    InsideDefinitionFinderVisitor.prototype.visitRepetition = function (node) {
        this.checkIsTarget(node, PROD_TYPE.REPETITION);
    };
    InsideDefinitionFinderVisitor.prototype.visitRepetitionMandatory = function (node) {
        this.checkIsTarget(node, PROD_TYPE.REPETITION_MANDATORY);
    };
    InsideDefinitionFinderVisitor.prototype.visitRepetitionMandatoryWithSeparator = function (node) {
        this.checkIsTarget(node, PROD_TYPE.REPETITION_MANDATORY_WITH_SEPARATOR);
    };
    InsideDefinitionFinderVisitor.prototype.visitRepetitionWithSeparator = function (node) {
        this.checkIsTarget(node, PROD_TYPE.REPETITION_WITH_SEPARATOR);
    };
    InsideDefinitionFinderVisitor.prototype.visitAlternation = function (node) {
        this.checkIsTarget(node, PROD_TYPE.ALTERNATION);
    };
    return InsideDefinitionFinderVisitor;
}(gast_visitor_public_1.GAstVisitor));
function lookAheadSequenceFromAlternatives(altsDefs, k) {
    function getOtherPaths(pathsAndSuffixes, filterIdx) {
        return utils_1.reduce(pathsAndSuffixes, function (result, currPathsAndSuffixes, currIdx) {
            if (currIdx !== filterIdx) {
                var currPartialPaths = utils_1.map(currPathsAndSuffixes, function (singlePathAndSuffix) { return singlePathAndSuffix.partialPath; });
                return result.concat(currPartialPaths);
            }
            return result;
        }, []);
    }
    function isUniquePrefix(arr, item) {
        return (utils_1.find(arr, function (currOtherPath) {
            return utils_1.every(item, function (currPathTok, idx) { return currPathTok === currOtherPath[idx]; });
        }) === undefined);
    }
    function initializeArrayOfArrays(size) {
        var result = [];
        for (var i = 0; i < size; i++) {
            result.push([]);
        }
        return result;
    }
    var partialAlts = utils_1.map(altsDefs, function (currAlt) { return interpreter_1.possiblePathsFrom([currAlt], 1); });
    var finalResult = initializeArrayOfArrays(partialAlts.length);
    var newData = partialAlts;
    // maxLookahead loop
    for (var pathLength = 1; pathLength <= k; pathLength++) {
        var currDataset = newData;
        newData = initializeArrayOfArrays(currDataset.length);
        // alternatives loop
        for (var resultIdx = 0; resultIdx < currDataset.length; resultIdx++) {
            var currAltPathsAndSuffixes = currDataset[resultIdx];
            var otherPaths = getOtherPaths(currDataset, resultIdx);
            // paths in current alternative loop
            for (var currPathIdx = 0; currPathIdx < currAltPathsAndSuffixes.length; currPathIdx++) {
                var currPathPrefix = currAltPathsAndSuffixes[currPathIdx].partialPath;
                var suffixDef = currAltPathsAndSuffixes[currPathIdx].suffixDef;
                var isUnique = isUniquePrefix(otherPaths, currPathPrefix);
                // even if a path is not unique, but there are no longer alternatives to try
                // or if we have reached the maximum lookahead (k) permitted.
                if (isUnique ||
                    utils_1.isEmpty(suffixDef) ||
                    currPathPrefix.length === k) {
                    var currAltResult = finalResult[resultIdx];
                    if (!containsPath(currAltResult, currPathPrefix)) {
                        currAltResult.push(currPathPrefix);
                    }
                }
                else {
                    var newPartialPathsAndSuffixes = interpreter_1.possiblePathsFrom(suffixDef, pathLength + 1, currPathPrefix);
                    newData[resultIdx] = newData[resultIdx].concat(newPartialPathsAndSuffixes);
                }
            }
        }
    }
    return finalResult;
}
exports.lookAheadSequenceFromAlternatives = lookAheadSequenceFromAlternatives;
function getLookaheadPathsForOr(occurrence, ruleGrammar, k) {
    var visitor = new InsideDefinitionFinderVisitor(occurrence, PROD_TYPE.ALTERNATION);
    ruleGrammar.accept(visitor);
    return lookAheadSequenceFromAlternatives(visitor.result, k);
}
exports.getLookaheadPathsForOr = getLookaheadPathsForOr;
function getLookaheadPathsForOptionalProd(occurrence, ruleGrammar, prodType, k) {
    var insideDefVisitor = new InsideDefinitionFinderVisitor(occurrence, prodType);
    ruleGrammar.accept(insideDefVisitor);
    var insideDef = insideDefVisitor.result;
    var afterDefWalker = new RestDefinitionFinderWalker(ruleGrammar, occurrence, prodType);
    var afterDef = afterDefWalker.startWalking();
    var insideFlat = new gast_public_1.Flat({ definition: insideDef });
    var afterFlat = new gast_public_1.Flat({ definition: afterDef });
    return lookAheadSequenceFromAlternatives([insideFlat, afterFlat], k);
}
exports.getLookaheadPathsForOptionalProd = getLookaheadPathsForOptionalProd;
function containsPath(alternative, path) {
    var found = utils_1.find(alternative, function (otherPath) {
        return (path.length === otherPath.length &&
            utils_1.every(path, function (targetItem, idx) {
                return targetItem === otherPath[idx];
            }));
    });
    return found !== undefined;
}
exports.containsPath = containsPath;
function isStrictPrefixOfPath(prefix, other) {
    return (prefix.length < other.length &&
        utils_1.every(prefix, function (tokType, idx) {
            return tokType === other[idx];
        }));
}
exports.isStrictPrefixOfPath = isStrictPrefixOfPath;
function areTokenCategoriesNotUsed(lookAheadPaths) {
    return utils_1.every(lookAheadPaths, function (singleAltPaths) {
        return utils_1.every(singleAltPaths, function (singlePath) {
            return utils_1.every(singlePath, function (token) { return utils_1.isEmpty(token.categoryMatches); });
        });
    });
}
exports.areTokenCategoriesNotUsed = areTokenCategoriesNotUsed;
//# sourceMappingURL=lookahead.js.map

/***/ }),
/* 16 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/* istanbul ignore next */ var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var rest_1 = __webpack_require__(20);
var utils_1 = __webpack_require__(0);
var tokens_public_1 = __webpack_require__(1);
var first_1 = __webpack_require__(22);
var gast_public_1 = __webpack_require__(2);
var AbstractNextPossibleTokensWalker = /** @class */ (function (_super) {
    __extends(AbstractNextPossibleTokensWalker, _super);
    function AbstractNextPossibleTokensWalker(topProd, path) {
        var _this = _super.call(this) /* istanbul ignore next */ || this;
        _this.topProd = topProd;
        _this.path = path;
        _this.possibleTokTypes = [];
        _this.nextProductionName = "";
        _this.nextProductionOccurrence = 0;
        _this.found = false;
        _this.isAtEndOfPath = false;
        return _this;
    }
    AbstractNextPossibleTokensWalker.prototype.startWalking = function () {
        this.found = false;
        if (this.path.ruleStack[0] !== this.topProd.name) {
            throw Error("The path does not start with the walker's top Rule!");
        }
        // immutable for the win
        this.ruleStack = utils_1.cloneArr(this.path.ruleStack).reverse(); // intelij bug requires assertion
        this.occurrenceStack = utils_1.cloneArr(this.path.occurrenceStack).reverse(); // intelij bug requires assertion
        // already verified that the first production is valid, we now seek the 2nd production
        this.ruleStack.pop();
        this.occurrenceStack.pop();
        this.updateExpectedNext();
        this.walk(this.topProd);
        return this.possibleTokTypes;
    };
    AbstractNextPossibleTokensWalker.prototype.walk = function (prod, prevRest) {
        if (prevRest === void 0) { prevRest = []; }
        // stop scanning once we found the path
        if (!this.found) {
            _super.prototype.walk.call(this, prod, prevRest);
        }
    };
    AbstractNextPossibleTokensWalker.prototype.walkProdRef = function (refProd, currRest, prevRest) {
        // found the next production, need to keep walking in it
        if (refProd.referencedRule.name === this.nextProductionName &&
            refProd.idx === this.nextProductionOccurrence) {
            var fullRest = currRest.concat(prevRest);
            this.updateExpectedNext();
            this.walk(refProd.referencedRule, fullRest);
        }
    };
    AbstractNextPossibleTokensWalker.prototype.updateExpectedNext = function () {
        // need to consume the Terminal
        if (utils_1.isEmpty(this.ruleStack)) {
            // must reset nextProductionXXX to avoid walking down another Top Level production while what we are
            // really seeking is the last Terminal...
            this.nextProductionName = "";
            this.nextProductionOccurrence = 0;
            this.isAtEndOfPath = true;
        }
        else {
            this.nextProductionName = this.ruleStack.pop();
            this.nextProductionOccurrence = this.occurrenceStack.pop();
        }
    };
    return AbstractNextPossibleTokensWalker;
}(rest_1.RestWalker));
exports.AbstractNextPossibleTokensWalker = AbstractNextPossibleTokensWalker;
var NextAfterTokenWalker = /** @class */ (function (_super) {
    __extends(NextAfterTokenWalker, _super);
    function NextAfterTokenWalker(topProd, path) {
        var _this = _super.call(this, topProd, path) /* istanbul ignore next */ || this;
        _this.path = path;
        _this.nextTerminalName = "";
        _this.nextTerminalOccurrence = 0;
        _this.nextTerminalName = tokens_public_1.tokenName(_this.path.lastTok);
        _this.nextTerminalOccurrence = _this.path.lastTokOccurrence;
        return _this;
    }
    NextAfterTokenWalker.prototype.walkTerminal = function (terminal, currRest, prevRest) {
        if (this.isAtEndOfPath &&
            tokens_public_1.tokenName(terminal.terminalType) === this.nextTerminalName &&
            terminal.idx === this.nextTerminalOccurrence &&
            !this.found) {
            var fullRest = currRest.concat(prevRest);
            var restProd = new gast_public_1.Flat({ definition: fullRest });
            this.possibleTokTypes = first_1.first(restProd);
            this.found = true;
        }
    };
    return NextAfterTokenWalker;
}(AbstractNextPossibleTokensWalker));
exports.NextAfterTokenWalker = NextAfterTokenWalker;
/**
 * This walker only "walks" a single "TOP" level in the Grammar Ast, this means
 * it never "follows" production refs
 */
var AbstractNextTerminalAfterProductionWalker = /** @class */ (function (_super) {
    __extends(AbstractNextTerminalAfterProductionWalker, _super);
    function AbstractNextTerminalAfterProductionWalker(topRule, occurrence) {
        var _this = _super.call(this) /* istanbul ignore next */ || this;
        _this.topRule = topRule;
        _this.occurrence = occurrence;
        _this.result = {
            token: undefined,
            occurrence: undefined,
            isEndOfRule: undefined
        };
        return _this;
    }
    AbstractNextTerminalAfterProductionWalker.prototype.startWalking = function () {
        this.walk(this.topRule);
        return this.result;
    };
    return AbstractNextTerminalAfterProductionWalker;
}(rest_1.RestWalker));
exports.AbstractNextTerminalAfterProductionWalker = AbstractNextTerminalAfterProductionWalker;
var NextTerminalAfterManyWalker = /** @class */ (function (_super) {
    __extends(NextTerminalAfterManyWalker, _super);
    function NextTerminalAfterManyWalker() {
        return _super !== null && _super.apply(this, arguments) /* istanbul ignore next */ || this;
    }
    NextTerminalAfterManyWalker.prototype.walkMany = function (manyProd, currRest, prevRest) {
        if (manyProd.idx === this.occurrence) {
            var firstAfterMany = utils_1.first(currRest.concat(prevRest));
            this.result.isEndOfRule = firstAfterMany === undefined;
            if (firstAfterMany instanceof gast_public_1.Terminal) {
                this.result.token = firstAfterMany.terminalType;
                this.result.occurrence = firstAfterMany.idx;
            }
        }
        else {
            _super.prototype.walkMany.call(this, manyProd, currRest, prevRest);
        }
    };
    return NextTerminalAfterManyWalker;
}(AbstractNextTerminalAfterProductionWalker));
exports.NextTerminalAfterManyWalker = NextTerminalAfterManyWalker;
var NextTerminalAfterManySepWalker = /** @class */ (function (_super) {
    __extends(NextTerminalAfterManySepWalker, _super);
    function NextTerminalAfterManySepWalker() {
        return _super !== null && _super.apply(this, arguments) /* istanbul ignore next */ || this;
    }
    NextTerminalAfterManySepWalker.prototype.walkManySep = function (manySepProd, currRest, prevRest) {
        if (manySepProd.idx === this.occurrence) {
            var firstAfterManySep = utils_1.first(currRest.concat(prevRest));
            this.result.isEndOfRule = firstAfterManySep === undefined;
            if (firstAfterManySep instanceof gast_public_1.Terminal) {
                this.result.token = firstAfterManySep.terminalType;
                this.result.occurrence = firstAfterManySep.idx;
            }
        }
        else {
            _super.prototype.walkManySep.call(this, manySepProd, currRest, prevRest);
        }
    };
    return NextTerminalAfterManySepWalker;
}(AbstractNextTerminalAfterProductionWalker));
exports.NextTerminalAfterManySepWalker = NextTerminalAfterManySepWalker;
var NextTerminalAfterAtLeastOneWalker = /** @class */ (function (_super) {
    __extends(NextTerminalAfterAtLeastOneWalker, _super);
    function NextTerminalAfterAtLeastOneWalker() {
        return _super !== null && _super.apply(this, arguments) /* istanbul ignore next */ || this;
    }
    NextTerminalAfterAtLeastOneWalker.prototype.walkAtLeastOne = function (atLeastOneProd, currRest, prevRest) {
        if (atLeastOneProd.idx === this.occurrence) {
            var firstAfterAtLeastOne = utils_1.first(currRest.concat(prevRest));
            this.result.isEndOfRule = firstAfterAtLeastOne === undefined;
            if (firstAfterAtLeastOne instanceof gast_public_1.Terminal) {
                this.result.token = firstAfterAtLeastOne.terminalType;
                this.result.occurrence = firstAfterAtLeastOne.idx;
            }
        }
        else {
            _super.prototype.walkAtLeastOne.call(this, atLeastOneProd, currRest, prevRest);
        }
    };
    return NextTerminalAfterAtLeastOneWalker;
}(AbstractNextTerminalAfterProductionWalker));
exports.NextTerminalAfterAtLeastOneWalker = NextTerminalAfterAtLeastOneWalker;
// TODO: reduce code duplication in the AfterWalkers
var NextTerminalAfterAtLeastOneSepWalker = /** @class */ (function (_super) {
    __extends(NextTerminalAfterAtLeastOneSepWalker, _super);
    function NextTerminalAfterAtLeastOneSepWalker() {
        return _super !== null && _super.apply(this, arguments) /* istanbul ignore next */ || this;
    }
    NextTerminalAfterAtLeastOneSepWalker.prototype.walkAtLeastOneSep = function (atleastOneSepProd, currRest, prevRest) {
        if (atleastOneSepProd.idx === this.occurrence) {
            var firstAfterfirstAfterAtLeastOneSep = utils_1.first(currRest.concat(prevRest));
            this.result.isEndOfRule =
                firstAfterfirstAfterAtLeastOneSep === undefined;
            if (firstAfterfirstAfterAtLeastOneSep instanceof gast_public_1.Terminal) {
                this.result.token =
                    firstAfterfirstAfterAtLeastOneSep.terminalType;
                this.result.occurrence = firstAfterfirstAfterAtLeastOneSep.idx;
            }
        }
        else {
            _super.prototype.walkAtLeastOneSep.call(this, atleastOneSepProd, currRest, prevRest);
        }
    };
    return NextTerminalAfterAtLeastOneSepWalker;
}(AbstractNextTerminalAfterProductionWalker));
exports.NextTerminalAfterAtLeastOneSepWalker = NextTerminalAfterAtLeastOneSepWalker;
function possiblePathsFrom(targetDef, maxLength, currPath) {
    if (currPath === void 0) { currPath = []; }
    // avoid side effects
    currPath = utils_1.cloneArr(currPath);
    var result = [];
    var i = 0;
    function remainingPathWith(nextDef) {
        return nextDef.concat(utils_1.drop(targetDef, i + 1));
    }
    function getAlternativesForProd(definition) {
        var alternatives = possiblePathsFrom(remainingPathWith(definition), maxLength, currPath);
        return result.concat(alternatives);
    }
    /**
     * Mandatory productions will halt the loop as the paths computed from their recursive calls will already contain the
     * following (rest) of the targetDef.
     *
     * For optional productions (Option/Repetition/...) the loop will continue to represent the paths that do not include the
     * the optional production.
     */
    while (currPath.length < maxLength && i < targetDef.length) {
        var prod = targetDef[i];
        /* istanbul ignore else */
        if (prod instanceof gast_public_1.Flat) {
            return getAlternativesForProd(prod.definition);
        }
        else if (prod instanceof gast_public_1.NonTerminal) {
            return getAlternativesForProd(prod.definition);
        }
        else if (prod instanceof gast_public_1.Option) {
            result = getAlternativesForProd(prod.definition);
        }
        else if (prod instanceof gast_public_1.RepetitionMandatory) {
            var newDef = prod.definition.concat([
                new gast_public_1.Repetition({
                    definition: prod.definition
                })
            ]);
            return getAlternativesForProd(newDef);
        }
        else if (prod instanceof gast_public_1.RepetitionMandatoryWithSeparator) {
            var newDef = [
                new gast_public_1.Flat({ definition: prod.definition }),
                new gast_public_1.Repetition({
                    definition: [
                        new gast_public_1.Terminal({ terminalType: prod.separator })
                    ].concat(prod.definition)
                })
            ];
            return getAlternativesForProd(newDef);
        }
        else if (prod instanceof gast_public_1.RepetitionWithSeparator) {
            var newDef = prod.definition.concat([
                new gast_public_1.Repetition({
                    definition: [
                        new gast_public_1.Terminal({ terminalType: prod.separator })
                    ].concat(prod.definition)
                })
            ]);
            result = getAlternativesForProd(newDef);
        }
        else if (prod instanceof gast_public_1.Repetition) {
            var newDef = prod.definition.concat([
                new gast_public_1.Repetition({
                    definition: prod.definition
                })
            ]);
            result = getAlternativesForProd(newDef);
        }
        else if (prod instanceof gast_public_1.Alternation) {
            utils_1.forEach(prod.definition, function (currAlt) {
                result = getAlternativesForProd(currAlt.definition);
            });
            return result;
        }
        else if (prod instanceof gast_public_1.Terminal) {
            currPath.push(prod.terminalType);
        }
        else {
            throw Error("non exhaustive match");
        }
        i++;
    }
    result.push({
        partialPath: currPath,
        suffixDef: utils_1.drop(targetDef, i)
    });
    return result;
}
exports.possiblePathsFrom = possiblePathsFrom;
function nextPossibleTokensAfter(initialDef, tokenVector, tokMatcher, maxLookAhead) {
    var EXIT_NON_TERMINAL = "EXIT_NONE_TERMINAL";
    // to avoid creating a new Array each time.
    var EXIT_NON_TERMINAL_ARR = [EXIT_NON_TERMINAL];
    var EXIT_ALTERNATIVE = "EXIT_ALTERNATIVE";
    var foundCompletePath = false;
    var tokenVectorLength = tokenVector.length;
    var minimalAlternativesIndex = tokenVectorLength - maxLookAhead - 1;
    var result = [];
    var possiblePaths = [];
    possiblePaths.push({
        idx: -1,
        def: initialDef,
        ruleStack: [],
        occurrenceStack: []
    });
    while (!utils_1.isEmpty(possiblePaths)) {
        var currPath = possiblePaths.pop();
        // skip alternatives if no more results can be found (assuming deterministic grammar with fixed lookahead)
        if (currPath === EXIT_ALTERNATIVE) {
            if (foundCompletePath &&
                utils_1.last(possiblePaths).idx <= minimalAlternativesIndex) {
                // remove irrelevant alternative
                possiblePaths.pop();
            }
            continue;
        }
        var currDef = currPath.def;
        var currIdx = currPath.idx;
        var currRuleStack = currPath.ruleStack;
        var currOccurrenceStack = currPath.occurrenceStack;
        // For Example: an empty path could exist in a valid grammar in the case of an EMPTY_ALT
        if (utils_1.isEmpty(currDef)) {
            continue;
        }
        var prod = currDef[0];
        /* istanbul ignore else */
        if (prod === EXIT_NON_TERMINAL) {
            var nextPath = {
                idx: currIdx,
                def: utils_1.drop(currDef),
                ruleStack: utils_1.dropRight(currRuleStack),
                occurrenceStack: utils_1.dropRight(currOccurrenceStack)
            };
            possiblePaths.push(nextPath);
        }
        else if (prod instanceof gast_public_1.Terminal) {
            /* istanbul ignore else */
            if (currIdx < tokenVectorLength - 1) {
                var nextIdx = currIdx + 1;
                var actualToken = tokenVector[nextIdx];
                if (tokMatcher(actualToken, prod.terminalType)) {
                    var nextPath = {
                        idx: nextIdx,
                        def: utils_1.drop(currDef),
                        ruleStack: currRuleStack,
                        occurrenceStack: currOccurrenceStack
                    };
                    possiblePaths.push(nextPath);
                }
                // end of the line
            }
            else if (currIdx === tokenVectorLength - 1) {
                // IGNORE ABOVE ELSE
                result.push({
                    nextTokenType: prod.terminalType,
                    nextTokenOccurrence: prod.idx,
                    ruleStack: currRuleStack,
                    occurrenceStack: currOccurrenceStack
                });
                foundCompletePath = true;
            }
            else {
                throw Error("non exhaustive match");
            }
        }
        else if (prod instanceof gast_public_1.NonTerminal) {
            var newRuleStack = utils_1.cloneArr(currRuleStack);
            newRuleStack.push(prod.nonTerminalName);
            var newOccurrenceStack = utils_1.cloneArr(currOccurrenceStack);
            newOccurrenceStack.push(prod.idx);
            var nextPath = {
                idx: currIdx,
                def: prod.definition.concat(EXIT_NON_TERMINAL_ARR, utils_1.drop(currDef)),
                ruleStack: newRuleStack,
                occurrenceStack: newOccurrenceStack
            };
            possiblePaths.push(nextPath);
        }
        else if (prod instanceof gast_public_1.Option) {
            // the order of alternatives is meaningful, FILO (Last path will be traversed first).
            var nextPathWithout = {
                idx: currIdx,
                def: utils_1.drop(currDef),
                ruleStack: currRuleStack,
                occurrenceStack: currOccurrenceStack
            };
            possiblePaths.push(nextPathWithout);
            // required marker to avoid backtracking paths whose higher priority alternatives already matched
            possiblePaths.push(EXIT_ALTERNATIVE);
            var nextPathWith = {
                idx: currIdx,
                def: prod.definition.concat(utils_1.drop(currDef)),
                ruleStack: currRuleStack,
                occurrenceStack: currOccurrenceStack
            };
            possiblePaths.push(nextPathWith);
        }
        else if (prod instanceof gast_public_1.RepetitionMandatory) {
            // TODO:(THE NEW operators here take a while...) (convert once?)
            var secondIteration = new gast_public_1.Repetition({
                definition: prod.definition,
                idx: prod.idx
            });
            var nextDef = prod.definition.concat([secondIteration], utils_1.drop(currDef));
            var nextPath = {
                idx: currIdx,
                def: nextDef,
                ruleStack: currRuleStack,
                occurrenceStack: currOccurrenceStack
            };
            possiblePaths.push(nextPath);
        }
        else if (prod instanceof gast_public_1.RepetitionMandatoryWithSeparator) {
            // TODO:(THE NEW operators here take a while...) (convert once?)
            var separatorGast = new gast_public_1.Terminal({
                terminalType: prod.separator
            });
            var secondIteration = new gast_public_1.Repetition({
                definition: [separatorGast].concat(prod.definition),
                idx: prod.idx
            });
            var nextDef = prod.definition.concat([secondIteration], utils_1.drop(currDef));
            var nextPath = {
                idx: currIdx,
                def: nextDef,
                ruleStack: currRuleStack,
                occurrenceStack: currOccurrenceStack
            };
            possiblePaths.push(nextPath);
        }
        else if (prod instanceof gast_public_1.RepetitionWithSeparator) {
            // the order of alternatives is meaningful, FILO (Last path will be traversed first).
            var nextPathWithout = {
                idx: currIdx,
                def: utils_1.drop(currDef),
                ruleStack: currRuleStack,
                occurrenceStack: currOccurrenceStack
            };
            possiblePaths.push(nextPathWithout);
            // required marker to avoid backtracking paths whose higher priority alternatives already matched
            possiblePaths.push(EXIT_ALTERNATIVE);
            var separatorGast = new gast_public_1.Terminal({
                terminalType: prod.separator
            });
            var nthRepetition = new gast_public_1.Repetition({
                definition: [separatorGast].concat(prod.definition),
                idx: prod.idx
            });
            var nextDef = prod.definition.concat([nthRepetition], utils_1.drop(currDef));
            var nextPathWith = {
                idx: currIdx,
                def: nextDef,
                ruleStack: currRuleStack,
                occurrenceStack: currOccurrenceStack
            };
            possiblePaths.push(nextPathWith);
        }
        else if (prod instanceof gast_public_1.Repetition) {
            // the order of alternatives is meaningful, FILO (Last path will be traversed first).
            var nextPathWithout = {
                idx: currIdx,
                def: utils_1.drop(currDef),
                ruleStack: currRuleStack,
                occurrenceStack: currOccurrenceStack
            };
            possiblePaths.push(nextPathWithout);
            // required marker to avoid backtracking paths whose higher priority alternatives already matched
            possiblePaths.push(EXIT_ALTERNATIVE);
            // TODO: an empty repetition will cause infinite loops here, will the parser detect this in selfAnalysis?
            var nthRepetition = new gast_public_1.Repetition({
                definition: prod.definition,
                idx: prod.idx
            });
            var nextDef = prod.definition.concat([nthRepetition], utils_1.drop(currDef));
            var nextPathWith = {
                idx: currIdx,
                def: nextDef,
                ruleStack: currRuleStack,
                occurrenceStack: currOccurrenceStack
            };
            possiblePaths.push(nextPathWith);
        }
        else if (prod instanceof gast_public_1.Alternation) {
            // the order of alternatives is meaningful, FILO (Last path will be traversed first).
            for (var i = prod.definition.length - 1; i >= 0; i--) {
                var currAlt = prod.definition[i];
                var currAltPath = {
                    idx: currIdx,
                    def: currAlt.definition.concat(utils_1.drop(currDef)),
                    ruleStack: currRuleStack,
                    occurrenceStack: currOccurrenceStack
                };
                possiblePaths.push(currAltPath);
                possiblePaths.push(EXIT_ALTERNATIVE);
            }
        }
        else if (prod instanceof gast_public_1.Flat) {
            possiblePaths.push({
                idx: currIdx,
                def: prod.definition.concat(utils_1.drop(currDef)),
                ruleStack: currRuleStack,
                occurrenceStack: currOccurrenceStack
            });
        }
        else if (prod instanceof gast_public_1.Rule) {
            // last because we should only encounter at most a single one of these per invocation.
            possiblePaths.push(expandTopLevelRule(prod, currIdx, currRuleStack, currOccurrenceStack));
        }
        else {
            throw Error("non exhaustive match");
        }
    }
    return result;
}
exports.nextPossibleTokensAfter = nextPossibleTokensAfter;
function expandTopLevelRule(topRule, currIdx, currRuleStack, currOccurrenceStack) {
    var newRuleStack = utils_1.cloneArr(currRuleStack);
    newRuleStack.push(topRule.name);
    var newCurrOccurrenceStack = utils_1.cloneArr(currOccurrenceStack);
    // top rule is always assumed to have been called with occurrence index 1
    newCurrOccurrenceStack.push(1);
    return {
        idx: currIdx,
        def: topRule.definition,
        ruleStack: newRuleStack,
        occurrenceStack: newCurrOccurrenceStack
    };
}
//# sourceMappingURL=interpreter.js.map

/***/ }),
/* 17 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
// needs a separate module as this is required inside chevrotain productive code
// and also in the entry point for webpack(api.ts).
// A separate file avoids cyclic dependencies and webpack errors.
exports.VERSION = "4.2.0";
//# sourceMappingURL=version.js.map

/***/ }),
/* 18 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var range_1 = __webpack_require__(23);
var utils_1 = __webpack_require__(0);
var gast_public_1 = __webpack_require__(2);
var ProdType;
(function (ProdType) {
    ProdType[ProdType["OPTION"] = 0] = "OPTION";
    ProdType[ProdType["OR"] = 1] = "OR";
    ProdType[ProdType["MANY"] = 2] = "MANY";
    ProdType[ProdType["MANY_SEP"] = 3] = "MANY_SEP";
    ProdType[ProdType["AT_LEAST_ONE"] = 4] = "AT_LEAST_ONE";
    ProdType[ProdType["AT_LEAST_ONE_SEP"] = 5] = "AT_LEAST_ONE_SEP";
    ProdType[ProdType["REF"] = 6] = "REF";
    ProdType[ProdType["TERMINAL"] = 7] = "TERMINAL";
    ProdType[ProdType["FLAT"] = 8] = "FLAT";
})(ProdType = exports.ProdType || (exports.ProdType = {}));
var namePropRegExp = /(?:\s*{\s*NAME\s*:\s*["'`]([\w$]*)["'`])?/;
var namePropRegExpNoCurlyFirstOfTwo = new RegExp(namePropRegExp.source
    // remove opening curly brackets
    .replace("{", "")
    // add the comma between the NAME prop and the following prop
    .replace(")?", "\\s*,)?"));
var terminalRegEx = /\.\s*CONSUME(\d+)?\s*\(\s*(?:[a-zA-Z_$]\w*\s*\.\s*)*([a-zA-Z_$]\w*)/;
var terminalRegGlobal = new RegExp(terminalRegEx.source, "g");
var refRegEx = /\.\s*SUBRULE(\d+)?\s*\(\s*(?:[a-zA-Z_$]\w*\s*\.\s*)*([a-zA-Z_$]\w*)/;
var refRegExGlobal = new RegExp(refRegEx.source, "g");
var optionPrefixRegEx = /\.\s*OPTION(\d+)?\s*\(/;
var optionRegEx = new RegExp(optionPrefixRegEx.source + namePropRegExp.source);
var optionRegExGlobal = new RegExp(optionPrefixRegEx.source, "g");
var manyPrefixRegEx = /\.\s*MANY(\d+)?\s*\(/;
var manyRegEx = new RegExp(manyPrefixRegEx.source + namePropRegExp.source);
var manyRegExGlobal = new RegExp(manyPrefixRegEx.source, "g");
var sepPropRegEx = /\s*SEP\s*:\s*(?:[a-zA-Z_$]\w*\s*\.\s*)*([a-zA-Z_$]\w*)/;
var manySepPrefixRegEx = /\.\s*MANY_SEP(\d+)?\s*\(\s*{/;
var manyWithSeparatorRegEx = new RegExp(manySepPrefixRegEx.source +
    namePropRegExpNoCurlyFirstOfTwo.source +
    sepPropRegEx.source);
var manyWithSeparatorRegExGlobal = new RegExp(manyWithSeparatorRegEx.source, "g");
var atLeastOneSepPrefixRegEx = /\.\s*AT_LEAST_ONE_SEP(\d+)?\s*\(\s*{/;
var atLeastOneWithSeparatorRegEx = new RegExp(atLeastOneSepPrefixRegEx.source +
    namePropRegExpNoCurlyFirstOfTwo.source +
    sepPropRegEx.source);
var atLeastOneWithSeparatorRegExGlobal = new RegExp(atLeastOneWithSeparatorRegEx.source, "g");
var atLeastOnePrefixRegEx = /\.\s*AT_LEAST_ONE(\d+)?\s*\(/;
var atLeastOneRegEx = new RegExp(atLeastOnePrefixRegEx.source + namePropRegExp.source);
var atLeastOneRegExGlobal = new RegExp(atLeastOnePrefixRegEx.source, "g");
var orPrefixRegEx = /\.\s*OR(\d+)?\s*\(/;
var orRegEx = new RegExp(orPrefixRegEx.source + namePropRegExp.source);
var orRegExGlobal = new RegExp(orPrefixRegEx.source, "g");
var orPartSuffixRegEx = /\s*(ALT)\s*:/;
var orPartRegEx = new RegExp(namePropRegExpNoCurlyFirstOfTwo.source + orPartSuffixRegEx.source);
var orPartRegExGlobal = new RegExp(orPartRegEx.source, "g");
exports.terminalNameToConstructor = {};
function buildTopProduction(impelText, name, terminals) {
    // pseudo state. so little state does not yet mandate the complexity of wrapping in a class...
    // TODO: this is confusing, might be time to create a class..
    exports.terminalNameToConstructor = terminals;
    // the top most range must strictly contain all the other ranges
    // which is why we prefix the text with " " (curr Range impel is only for positive ranges)
    var spacedImpelText = " " + impelText;
    // TODO: why do we add whitespace twice?
    var txtWithoutComments = removeComments(" " + spacedImpelText);
    var textWithoutCommentsAndStrings = removeStringLiterals(txtWithoutComments);
    var prodRanges = createRanges(textWithoutCommentsAndStrings);
    var topRange = new range_1.Range(0, impelText.length + 2);
    var topRule = buildTopLevel(name, topRange, prodRanges, impelText);
    return topRule;
}
exports.buildTopProduction = buildTopProduction;
function buildTopLevel(name, topRange, allRanges, orgText) {
    var topLevelProd = new gast_public_1.Rule({
        name: name,
        definition: [],
        orgText: orgText
    });
    return buildAbstractProd(topLevelProd, topRange, allRanges);
}
function buildProdGast(prodRange, allRanges) {
    switch (prodRange.type) {
        case ProdType.AT_LEAST_ONE:
            return buildAtLeastOneProd(prodRange, allRanges);
        case ProdType.AT_LEAST_ONE_SEP:
            return buildAtLeastOneSepProd(prodRange, allRanges);
        case ProdType.MANY_SEP:
            return buildManySepProd(prodRange, allRanges);
        case ProdType.MANY:
            return buildManyProd(prodRange, allRanges);
        case ProdType.OPTION:
            return buildOptionProd(prodRange, allRanges);
        case ProdType.OR:
            return buildOrProd(prodRange, allRanges);
        case ProdType.FLAT:
            return buildFlatProd(prodRange, allRanges);
        case ProdType.REF:
            return buildRefProd(prodRange);
        case ProdType.TERMINAL:
            return buildTerminalProd(prodRange);
        /* istanbul ignore next */
        default:
            throw Error("non exhaustive match");
    }
}
exports.buildProdGast = buildProdGast;
function buildRefProd(prodRange) {
    var reResult = refRegEx.exec(prodRange.text);
    var isImplicitOccurrenceIdx = reResult[1] === undefined;
    var refOccurrence = isImplicitOccurrenceIdx ? 0 : parseInt(reResult[1], 10);
    var refProdName = reResult[2];
    var newRef = new gast_public_1.NonTerminal({
        nonTerminalName: refProdName,
        idx: refOccurrence
    });
    return newRef;
}
function buildTerminalProd(prodRange) {
    var reResult = terminalRegEx.exec(prodRange.text);
    var isImplicitOccurrenceIdx = reResult[1] === undefined;
    var terminalOccurrence = isImplicitOccurrenceIdx
        ? 0
        : parseInt(reResult[1], 10);
    var terminalName = reResult[2];
    var terminalType = exports.terminalNameToConstructor[terminalName];
    if (!terminalType) {
        throw Error("Terminal Token name: " +
            terminalName +
            " not found\n" +
            "\tSee: https://sap.github.io/chevrotain/docs/guide/resolving_grammar_errors.html#TERMINAL_NAME_NOT_FOUND\n" +
            "\tFor Further details.");
    }
    var newTerminal = new gast_public_1.Terminal({
        terminalType: terminalType,
        idx: terminalOccurrence
    });
    return newTerminal;
}
function buildProdWithOccurrence(regEx, prodInstance, prodRange, allRanges) {
    var reResult = regEx.exec(prodRange.text);
    var isImplicitOccurrenceIdx = reResult[1] === undefined;
    prodInstance.idx = isImplicitOccurrenceIdx ? 0 : parseInt(reResult[1], 10);
    var nestedName = reResult[2];
    if (!utils_1.isUndefined(nestedName)) {
        ;
        prodInstance.name = nestedName;
    }
    return buildAbstractProd(prodInstance, prodRange.range, allRanges);
}
function buildAtLeastOneProd(prodRange, allRanges) {
    return buildProdWithOccurrence(atLeastOneRegEx, new gast_public_1.RepetitionMandatory({ definition: [] }), prodRange, allRanges);
}
function buildAtLeastOneSepProd(prodRange, allRanges) {
    return buildRepetitionWithSep(prodRange, allRanges, gast_public_1.RepetitionMandatoryWithSeparator, atLeastOneWithSeparatorRegEx);
}
function buildManyProd(prodRange, allRanges) {
    return buildProdWithOccurrence(manyRegEx, new gast_public_1.Repetition({ definition: [] }), prodRange, allRanges);
}
function buildManySepProd(prodRange, allRanges) {
    return buildRepetitionWithSep(prodRange, allRanges, gast_public_1.RepetitionWithSeparator, manyWithSeparatorRegEx);
}
function buildRepetitionWithSep(prodRange, allRanges, repConstructor, regExp) {
    var reResult = regExp.exec(prodRange.text);
    var isImplicitOccurrenceIdx = reResult[1] === undefined;
    var occurrenceIdx = isImplicitOccurrenceIdx ? 0 : parseInt(reResult[1], 10);
    var sepName = reResult[3];
    var separatorType = exports.terminalNameToConstructor[sepName];
    if (!separatorType) {
        throw Error("Separator Terminal Token name: " + sepName + " not found");
    }
    var repetitionInstance = new repConstructor({
        definition: [],
        separator: separatorType,
        idx: occurrenceIdx
    });
    var nestedName = reResult[2];
    if (!utils_1.isUndefined(nestedName)) {
        ;
        repetitionInstance.name = nestedName;
    }
    return (buildAbstractProd(repetitionInstance, prodRange.range, allRanges));
}
function buildOptionProd(prodRange, allRanges) {
    return buildProdWithOccurrence(optionRegEx, new gast_public_1.Option({ definition: [] }), prodRange, allRanges);
}
function buildOrProd(prodRange, allRanges) {
    return buildProdWithOccurrence(orRegEx, new gast_public_1.Alternation({ definition: [] }), prodRange, allRanges);
}
function buildFlatProd(prodRange, allRanges) {
    var prodInstance = new gast_public_1.Flat({ definition: [] });
    var reResult = orPartRegEx.exec(prodRange.text);
    var nestedName = reResult[1];
    if (!utils_1.isUndefined(nestedName)) {
        ;
        prodInstance.name = nestedName;
    }
    return buildAbstractProd(prodInstance, prodRange.range, allRanges);
}
function buildAbstractProd(prod, topLevelRange, allRanges) {
    var secondLevelProds = getDirectlyContainedRanges(topLevelRange, allRanges);
    var secondLevelInOrder = utils_1.sortBy(secondLevelProds, function (prodRng) {
        return prodRng.range.start;
    });
    var definition = [];
    utils_1.forEach(secondLevelInOrder, function (prodRng) {
        definition.push(buildProdGast(prodRng, allRanges));
    });
    prod.definition = definition;
    return prod;
}
function getDirectlyContainedRanges(y, prodRanges) {
    return utils_1.filter(prodRanges, function (x) {
        var isXDescendantOfY = y.strictlyContainsRange(x.range);
        var xDoesNotHaveAnyAncestorWhichIsDecendantOfY = utils_1.every(prodRanges, function (maybeAnotherParent) {
            var isParentOfX = maybeAnotherParent.range.strictlyContainsRange(x.range);
            var isChildOfY = maybeAnotherParent.range.isStrictlyContainedInRange(y);
            return !(isParentOfX && isChildOfY);
        });
        return isXDescendantOfY && xDoesNotHaveAnyAncestorWhichIsDecendantOfY;
    });
}
exports.getDirectlyContainedRanges = getDirectlyContainedRanges;
var singleLineCommentRegEx = /\/\/.*/g;
var multiLineCommentRegEx = /\/\*([^*]|[\r\n]|(\*+([^*/]|[\r\n])))*\*+\//g;
var doubleQuoteStringLiteralRegEx = /(NAME\s*:\s*)?"([^\\"]|\\([bfnrtv"\\/]|u[0-9a-fA-F]{4}))*"/g;
var singleQuoteStringLiteralRegEx = /(NAME\s*:\s*)?'([^\\']|\\([bfnrtv'\\/]|u[0-9a-fA-F]{4}))*'/g;
function removeComments(text) {
    var noSingleLine = text.replace(singleLineCommentRegEx, "");
    var noComments = noSingleLine.replace(multiLineCommentRegEx, "");
    return noComments;
}
exports.removeComments = removeComments;
function replaceWithEmptyStringExceptNestedRules(match, nestedRuleGroup) {
    // do not replace with empty string if a nest rule (NAME:"bamba") was detected
    if (nestedRuleGroup !== undefined) {
        return match;
    }
    return "";
}
function removeStringLiterals(text) {
    var noDoubleQuotes = text.replace(doubleQuoteStringLiteralRegEx, replaceWithEmptyStringExceptNestedRules);
    var noSingleQuotes = noDoubleQuotes.replace(singleQuoteStringLiteralRegEx, replaceWithEmptyStringExceptNestedRules);
    return noSingleQuotes;
}
exports.removeStringLiterals = removeStringLiterals;
function createRanges(text) {
    var terminalRanges = createTerminalRanges(text);
    var refsRanges = createRefsRanges(text);
    var atLeastOneRanges = createAtLeastOneRanges(text);
    var atLeastOneSepRanges = createAtLeastOneSepRanges(text);
    var manyRanges = createManyRanges(text);
    var manySepRanges = createManySepRanges(text);
    var optionRanges = createOptionRanges(text);
    var orRanges = createOrRanges(text);
    return [].concat(terminalRanges, refsRanges, atLeastOneRanges, atLeastOneSepRanges, manyRanges, manySepRanges, optionRanges, orRanges);
}
exports.createRanges = createRanges;
function createTerminalRanges(text) {
    return createRefOrTerminalProdRangeInternal(text, ProdType.TERMINAL, terminalRegGlobal);
}
exports.createTerminalRanges = createTerminalRanges;
function createRefsRanges(text) {
    return createRefOrTerminalProdRangeInternal(text, ProdType.REF, refRegExGlobal);
}
exports.createRefsRanges = createRefsRanges;
function createAtLeastOneRanges(text) {
    return createOperatorProdRangeParenthesis(text, ProdType.AT_LEAST_ONE, atLeastOneRegExGlobal);
}
exports.createAtLeastOneRanges = createAtLeastOneRanges;
function createAtLeastOneSepRanges(text) {
    return createOperatorProdRangeParenthesis(text, ProdType.AT_LEAST_ONE_SEP, atLeastOneWithSeparatorRegExGlobal);
}
exports.createAtLeastOneSepRanges = createAtLeastOneSepRanges;
function createManyRanges(text) {
    return createOperatorProdRangeParenthesis(text, ProdType.MANY, manyRegExGlobal);
}
exports.createManyRanges = createManyRanges;
function createManySepRanges(text) {
    return createOperatorProdRangeParenthesis(text, ProdType.MANY_SEP, manyWithSeparatorRegExGlobal);
}
exports.createManySepRanges = createManySepRanges;
function createOptionRanges(text) {
    return createOperatorProdRangeParenthesis(text, ProdType.OPTION, optionRegExGlobal);
}
exports.createOptionRanges = createOptionRanges;
function createOrRanges(text) {
    var orRanges = createOperatorProdRangeParenthesis(text, ProdType.OR, orRegExGlobal);
    // have to split up the OR cases into separate FLAT productions
    // (A |BB | CDE) ==> or.def[0] --> FLAT(A) , or.def[1] --> FLAT(BB) , or.def[2] --> FLAT(CCDE)
    var orSubPartsRanges = createOrPartRanges(orRanges);
    return orRanges.concat(orSubPartsRanges);
}
exports.createOrRanges = createOrRanges;
var findClosingCurly = (utils_1.partial(findClosingOffset, "{", "}"));
var findClosingParen = (utils_1.partial(findClosingOffset, "(", ")"));
function createOrPartRanges(orRanges) {
    var orPartRanges = [];
    utils_1.forEach(orRanges, function (orRange) {
        var currOrParts = createOperatorProdRangeInternal(orRange.text, ProdType.FLAT, orPartRegExGlobal, findClosingCurly);
        var currOrRangeStart = orRange.range.start;
        // fix offsets as we are working on a subset of the text
        utils_1.forEach(currOrParts, function (orPart) {
            orPart.range.start += currOrRangeStart;
            orPart.range.end += currOrRangeStart;
        });
        orPartRanges = orPartRanges.concat(currOrParts);
    });
    var uniqueOrPartRanges = utils_1.uniq(orPartRanges, function (prodRange) {
        // using "~" as a separator for the identify function as its not a valid char in javascript
        return (prodRange.type +
            "~" +
            prodRange.range.start +
            "~" +
            prodRange.range.end +
            "~" +
            prodRange.text);
    });
    return uniqueOrPartRanges;
}
exports.createOrPartRanges = createOrPartRanges;
function createRefOrTerminalProdRangeInternal(text, prodType, pattern) {
    var prodRanges = [];
    var matched;
    while ((matched = pattern.exec(text))) {
        var start = matched.index;
        var stop_1 = pattern.lastIndex;
        var currRange = new range_1.Range(start, stop_1);
        var currText = matched[0];
        prodRanges.push({
            range: currRange,
            text: currText,
            type: prodType
        });
    }
    return prodRanges;
}
function createOperatorProdRangeParenthesis(text, prodType, pattern) {
    return createOperatorProdRangeInternal(text, prodType, pattern, findClosingParen);
}
function createOperatorProdRangeInternal(text, prodType, pattern, findTerminatorOffSet) {
    var operatorRanges = [];
    var matched;
    while ((matched = pattern.exec(text))) {
        var start = matched.index;
        // note that (start + matched[0].length) is the first character AFTER the match
        var stop_2 = findTerminatorOffSet(start + matched[0].length, text);
        var currRange = new range_1.Range(start, stop_2);
        var currText = text.substr(start, stop_2 - start + 1);
        operatorRanges.push({
            range: currRange,
            text: currText,
            type: prodType
        });
    }
    return operatorRanges;
}
function findClosingOffset(opening, closing, start, text) {
    var parenthesisStack = [1];
    var i = -1;
    while (!utils_1.isEmpty(parenthesisStack) && i + start < text.length) {
        i++;
        var nextChar = text.charAt(start + i);
        if (nextChar === opening) {
            parenthesisStack.push(1);
        }
        else if (nextChar === closing) {
            parenthesisStack.pop();
        }
    }
    // valid termination of the search loop
    if (utils_1.isEmpty(parenthesisStack)) {
        return i + start;
    }
    else {
        throw new Error("INVALID INPUT TEXT, UNTERMINATED PARENTHESIS");
    }
}
exports.findClosingOffset = findClosingOffset;
function deserializeGrammar(grammar, terminals) {
    return utils_1.map(grammar, function (production) {
        return deserializeProduction(production, terminals);
    });
}
exports.deserializeGrammar = deserializeGrammar;
function deserializeProduction(node, terminals) {
    switch (node.type) {
        case "NonTerminal":
            return new gast_public_1.NonTerminal({
                nonTerminalName: node.name,
                idx: node.idx
            });
        case "Flat":
            return new gast_public_1.Flat({
                name: node.name,
                definition: deserializeGrammar(node.definition, terminals)
            });
        case "Option":
            return new gast_public_1.Option({
                name: node.name,
                idx: node.idx,
                definition: deserializeGrammar(node.definition, terminals)
            });
        case "RepetitionMandatory":
            return new gast_public_1.RepetitionMandatory({
                name: node.name,
                idx: node.idx,
                definition: deserializeGrammar(node.definition, terminals)
            });
        case "RepetitionMandatoryWithSeparator":
            return new gast_public_1.RepetitionMandatoryWithSeparator({
                name: node.name,
                idx: node.idx,
                separator: terminals[node.separator.name],
                definition: deserializeGrammar(node.definition, terminals)
            });
        case "RepetitionWithSeparator":
            return new gast_public_1.RepetitionWithSeparator({
                name: node.name,
                idx: node.idx,
                separator: terminals[node.separator.name],
                definition: deserializeGrammar(node.definition, terminals)
            });
        case "Repetition":
            return new gast_public_1.Repetition({
                name: node.name,
                idx: node.idx,
                definition: deserializeGrammar(node.definition, terminals)
            });
        case "Alternation":
            return new gast_public_1.Alternation({
                name: node.name,
                idx: node.idx,
                definition: deserializeGrammar(node.definition, terminals)
            });
        case "Terminal":
            return new gast_public_1.Terminal({
                terminalType: terminals[node.name],
                idx: node.idx
            });
        case "Rule":
            return new gast_public_1.Rule({
                name: node.name,
                orgText: node.orgText,
                definition: deserializeGrammar(node.definition, terminals)
            });
        /* istanbul ignore next */
        default:
            var _never = node;
    }
}
exports.deserializeProduction = deserializeProduction;
//# sourceMappingURL=gast_builder.js.map

/***/ }),
/* 19 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// Lookahead keys are 32Bit integers in the form
// TTTTTTTTT-ZZZZZZZZZZZZZZZ-YYYY-XXXX
// XXXX -> Occurrence Index bitmap.
// YYYY -> DSL Method Name bitmap.
// ZZZZZZZZZZZZZZZ -> Rule short Index bitmap.
// TTTTTTTTT -> alternation alternative index bitmap
Object.defineProperty(exports, "__esModule", { value: true });
exports.BITS_FOR_METHOD_IDX = 4;
exports.BITS_FOR_OCCURRENCE_IDX = 4;
exports.BITS_FOR_RULE_IDX = 24;
// TODO: validation, this means that there may at most 2^8 --> 256 alternatives for an alternation.
exports.BITS_FOR_ALT_IDX = 8;
// short string used as part of mapping keys.
// being short improves the performance when composing KEYS for maps out of these
// The 5 - 8 bits (16 possible values, are reserved for the DSL method indices)
/* tslint:disable */
exports.OR_IDX = 1 << exports.BITS_FOR_METHOD_IDX;
exports.OPTION_IDX = 2 << exports.BITS_FOR_METHOD_IDX;
exports.MANY_IDX = 3 << exports.BITS_FOR_METHOD_IDX;
exports.AT_LEAST_ONE_IDX = 4 << exports.BITS_FOR_METHOD_IDX;
exports.MANY_SEP_IDX = 5 << exports.BITS_FOR_METHOD_IDX;
exports.AT_LEAST_ONE_SEP_IDX = 6 << exports.BITS_FOR_METHOD_IDX;
/* tslint:enable */
// this actually returns a number, but it is always used as a string (object prop key)
function getKeyForAutomaticLookahead(ruleIdx, dslMethodIdx, occurrence) {
    /* tslint:disable */
    return occurrence | dslMethodIdx | ruleIdx;
    /* tslint:enable */
}
exports.getKeyForAutomaticLookahead = getKeyForAutomaticLookahead;
var BITS_START_FOR_ALT_IDX = 32 - exports.BITS_FOR_ALT_IDX;
function getKeyForAltIndex(ruleIdx, dslMethodIdx, occurrence, altIdx) {
    /* tslint:disable */
    // alternative indices are zero based, thus must always add one (turn on one bit) to guarantee uniqueness.
    var altIdxBitMap = (altIdx + 1) << BITS_START_FOR_ALT_IDX;
    return (getKeyForAutomaticLookahead(ruleIdx, dslMethodIdx, occurrence) |
        altIdxBitMap);
    /* tslint:enable */
}
exports.getKeyForAltIndex = getKeyForAltIndex;
//# sourceMappingURL=keys.js.map

/***/ }),
/* 20 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var utils_1 = __webpack_require__(0);
var gast_public_1 = __webpack_require__(2);
/**
 *  A Grammar Walker that computes the "remaining" grammar "after" a productions in the grammar.
 */
var RestWalker = /** @class */ (function () {
    function RestWalker() {
    }
    RestWalker.prototype.walk = function (prod, prevRest) {
        var _this = this;
        if (prevRest === void 0) { prevRest = []; }
        utils_1.forEach(prod.definition, function (subProd, index) {
            var currRest = utils_1.drop(prod.definition, index + 1);
            /* istanbul ignore else */
            if (subProd instanceof gast_public_1.NonTerminal) {
                _this.walkProdRef(subProd, currRest, prevRest);
            }
            else if (subProd instanceof gast_public_1.Terminal) {
                _this.walkTerminal(subProd, currRest, prevRest);
            }
            else if (subProd instanceof gast_public_1.Flat) {
                _this.walkFlat(subProd, currRest, prevRest);
            }
            else if (subProd instanceof gast_public_1.Option) {
                _this.walkOption(subProd, currRest, prevRest);
            }
            else if (subProd instanceof gast_public_1.RepetitionMandatory) {
                _this.walkAtLeastOne(subProd, currRest, prevRest);
            }
            else if (subProd instanceof gast_public_1.RepetitionMandatoryWithSeparator) {
                _this.walkAtLeastOneSep(subProd, currRest, prevRest);
            }
            else if (subProd instanceof gast_public_1.RepetitionWithSeparator) {
                _this.walkManySep(subProd, currRest, prevRest);
            }
            else if (subProd instanceof gast_public_1.Repetition) {
                _this.walkMany(subProd, currRest, prevRest);
            }
            else if (subProd instanceof gast_public_1.Alternation) {
                _this.walkOr(subProd, currRest, prevRest);
            }
            else {
                throw Error("non exhaustive match");
            }
        });
    };
    RestWalker.prototype.walkTerminal = function (terminal, currRest, prevRest) { };
    RestWalker.prototype.walkProdRef = function (refProd, currRest, prevRest) { };
    RestWalker.prototype.walkFlat = function (flatProd, currRest, prevRest) {
        // ABCDEF => after the D the rest is EF
        var fullOrRest = currRest.concat(prevRest);
        this.walk(flatProd, fullOrRest);
    };
    RestWalker.prototype.walkOption = function (optionProd, currRest, prevRest) {
        // ABC(DE)?F => after the (DE)? the rest is F
        var fullOrRest = currRest.concat(prevRest);
        this.walk(optionProd, fullOrRest);
    };
    RestWalker.prototype.walkAtLeastOne = function (atLeastOneProd, currRest, prevRest) {
        // ABC(DE)+F => after the (DE)+ the rest is (DE)?F
        var fullAtLeastOneRest = [
            new gast_public_1.Option({ definition: atLeastOneProd.definition })
        ].concat(currRest, prevRest);
        this.walk(atLeastOneProd, fullAtLeastOneRest);
    };
    RestWalker.prototype.walkAtLeastOneSep = function (atLeastOneSepProd, currRest, prevRest) {
        // ABC DE(,DE)* F => after the (,DE)+ the rest is (,DE)?F
        var fullAtLeastOneSepRest = restForRepetitionWithSeparator(atLeastOneSepProd, currRest, prevRest);
        this.walk(atLeastOneSepProd, fullAtLeastOneSepRest);
    };
    RestWalker.prototype.walkMany = function (manyProd, currRest, prevRest) {
        // ABC(DE)*F => after the (DE)* the rest is (DE)?F
        var fullManyRest = [
            new gast_public_1.Option({ definition: manyProd.definition })
        ].concat(currRest, prevRest);
        this.walk(manyProd, fullManyRest);
    };
    RestWalker.prototype.walkManySep = function (manySepProd, currRest, prevRest) {
        // ABC (DE(,DE)*)? F => after the (,DE)* the rest is (,DE)?F
        var fullManySepRest = restForRepetitionWithSeparator(manySepProd, currRest, prevRest);
        this.walk(manySepProd, fullManySepRest);
    };
    RestWalker.prototype.walkOr = function (orProd, currRest, prevRest) {
        var _this = this;
        // ABC(D|E|F)G => when finding the (D|E|F) the rest is G
        var fullOrRest = currRest.concat(prevRest);
        // walk all different alternatives
        utils_1.forEach(orProd.definition, function (alt) {
            // wrapping each alternative in a single definition wrapper
            // to avoid errors in computing the rest of that alternative in the invocation to computeInProdFollows
            // (otherwise for OR([alt1,alt2]) alt2 will be considered in 'rest' of alt1
            var prodWrapper = new gast_public_1.Flat({ definition: [alt] });
            _this.walk(prodWrapper, fullOrRest);
        });
    };
    return RestWalker;
}());
exports.RestWalker = RestWalker;
function restForRepetitionWithSeparator(repSepProd, currRest, prevRest) {
    var repSepRest = [
        new gast_public_1.Option({
            definition: [
                new gast_public_1.Terminal({ terminalType: repSepProd.separator })
            ].concat(repSepProd.definition)
        })
    ];
    var fullRepSepRest = repSepRest.concat(currRest, prevRest);
    return fullRepSepRest;
}
//# sourceMappingURL=rest.js.map

/***/ }),
/* 21 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.defaultLexerErrorProvider = {
    buildUnableToPopLexerModeMessage: function (token) {
        return "Unable to pop Lexer Mode after encountering Token ->" + token.image + "<- The Mode Stack is empty";
    },
    buildUnexpectedCharactersMessage: function (fullText, startOffset, length, line, column) {
        return ("unexpected character: ->" + fullText.charAt(startOffset) + "<- at offset: " + startOffset + "," + (" skipped " + length + " characters."));
    }
};
//# sourceMappingURL=lexer_errors_public.js.map

/***/ }),
/* 22 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var utils_1 = __webpack_require__(0);
var gast_public_1 = __webpack_require__(2);
var gast_1 = __webpack_require__(10);
function first(prod) {
    /* istanbul ignore else */
    if (prod instanceof gast_public_1.NonTerminal) {
        // this could in theory cause infinite loops if
        // (1) prod A refs prod B.
        // (2) prod B refs prod A
        // (3) AB can match the empty set
        // in other words a cycle where everything is optional so the first will keep
        // looking ahead for the next optional part and will never exit
        // currently there is no safeguard for this unique edge case because
        // (1) not sure a grammar in which this can happen is useful for anything (productive)
        return first(prod.referencedRule);
    }
    else if (prod instanceof gast_public_1.Terminal) {
        return firstForTerminal(prod);
    }
    else if (gast_1.isSequenceProd(prod)) {
        return firstForSequence(prod);
    }
    else if (gast_1.isBranchingProd(prod)) {
        return firstForBranching(prod);
    }
    else {
        throw Error("non exhaustive match");
    }
}
exports.first = first;
function firstForSequence(prod) {
    var firstSet = [];
    var seq = prod.definition;
    var nextSubProdIdx = 0;
    var hasInnerProdsRemaining = seq.length > nextSubProdIdx;
    var currSubProd;
    // so we enter the loop at least once (if the definition is not empty
    var isLastInnerProdOptional = true;
    // scan a sequence until it's end or until we have found a NONE optional production in it
    while (hasInnerProdsRemaining && isLastInnerProdOptional) {
        currSubProd = seq[nextSubProdIdx];
        isLastInnerProdOptional = gast_1.isOptionalProd(currSubProd);
        firstSet = firstSet.concat(first(currSubProd));
        nextSubProdIdx = nextSubProdIdx + 1;
        hasInnerProdsRemaining = seq.length > nextSubProdIdx;
    }
    return utils_1.uniq(firstSet);
}
exports.firstForSequence = firstForSequence;
function firstForBranching(prod) {
    var allAlternativesFirsts = utils_1.map(prod.definition, function (innerProd) {
        return first(innerProd);
    });
    return utils_1.uniq(utils_1.flatten(allAlternativesFirsts));
}
exports.firstForBranching = firstForBranching;
function firstForTerminal(terminal) {
    return [terminal.terminalType];
}
exports.firstForTerminal = firstForTerminal;
//# sourceMappingURL=first.js.map

/***/ }),
/* 23 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var Range = /** @class */ (function () {
    function Range(start, end) {
        this.start = start;
        this.end = end;
        if (!isValidRange(start, end)) {
            throw new Error("INVALID RANGE");
        }
    }
    Range.prototype.contains = function (num) {
        return this.start <= num && this.end >= num;
    };
    Range.prototype.containsRange = function (other) {
        return this.start <= other.start && this.end >= other.end;
    };
    Range.prototype.isContainedInRange = function (other) {
        return other.containsRange(this);
    };
    Range.prototype.strictlyContainsRange = function (other) {
        return this.start < other.start && this.end > other.end;
    };
    Range.prototype.isStrictlyContainedInRange = function (other) {
        return other.strictlyContainsRange(this);
    };
    return Range;
}());
exports.Range = Range;
function isValidRange(start, end) {
    return !(start < 0 || end < start);
}
exports.isValidRange = isValidRange;
//# sourceMappingURL=range.js.map

/***/ }),
/* 24 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var utils_1 = __webpack_require__(0);
var lang_extensions_1 = __webpack_require__(7);
var keys_1 = __webpack_require__(19);
var gast_public_1 = __webpack_require__(2);
var gast_visitor_public_1 = __webpack_require__(11);
function addTerminalToCst(node, token, tokenTypeName) {
    if (node.children[tokenTypeName] === undefined) {
        node.children[tokenTypeName] = [token];
    }
    else {
        node.children[tokenTypeName].push(token);
    }
}
exports.addTerminalToCst = addTerminalToCst;
function addNoneTerminalToCst(node, ruleName, ruleResult) {
    if (node.children[ruleName] === undefined) {
        node.children[ruleName] = [ruleResult];
    }
    else {
        node.children[ruleName].push(ruleResult);
    }
}
exports.addNoneTerminalToCst = addNoneTerminalToCst;
var NamedDSLMethodsCollectorVisitor = /** @class */ (function (_super) {
    __extends(NamedDSLMethodsCollectorVisitor, _super);
    function NamedDSLMethodsCollectorVisitor(ruleIdx) {
        var _this = _super.call(this) || this;
        _this.result = [];
        _this.ruleIdx = ruleIdx;
        return _this;
    }
    NamedDSLMethodsCollectorVisitor.prototype.collectNamedDSLMethod = function (node, newNodeConstructor, methodIdx) {
        // TODO: better hack to copy what we need here...
        if (!utils_1.isUndefined(node.name)) {
            // copy without name so this will indeed be processed later.
            var nameLessNode 
            /* istanbul ignore else */
            = void 0;
            /* istanbul ignore else */
            if (node instanceof gast_public_1.Option ||
                node instanceof gast_public_1.Repetition ||
                node instanceof gast_public_1.RepetitionMandatory ||
                node instanceof gast_public_1.Alternation) {
                nameLessNode = new newNodeConstructor({
                    definition: node.definition,
                    idx: node.idx
                });
            }
            else if (node instanceof gast_public_1.RepetitionMandatoryWithSeparator ||
                node instanceof gast_public_1.RepetitionWithSeparator) {
                nameLessNode = new newNodeConstructor({
                    definition: node.definition,
                    idx: node.idx,
                    separator: node.separator
                });
            }
            else {
                throw Error("non exhaustive match");
            }
            var def = [nameLessNode];
            var key = keys_1.getKeyForAutomaticLookahead(this.ruleIdx, methodIdx, node.idx);
            this.result.push({ def: def, key: key, name: node.name, orgProd: node });
        }
    };
    NamedDSLMethodsCollectorVisitor.prototype.visitOption = function (node) {
        this.collectNamedDSLMethod(node, gast_public_1.Option, keys_1.OPTION_IDX);
    };
    NamedDSLMethodsCollectorVisitor.prototype.visitRepetition = function (node) {
        this.collectNamedDSLMethod(node, gast_public_1.Repetition, keys_1.MANY_IDX);
    };
    NamedDSLMethodsCollectorVisitor.prototype.visitRepetitionMandatory = function (node) {
        this.collectNamedDSLMethod(node, gast_public_1.RepetitionMandatory, keys_1.AT_LEAST_ONE_IDX);
    };
    NamedDSLMethodsCollectorVisitor.prototype.visitRepetitionMandatoryWithSeparator = function (node) {
        this.collectNamedDSLMethod(node, gast_public_1.RepetitionMandatoryWithSeparator, keys_1.AT_LEAST_ONE_SEP_IDX);
    };
    NamedDSLMethodsCollectorVisitor.prototype.visitRepetitionWithSeparator = function (node) {
        this.collectNamedDSLMethod(node, gast_public_1.RepetitionWithSeparator, keys_1.MANY_SEP_IDX);
    };
    NamedDSLMethodsCollectorVisitor.prototype.visitAlternation = function (node) {
        var _this = this;
        this.collectNamedDSLMethod(node, gast_public_1.Alternation, keys_1.OR_IDX);
        var hasMoreThanOneAlternative = node.definition.length > 1;
        utils_1.forEach(node.definition, function (currFlatAlt, altIdx) {
            if (!utils_1.isUndefined(currFlatAlt.name)) {
                var def = currFlatAlt.definition;
                if (hasMoreThanOneAlternative) {
                    def = [new gast_public_1.Option({ definition: currFlatAlt.definition })];
                }
                else {
                    // mandatory
                    def = currFlatAlt.definition;
                }
                var key = keys_1.getKeyForAltIndex(_this.ruleIdx, keys_1.OR_IDX, node.idx, altIdx);
                _this.result.push({
                    def: def,
                    key: key,
                    name: currFlatAlt.name,
                    orgProd: currFlatAlt
                });
            }
        });
    };
    return NamedDSLMethodsCollectorVisitor;
}(gast_visitor_public_1.GAstVisitor));
exports.NamedDSLMethodsCollectorVisitor = NamedDSLMethodsCollectorVisitor;
function analyzeCst(topRules, fullToShortName) {
    var result = {
        dictDef: new lang_extensions_1.HashTable(),
        allRuleNames: []
    };
    utils_1.forEach(topRules, function (currTopRule) {
        var currTopRuleShortName = fullToShortName.get(currTopRule.name);
        result.allRuleNames.push(currTopRule.name);
        var namedCollectorVisitor = new NamedDSLMethodsCollectorVisitor(currTopRuleShortName);
        currTopRule.accept(namedCollectorVisitor);
        utils_1.forEach(namedCollectorVisitor.result, function (_a) {
            var def = _a.def, key = _a.key, name = _a.name;
            result.allRuleNames.push(currTopRule.name + name);
        });
    });
    return result;
}
exports.analyzeCst = analyzeCst;
//# sourceMappingURL=cst.js.map

/***/ }),
/* 25 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var utils_1 = __webpack_require__(0);
var lang_extensions_1 = __webpack_require__(7);
var resolver_1 = __webpack_require__(35);
var checks_1 = __webpack_require__(14);
var errors_public_1 = __webpack_require__(12);
var gast_1 = __webpack_require__(10);
function resolveGrammar(options) {
    options = utils_1.defaults(options, {
        errMsgProvider: errors_public_1.defaultGrammarResolverErrorProvider
    });
    var topRulesTable = new lang_extensions_1.HashTable();
    utils_1.forEach(options.rules, function (rule) {
        topRulesTable.put(rule.name, rule);
    });
    return resolver_1.resolveGrammar(topRulesTable, options.errMsgProvider);
}
exports.resolveGrammar = resolveGrammar;
function validateGrammar(options) {
    options = utils_1.defaults(options, {
        errMsgProvider: errors_public_1.defaultGrammarValidatorErrorProvider,
        ignoredIssues: {}
    });
    return checks_1.validateGrammar(options.rules, options.maxLookahead, options.tokenTypes, options.ignoredIssues, options.errMsgProvider, options.grammarName);
}
exports.validateGrammar = validateGrammar;
function assignOccurrenceIndices(options) {
    utils_1.forEach(options.rules, function (currRule) {
        var methodsCollector = new gast_1.DslMethodsCollectorVisitor();
        currRule.accept(methodsCollector);
        utils_1.forEach(methodsCollector.dslMethods, function (methods) {
            utils_1.forEach(methods, function (currMethod, arrIdx) {
                currMethod.idx = arrIdx + 1;
            });
        });
    });
}
exports.assignOccurrenceIndices = assignOccurrenceIndices;
//# sourceMappingURL=gast_resolver_public.js.map

/***/ }),
/* 26 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var VirtualToken = /** @class */ (function () {
    function VirtualToken() {
    }
    VirtualToken.PATTERN = /NA/;
    return VirtualToken;
}());
exports.VirtualToken = VirtualToken;
var IdentTok = /** @class */ (function () {
    function IdentTok() {
    }
    IdentTok.PATTERN = /NA/;
    return IdentTok;
}());
exports.IdentTok = IdentTok;
// DOCS: once again an example of Token types hierarchies
var LiteralTok = /** @class */ (function () {
    function LiteralTok() {
    }
    LiteralTok.PATTERN = /NA/;
    return LiteralTok;
}());
exports.LiteralTok = LiteralTok;
var StringTok = /** @class */ (function (_super) {
    __extends(StringTok, _super);
    function StringTok() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    return StringTok;
}(LiteralTok));
exports.StringTok = StringTok;
var IntTok = /** @class */ (function (_super) {
    __extends(IntTok, _super);
    function IntTok() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    return IntTok;
}(LiteralTok));
exports.IntTok = IntTok;
var BigIntTok = /** @class */ (function (_super) {
    __extends(BigIntTok, _super);
    function BigIntTok() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    return BigIntTok;
}(IntTok));
exports.BigIntTok = BigIntTok;
var Keyword = /** @class */ (function () {
    function Keyword() {
    }
    Keyword.PATTERN = /NA/;
    return Keyword;
}());
exports.Keyword = Keyword;
var CreateTok = /** @class */ (function (_super) {
    __extends(CreateTok, _super);
    function CreateTok() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    return CreateTok;
}(Keyword));
exports.CreateTok = CreateTok;
var TableTok = /** @class */ (function (_super) {
    __extends(TableTok, _super);
    function TableTok() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    return TableTok;
}(Keyword));
exports.TableTok = TableTok;
var InsertTok = /** @class */ (function (_super) {
    __extends(InsertTok, _super);
    function InsertTok() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    return InsertTok;
}(Keyword));
exports.InsertTok = InsertTok;
var IntoTok = /** @class */ (function (_super) {
    __extends(IntoTok, _super);
    function IntoTok() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    return IntoTok;
}(Keyword));
exports.IntoTok = IntoTok;
var DeleteTok = /** @class */ (function (_super) {
    __extends(DeleteTok, _super);
    function DeleteTok() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    return DeleteTok;
}(Keyword));
exports.DeleteTok = DeleteTok;
var FromTok = /** @class */ (function (_super) {
    __extends(FromTok, _super);
    function FromTok() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    return FromTok;
}(Keyword));
exports.FromTok = FromTok;
var LParenTok = /** @class */ (function () {
    function LParenTok() {
    }
    LParenTok.PATTERN = /NA/;
    return LParenTok;
}());
exports.LParenTok = LParenTok;
var RParenTok = /** @class */ (function () {
    function RParenTok() {
    }
    RParenTok.PATTERN = /NA/;
    return RParenTok;
}());
exports.RParenTok = RParenTok;
var CommaTok = /** @class */ (function () {
    function CommaTok() {
    }
    CommaTok.PATTERN = /NA/;
    return CommaTok;
}());
exports.CommaTok = CommaTok;
var SemiColonTok = /** @class */ (function () {
    function SemiColonTok() {
    }
    SemiColonTok.PATTERN = /NA/;
    return SemiColonTok;
}());
exports.SemiColonTok = SemiColonTok;
var DotTok = /** @class */ (function () {
    function DotTok() {
    }
    DotTok.PATTERN = /NA/;
    return DotTok;
}());
exports.DotTok = DotTok;
/* tslint:disable:class-name */
// virtual tokens for Building the parseTree, these just give a "type/specification/categorization" to a ParseTree
var STATEMENTS = /** @class */ (function (_super) {
    __extends(STATEMENTS, _super);
    function STATEMENTS() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    return STATEMENTS;
}(VirtualToken));
exports.STATEMENTS = STATEMENTS;
var CREATE_STMT = /** @class */ (function (_super) {
    __extends(CREATE_STMT, _super);
    function CREATE_STMT() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    return CREATE_STMT;
}(VirtualToken));
exports.CREATE_STMT = CREATE_STMT;
var INSERT_STMT = /** @class */ (function (_super) {
    __extends(INSERT_STMT, _super);
    function INSERT_STMT() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    return INSERT_STMT;
}(VirtualToken));
exports.INSERT_STMT = INSERT_STMT;
var DELETE_STMT = /** @class */ (function (_super) {
    __extends(DELETE_STMT, _super);
    function DELETE_STMT() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    return DELETE_STMT;
}(VirtualToken));
exports.DELETE_STMT = DELETE_STMT;
var QUALIFIED_NAME = /** @class */ (function (_super) {
    __extends(QUALIFIED_NAME, _super);
    function QUALIFIED_NAME() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    return QUALIFIED_NAME;
}(VirtualToken));
exports.QUALIFIED_NAME = QUALIFIED_NAME;
var DOTS = /** @class */ (function (_super) {
    __extends(DOTS, _super);
    function DOTS() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    return DOTS;
}(VirtualToken));
exports.DOTS = DOTS;
var COMMAS = /** @class */ (function (_super) {
    __extends(COMMAS, _super);
    function COMMAS() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    return COMMAS;
}(VirtualToken));
exports.COMMAS = COMMAS;
// some "INVALID" virtual tokens can be defined to output a more "precise" ParseTree in case of an re-sync error
// defining them as subclasses of the "valid" virtual tokens can making handling of invalid input easier in whatever
// component which consumes the output ParseTree in order to build some Ast or other data structure.
var INVALID_DDL = /** @class */ (function (_super) {
    __extends(INVALID_DDL, _super);
    function INVALID_DDL() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    return INVALID_DDL;
}(VirtualToken));
exports.INVALID_DDL = INVALID_DDL;
var INVALID_CREATE_STMT = /** @class */ (function (_super) {
    __extends(INVALID_CREATE_STMT, _super);
    function INVALID_CREATE_STMT() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    return INVALID_CREATE_STMT;
}(CREATE_STMT));
exports.INVALID_CREATE_STMT = INVALID_CREATE_STMT;
var INVALID_INSERT_STMT = /** @class */ (function (_super) {
    __extends(INVALID_INSERT_STMT, _super);
    function INVALID_INSERT_STMT() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    return INVALID_INSERT_STMT;
}(INSERT_STMT));
exports.INVALID_INSERT_STMT = INVALID_INSERT_STMT;
var INVALID_DELETE_STMT = /** @class */ (function (_super) {
    __extends(INVALID_DELETE_STMT, _super);
    function INVALID_DELETE_STMT() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    return INVALID_DELETE_STMT;
}(DELETE_STMT));
exports.INVALID_DELETE_STMT = INVALID_DELETE_STMT;
var INVALID_QUALIFIED_NAME = /** @class */ (function (_super) {
    __extends(INVALID_QUALIFIED_NAME, _super);
    function INVALID_QUALIFIED_NAME() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    return INVALID_QUALIFIED_NAME;
}(QUALIFIED_NAME));
exports.INVALID_QUALIFIED_NAME = INVALID_QUALIFIED_NAME;
/* tslint:enable:class-name */
//# sourceMappingURL=sql_recovery_tokens.js.map

/***/ }),
/* 27 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var IdentTok = /** @class */ (function () {
    function IdentTok() {
    }
    IdentTok.PATTERN = /NA/;
    return IdentTok;
}());
exports.IdentTok = IdentTok;
var LiteralTok = /** @class */ (function () {
    function LiteralTok() {
    }
    LiteralTok.PATTERN = /NA/;
    return LiteralTok;
}());
exports.LiteralTok = LiteralTok;
var IntTok = /** @class */ (function (_super) {
    __extends(IntTok, _super);
    function IntTok() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    return IntTok;
}(LiteralTok));
exports.IntTok = IntTok;
var StringTok = /** @class */ (function (_super) {
    __extends(StringTok, _super);
    function StringTok() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    return StringTok;
}(LiteralTok));
exports.StringTok = StringTok;
var Keyword = /** @class */ (function () {
    function Keyword() {
    }
    Keyword.PATTERN = /NA/;
    return Keyword;
}());
exports.Keyword = Keyword;
var SwitchTok = /** @class */ (function (_super) {
    __extends(SwitchTok, _super);
    function SwitchTok() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    return SwitchTok;
}(Keyword));
exports.SwitchTok = SwitchTok;
var CaseTok = /** @class */ (function (_super) {
    __extends(CaseTok, _super);
    function CaseTok() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    return CaseTok;
}(Keyword));
exports.CaseTok = CaseTok;
var ReturnTok = /** @class */ (function (_super) {
    __extends(ReturnTok, _super);
    function ReturnTok() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    return ReturnTok;
}(Keyword));
exports.ReturnTok = ReturnTok;
var LParenTok = /** @class */ (function () {
    function LParenTok() {
    }
    LParenTok.PATTERN = /NA/;
    return LParenTok;
}());
exports.LParenTok = LParenTok;
var RParenTok = /** @class */ (function () {
    function RParenTok() {
    }
    RParenTok.PATTERN = /NA/;
    return RParenTok;
}());
exports.RParenTok = RParenTok;
var LCurlyTok = /** @class */ (function () {
    function LCurlyTok() {
    }
    LCurlyTok.PATTERN = /NA/;
    return LCurlyTok;
}());
exports.LCurlyTok = LCurlyTok;
var RCurlyTok = /** @class */ (function () {
    function RCurlyTok() {
    }
    RCurlyTok.PATTERN = /NA/;
    return RCurlyTok;
}());
exports.RCurlyTok = RCurlyTok;
var ColonTok = /** @class */ (function () {
    function ColonTok() {
    }
    ColonTok.PATTERN = /NA/;
    return ColonTok;
}());
exports.ColonTok = ColonTok;
var SemiColonTok = /** @class */ (function () {
    function SemiColonTok() {
    }
    SemiColonTok.PATTERN = /NA/;
    return SemiColonTok;
}());
exports.SemiColonTok = SemiColonTok;
// to force some branches for coverage
var DoubleSemiColonTok = /** @class */ (function (_super) {
    __extends(DoubleSemiColonTok, _super);
    function DoubleSemiColonTok() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    return DoubleSemiColonTok;
}(SemiColonTok));
exports.DoubleSemiColonTok = DoubleSemiColonTok;
//# sourceMappingURL=Switchcase_recovery_tokens.js.map

/***/ }),
/* 28 */
/***/ (function(module, exports) {

// shim for using process in browser
var process = module.exports = {};

// cached from whatever global is present so that test runners that stub it
// don't break things.  But we need to wrap it in a try catch in case it is
// wrapped in strict mode code which doesn't define any globals.  It's inside a
// function because try/catches deoptimize in certain engines.

var cachedSetTimeout;
var cachedClearTimeout;

function defaultSetTimout() {
    throw new Error('setTimeout has not been defined');
}
function defaultClearTimeout () {
    throw new Error('clearTimeout has not been defined');
}
(function () {
    try {
        if (typeof setTimeout === 'function') {
            cachedSetTimeout = setTimeout;
        } else {
            cachedSetTimeout = defaultSetTimout;
        }
    } catch (e) {
        cachedSetTimeout = defaultSetTimout;
    }
    try {
        if (typeof clearTimeout === 'function') {
            cachedClearTimeout = clearTimeout;
        } else {
            cachedClearTimeout = defaultClearTimeout;
        }
    } catch (e) {
        cachedClearTimeout = defaultClearTimeout;
    }
} ())
function runTimeout(fun) {
    if (cachedSetTimeout === setTimeout) {
        //normal enviroments in sane situations
        return setTimeout(fun, 0);
    }
    // if setTimeout wasn't available but was latter defined
    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
        cachedSetTimeout = setTimeout;
        return setTimeout(fun, 0);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedSetTimeout(fun, 0);
    } catch(e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
            return cachedSetTimeout.call(null, fun, 0);
        } catch(e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
            return cachedSetTimeout.call(this, fun, 0);
        }
    }


}
function runClearTimeout(marker) {
    if (cachedClearTimeout === clearTimeout) {
        //normal enviroments in sane situations
        return clearTimeout(marker);
    }
    // if clearTimeout wasn't available but was latter defined
    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
        cachedClearTimeout = clearTimeout;
        return clearTimeout(marker);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedClearTimeout(marker);
    } catch (e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
            return cachedClearTimeout.call(null, marker);
        } catch (e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
            // Some versions of I.E. have different rules for clearTimeout vs setTimeout
            return cachedClearTimeout.call(this, marker);
        }
    }



}
var queue = [];
var draining = false;
var currentQueue;
var queueIndex = -1;

function cleanUpNextTick() {
    if (!draining || !currentQueue) {
        return;
    }
    draining = false;
    if (currentQueue.length) {
        queue = currentQueue.concat(queue);
    } else {
        queueIndex = -1;
    }
    if (queue.length) {
        drainQueue();
    }
}

function drainQueue() {
    if (draining) {
        return;
    }
    var timeout = runTimeout(cleanUpNextTick);
    draining = true;

    var len = queue.length;
    while(len) {
        currentQueue = queue;
        queue = [];
        while (++queueIndex < len) {
            if (currentQueue) {
                currentQueue[queueIndex].run();
            }
        }
        queueIndex = -1;
        len = queue.length;
    }
    currentQueue = null;
    draining = false;
    runClearTimeout(timeout);
}

process.nextTick = function (fun) {
    var args = new Array(arguments.length - 1);
    if (arguments.length > 1) {
        for (var i = 1; i < arguments.length; i++) {
            args[i - 1] = arguments[i];
        }
    }
    queue.push(new Item(fun, args));
    if (queue.length === 1 && !draining) {
        runTimeout(drainQueue);
    }
};

// v8 likes predictible objects
function Item(fun, array) {
    this.fun = fun;
    this.array = array;
}
Item.prototype.run = function () {
    this.fun.apply(null, this.array);
};
process.title = 'browser';
process.browser = true;
process.env = {};
process.argv = [];
process.version = ''; // empty string to avoid regexp issues
process.versions = {};

function noop() {}

process.on = noop;
process.addListener = noop;
process.once = noop;
process.off = noop;
process.removeListener = noop;
process.removeAllListeners = noop;
process.emit = noop;
process.prependListener = noop;
process.prependOnceListener = noop;

process.listeners = function (name) { return [] }

process.binding = function (name) {
    throw new Error('process.binding is not supported');
};

process.cwd = function () { return '/' };
process.chdir = function (dir) {
    throw new Error('process.chdir is not supported');
};
process.umask = function() { return 0; };


/***/ }),
/* 29 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var parser_1 = __webpack_require__(4);
var lexer_public_1 = __webpack_require__(9);
var tokens_public_1 = __webpack_require__(1);
var exceptions_public_1 = __webpack_require__(8);
var version_1 = __webpack_require__(17);
var errors_public_1 = __webpack_require__(12);
var render_public_1 = __webpack_require__(52);
var gast_visitor_public_1 = __webpack_require__(11);
var gast_public_1 = __webpack_require__(2);
var gast_resolver_public_1 = __webpack_require__(25);
var generate_public_1 = __webpack_require__(37);
var lexer_errors_public_1 = __webpack_require__(21);
/**
 * defines the public API of
 * changes here may require major version change. (semVer)
 */
var API = {};
// semantic version
API.VERSION = version_1.VERSION;
// runtime API
API.Parser = parser_1.Parser;
// TypeCheck Multi Trait Parser API against official Chevrotain API
// The only thing this does not check is the constructor signature.
var mixedDummyInstance = null;
var officalDummyInstance = mixedDummyInstance;
API.ParserDefinitionErrorType = parser_1.ParserDefinitionErrorType;
API.Lexer = lexer_public_1.Lexer;
API.LexerDefinitionErrorType = lexer_public_1.LexerDefinitionErrorType;
API.EOF = tokens_public_1.EOF;
// Tokens utilities
API.tokenName = tokens_public_1.tokenName;
API.tokenLabel = tokens_public_1.tokenLabel;
API.tokenMatcher = tokens_public_1.tokenMatcher;
API.createToken = tokens_public_1.createToken;
API.createTokenInstance = tokens_public_1.createTokenInstance;
//
// // Other Utilities
API.EMPTY_ALT = parser_1.EMPTY_ALT;
API.defaultParserErrorProvider = errors_public_1.defaultParserErrorProvider;
API.isRecognitionException = exceptions_public_1.isRecognitionException;
API.EarlyExitException = exceptions_public_1.EarlyExitException;
API.MismatchedTokenException = exceptions_public_1.MismatchedTokenException;
API.NotAllInputParsedException = exceptions_public_1.NotAllInputParsedException;
API.NoViableAltException = exceptions_public_1.NoViableAltException;
API.defaultLexerErrorProvider = lexer_errors_public_1.defaultLexerErrorProvider;
//
// // grammar reflection API
API.Flat = gast_public_1.Flat;
API.Repetition = gast_public_1.Repetition;
API.RepetitionWithSeparator = gast_public_1.RepetitionWithSeparator;
API.RepetitionMandatory = gast_public_1.RepetitionMandatory;
API.RepetitionMandatoryWithSeparator = gast_public_1.RepetitionMandatoryWithSeparator;
API.Option = gast_public_1.Option;
API.Alternation = gast_public_1.Alternation;
API.NonTerminal = gast_public_1.NonTerminal;
API.Terminal = gast_public_1.Terminal;
API.Rule = gast_public_1.Rule;
// // GAST Utilities
API.GAstVisitor = gast_visitor_public_1.GAstVisitor;
API.serializeGrammar = gast_public_1.serializeGrammar;
API.serializeProduction = gast_public_1.serializeProduction;
API.resolveGrammar = gast_resolver_public_1.resolveGrammar;
API.defaultGrammarResolverErrorProvider = errors_public_1.defaultGrammarResolverErrorProvider;
API.validateGrammar = gast_resolver_public_1.validateGrammar;
API.defaultGrammarValidatorErrorProvider = errors_public_1.defaultGrammarValidatorErrorProvider;
API.assignOccurrenceIndices = gast_resolver_public_1.assignOccurrenceIndices;
/* istanbul ignore next */
API.clearCache = function () {
    console.warn("The clearCache function was 'soft' removed from the Chevrotain API." +
        "\n\t It performs no action other than printing this message." +
        "\n\t Please avoid using it as it will be completely removed in the future");
};
API.createSyntaxDiagramsCode = render_public_1.createSyntaxDiagramsCode;
API.generateParserFactory = generate_public_1.generateParserFactory;
API.generateParserModule = generate_public_1.generateParserModule;
module.exports = API;
//# sourceMappingURL=api.js.map

/***/ }),
/* 30 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var rest_1 = __webpack_require__(20);
var lang_extensions_1 = __webpack_require__(7);
var first_1 = __webpack_require__(22);
var utils_1 = __webpack_require__(0);
var constants_1 = __webpack_require__(34);
var tokens_public_1 = __webpack_require__(1);
var gast_public_1 = __webpack_require__(2);
// This ResyncFollowsWalker computes all of the follows required for RESYNC
// (skipping reference production).
var ResyncFollowsWalker = /** @class */ (function (_super) {
    __extends(ResyncFollowsWalker, _super);
    function ResyncFollowsWalker(topProd) {
        var _this = _super.call(this) || this;
        _this.topProd = topProd;
        _this.follows = new lang_extensions_1.HashTable();
        return _this;
    }
    ResyncFollowsWalker.prototype.startWalking = function () {
        this.walk(this.topProd);
        return this.follows;
    };
    ResyncFollowsWalker.prototype.walkTerminal = function (terminal, currRest, prevRest) {
        // do nothing! just like in the public sector after 13:00
    };
    ResyncFollowsWalker.prototype.walkProdRef = function (refProd, currRest, prevRest) {
        var followName = buildBetweenProdsFollowPrefix(refProd.referencedRule, refProd.idx) +
            this.topProd.name;
        var fullRest = currRest.concat(prevRest);
        var restProd = new gast_public_1.Flat({ definition: fullRest });
        var t_in_topProd_follows = first_1.first(restProd);
        this.follows.put(followName, t_in_topProd_follows);
    };
    return ResyncFollowsWalker;
}(rest_1.RestWalker));
exports.ResyncFollowsWalker = ResyncFollowsWalker;
function computeAllProdsFollows(topProductions) {
    var reSyncFollows = new lang_extensions_1.HashTable();
    utils_1.forEach(topProductions, function (topProd) {
        var currRefsFollow = new ResyncFollowsWalker(topProd).startWalking();
        reSyncFollows.putAll(currRefsFollow);
    });
    return reSyncFollows;
}
exports.computeAllProdsFollows = computeAllProdsFollows;
function buildBetweenProdsFollowPrefix(inner, occurenceInParent) {
    return inner.name + occurenceInParent + constants_1.IN;
}
exports.buildBetweenProdsFollowPrefix = buildBetweenProdsFollowPrefix;
function buildInProdFollowPrefix(terminal) {
    var terminalName = tokens_public_1.tokenName(terminal.terminalType);
    return terminalName + terminal.idx + constants_1.IN;
}
exports.buildInProdFollowPrefix = buildInProdFollowPrefix;
//# sourceMappingURL=follow.js.map

/***/ }),
/* 31 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var regexp_to_ast_1 = __webpack_require__(32);
var tokens_public_1 = __webpack_require__(1);
var lexer_public_1 = __webpack_require__(9);
var utils_1 = __webpack_require__(0);
var reg_exp_1 = __webpack_require__(33);
var regExpParser = new regexp_to_ast_1.RegExpParser();
var PATTERN = "PATTERN";
exports.DEFAULT_MODE = "defaultMode";
exports.MODES = "modes";
exports.SUPPORT_STICKY = typeof new RegExp("(?:)").sticky === "boolean";
function disableSticky() {
    exports.SUPPORT_STICKY = false;
}
exports.disableSticky = disableSticky;
function enableSticky() {
    exports.SUPPORT_STICKY = true;
}
exports.enableSticky = enableSticky;
function analyzeTokenTypes(tokenTypes, options) {
    options = utils_1.defaults(options, {
        useSticky: exports.SUPPORT_STICKY,
        debug: false,
        safeMode: false,
        positionTracking: "full",
        lineTerminatorCharacters: ["\r", "\n"]
    });
    var onlyRelevantTypes = utils_1.reject(tokenTypes, function (currType) {
        return currType[PATTERN] === lexer_public_1.Lexer.NA;
    });
    var hasCustom = false;
    var allTransformedPatterns = utils_1.map(onlyRelevantTypes, function (currType) {
        var currPattern = currType[PATTERN];
        /* istanbul ignore else */
        if (utils_1.isRegExp(currPattern)) {
            var regExpSource = currPattern.source;
            if (regExpSource.length === 1 &&
                // only these regExp meta characters which can appear in a length one regExp
                regExpSource !== "^" &&
                regExpSource !== "$" &&
                regExpSource !== ".") {
                return regExpSource;
            }
            else if (regExpSource.length === 2 &&
                regExpSource[0] === "\\" &&
                // not a meta character
                !utils_1.contains([
                    "d",
                    "D",
                    "s",
                    "S",
                    "t",
                    "r",
                    "n",
                    "t",
                    "0",
                    "c",
                    "b",
                    "B",
                    "f",
                    "v",
                    "w",
                    "W"
                ], regExpSource[1])) {
                // escaped meta Characters: /\+/ /\[/
                // or redundant escaping: /\a/
                // without the escaping "\"
                return regExpSource[1];
            }
            else {
                return options.useSticky
                    ? addStickyFlag(currPattern)
                    : addStartOfInput(currPattern);
            }
        }
        else if (utils_1.isFunction(currPattern)) {
            hasCustom = true;
            // CustomPatternMatcherFunc - custom patterns do not require any transformations, only wrapping in a RegExp Like object
            return { exec: currPattern };
        }
        else if (utils_1.has(currPattern, "exec")) {
            hasCustom = true;
            // ICustomPattern
            return currPattern;
        }
        else if (typeof currPattern === "string") {
            // IGNORE ABOVE ELSE
            if (currPattern.length === 1) {
                return currPattern;
            }
            else {
                var escapedRegExpString = currPattern.replace(/[\\^$.*+?()[\]{}|]/g, "\\$&");
                var wrappedRegExp = new RegExp(escapedRegExpString);
                return options.useSticky
                    ? addStickyFlag(wrappedRegExp)
                    : addStartOfInput(wrappedRegExp);
            }
        }
        else {
            throw Error("non exhaustive match");
        }
    });
    var patternIdxToType = utils_1.map(onlyRelevantTypes, function (currType) { return currType.tokenTypeIdx; });
    var patternIdxToGroup = utils_1.map(onlyRelevantTypes, function (clazz) {
        var groupName = clazz.GROUP;
        /* istanbul ignore next */
        if (groupName === lexer_public_1.Lexer.SKIPPED) {
            return undefined;
        }
        else if (utils_1.isString(groupName)) {
            return groupName;
        }
        else if (utils_1.isUndefined(groupName)) {
            return false;
        }
        else {
            throw Error("non exhaustive match");
        }
    });
    var patternIdxToLongerAltIdx = utils_1.map(onlyRelevantTypes, function (clazz) {
        var longerAltType = clazz.LONGER_ALT;
        if (longerAltType) {
            var longerAltIdx = utils_1.indexOf(onlyRelevantTypes, longerAltType);
            return longerAltIdx;
        }
    });
    var patternIdxToPushMode = utils_1.map(onlyRelevantTypes, function (clazz) { return clazz.PUSH_MODE; });
    var patternIdxToPopMode = utils_1.map(onlyRelevantTypes, function (clazz) {
        return utils_1.has(clazz, "POP_MODE");
    });
    var lineTerminatorCharCodes = getCharCodes(options.lineTerminatorCharacters);
    var patternIdxToCanLineTerminator = utils_1.map(onlyRelevantTypes, function (tokType) { return false; });
    if (options.positionTracking !== "onlyOffset") {
        patternIdxToCanLineTerminator = utils_1.map(onlyRelevantTypes, function (tokType) {
            if (utils_1.has(tokType, "LINE_BREAKS")) {
                return tokType.LINE_BREAKS;
            }
            else {
                if (checkLineBreaksIssues(tokType, lineTerminatorCharCodes) ===
                    false) {
                    return reg_exp_1.canMatchCharCode(lineTerminatorCharCodes, tokType.PATTERN);
                }
            }
        });
    }
    var patternIdxToIsCustom = utils_1.map(onlyRelevantTypes, isCustomPattern);
    var patternIdxToShort = utils_1.map(allTransformedPatterns, isShortPattern);
    var emptyGroups = utils_1.reduce(onlyRelevantTypes, function (acc, clazz) {
        var groupName = clazz.GROUP;
        if (utils_1.isString(groupName) && !(groupName === lexer_public_1.Lexer.SKIPPED)) {
            acc[groupName] = [];
        }
        return acc;
    }, {});
    var patternIdxToConfig = utils_1.map(allTransformedPatterns, function (x, idx) {
        return {
            pattern: allTransformedPatterns[idx],
            longerAlt: patternIdxToLongerAltIdx[idx],
            canLineTerminator: patternIdxToCanLineTerminator[idx],
            isCustom: patternIdxToIsCustom[idx],
            short: patternIdxToShort[idx],
            group: patternIdxToGroup[idx],
            push: patternIdxToPushMode[idx],
            pop: patternIdxToPopMode[idx],
            tokenTypeIdx: patternIdxToType[idx],
            tokenType: onlyRelevantTypes[idx]
        };
    });
    function addToMapOfArrays(map, key, value) {
        if (map[key] === undefined) {
            map[key] = [];
        }
        map[key].push(value);
    }
    var canBeOptimized = true;
    var charCodeToPatternIdxToConfig = [];
    if (!options.safeMode) {
        charCodeToPatternIdxToConfig = utils_1.reduce(onlyRelevantTypes, function (result, currTokType, idx) {
            if (typeof currTokType.PATTERN === "string") {
                var key = currTokType.PATTERN.charCodeAt(0);
                addToMapOfArrays(result, key, patternIdxToConfig[idx]);
            }
            else if (utils_1.isArray(currTokType.START_CHARS_HINT)) {
                utils_1.forEach(currTokType.START_CHARS_HINT, function (charOrInt) {
                    var key = typeof charOrInt === "string"
                        ? charOrInt.charCodeAt(0)
                        : charOrInt;
                    addToMapOfArrays(result, key, patternIdxToConfig[idx]);
                });
            }
            else if (utils_1.isRegExp(currTokType.PATTERN)) {
                if (currTokType.PATTERN.unicode) {
                    canBeOptimized = false;
                    if (options.ensureOptimizations) {
                        utils_1.PRINT_ERROR("" + reg_exp_1.failedOptimizationPrefixMsg +
                            ("\tUnable to analyze < " + currTokType.PATTERN.toString() + " > pattern.\n") +
                            "\tThe regexp unicode flag is not currently supported by the regexp-to-ast library.\n" +
                            "\tThis will disable the lexer's first char optimizations.\n" +
                            "\tFor details See: https://sap.github.io/chevrotain/docs/guide/resolving_lexer_errors.html#UNICODE_OPTIMIZE");
                    }
                }
                else {
                    var startCodes = reg_exp_1.getStartCodes(currTokType.PATTERN, options.ensureOptimizations);
                    /* istanbul ignore if */
                    // start code will only be empty given an empty regExp or failure of regexp-to-ast library
                    // the first should be a different validation and the second cannot be tested.
                    if (utils_1.isEmpty(startCodes)) {
                        // we cannot understand what codes may start possible matches
                        // The optimization correctness requires knowing start codes for ALL patterns.
                        // Not actually sure this is an error, no debug message
                        canBeOptimized = false;
                    }
                    utils_1.forEach(startCodes, function (code) {
                        addToMapOfArrays(result, code, patternIdxToConfig[idx]);
                    });
                }
            }
            else {
                if (options.ensureOptimizations) {
                    utils_1.PRINT_ERROR("" + reg_exp_1.failedOptimizationPrefixMsg +
                        ("\tTokenType: <" + tokens_public_1.tokenName(currTokType) + "> is using a custom token pattern without providing <start_chars_hint> parameter.\n") +
                        "\tThis will disable the lexer's first char optimizations.\n" +
                        "\tFor details See: https://sap.github.io/chevrotain/docs/guide/resolving_lexer_errors.html#CUSTOM_OPTIMIZE");
                }
                canBeOptimized = false;
            }
            return result;
        }, []);
    }
    if (canBeOptimized && charCodeToPatternIdxToConfig.length < 65536) {
        charCodeToPatternIdxToConfig = utils_1.packArray(charCodeToPatternIdxToConfig);
    }
    return {
        emptyGroups: emptyGroups,
        patternIdxToConfig: patternIdxToConfig,
        charCodeToPatternIdxToConfig: charCodeToPatternIdxToConfig,
        hasCustom: hasCustom,
        canBeOptimized: canBeOptimized
    };
}
exports.analyzeTokenTypes = analyzeTokenTypes;
function validatePatterns(tokenTypes, validModesNames) {
    var errors = [];
    var missingResult = findMissingPatterns(tokenTypes);
    errors = errors.concat(missingResult.errors);
    var invalidResult = findInvalidPatterns(missingResult.valid);
    var validTokenTypes = invalidResult.valid;
    errors = errors.concat(invalidResult.errors);
    errors = errors.concat(validateRegExpPattern(validTokenTypes));
    errors = errors.concat(findInvalidGroupType(validTokenTypes));
    errors = errors.concat(findModesThatDoNotExist(validTokenTypes, validModesNames));
    errors = errors.concat(findUnreachablePatterns(validTokenTypes));
    return errors;
}
exports.validatePatterns = validatePatterns;
function validateRegExpPattern(tokenTypes) {
    var errors = [];
    var withRegExpPatterns = utils_1.filter(tokenTypes, function (currTokType) {
        return utils_1.isRegExp(currTokType[PATTERN]);
    });
    errors = errors.concat(findEndOfInputAnchor(withRegExpPatterns));
    errors = errors.concat(findStartOfInputAnchor(withRegExpPatterns));
    errors = errors.concat(findUnsupportedFlags(withRegExpPatterns));
    errors = errors.concat(findDuplicatePatterns(withRegExpPatterns));
    errors = errors.concat(findEmptyMatchRegExps(withRegExpPatterns));
    return errors;
}
function findMissingPatterns(tokenTypes) {
    var tokenTypesWithMissingPattern = utils_1.filter(tokenTypes, function (currType) {
        return !utils_1.has(currType, PATTERN);
    });
    var errors = utils_1.map(tokenTypesWithMissingPattern, function (currType) {
        return {
            message: "Token Type: ->" +
                tokens_public_1.tokenName(currType) +
                "<- missing static 'PATTERN' property",
            type: lexer_public_1.LexerDefinitionErrorType.MISSING_PATTERN,
            tokenTypes: [currType]
        };
    });
    var valid = utils_1.difference(tokenTypes, tokenTypesWithMissingPattern);
    return { errors: errors, valid: valid };
}
exports.findMissingPatterns = findMissingPatterns;
function findInvalidPatterns(tokenTypes) {
    var tokenTypesWithInvalidPattern = utils_1.filter(tokenTypes, function (currType) {
        var pattern = currType[PATTERN];
        return (!utils_1.isRegExp(pattern) &&
            !utils_1.isFunction(pattern) &&
            !utils_1.has(pattern, "exec") &&
            !utils_1.isString(pattern));
    });
    var errors = utils_1.map(tokenTypesWithInvalidPattern, function (currType) {
        return {
            message: "Token Type: ->" +
                tokens_public_1.tokenName(currType) +
                "<- static 'PATTERN' can only be a RegExp, a" +
                " Function matching the {CustomPatternMatcherFunc} type or an Object matching the {ICustomPattern} interface.",
            type: lexer_public_1.LexerDefinitionErrorType.INVALID_PATTERN,
            tokenTypes: [currType]
        };
    });
    var valid = utils_1.difference(tokenTypes, tokenTypesWithInvalidPattern);
    return { errors: errors, valid: valid };
}
exports.findInvalidPatterns = findInvalidPatterns;
var end_of_input = /[^\\][\$]/;
function findEndOfInputAnchor(tokenTypes) {
    var EndAnchorFinder = /** @class */ (function (_super) {
        __extends(EndAnchorFinder, _super);
        function EndAnchorFinder() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            _this.found = false;
            return _this;
        }
        EndAnchorFinder.prototype.visitEndAnchor = function (node) {
            this.found = true;
        };
        return EndAnchorFinder;
    }(regexp_to_ast_1.BaseRegExpVisitor));
    var invalidRegex = utils_1.filter(tokenTypes, function (currType) {
        var pattern = currType[PATTERN];
        try {
            var regexpAst = regExpParser.pattern(pattern.toString());
            var endAnchorVisitor = new EndAnchorFinder();
            endAnchorVisitor.visit(regexpAst);
            return endAnchorVisitor.found;
        }
        catch (e) {
            // old behavior in case of runtime exceptions with regexp-to-ast.
            /* istanbul ignore next - cannot ensure an error in regexp-to-ast*/
            return end_of_input.test(pattern.source);
        }
    });
    var errors = utils_1.map(invalidRegex, function (currType) {
        return {
            message: "Unexpected RegExp Anchor Error:\n" +
                "\tToken Type: ->" +
                tokens_public_1.tokenName(currType) +
                "<- static 'PATTERN' cannot contain end of input anchor '$'\n" +
                "\tSee sap.github.io/chevrotain/docs/guide/resolving_lexer_errors.html#ANCHORS" +
                "\tfor details.",
            type: lexer_public_1.LexerDefinitionErrorType.EOI_ANCHOR_FOUND,
            tokenTypes: [currType]
        };
    });
    return errors;
}
exports.findEndOfInputAnchor = findEndOfInputAnchor;
function findEmptyMatchRegExps(tokenTypes) {
    var matchesEmptyString = utils_1.filter(tokenTypes, function (currType) {
        var pattern = currType[PATTERN];
        return pattern.test("");
    });
    var errors = utils_1.map(matchesEmptyString, function (currType) {
        return {
            message: "Token Type: ->" +
                tokens_public_1.tokenName(currType) +
                "<- static 'PATTERN' must not match an empty string",
            type: lexer_public_1.LexerDefinitionErrorType.EMPTY_MATCH_PATTERN,
            tokenTypes: [currType]
        };
    });
    return errors;
}
exports.findEmptyMatchRegExps = findEmptyMatchRegExps;
var start_of_input = /[^\\[][\^]|^\^/;
function findStartOfInputAnchor(tokenTypes) {
    var StartAnchorFinder = /** @class */ (function (_super) {
        __extends(StartAnchorFinder, _super);
        function StartAnchorFinder() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            _this.found = false;
            return _this;
        }
        StartAnchorFinder.prototype.visitStartAnchor = function (node) {
            this.found = true;
        };
        return StartAnchorFinder;
    }(regexp_to_ast_1.BaseRegExpVisitor));
    var invalidRegex = utils_1.filter(tokenTypes, function (currType) {
        var pattern = currType[PATTERN];
        try {
            var regexpAst = regExpParser.pattern(pattern.toString());
            var startAnchorVisitor = new StartAnchorFinder();
            startAnchorVisitor.visit(regexpAst);
            return startAnchorVisitor.found;
        }
        catch (e) {
            // old behavior in case of runtime exceptions with regexp-to-ast.
            /* istanbul ignore next - cannot ensure an error in regexp-to-ast*/
            return start_of_input.test(pattern.source);
        }
    });
    var errors = utils_1.map(invalidRegex, function (currType) {
        return {
            message: "Unexpected RegExp Anchor Error:\n" +
                "\tToken Type: ->" +
                tokens_public_1.tokenName(currType) +
                "<- static 'PATTERN' cannot contain start of input anchor '^'\n" +
                "\tSee https://sap.github.io/chevrotain/docs/guide/resolving_lexer_errors.html#ANCHORS" +
                "\tfor details.",
            type: lexer_public_1.LexerDefinitionErrorType.SOI_ANCHOR_FOUND,
            tokenTypes: [currType]
        };
    });
    return errors;
}
exports.findStartOfInputAnchor = findStartOfInputAnchor;
function findUnsupportedFlags(tokenTypes) {
    var invalidFlags = utils_1.filter(tokenTypes, function (currType) {
        var pattern = currType[PATTERN];
        return (pattern instanceof RegExp && (pattern.multiline || pattern.global));
    });
    var errors = utils_1.map(invalidFlags, function (currType) {
        return {
            message: "Token Type: ->" +
                tokens_public_1.tokenName(currType) +
                "<- static 'PATTERN' may NOT contain global('g') or multiline('m')",
            type: lexer_public_1.LexerDefinitionErrorType.UNSUPPORTED_FLAGS_FOUND,
            tokenTypes: [currType]
        };
    });
    return errors;
}
exports.findUnsupportedFlags = findUnsupportedFlags;
// This can only test for identical duplicate RegExps, not semantically equivalent ones.
function findDuplicatePatterns(tokenTypes) {
    var found = [];
    var identicalPatterns = utils_1.map(tokenTypes, function (outerType) {
        return utils_1.reduce(tokenTypes, function (result, innerType) {
            if (outerType.PATTERN.source === innerType.PATTERN.source &&
                !utils_1.contains(found, innerType) &&
                innerType.PATTERN !== lexer_public_1.Lexer.NA) {
                // this avoids duplicates in the result, each Token Type may only appear in one "set"
                // in essence we are creating Equivalence classes on equality relation.
                found.push(innerType);
                result.push(innerType);
                return result;
            }
            return result;
        }, []);
    });
    identicalPatterns = utils_1.compact(identicalPatterns);
    var duplicatePatterns = utils_1.filter(identicalPatterns, function (currIdenticalSet) {
        return currIdenticalSet.length > 1;
    });
    var errors = utils_1.map(duplicatePatterns, function (setOfIdentical) {
        var tokenTypeNames = utils_1.map(setOfIdentical, function (currType) {
            return tokens_public_1.tokenName(currType);
        });
        var dupPatternSrc = utils_1.first(setOfIdentical).PATTERN;
        return {
            message: "The same RegExp pattern ->" + dupPatternSrc + "<-" +
                ("has been used in all of the following Token Types: " + tokenTypeNames.join(", ") + " <-"),
            type: lexer_public_1.LexerDefinitionErrorType.DUPLICATE_PATTERNS_FOUND,
            tokenTypes: setOfIdentical
        };
    });
    return errors;
}
exports.findDuplicatePatterns = findDuplicatePatterns;
function findInvalidGroupType(tokenTypes) {
    var invalidTypes = utils_1.filter(tokenTypes, function (clazz) {
        if (!utils_1.has(clazz, "GROUP")) {
            return false;
        }
        var group = clazz.GROUP;
        return group !== lexer_public_1.Lexer.SKIPPED && group !== lexer_public_1.Lexer.NA && !utils_1.isString(group);
    });
    var errors = utils_1.map(invalidTypes, function (currType) {
        return {
            message: "Token Type: ->" +
                tokens_public_1.tokenName(currType) +
                "<- static 'GROUP' can only be Lexer.SKIPPED/Lexer.NA/A String",
            type: lexer_public_1.LexerDefinitionErrorType.INVALID_GROUP_TYPE_FOUND,
            tokenTypes: [currType]
        };
    });
    return errors;
}
exports.findInvalidGroupType = findInvalidGroupType;
function findModesThatDoNotExist(tokenTypes, validModes) {
    var invalidModes = utils_1.filter(tokenTypes, function (clazz) {
        return (clazz.PUSH_MODE !== undefined &&
            !utils_1.contains(validModes, clazz.PUSH_MODE));
    });
    var errors = utils_1.map(invalidModes, function (clazz) {
        var msg = "Token Type: ->" + tokens_public_1.tokenName(clazz) + "<- static 'PUSH_MODE' value cannot refer to a Lexer Mode ->" + clazz.PUSH_MODE + "<-" + "which does not exist";
        return {
            message: msg,
            type: lexer_public_1.LexerDefinitionErrorType.PUSH_MODE_DOES_NOT_EXIST,
            tokenTypes: [clazz]
        };
    });
    return errors;
}
exports.findModesThatDoNotExist = findModesThatDoNotExist;
function findUnreachablePatterns(tokenTypes) {
    var errors = [];
    var canBeTested = utils_1.reduce(tokenTypes, function (result, tokType, idx) {
        var pattern = tokType.PATTERN;
        if (pattern === lexer_public_1.Lexer.NA) {
            return result;
        }
        // a more comprehensive validation for all forms of regExps would require
        // deeper regExp analysis capabilities
        if (utils_1.isString(pattern)) {
            result.push({ str: pattern, idx: idx, tokenType: tokType });
        }
        else if (utils_1.isRegExp(pattern) && noMetaChar(pattern)) {
            result.push({ str: pattern.source, idx: idx, tokenType: tokType });
        }
        return result;
    }, []);
    utils_1.forEach(tokenTypes, function (tokType, testIdx) {
        utils_1.forEach(canBeTested, function (_a) {
            var str = _a.str, idx = _a.idx, tokenType = _a.tokenType;
            if (testIdx < idx && testTokenType(str, tokType.PATTERN)) {
                var msg = "Token: ->" + tokens_public_1.tokenName(tokenType) + "<- can never be matched.\n" +
                    ("Because it appears AFTER the Token Type ->" + tokens_public_1.tokenName(tokType) + "<-") +
                    "in the lexer's definition.\n" +
                    "See https://sap.github.io/chevrotain/docs/guide/resolving_lexer_errors.html#UNREACHABLE";
                errors.push({
                    message: msg,
                    type: lexer_public_1.LexerDefinitionErrorType.UNREACHABLE_PATTERN,
                    tokenTypes: [tokType, tokenType]
                });
            }
        });
    });
    return errors;
}
exports.findUnreachablePatterns = findUnreachablePatterns;
function testTokenType(str, pattern) {
    /* istanbul ignore else */
    if (utils_1.isRegExp(pattern)) {
        var regExpArray = pattern.exec(str);
        return regExpArray !== null && regExpArray.index === 0;
    }
    else if (utils_1.isFunction(pattern)) {
        // maintain the API of custom patterns
        return pattern(str, 0, [], {});
    }
    else if (utils_1.has(pattern, "exec")) {
        // maintain the API of custom patterns
        return pattern.exec(str, 0, [], {});
    }
    else if (typeof pattern === "string") {
        return pattern === str;
    }
    else {
        throw Error("non exhaustive match");
    }
}
function noMetaChar(regExp) {
    //https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp
    var metaChars = [
        ".",
        "\\",
        "[",
        "]",
        "|",
        "^",
        "$",
        "(",
        ")",
        "?",
        "*",
        "+",
        "{"
    ];
    return (utils_1.find(metaChars, function (char) { return regExp.source.indexOf(char) !== -1; }) ===
        undefined);
}
function addStartOfInput(pattern) {
    var flags = pattern.ignoreCase ? "i" : "";
    // always wrapping in a none capturing group preceded by '^' to make sure matching can only work on start of input.
    // duplicate/redundant start of input markers have no meaning (/^^^^A/ === /^A/)
    return new RegExp("^(?:" + pattern.source + ")", flags);
}
exports.addStartOfInput = addStartOfInput;
function addStickyFlag(pattern) {
    var flags = pattern.ignoreCase ? "iy" : "y";
    // always wrapping in a none capturing group preceded by '^' to make sure matching can only work on start of input.
    // duplicate/redundant start of input markers have no meaning (/^^^^A/ === /^A/)
    return new RegExp("" + pattern.source, flags);
}
exports.addStickyFlag = addStickyFlag;
function performRuntimeChecks(lexerDefinition, trackLines, lineTerminatorCharacters) {
    var errors = [];
    // some run time checks to help the end users.
    if (!utils_1.has(lexerDefinition, exports.DEFAULT_MODE)) {
        errors.push({
            message: "A MultiMode Lexer cannot be initialized without a <" +
                exports.DEFAULT_MODE +
                "> property in its definition\n",
            type: lexer_public_1.LexerDefinitionErrorType.MULTI_MODE_LEXER_WITHOUT_DEFAULT_MODE
        });
    }
    if (!utils_1.has(lexerDefinition, exports.MODES)) {
        errors.push({
            message: "A MultiMode Lexer cannot be initialized without a <" +
                exports.MODES +
                "> property in its definition\n",
            type: lexer_public_1.LexerDefinitionErrorType.MULTI_MODE_LEXER_WITHOUT_MODES_PROPERTY
        });
    }
    if (utils_1.has(lexerDefinition, exports.MODES) &&
        utils_1.has(lexerDefinition, exports.DEFAULT_MODE) &&
        !utils_1.has(lexerDefinition.modes, lexerDefinition.defaultMode)) {
        errors.push({
            message: "A MultiMode Lexer cannot be initialized with a " + exports.DEFAULT_MODE + ": <" + lexerDefinition.defaultMode + ">" + "which does not exist\n",
            type: lexer_public_1.LexerDefinitionErrorType.MULTI_MODE_LEXER_DEFAULT_MODE_VALUE_DOES_NOT_EXIST
        });
    }
    if (utils_1.has(lexerDefinition, exports.MODES)) {
        utils_1.forEach(lexerDefinition.modes, function (currModeValue, currModeName) {
            utils_1.forEach(currModeValue, function (currTokType, currIdx) {
                if (utils_1.isUndefined(currTokType)) {
                    errors.push({
                        message: "A Lexer cannot be initialized using an undefined Token Type. Mode:" +
                            ("<" + currModeName + "> at index: <" + currIdx + ">\n"),
                        type: lexer_public_1.LexerDefinitionErrorType.LEXER_DEFINITION_CANNOT_CONTAIN_UNDEFINED
                    });
                }
            });
        });
    }
    return errors;
}
exports.performRuntimeChecks = performRuntimeChecks;
function performWarningRuntimeChecks(lexerDefinition, trackLines, lineTerminatorCharacters) {
    var warnings = [];
    var hasAnyLineBreak = false;
    var allTokenTypes = utils_1.compact(utils_1.flatten(utils_1.mapValues(lexerDefinition.modes, function (tokTypes) { return tokTypes; })));
    var concreteTokenTypes = utils_1.reject(allTokenTypes, function (currType) { return currType[PATTERN] === lexer_public_1.Lexer.NA; });
    var terminatorCharCodes = getCharCodes(lineTerminatorCharacters);
    if (trackLines) {
        utils_1.forEach(concreteTokenTypes, function (tokType) {
            var currIssue = checkLineBreaksIssues(tokType, terminatorCharCodes);
            if (currIssue !== false) {
                var message = buildLineBreakIssueMessage(tokType, currIssue);
                var warningDescriptor = {
                    message: message,
                    type: currIssue.issue,
                    tokenType: tokType
                };
                warnings.push(warningDescriptor);
            }
            else {
                // we don't want to attempt to scan if the user explicitly specified the line_breaks option.
                if (utils_1.has(tokType, "LINE_BREAKS")) {
                    if (tokType.LINE_BREAKS === true) {
                        hasAnyLineBreak = true;
                    }
                }
                else {
                    if (reg_exp_1.canMatchCharCode(terminatorCharCodes, tokType.PATTERN)) {
                        hasAnyLineBreak = true;
                    }
                }
            }
        });
    }
    if (trackLines && !hasAnyLineBreak) {
        warnings.push({
            message: "Warning: No LINE_BREAKS Found.\n" +
                "\tThis Lexer has been defined to track line and column information,\n" +
                "\tBut none of the Token Types can be identified as matching a line terminator.\n" +
                "\tSee https://sap.github.io/chevrotain/docs/guide/resolving_lexer_errors.html#LINE_BREAKS \n" +
                "\tfor details.",
            type: lexer_public_1.LexerDefinitionErrorType.NO_LINE_BREAKS_FLAGS
        });
    }
    return warnings;
}
exports.performWarningRuntimeChecks = performWarningRuntimeChecks;
function cloneEmptyGroups(emptyGroups) {
    var clonedResult = {};
    var groupKeys = utils_1.keys(emptyGroups);
    utils_1.forEach(groupKeys, function (currKey) {
        var currGroupValue = emptyGroups[currKey];
        /* istanbul ignore else */
        if (utils_1.isArray(currGroupValue)) {
            clonedResult[currKey] = [];
        }
        else {
            throw Error("non exhaustive match");
        }
    });
    return clonedResult;
}
exports.cloneEmptyGroups = cloneEmptyGroups;
// TODO: refactor to avoid duplication
function isCustomPattern(tokenType) {
    var pattern = tokenType.PATTERN;
    /* istanbul ignore else */
    if (utils_1.isRegExp(pattern)) {
        return false;
    }
    else if (utils_1.isFunction(pattern)) {
        // CustomPatternMatcherFunc - custom patterns do not require any transformations, only wrapping in a RegExp Like object
        return true;
    }
    else if (utils_1.has(pattern, "exec")) {
        // ICustomPattern
        return true;
    }
    else if (utils_1.isString(pattern)) {
        return false;
    }
    else {
        throw Error("non exhaustive match");
    }
}
exports.isCustomPattern = isCustomPattern;
function isShortPattern(pattern) {
    if (utils_1.isString(pattern) && pattern.length === 1) {
        return pattern.charCodeAt(0);
    }
    else {
        return false;
    }
}
exports.isShortPattern = isShortPattern;
/**
 * Faster than using a RegExp for default newline detection during lexing.
 */
exports.LineTerminatorOptimizedTester = {
    // implements /\n|\r\n?/g.test
    test: function (text) {
        var len = text.length;
        for (var i = this.lastIndex; i < len; i++) {
            var c = text.charCodeAt(i);
            if (c === 10) {
                this.lastIndex = i + 1;
                return true;
            }
            else if (c === 13) {
                if (text.charCodeAt(i + 1) === 10) {
                    this.lastIndex = i + 2;
                }
                else {
                    this.lastIndex = i + 1;
                }
                return true;
            }
        }
        return false;
    },
    lastIndex: 0
};
function checkLineBreaksIssues(tokType, lineTerminatorCharCodes) {
    if (utils_1.has(tokType, "LINE_BREAKS")) {
        // if the user explicitly declared the line_breaks option we will respect their choice
        // and assume it is correct.
        return false;
    }
    else {
        /* istanbul ignore else */
        if (utils_1.isRegExp(tokType.PATTERN)) {
            try {
                reg_exp_1.canMatchCharCode(lineTerminatorCharCodes, tokType.PATTERN);
            }
            catch (e) {
                /* istanbul ignore next - to test this we would have to mock <canMatchCharCode> to throw an error */
                return {
                    issue: lexer_public_1.LexerDefinitionErrorType.IDENTIFY_TERMINATOR,
                    errMsg: e.message
                };
            }
            return false;
        }
        else if (utils_1.isString(tokType.PATTERN)) {
            // string literal patterns can always be analyzed to detect line terminator usage
            return false;
        }
        else if (isCustomPattern(tokType)) {
            // custom token types
            return { issue: lexer_public_1.LexerDefinitionErrorType.CUSTOM_LINE_BREAK };
        }
        else {
            throw Error("non exhaustive match");
        }
    }
}
function buildLineBreakIssueMessage(tokType, details) {
    /* istanbul ignore else */
    if (details.issue === lexer_public_1.LexerDefinitionErrorType.IDENTIFY_TERMINATOR) {
        return ("Warning: unable to identify line terminator usage in pattern.\n" +
            ("\tThe problem is in the <" + tokType.name + "> Token Type\n") +
            ("\t Root cause: " + details.errMsg + ".\n") +
            "\tFor details See: https://sap.github.io/chevrotain/docs/guide/resolving_lexer_errors.html#IDENTIFY_TERMINATOR");
    }
    else if (details.issue === lexer_public_1.LexerDefinitionErrorType.CUSTOM_LINE_BREAK) {
        return ("Warning: A Custom Token Pattern should specify the <line_breaks> option.\n" +
            ("\tThe problem is in the <" + tokType.name + "> Token Type\n") +
            "\tFor details See: https://sap.github.io/chevrotain/docs/guide/resolving_lexer_errors.html#CUSTOM_LINE_BREAK");
    }
    else {
        throw Error("non exhaustive match");
    }
}
exports.buildLineBreakIssueMessage = buildLineBreakIssueMessage;
function getCharCodes(charsOrCodes) {
    var charCodes = utils_1.map(charsOrCodes, function (numOrString) {
        if (utils_1.isString(numOrString) && numOrString.length > 0) {
            return numOrString.charCodeAt(0);
        }
        else {
            return numOrString;
        }
    });
    return charCodes;
}
//# sourceMappingURL=lexer.js.map

/***/ }),
/* 32 */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;;(function(root, factory) {
    // istanbul ignore next
    if (true) {
        // istanbul ignore next
        !(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory),
				__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?
				(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__))
    } else {}
})(
    typeof self !== "undefined"
        ? // istanbul ignore next
          self
        : this,
    function() {
        // references
        // https://hackernoon.com/the-madness-of-parsing-real-world-javascript-regexps-d9ee336df983
        // https://www.ecma-international.org/ecma-262/8.0/index.html#prod-Pattern
        function RegExpParser() {}

        RegExpParser.prototype.saveState = function() {
            return {
                idx: this.idx,
                input: this.input,
                groupIdx: this.groupIdx
            }
        }

        RegExpParser.prototype.restoreState = function(newState) {
            this.idx = newState.idx
            this.input = newState.input
            this.groupIdx = newState.groupIdx
        }

        RegExpParser.prototype.pattern = function(input) {
            // parser state
            this.idx = 0
            this.input = input
            this.groupIdx = 0

            this.consumeChar("/")
            var value = this.disjunction()
            this.consumeChar("/")

            var flags = {
                type: "Flags",
                global: false,
                ignoreCase: false,
                multiLine: false,
                unicode: false,
                sticky: false
            }

            while (this.isRegExpFlag()) {
                switch (this.popChar()) {
                    case "g":
                        addFlag(flags, "global")
                        break
                    case "i":
                        addFlag(flags, "ignoreCase")
                        break
                    case "m":
                        addFlag(flags, "multiLine")
                        break
                    case "u":
                        addFlag(flags, "unicode")
                        break
                    case "y":
                        addFlag(flags, "sticky")
                        break
                }
            }

            if (this.idx !== this.input.length) {
                throw Error(
                    "Redundant input: " + this.input.substring(this.idx)
                )
            }
            return { type: "Pattern", flags: flags, value: value }
        }

        RegExpParser.prototype.disjunction = function() {
            var alts = []
            alts.push(this.alternative())

            while (this.peekChar() === "|") {
                this.consumeChar("|")
                alts.push(this.alternative())
            }

            return { type: "Disjunction", value: alts }
        }

        RegExpParser.prototype.alternative = function() {
            var terms = []

            while (this.isTerm()) {
                terms.push(this.term())
            }

            return { type: "Alternative", value: terms }
        }

        RegExpParser.prototype.term = function() {
            if (this.isAssertion()) {
                return this.assertion()
            } else {
                return this.atom()
            }
        }

        RegExpParser.prototype.assertion = function() {
            switch (this.popChar()) {
                case "^":
                    return { type: "StartAnchor" }
                case "$":
                    return { type: "EndAnchor" }
                // '\b' or '\B'
                case "\\":
                    switch (this.popChar()) {
                        case "b":
                            return { type: "WordBoundary" }
                        case "B":
                            return { type: "NonWordBoundary" }
                    }
                    // istanbul ignore next
                    throw Error("Invalid Assertion Escape")
                // '(?=' or '(?!'
                case "(":
                    this.consumeChar("?")

                    var type
                    switch (this.popChar()) {
                        case "=":
                            type = "Lookahead"
                            break
                        case "!":
                            type = "NegativeLookahead"
                            break
                    }
                    ASSERT_EXISTS(type)

                    var disjunction = this.disjunction()

                    this.consumeChar(")")

                    return { type: type, value: disjunction }
            }
            // istanbul ignore next
            ASSERT_NEVER_REACH_HERE()
        }

        RegExpParser.prototype.quantifier = function() {
            var range
            switch (this.popChar()) {
                case "*":
                    range = {
                        atLeast: 0,
                        atMost: Infinity
                    }
                    break
                case "+":
                    range = {
                        atLeast: 1,
                        atMost: Infinity
                    }
                    break
                case "?":
                    range = {
                        atLeast: 0,
                        atMost: 1
                    }
                    break
                case "{":
                    var atLeast = this.integerIncludingZero()
                    switch (this.popChar()) {
                        case "}":
                            range = {
                                atLeast: atLeast,
                                atMost: atLeast
                            }
                            break
                        case ",":
                            var atMost
                            if (this.isDigit()) {
                                atMost = this.integerIncludingZero()
                                range = {
                                    atLeast: atLeast,
                                    atMost: atMost
                                }
                            } else {
                                range = {
                                    atLeast: atLeast,
                                    atMost: Infinity
                                }
                            }
                            this.consumeChar("}")
                            break
                    }
                    ASSERT_EXISTS(range)
                    break
            }

            ASSERT_EXISTS(range)

            if (this.peekChar(0) === "?") {
                this.consumeChar("?")
                range.greedy = false
            } else {
                range.greedy = true
            }

            range.type = "Quantifier"
            return range
        }

        RegExpParser.prototype.atom = function() {
            var atom
            switch (this.peekChar()) {
                case ".":
                    atom = this.dotAll()
                    break
                case "\\":
                    atom = this.atomEscape()
                    break
                case "[":
                    atom = this.characterClass()
                    break
                case "(":
                    atom = this.group()
                    break
            }

            if (atom === undefined && this.isPatternCharacter()) {
                atom = this.patternCharacter()
            }

            ASSERT_EXISTS(atom)

            if (this.isQuantifier()) {
                atom.quantifier = this.quantifier()
            }

            return atom
        }

        RegExpParser.prototype.dotAll = function() {
            this.consumeChar(".")
            return {
                type: "Set",
                complement: true,
                value: [cc("\n"), cc("\r"), cc("\u2028"), cc("\u2029")]
            }
        }

        RegExpParser.prototype.atomEscape = function() {
            this.consumeChar("\\")

            switch (this.peekChar()) {
                case "1":
                case "2":
                case "3":
                case "4":
                case "5":
                case "6":
                case "7":
                case "8":
                case "9":
                    return this.decimalEscapeAtom()
                case "d":
                case "D":
                case "s":
                case "S":
                case "w":
                case "W":
                    return this.characterClassEscape()
                case "f":
                case "n":
                case "r":
                case "t":
                case "v":
                    return this.controlEscapeAtom()
                case "c":
                    return this.controlLetterEscapeAtom()
                case "0":
                    return this.nulCharacterAtom()
                case "x":
                    return this.hexEscapeSequenceAtom()
                case "u":
                    return this.regExpUnicodeEscapeSequenceAtom()
                default:
                    return this.identityEscapeAtom()
            }
        }

        RegExpParser.prototype.decimalEscapeAtom = function() {
            var value = this.positiveInteger()

            return { type: "GroupBackReference", value: value }
        }

        RegExpParser.prototype.characterClassEscape = function() {
            var set
            var complement = false
            switch (this.popChar()) {
                case "d":
                    set = digitsCharCodes
                    break
                case "D":
                    set = digitsCharCodes
                    complement = true
                    break
                case "s":
                    set = whitespaceCodes
                    break
                case "S":
                    set = whitespaceCodes
                    complement = true
                    break
                case "w":
                    set = wordCharCodes
                    break
                case "W":
                    set = wordCharCodes
                    complement = true
                    break
            }

            ASSERT_EXISTS(set)

            return { type: "Set", value: set, complement: complement }
        }

        RegExpParser.prototype.controlEscapeAtom = function() {
            var escapeCode
            switch (this.popChar()) {
                case "f":
                    escapeCode = cc("\f")
                    break
                case "n":
                    escapeCode = cc("\n")
                    break
                case "r":
                    escapeCode = cc("\r")
                    break
                case "t":
                    escapeCode = cc("\t")
                    break
                case "v":
                    escapeCode = cc("\v")
                    break
            }
            ASSERT_EXISTS(escapeCode)

            return { type: "Character", value: escapeCode }
        }

        RegExpParser.prototype.controlLetterEscapeAtom = function() {
            this.consumeChar("c")
            var letter = this.popChar()
            if (/[a-zA-Z]/.test(letter) === false) {
                throw Error("Invalid ")
            }

            var letterCode = letter.toUpperCase().charCodeAt(0) - 64
            return { type: "Character", value: letterCode }
        }

        RegExpParser.prototype.nulCharacterAtom = function() {
            // TODO implement '[lookahead ∉ DecimalDigit]'
            // TODO: for the deprecated octal escape sequence
            this.consumeChar("0")
            return { type: "Character", value: cc("\0") }
        }

        RegExpParser.prototype.hexEscapeSequenceAtom = function() {
            this.consumeChar("x")
            return this.parseHexDigits(2)
        }

        RegExpParser.prototype.regExpUnicodeEscapeSequenceAtom = function() {
            this.consumeChar("u")
            return this.parseHexDigits(4)
        }

        RegExpParser.prototype.identityEscapeAtom = function() {
            // TODO: implement "SourceCharacter but not UnicodeIDContinue"
            // // http://unicode.org/reports/tr31/#Specific_Character_Adjustments
            var escapedChar = this.popChar()
            return { type: "Character", value: cc(escapedChar) }
        }

        RegExpParser.prototype.classPatternCharacterAtom = function() {
            switch (this.peekChar()) {
                // istanbul ignore next
                case "\n":
                // istanbul ignore next
                case "\r":
                // istanbul ignore next
                case "\u2028":
                // istanbul ignore next
                case "\u2029":
                // istanbul ignore next
                case "\\":
                // istanbul ignore next
                case "]":
                    throw Error("TBD")
                default:
                    var nextChar = this.popChar()
                    return { type: "Character", value: cc(nextChar) }
            }
        }

        RegExpParser.prototype.characterClass = function() {
            var set = []
            var complement = false
            this.consumeChar("[")
            if (this.peekChar(0) === "^") {
                this.consumeChar("^")
                complement = true
            }

            while (this.isClassAtom()) {
                var from = this.classAtom()
                var isFromSingleChar = from.type === "Character"
                if (isFromSingleChar && this.isRangeDash()) {
                    this.consumeChar("-")
                    var to = this.classAtom()
                    var isToSingleChar = to.type === "Character"

                    // a range can only be used when both sides are single characters
                    if (isToSingleChar) {
                        if (to.value < from.value) {
                            throw Error("Range out of order in character class")
                        }
                        set.push({ from: from.value, to: to.value })
                    } else {
                        // literal dash
                        insertToSet(from.value, set)
                        set.push(cc("-"))
                        insertToSet(to.value, set)
                    }
                } else {
                    insertToSet(from.value, set)
                }
            }

            this.consumeChar("]")

            return { type: "Set", complement: complement, value: set }
        }

        RegExpParser.prototype.classAtom = function() {
            switch (this.peekChar()) {
                // istanbul ignore next
                case "]":
                // istanbul ignore next
                case "\n":
                // istanbul ignore next
                case "\r":
                // istanbul ignore next
                case "\u2028":
                // istanbul ignore next
                case "\u2029":
                    throw Error("TBD")
                case "\\":
                    return this.classEscape()
                default:
                    return this.classPatternCharacterAtom()
            }
        }

        RegExpParser.prototype.classEscape = function() {
            this.consumeChar("\\")
            switch (this.peekChar()) {
                // Matches a backspace.
                // (Not to be confused with \b word boundary outside characterClass)
                case "b":
                    this.consumeChar("b")
                    return { type: "Character", value: cc("\u0008") }
                case "d":
                case "D":
                case "s":
                case "S":
                case "w":
                case "W":
                    return this.characterClassEscape()
                case "f":
                case "n":
                case "r":
                case "t":
                case "v":
                    return this.controlEscapeAtom()
                case "c":
                    return this.controlLetterEscapeAtom()
                case "0":
                    return this.nulCharacterAtom()
                case "x":
                    return this.hexEscapeSequenceAtom()
                case "u":
                    return this.regExpUnicodeEscapeSequenceAtom()
                default:
                    return this.identityEscapeAtom()
            }
        }

        RegExpParser.prototype.group = function() {
            var capturing = true
            this.consumeChar("(")
            switch (this.peekChar(0)) {
                case "?":
                    this.consumeChar("?")
                    this.consumeChar(":")
                    capturing = false
                    break
                default:
                    this.groupIdx++
                    break
            }
            var value = this.disjunction()
            this.consumeChar(")")

            var groupAst = {
                type: "Group",
                capturing: capturing,
                value: value
            }

            if (capturing) {
                groupAst.idx = this.groupIdx
            }

            return groupAst
        }

        RegExpParser.prototype.positiveInteger = function() {
            var number = this.popChar()

            // istanbul ignore next - can't ever get here due to previous lookahead checks
            // still implementing this error checking in case this ever changes.
            if (decimalPatternNoZero.test(number) === false) {
                throw Error("Expecting a positive integer")
            }

            while (decimalPattern.test(this.peekChar(0))) {
                number += this.popChar()
            }

            return parseInt(number, 10)
        }

        RegExpParser.prototype.integerIncludingZero = function() {
            var number = this.popChar()
            if (decimalPattern.test(number) === false) {
                throw Error("Expecting an integer")
            }

            while (decimalPattern.test(this.peekChar(0))) {
                number += this.popChar()
            }

            return parseInt(number, 10)
        }

        RegExpParser.prototype.patternCharacter = function() {
            var nextChar = this.popChar()
            switch (nextChar) {
                // istanbul ignore next
                case "\n":
                // istanbul ignore next
                case "\r":
                // istanbul ignore next
                case "\u2028":
                // istanbul ignore next
                case "\u2029":
                // istanbul ignore next
                case "^":
                // istanbul ignore next
                case "$":
                // istanbul ignore next
                case "\\":
                // istanbul ignore next
                case ".":
                // istanbul ignore next
                case "*":
                // istanbul ignore next
                case "+":
                // istanbul ignore next
                case "?":
                // istanbul ignore next
                case "(":
                // istanbul ignore next
                case ")":
                // istanbul ignore next
                case "[":
                // istanbul ignore next
                case "|":
                    // istanbul ignore next
                    throw Error("TBD")
                default:
                    return { type: "Character", value: cc(nextChar) }
            }
        }
        RegExpParser.prototype.isRegExpFlag = function() {
            switch (this.peekChar(0)) {
                case "g":
                case "i":
                case "m":
                case "u":
                case "y":
                    return true
                default:
                    return false
            }
        }

        RegExpParser.prototype.isRangeDash = function() {
            return this.peekChar() === "-" && this.isClassAtom(1)
        }

        RegExpParser.prototype.isDigit = function() {
            return decimalPattern.test(this.peekChar(0))
        }

        RegExpParser.prototype.isClassAtom = function(howMuch) {
            if (howMuch === undefined) {
                howMuch = 0
            }

            switch (this.peekChar(howMuch)) {
                case "]":
                case "\n":
                case "\r":
                case "\u2028":
                case "\u2029":
                    return false
                default:
                    return true
            }
        }

        RegExpParser.prototype.isTerm = function() {
            return this.isAtom() || this.isAssertion()
        }

        RegExpParser.prototype.isAtom = function() {
            if (this.isPatternCharacter()) {
                return true
            }

            switch (this.peekChar(0)) {
                case ".":
                case "\\": // atomEscape
                case "[": // characterClass
                // TODO: isAtom must be called before isAssertion - disambiguate
                case "(": // group
                    return true
                default:
                    return false
            }
        }

        RegExpParser.prototype.isAssertion = function() {
            switch (this.peekChar(0)) {
                case "^":
                case "$":
                    return true
                // '\b' or '\B'
                case "\\":
                    switch (this.peekChar(1)) {
                        case "b":
                        case "B":
                            return true
                        default:
                            return false
                    }
                // '(?=' or '(?!'
                case "(":
                    return (
                        this.peekChar(1) === "?" &&
                        (this.peekChar(2) === "=" || this.peekChar(2) === "!")
                    )
                default:
                    return false
            }
        }

        RegExpParser.prototype.isQuantifier = function() {
            var prevState = this.saveState()
            try {
                return this.quantifier()
            } catch (e) {
                return false
            } finally {
                this.restoreState(prevState)
            }
        }

        RegExpParser.prototype.isPatternCharacter = function() {
            switch (this.peekChar()) {
                case "^":
                case "$":
                case "\\":
                case ".":
                case "*":
                case "+":
                case "?":
                case "(":
                case ")":
                case "[":
                case "|":
                case "/":
                case "\n":
                case "\r":
                case "\u2028":
                case "\u2029":
                    return false
                default:
                    return true
            }
        }

        RegExpParser.prototype.parseHexDigits = function(howMany) {
            var hexString = ""
            for (var i = 0; i < howMany; i++) {
                var hexChar = this.popChar()
                if (hexDigitPattern.test(hexChar) === false) {
                    throw Error("Expecting a HexDecimal digits")
                }
                hexString += hexChar
            }
            var charCode = parseInt(hexString, 16)
            return { type: "Character", value: charCode }
        }

        RegExpParser.prototype.peekChar = function(howMuch) {
            if (howMuch === undefined) {
                howMuch = 0
            }
            return this.input[this.idx + howMuch]
        }

        RegExpParser.prototype.popChar = function() {
            var nextChar = this.peekChar(0)
            this.consumeChar()
            return nextChar
        }

        RegExpParser.prototype.consumeChar = function(char) {
            if (char !== undefined && this.input[this.idx] !== char) {
                throw Error(
                    "Expected: '" +
                        char +
                        "' but found: '" +
                        this.input[this.idx] +
                        "' at offset: " +
                        this.idx
                )
            }

            if (this.idx >= this.input.length) {
                throw Error("Unexpected end of input")
            }
            this.idx++
        }

        // consts and utilities
        var hexDigitPattern = /[0-9a-fA-F]/
        var decimalPattern = /[0-9]/
        var decimalPatternNoZero = /[1-9]/

        function cc(char) {
            return char.charCodeAt(0)
        }

        function insertToSet(item, set) {
            if (item.length !== undefined) {
                item.forEach(function(subItem) {
                    set.push(subItem)
                })
            } else {
                set.push(item)
            }
        }

        function addFlag(flagObj, flagKey) {
            if (flagObj[flagKey] === true) {
                throw "duplicate flag " + flagKey
            }

            flagObj[flagKey] = true
        }

        function ASSERT_EXISTS(obj) {
            // istanbul ignore next
            if (obj === undefined) {
                throw Error("Internal Error - Should never get here!")
            }
        }

        // istanbul ignore next
        function ASSERT_NEVER_REACH_HERE() {
            throw Error("Internal Error - Should never get here!")
        }

        var i
        var digitsCharCodes = []
        for (i = cc("0"); i <= cc("9"); i++) {
            digitsCharCodes.push(i)
        }

        var wordCharCodes = [cc("_")].concat(digitsCharCodes)
        for (i = cc("a"); i <= cc("z"); i++) {
            wordCharCodes.push(i)
        }

        for (i = cc("A"); i <= cc("Z"); i++) {
            wordCharCodes.push(i)
        }

        // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp#character-classes
        var whitespaceCodes = [
            cc(" "),
            cc("\f"),
            cc("\n"),
            cc("\r"),
            cc("\t"),
            cc("\v"),
            cc("\t"),
            cc("\u00a0"),
            cc("\u1680"),
            cc("\u2000"),
            cc("\u2001"),
            cc("\u2002"),
            cc("\u2003"),
            cc("\u2004"),
            cc("\u2005"),
            cc("\u2006"),
            cc("\u2007"),
            cc("\u2008"),
            cc("\u2009"),
            cc("\u200a"),
            cc("\u2028"),
            cc("\u2029"),
            cc("\u202f"),
            cc("\u205f"),
            cc("\u3000"),
            cc("\ufeff")
        ]

        function BaseRegExpVisitor() {}

        BaseRegExpVisitor.prototype.visitChildren = function(node) {
            for (var key in node) {
                var child = node[key]
                /* istanbul ignore else */
                if (node.hasOwnProperty(key)) {
                    if (child.type !== undefined) {
                        this.visit(child)
                    } else if (Array.isArray(child)) {
                        child.forEach(function(subChild) {
                            this.visit(subChild)
                        }, this)
                    }
                }
            }
        }

        BaseRegExpVisitor.prototype.visit = function(node) {
            switch (node.type) {
                case "Pattern":
                    this.visitPattern(node)
                    break
                case "Flags":
                    this.visitFlags(node)
                    break
                case "Disjunction":
                    this.visitDisjunction(node)
                    break
                case "Alternative":
                    this.visitAlternative(node)
                    break
                case "StartAnchor":
                    this.visitStartAnchor(node)
                    break
                case "EndAnchor":
                    this.visitEndAnchor(node)
                    break
                case "WordBoundary":
                    this.visitWordBoundary(node)
                    break
                case "NonWordBoundary":
                    this.visitNonWordBoundary(node)
                    break
                case "Lookahead":
                    this.visitLookahead(node)
                    break
                case "NegativeLookahead":
                    this.visitNegativeLookahead(node)
                    break
                case "Character":
                    this.visitCharacter(node)
                    break
                case "Set":
                    this.visitSet(node)
                    break
                case "Group":
                    this.visitGroup(node)
                    break
                case "GroupBackReference":
                    this.visitGroupBackReference(node)
                    break
                case "Quantifier":
                    this.visitQuantifier(node)
                    break
            }

            this.visitChildren(node)
        }

        BaseRegExpVisitor.prototype.visitPattern = function(node) {}

        BaseRegExpVisitor.prototype.visitFlags = function(node) {}

        BaseRegExpVisitor.prototype.visitDisjunction = function(node) {}

        BaseRegExpVisitor.prototype.visitAlternative = function(node) {}

        // Assertion
        BaseRegExpVisitor.prototype.visitStartAnchor = function(node) {}

        BaseRegExpVisitor.prototype.visitEndAnchor = function(node) {}

        BaseRegExpVisitor.prototype.visitWordBoundary = function(node) {}

        BaseRegExpVisitor.prototype.visitNonWordBoundary = function(node) {}

        BaseRegExpVisitor.prototype.visitLookahead = function(node) {}

        BaseRegExpVisitor.prototype.visitNegativeLookahead = function(node) {}

        // atoms
        BaseRegExpVisitor.prototype.visitCharacter = function(node) {}

        BaseRegExpVisitor.prototype.visitSet = function(node) {}

        BaseRegExpVisitor.prototype.visitGroup = function(node) {}

        BaseRegExpVisitor.prototype.visitGroupBackReference = function(node) {}

        BaseRegExpVisitor.prototype.visitQuantifier = function(node) {}

        return {
            RegExpParser: RegExpParser,
            BaseRegExpVisitor: BaseRegExpVisitor,
            VERSION: "0.3.5"
        }
    }
)


/***/ }),
/* 33 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var regexp_to_ast_1 = __webpack_require__(32);
var utils_1 = __webpack_require__(0);
var regExpParser = new regexp_to_ast_1.RegExpParser();
var complementErrorMessage = "Complement Sets are not supported for first char optimization";
exports.failedOptimizationPrefixMsg = 'Unable to use "first char" lexer optimizations:\n';
function getStartCodes(regExp, ensureOptimizations) {
    if (ensureOptimizations === void 0) { ensureOptimizations = false; }
    try {
        var ast = regExpParser.pattern(regExp.toString());
        var firstChars = firstChar(ast.value);
        if (ast.flags.ignoreCase) {
            firstChars = applyIgnoreCase(firstChars);
        }
        return firstChars;
    }
    catch (e) {
        /* istanbul ignore next */
        // Testing this relies on the regexp-to-ast library having a bug... */
        // TODO: only the else branch needs to be ignored, try to fix with newer prettier / tsc
        if (e.message === complementErrorMessage) {
            if (ensureOptimizations) {
                utils_1.PRINT_WARNING("" + exports.failedOptimizationPrefixMsg +
                    ("\tUnable to optimize: < " + regExp.toString() + " >\n") +
                    "\tComplement Sets cannot be automatically optimized.\n" +
                    "\tThis will disable the lexer's first char optimizations.\n" +
                    "\tSee: https://sap.github.io/chevrotain/docs/guide/resolving_lexer_errors.html#COMPLEMENT for details.");
            }
        }
        else {
            var msgSuffix = "";
            if (ensureOptimizations) {
                msgSuffix =
                    "\n\tThis will disable the lexer's first char optimizations.\n" +
                        "\tSee: https://sap.github.io/chevrotain/docs/guide/resolving_lexer_errors.html#REGEXP_PARSING for details.";
            }
            utils_1.PRINT_ERROR(exports.failedOptimizationPrefixMsg + "\n" +
                ("\tFailed parsing: < " + regExp.toString() + " >\n") +
                ("\tUsing the regexp-to-ast library version: " + regexp_to_ast_1.VERSION + "\n") +
                "\tPlease open an issue at: https://github.com/bd82/regexp-to-ast/issues" +
                msgSuffix);
        }
    }
    return [];
}
exports.getStartCodes = getStartCodes;
function firstChar(ast) {
    switch (ast.type) {
        case "Disjunction":
            return utils_1.flatten(utils_1.map(ast.value, firstChar));
        case "Alternative":
            var startChars_1 = [];
            var terms = ast.value;
            for (var i = 0; i < terms.length; i++) {
                var term = terms[i];
                if (utils_1.contains([
                    // A group back reference cannot affect potential starting char.
                    // because if a back reference is the first production than automatically
                    // the group being referenced has had to come BEFORE so its codes have already been added
                    "GroupBackReference",
                    // assertions do not affect potential starting codes
                    "Lookahead",
                    "NegativeLookahead",
                    "StartAnchor",
                    "EndAnchor",
                    "WordBoundary",
                    "NonWordBoundary"
                ], term.type)) {
                    continue;
                }
                var atom = term;
                switch (atom.type) {
                    case "Character":
                        startChars_1.push(atom.value);
                        break;
                    case "Set":
                        if (atom.complement === true) {
                            throw Error(complementErrorMessage);
                        }
                        // TODO: this may still be slow when there are many codes
                        utils_1.forEach(atom.value, function (code) {
                            if (typeof code === "number") {
                                startChars_1.push(code);
                            }
                            else {
                                //range
                                var range = code;
                                for (var rangeCode = range.from; rangeCode <= range.to; rangeCode++) {
                                    startChars_1.push(rangeCode);
                                }
                            }
                        });
                        break;
                    case "Group":
                        var groupCodes = firstChar(atom.value);
                        utils_1.forEach(groupCodes, function (code) { return startChars_1.push(code); });
                        break;
                    /* istanbul ignore next */
                    default:
                        throw Error("Non Exhaustive Match");
                }
                // reached a mandatory production, no more start codes can be found on this alternative
                if (
                //
                atom.quantifier === undefined ||
                    (atom.quantifier !== undefined &&
                        atom.quantifier.atLeast > 0)) {
                    break;
                }
            }
            return startChars_1;
        /* istanbul ignore next */
        default:
            throw Error("non exhaustive match!");
    }
}
exports.firstChar = firstChar;
function applyIgnoreCase(firstChars) {
    var firstCharsCase = [];
    utils_1.forEach(firstChars, function (charCode) {
        firstCharsCase.push(charCode);
        var char = String.fromCharCode(charCode);
        /* istanbul ignore else */
        if (char.toUpperCase() !== char) {
            firstCharsCase.push(char.toUpperCase().charCodeAt(0));
        }
        else if (char.toLowerCase() !== char) {
            firstCharsCase.push(char.toLowerCase().charCodeAt(0));
        }
    });
    return firstCharsCase;
}
exports.applyIgnoreCase = applyIgnoreCase;
function findCode(setNode, targetCharCodes) {
    return utils_1.find(setNode.value, function (codeOrRange) {
        if (typeof codeOrRange === "number") {
            return utils_1.contains(targetCharCodes, codeOrRange);
        }
        else {
            // range
            var range_1 = codeOrRange;
            return (utils_1.find(targetCharCodes, function (targetCode) {
                return range_1.from <= targetCode && targetCode <= range_1.to;
            }) !== undefined);
        }
    });
}
var CharCodeFinder = /** @class */ (function (_super) {
    __extends(CharCodeFinder, _super);
    function CharCodeFinder(targetCharCodes) {
        var _this = _super.call(this) || this;
        _this.targetCharCodes = targetCharCodes;
        _this.found = false;
        return _this;
    }
    CharCodeFinder.prototype.visitChildren = function (node) {
        // switch lookaheads as they do not actually consume any characters thus
        // finding a charCode at lookahead context does not mean that regexp can actually contain it in a match.
        switch (node.type) {
            case "Lookahead":
                this.visitLookahead(node);
                return;
            case "NegativeLookahead":
                this.visitNegativeLookahead(node);
                return;
        }
        _super.prototype.visitChildren.call(this, node);
    };
    CharCodeFinder.prototype.visitCharacter = function (node) {
        if (utils_1.contains(this.targetCharCodes, node.value)) {
            this.found = true;
        }
    };
    CharCodeFinder.prototype.visitSet = function (node) {
        if (node.complement) {
            if (findCode(node, this.targetCharCodes) === undefined) {
                this.found = true;
            }
        }
        else {
            if (findCode(node, this.targetCharCodes) !== undefined) {
                this.found = true;
            }
        }
    };
    return CharCodeFinder;
}(regexp_to_ast_1.BaseRegExpVisitor));
function canMatchCharCode(charCodes, pattern) {
    if (pattern instanceof RegExp) {
        var ast = regExpParser.pattern(pattern.toString());
        var charCodeFinder = new CharCodeFinder(charCodes);
        charCodeFinder.visit(ast);
        return charCodeFinder.found;
    }
    else {
        return (utils_1.find(pattern, function (char) {
            return utils_1.contains(charCodes, char.charCodeAt(0));
        }) !== undefined);
    }
}
exports.canMatchCharCode = canMatchCharCode;
//# sourceMappingURL=reg_exp.js.map

/***/ }),
/* 34 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
// TODO: can this be removed? where is it used?
exports.IN = "_~IN~_";
//# sourceMappingURL=constants.js.map

/***/ }),
/* 35 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var parser_1 = __webpack_require__(4);
var utils_1 = __webpack_require__(0);
var gast_visitor_public_1 = __webpack_require__(11);
function resolveGrammar(topLevels, errMsgProvider) {
    var refResolver = new GastRefResolverVisitor(topLevels, errMsgProvider);
    refResolver.resolveRefs();
    return refResolver.errors;
}
exports.resolveGrammar = resolveGrammar;
var GastRefResolverVisitor = /** @class */ (function (_super) {
    __extends(GastRefResolverVisitor, _super);
    function GastRefResolverVisitor(nameToTopRule, errMsgProvider) {
        var _this = _super.call(this) || this;
        _this.nameToTopRule = nameToTopRule;
        _this.errMsgProvider = errMsgProvider;
        _this.errors = [];
        return _this;
    }
    GastRefResolverVisitor.prototype.resolveRefs = function () {
        var _this = this;
        utils_1.forEach(this.nameToTopRule.values(), function (prod) {
            _this.currTopLevel = prod;
            prod.accept(_this);
        });
    };
    GastRefResolverVisitor.prototype.visitNonTerminal = function (node) {
        var ref = this.nameToTopRule.get(node.nonTerminalName);
        if (!ref) {
            var msg = this.errMsgProvider.buildRuleNotFoundError(this.currTopLevel, node);
            this.errors.push({
                message: msg,
                type: parser_1.ParserDefinitionErrorType.UNRESOLVED_SUBRULE_REF,
                ruleName: this.currTopLevel.name,
                unresolvedRefName: node.nonTerminalName
            });
        }
        else {
            node.referencedRule = ref;
        }
    };
    return GastRefResolverVisitor;
}(gast_visitor_public_1.GAstVisitor));
exports.GastRefResolverVisitor = GastRefResolverVisitor;
//# sourceMappingURL=resolver.js.map

/***/ }),
/* 36 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var tokens_public_1 = __webpack_require__(1);
var utils_1 = __webpack_require__(0);
var exceptions_public_1 = __webpack_require__(8);
var constants_1 = __webpack_require__(34);
var lang_extensions_1 = __webpack_require__(7);
var parser_1 = __webpack_require__(4);
exports.EOF_FOLLOW_KEY = {};
exports.IN_RULE_RECOVERY_EXCEPTION = "InRuleRecoveryException";
function InRuleRecoveryException(message) {
    this.name = exports.IN_RULE_RECOVERY_EXCEPTION;
    this.message = message;
}
exports.InRuleRecoveryException = InRuleRecoveryException;
InRuleRecoveryException.prototype = Error.prototype;
/**
 * This trait is responsible for the error recovery and fault tolerant logic
 */
var Recoverable = /** @class */ (function () {
    function Recoverable() {
    }
    Recoverable.prototype.initRecoverable = function (config) {
        this.firstAfterRepMap = new lang_extensions_1.HashTable();
        this.resyncFollows = new lang_extensions_1.HashTable();
        this.recoveryEnabled = utils_1.has(config, "recoveryEnabled")
            ? config.recoveryEnabled
            : parser_1.DEFAULT_PARSER_CONFIG.recoveryEnabled;
        // performance optimization, NOOP will be inlined which
        // effectively means that this optional feature does not exist
        // when not used.
        if (this.recoveryEnabled) {
            this.attemptInRepetitionRecovery = attemptInRepetitionRecovery;
        }
    };
    Recoverable.prototype.getTokenToInsert = function (tokType) {
        var tokToInsert = tokens_public_1.createTokenInstance(tokType, "", NaN, NaN, NaN, NaN, NaN, NaN);
        tokToInsert.isInsertedInRecovery = true;
        return tokToInsert;
    };
    Recoverable.prototype.canTokenTypeBeInsertedInRecovery = function (tokType) {
        return true;
    };
    Recoverable.prototype.tryInRepetitionRecovery = function (grammarRule, grammarRuleArgs, lookAheadFunc, expectedTokType) {
        var _this = this;
        // TODO: can the resyncTokenType be cached?
        var reSyncTokType = this.findReSyncTokenType();
        var savedLexerState = this.exportLexerState();
        var resyncedTokens = [];
        var passedResyncPoint = false;
        var nextTokenWithoutResync = this.LA(1);
        var currToken = this.LA(1);
        var generateErrorMessage = function () {
            var previousToken = _this.LA(0);
            // we are preemptively re-syncing before an error has been detected, therefor we must reproduce
            // the error that would have been thrown
            var msg = _this.errorMessageProvider.buildMismatchTokenMessage({
                expected: expectedTokType,
                actual: nextTokenWithoutResync,
                previous: previousToken,
                ruleName: _this.getCurrRuleFullName()
            });
            var error = new exceptions_public_1.MismatchedTokenException(msg, nextTokenWithoutResync, _this.LA(0));
            // the first token here will be the original cause of the error, this is not part of the resyncedTokens property.
            error.resyncedTokens = utils_1.dropRight(resyncedTokens);
            _this.SAVE_ERROR(error);
        };
        while (!passedResyncPoint) {
            // re-synced to a point where we can safely exit the repetition/
            if (this.tokenMatcher(currToken, expectedTokType)) {
                generateErrorMessage();
                return; // must return here to avoid reverting the inputIdx
            }
            else if (lookAheadFunc.call(this)) {
                // we skipped enough tokens so we can resync right back into another iteration of the repetition grammar rule
                generateErrorMessage();
                // recursive invocation in other to support multiple re-syncs in the same top level repetition grammar rule
                grammarRule.apply(this, grammarRuleArgs);
                return; // must return here to avoid reverting the inputIdx
            }
            else if (this.tokenMatcher(currToken, reSyncTokType)) {
                passedResyncPoint = true;
            }
            else {
                currToken = this.SKIP_TOKEN();
                this.addToResyncTokens(currToken, resyncedTokens);
            }
        }
        // we were unable to find a CLOSER point to resync inside the Repetition, reset the state.
        // The parsing exception we were trying to prevent will happen in the NEXT parsing step. it may be handled by
        // "between rules" resync recovery later in the flow.
        this.importLexerState(savedLexerState);
    };
    Recoverable.prototype.shouldInRepetitionRecoveryBeTried = function (expectTokAfterLastMatch, nextTokIdx) {
        // arguments to try and perform resync into the next iteration of the many are missing
        if (expectTokAfterLastMatch === undefined || nextTokIdx === undefined) {
            return false;
        }
        // no need to recover, next token is what we expect...
        if (this.tokenMatcher(this.LA(1), expectTokAfterLastMatch)) {
            return false;
        }
        // error recovery is disabled during backtracking as it can make the parser ignore a valid grammar path
        // and prefer some backtracking path that includes recovered errors.
        if (this.isBackTracking()) {
            return false;
        }
        // if we can perform inRule recovery (single token insertion or deletion) we always prefer that recovery algorithm
        // because if it works, it makes the least amount of changes to the input stream (greedy algorithm)
        //noinspection RedundantIfStatementJS
        if (this.canPerformInRuleRecovery(expectTokAfterLastMatch, this.getFollowsForInRuleRecovery(expectTokAfterLastMatch, nextTokIdx))) {
            return false;
        }
        return true;
    };
    // Error Recovery functionality
    Recoverable.prototype.getFollowsForInRuleRecovery = function (tokType, tokIdxInRule) {
        var grammarPath = this.getCurrentGrammarPath(tokType, tokIdxInRule);
        var follows = this.getNextPossibleTokenTypes(grammarPath);
        return follows;
    };
    Recoverable.prototype.tryInRuleRecovery = function (expectedTokType, follows) {
        if (this.canRecoverWithSingleTokenInsertion(expectedTokType, follows)) {
            var tokToInsert = this.getTokenToInsert(expectedTokType);
            return tokToInsert;
        }
        if (this.canRecoverWithSingleTokenDeletion(expectedTokType)) {
            var nextTok = this.SKIP_TOKEN();
            this.consumeToken();
            return nextTok;
        }
        throw new InRuleRecoveryException("sad sad panda");
    };
    Recoverable.prototype.canPerformInRuleRecovery = function (expectedToken, follows) {
        return (this.canRecoverWithSingleTokenInsertion(expectedToken, follows) ||
            this.canRecoverWithSingleTokenDeletion(expectedToken));
    };
    Recoverable.prototype.canRecoverWithSingleTokenInsertion = function (expectedTokType, follows) {
        var _this = this;
        if (!this.canTokenTypeBeInsertedInRecovery(expectedTokType)) {
            return false;
        }
        // must know the possible following tokens to perform single token insertion
        if (utils_1.isEmpty(follows)) {
            return false;
        }
        var mismatchedTok = this.LA(1);
        var isMisMatchedTokInFollows = utils_1.find(follows, function (possibleFollowsTokType) {
            return _this.tokenMatcher(mismatchedTok, possibleFollowsTokType);
        }) !== undefined;
        return isMisMatchedTokInFollows;
    };
    Recoverable.prototype.canRecoverWithSingleTokenDeletion = function (expectedTokType) {
        var isNextTokenWhatIsExpected = this.tokenMatcher(this.LA(2), expectedTokType);
        return isNextTokenWhatIsExpected;
    };
    Recoverable.prototype.isInCurrentRuleReSyncSet = function (tokenTypeIdx) {
        var followKey = this.getCurrFollowKey();
        var currentRuleReSyncSet = this.getFollowSetFromFollowKey(followKey);
        return utils_1.contains(currentRuleReSyncSet, tokenTypeIdx);
    };
    Recoverable.prototype.findReSyncTokenType = function () {
        var allPossibleReSyncTokTypes = this.flattenFollowSet();
        // this loop will always terminate as EOF is always in the follow stack and also always (virtually) in the input
        var nextToken = this.LA(1);
        var k = 2;
        while (true) {
            var nextTokenType = nextToken.tokenType;
            if (utils_1.contains(allPossibleReSyncTokTypes, nextTokenType)) {
                return nextTokenType;
            }
            nextToken = this.LA(k);
            k++;
        }
    };
    Recoverable.prototype.getCurrFollowKey = function () {
        // the length is at least one as we always add the ruleName to the stack before invoking the rule.
        if (this.RULE_STACK.length === 1) {
            return exports.EOF_FOLLOW_KEY;
        }
        var currRuleShortName = this.getLastExplicitRuleShortName();
        var currRuleIdx = this.getLastExplicitRuleOccurrenceIndex();
        var prevRuleShortName = this.getPreviousExplicitRuleShortName();
        return {
            ruleName: this.shortRuleNameToFullName(currRuleShortName),
            idxInCallingRule: currRuleIdx,
            inRule: this.shortRuleNameToFullName(prevRuleShortName)
        };
    };
    Recoverable.prototype.buildFullFollowKeyStack = function () {
        var _this = this;
        var explicitRuleStack = this.RULE_STACK;
        var explicitOccurrenceStack = this.RULE_OCCURRENCE_STACK;
        if (!utils_1.isEmpty(this.LAST_EXPLICIT_RULE_STACK)) {
            explicitRuleStack = utils_1.map(this.LAST_EXPLICIT_RULE_STACK, function (idx) { return _this.RULE_STACK[idx]; });
            explicitOccurrenceStack = utils_1.map(this.LAST_EXPLICIT_RULE_STACK, function (idx) { return _this.RULE_OCCURRENCE_STACK[idx]; });
        }
        // TODO: only iterate over explicit rules here
        return utils_1.map(explicitRuleStack, function (ruleName, idx) {
            if (idx === 0) {
                return exports.EOF_FOLLOW_KEY;
            }
            return {
                ruleName: _this.shortRuleNameToFullName(ruleName),
                idxInCallingRule: explicitOccurrenceStack[idx],
                inRule: _this.shortRuleNameToFullName(explicitRuleStack[idx - 1])
            };
        });
    };
    Recoverable.prototype.flattenFollowSet = function () {
        var _this = this;
        var followStack = utils_1.map(this.buildFullFollowKeyStack(), function (currKey) {
            return _this.getFollowSetFromFollowKey(currKey);
        });
        return utils_1.flatten(followStack);
    };
    Recoverable.prototype.getFollowSetFromFollowKey = function (followKey) {
        if (followKey === exports.EOF_FOLLOW_KEY) {
            return [tokens_public_1.EOF];
        }
        var followName = followKey.ruleName +
            followKey.idxInCallingRule +
            constants_1.IN +
            followKey.inRule;
        return this.resyncFollows.get(followName);
    };
    // It does not make any sense to include a virtual EOF token in the list of resynced tokens
    // as EOF does not really exist and thus does not contain any useful information (line/column numbers)
    Recoverable.prototype.addToResyncTokens = function (token, resyncTokens) {
        if (!this.tokenMatcher(token, tokens_public_1.EOF)) {
            resyncTokens.push(token);
        }
        return resyncTokens;
    };
    Recoverable.prototype.reSyncTo = function (tokType) {
        var resyncedTokens = [];
        var nextTok = this.LA(1);
        while (this.tokenMatcher(nextTok, tokType) === false) {
            nextTok = this.SKIP_TOKEN();
            this.addToResyncTokens(nextTok, resyncedTokens);
        }
        // the last token is not part of the error.
        return utils_1.dropRight(resyncedTokens);
    };
    Recoverable.prototype.attemptInRepetitionRecovery = function (prodFunc, args, lookaheadFunc, dslMethodIdx, prodOccurrence, nextToksWalker) {
        // by default this is a NO-OP
        // The actual implementation is with the function(not method) below
    };
    Recoverable.prototype.getCurrentGrammarPath = function (tokType, tokIdxInRule) {
        var pathRuleStack = this.getHumanReadableRuleStack();
        var pathOccurrenceStack = utils_1.cloneArr(this.RULE_OCCURRENCE_STACK);
        var grammarPath = {
            ruleStack: pathRuleStack,
            occurrenceStack: pathOccurrenceStack,
            lastTok: tokType,
            lastTokOccurrence: tokIdxInRule
        };
        return grammarPath;
    };
    Recoverable.prototype.getHumanReadableRuleStack = function () {
        var _this = this;
        if (!utils_1.isEmpty(this.LAST_EXPLICIT_RULE_STACK)) {
            return utils_1.map(this.LAST_EXPLICIT_RULE_STACK, function (currIdx) {
                return _this.shortRuleNameToFullName(_this.RULE_STACK[currIdx]);
            });
        }
        else {
            return utils_1.map(this.RULE_STACK, function (currShortName) {
                return _this.shortRuleNameToFullName(currShortName);
            });
        }
    };
    return Recoverable;
}());
exports.Recoverable = Recoverable;
function attemptInRepetitionRecovery(prodFunc, args, lookaheadFunc, dslMethodIdx, prodOccurrence, nextToksWalker) {
    var key = this.getKeyForAutomaticLookahead(dslMethodIdx, prodOccurrence);
    var firstAfterRepInfo = this.firstAfterRepMap.get(key);
    if (firstAfterRepInfo === undefined) {
        var currRuleName = this.getCurrRuleFullName();
        var ruleGrammar = this.getGAstProductions().get(currRuleName);
        var walker = new nextToksWalker(ruleGrammar, prodOccurrence);
        firstAfterRepInfo = walker.startWalking();
        this.firstAfterRepMap.put(key, firstAfterRepInfo);
    }
    var expectTokAfterLastMatch = firstAfterRepInfo.token;
    var nextTokIdx = firstAfterRepInfo.occurrence;
    var isEndOfRule = firstAfterRepInfo.isEndOfRule;
    // special edge case of a TOP most repetition after which the input should END.
    // this will force an attempt for inRule recovery in that scenario.
    if (this.RULE_STACK.length === 1 &&
        isEndOfRule &&
        expectTokAfterLastMatch === undefined) {
        expectTokAfterLastMatch = tokens_public_1.EOF;
        nextTokIdx = 1;
    }
    if (this.shouldInRepetitionRecoveryBeTried(expectTokAfterLastMatch, nextTokIdx)) {
        // TODO: performance optimization: instead of passing the original args here, we modify
        // the args param (or create a new one) and make sure the lookahead func is explicitly provided
        // to avoid searching the cache for it once more.
        this.tryInRepetitionRecovery(prodFunc, args, lookaheadFunc, expectTokAfterLastMatch);
    }
}
exports.attemptInRepetitionRecovery = attemptInRepetitionRecovery;
//# sourceMappingURL=recoverable.js.map

/***/ }),
/* 37 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var generate_1 = __webpack_require__(53);
function generateParserFactory(options) {
    var wrapperText = generate_1.genWrapperFunction({
        name: options.name,
        rules: options.rules
    });
    var constructorWrapper = new Function("tokenVocabulary", "config", "chevrotain", wrapperText);
    return function (config) {
        return constructorWrapper(options.tokenVocabulary, config, 
        // TODO: check how the require is transpiled/webpacked
        __webpack_require__(29));
    };
}
exports.generateParserFactory = generateParserFactory;
function generateParserModule(options) {
    return generate_1.genUmdModule({ name: options.name, rules: options.rules });
}
exports.generateParserModule = generateParserModule;
//# sourceMappingURL=generate_public.js.map

/***/ }),
/* 38 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * a language made of a series of statements terminated by semicolons
 *
 * CREATE TABLE schema2.Persons
 * INSERT (32, "SHAHAR") INTO schema2.Persons
 * DELETE (31, "SHAHAR") FROM schema2.Persons
 */
var parser_traits_1 = __webpack_require__(5);
var allTokens = __webpack_require__(26);
var sql_recovery_tokens_1 = __webpack_require__(26);
var parse_tree_1 = __webpack_require__(54);
var tokens_1 = __webpack_require__(6);
var matchers_1 = __webpack_require__(3);
tokens_1.augmentTokenTypes(allTokens);
// DOCS: to enable error recovery functionality one must extend BaseErrorRecoveryRecognizer
var DDLExampleRecoveryParser = /** @class */ (function (_super) {
    __extends(DDLExampleRecoveryParser, _super);
    function DDLExampleRecoveryParser(isRecoveryEnabled) {
        if (isRecoveryEnabled === void 0) { isRecoveryEnabled = true; }
        var _this = 
        // DOCS: note the first parameter in the super class. this is the namespace in which the token constructors are defined.
        //       it is mandatory to provide this map to be able to perform self analysis
        //       and allow the framework to "understand" the implemented grammar.
        _super.call(this, allTokens, {
            outputCst: false,
            recoveryEnabled: isRecoveryEnabled
        }) || this;
        // DOCS: the invocation to RULE(...) is what wraps our parsing implementation method
        // with the error recovery re-sync behavior.
        // note that when one parsing rule calls another (via SUBRULE) the invoked rule is the one defined here,
        // without the "parse" prefix.
        _this.ddl = _this.RULE("ddl", _this.parseDdl, {
            recoveryValueFunc: INVALID(sql_recovery_tokens_1.INVALID_DDL)
        });
        // DOCS: a specific return type has been provided in case of re-sync recovery.
        _this.createStmt = _this.RULE("createStmt", _this.parseCreateStmt, {
            recoveryValueFunc: INVALID(sql_recovery_tokens_1.INVALID_CREATE_STMT)
        });
        _this.insertStmt = _this.RULE("insertStmt", _this.parseInsertStmt, {
            recoveryValueFunc: INVALID(sql_recovery_tokens_1.INVALID_INSERT_STMT)
        });
        _this.deleteStmt = _this.RULE("deleteStmt", _this.parseDeleteStmt, {
            recoveryValueFunc: INVALID(sql_recovery_tokens_1.INVALID_DELETE_STMT)
        });
        _this.qualifiedName = _this.RULE("qualifiedName", _this.parseQualifiedName, {
            recoveryValueFunc: INVALID(sql_recovery_tokens_1.INVALID_QUALIFIED_NAME)
        });
        _this.recordValue = _this.RULE("recordValue", _this.parseRecordValue, {
            recoveryValueFunc: INVALID()
        });
        // DOCS: A Parsing rule may also be private and not part of the public API
        _this.value = _this.RULE("value", _this.parseValue, {
            recoveryValueFunc: INVALID()
        });
        // DOCS: The call to performSelfAnalysis needs to happen after all the RULEs have been defined
        //       The typescript compiler places the constructor body last after initializations in the class's body
        //       which is why place the call here meets the criteria.
        _this.performSelfAnalysis();
        return _this;
    }
    // DOCS: note how all the parsing rules in this example return a ParseTree, we require some output from the parser
    // to demonstrate the error recovery mechanisms. otherwise it is harder to prove we have indeed recovered.
    DDLExampleRecoveryParser.prototype.parseDdl = function () {
        var _this = this;
        var stmts = [];
        this.MANY(function () {
            _this.OR([
                {
                    ALT: function () {
                        stmts.push(_this.SUBRULE(_this.createStmt));
                    }
                },
                {
                    ALT: function () {
                        stmts.push(_this.SUBRULE(_this.insertStmt));
                    }
                },
                {
                    ALT: function () {
                        stmts.push(_this.SUBRULE(_this.deleteStmt));
                    }
                }
            ]);
        });
        return PT(matchers_1.createRegularToken(sql_recovery_tokens_1.STATEMENTS), stmts);
    };
    DDLExampleRecoveryParser.prototype.parseCreateStmt = function () {
        var createKW, tableKW, qn, semiColon;
        createKW = this.CONSUME1(sql_recovery_tokens_1.CreateTok);
        tableKW = this.CONSUME1(sql_recovery_tokens_1.TableTok);
        qn = this.SUBRULE(this.qualifiedName);
        semiColon = this.CONSUME1(sql_recovery_tokens_1.SemiColonTok);
        return PT(matchers_1.createRegularToken(sql_recovery_tokens_1.CREATE_STMT), [
            PT(createKW),
            PT(tableKW),
            qn,
            PT(semiColon)
        ]);
    };
    DDLExampleRecoveryParser.prototype.parseInsertStmt = function () {
        var insertKW, recordValue, intoKW, qn, semiColon;
        // parse
        insertKW = this.CONSUME1(sql_recovery_tokens_1.InsertTok);
        recordValue = this.SUBRULE(this.recordValue);
        intoKW = this.CONSUME1(sql_recovery_tokens_1.IntoTok);
        qn = this.SUBRULE(this.qualifiedName);
        semiColon = this.CONSUME1(sql_recovery_tokens_1.SemiColonTok);
        // tree rewrite
        return PT(matchers_1.createRegularToken(sql_recovery_tokens_1.INSERT_STMT), [
            PT(insertKW),
            recordValue,
            PT(intoKW),
            qn,
            PT(semiColon)
        ]);
    };
    DDLExampleRecoveryParser.prototype.parseDeleteStmt = function () {
        var deleteKW, recordValue, fromKW, qn, semiColon;
        // parse
        deleteKW = this.CONSUME1(sql_recovery_tokens_1.DeleteTok);
        recordValue = this.SUBRULE(this.recordValue);
        fromKW = this.CONSUME1(sql_recovery_tokens_1.FromTok);
        qn = this.SUBRULE(this.qualifiedName);
        semiColon = this.CONSUME1(sql_recovery_tokens_1.SemiColonTok);
        // tree rewrite
        return PT(matchers_1.createRegularToken(sql_recovery_tokens_1.DELETE_STMT), [
            PT(deleteKW),
            recordValue,
            PT(fromKW),
            qn,
            PT(semiColon)
        ]);
    };
    DDLExampleRecoveryParser.prototype.parseQualifiedName = function () {
        var _this = this;
        var dots = [];
        var idents = [];
        // parse
        // DOCS: note how we use CONSUME1(IdentTok) here
        idents.push(this.CONSUME1(sql_recovery_tokens_1.IdentTok));
        this.MANY(function () {
            dots.push(_this.CONSUME1(sql_recovery_tokens_1.DotTok));
            // DOCS: yet here we use CONSUME2(IdentTok)
            //       The number indicates the occurrence number of the consumption of the specific Token in the current
            //       parse rule.
            idents.push(_this.CONSUME2(sql_recovery_tokens_1.IdentTok));
        });
        // tree rewrite
        var allIdentsPts = WRAP_IN_PT(idents);
        var dotsPt = PT(matchers_1.createRegularToken(sql_recovery_tokens_1.DOTS), WRAP_IN_PT(dots));
        var allPtChildren = allIdentsPts.concat([dotsPt]);
        return PT(matchers_1.createRegularToken(sql_recovery_tokens_1.QUALIFIED_NAME), allPtChildren);
    };
    DDLExampleRecoveryParser.prototype.parseRecordValue = function () {
        var _this = this;
        var values = [];
        var commas = [];
        // parse
        this.CONSUME1(sql_recovery_tokens_1.LParenTok);
        this.SUBRULE1(this.value);
        this.MANY(function () {
            commas.push(_this.CONSUME1(sql_recovery_tokens_1.CommaTok));
            values.push(_this.SUBRULE2(_this.value));
        });
        this.CONSUME1(sql_recovery_tokens_1.RParenTok);
        // tree rewrite
        var commasPt = PT(matchers_1.createRegularToken(sql_recovery_tokens_1.COMMAS), WRAP_IN_PT(commas));
        var allPtChildren = values.concat([commasPt]);
        return PT(matchers_1.createRegularToken(sql_recovery_tokens_1.QUALIFIED_NAME), allPtChildren);
    };
    DDLExampleRecoveryParser.prototype.parseValue = function () {
        var _this = this;
        var value = null;
        this.OR([
            {
                ALT: function () {
                    value = _this.CONSUME1(sql_recovery_tokens_1.StringTok);
                }
            },
            {
                ALT: function () {
                    value = _this.CONSUME1(sql_recovery_tokens_1.IntTok);
                }
            }
        ]);
        return PT(value);
    };
    return DDLExampleRecoveryParser;
}(parser_traits_1.Parser));
exports.DDLExampleRecoveryParser = DDLExampleRecoveryParser;
// HELPER FUNCTIONS
function PT(token, children) {
    if (children === void 0) { children = []; }
    return new parse_tree_1.ParseTree(token, children);
}
function WRAP_IN_PT(toks) {
    var parseTrees = new Array(toks.length);
    for (var i = 0; i < toks.length; i++) {
        parseTrees[i] = PT(toks[i]);
    }
    return parseTrees;
}
exports.WRAP_IN_PT = WRAP_IN_PT;
/* tslint:disable:class-name */
var INVALID_INPUT = /** @class */ (function (_super) {
    __extends(INVALID_INPUT, _super);
    function INVALID_INPUT() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    INVALID_INPUT.PATTERN = /NA/;
    return INVALID_INPUT;
}(sql_recovery_tokens_1.VirtualToken));
exports.INVALID_INPUT = INVALID_INPUT;
/* tslint:enable:class-name */
function INVALID(tokType) {
    if (tokType === void 0) { tokType = INVALID_INPUT; }
    // virtual invalid tokens should have no parameters...
    return function () {
        return PT(matchers_1.createRegularToken(tokType));
    };
}
exports.INVALID = INVALID;
//# sourceMappingURL=sql_recovery_parser.js.map

/***/ }),
/* 39 */
/***/ (function(module, exports) {

module.exports = jsdom;

/***/ }),
/* 40 */
/***/ (function(module, exports) {

module.exports = mock-require;

/***/ }),
/* 41 */
/***/ (function(module, exports, __webpack_require__) {

var req = __webpack_require__(42);
req.keys().forEach(req);
//# sourceMappingURL=all.js.map

/***/ }),
/* 42 */
/***/ (function(module, exports, __webpack_require__) {

var map = {
	"./diagrams/render_spec.js": 43,
	"./full_flow/backtracking/backtracking_parser_spec.js": 56,
	"./full_flow/ecma_quirks/ecma_quirks_spec.js": 58,
	"./full_flow/error_recovery/sql_statements/sql_recovery_spec.js": 60,
	"./full_flow/error_recovery/switch_case/swithcase_recovery_spec.js": 61,
	"./generate/generate_spec.js": 63,
	"./lang/hash_table_spec.js": 65,
	"./parse/cst_spec.js": 66,
	"./parse/cst_visitor_spec.js": 67,
	"./parse/exceptions_spec.js": 68,
	"./parse/gast_builder_spec.js": 70,
	"./parse/grammar/checks_spec.js": 71,
	"./parse/grammar/first_spec.js": 72,
	"./parse/grammar/follow_spec.js": 73,
	"./parse/grammar/gast_spec.js": 74,
	"./parse/grammar/interperter_spec.js": 75,
	"./parse/grammar/lookahead_spec.js": 76,
	"./parse/grammar/resolver_spec.js": 77,
	"./parse/predicate_spec.js": 78,
	"./parse/recognizer/infinite_loop_spec.js": 79,
	"./parse/recognizer/recognizer_config_spec.js": 80,
	"./parse/recognizer/rules_override_spec.js": 81,
	"./parse/recognizer_lookahead_spec.js": 82,
	"./parse/recognizer_spec.js": 83,
	"./scan/lexer_errors_public_spec.js": 84,
	"./scan/lexer_spec.js": 85,
	"./scan/regexp_spec.js": 86,
	"./scan/token_spec.js": 87,
	"./text/range_spec.js": 88,
	"./utils/utils_spec.js": 89
};


function webpackContext(req) {
	var id = webpackContextResolve(req);
	return __webpack_require__(id);
}
function webpackContextResolve(req) {
	if(!__webpack_require__.o(map, req)) {
		var e = new Error("Cannot find module '" + req + "'");
		e.code = 'MODULE_NOT_FOUND';
		throw e;
	}
	return map[req];
}
webpackContext.keys = function webpackContextKeys() {
	return Object.keys(map);
};
webpackContext.resolve = webpackContextResolve;
module.exports = webpackContext;
webpackContext.id = 42;

/***/ }),
/* 43 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {
Object.defineProperty(exports, "__esModule", { value: true });
var version_1 = __webpack_require__(17);
var createSyntaxDiagramsCode = __webpack_require__(29)
    .createSyntaxDiagramsCode;
var sql_recovery_parser_1 = __webpack_require__(38);
var lt = __webpack_require__(55).lt;
// more in depth testing will require jsdom to support SVG elements (WIP).
describe("The Chevrotain diagrams rendering APIs", function () {
    var serializedGrammar = new sql_recovery_parser_1.DDLExampleRecoveryParser().getSerializedGastProductions();
    var skipOnBrowser = it;
    if (typeof window !== "undefined" ||
        // This makes the tests run x6 slower.
        process.env.SKIP_JS_DOM) {
        skipOnBrowser = it.skip;
    }
    skipOnBrowser("Produces valid and executable html text with custom options", function (done) {
        this.timeout(20000);
        var jsdom = __webpack_require__(39);
        var JSDOM = jsdom.JSDOM;
        var htmlText = createSyntaxDiagramsCode(serializedGrammar, {
            resourceBase: "https://cdn.jsdelivr.net/npm/chevrotain/diagrams/",
            css: "https://cdn.jsdelivr.net/npm/chevrotain/diagrams/diagrams.css"
        });
        var dom = new JSDOM(htmlText, {
            runScripts: "dangerously",
            resources: "usable"
        });
        var document = dom.window.document;
        document.addEventListener("DOMContentLoaded", function () {
            try {
                expect(document.scripts.length).to.equal(6);
                expect(document.scripts.item(1).src).to.include("jsdelivr");
                expect(document.getElementById("diagrams")).to.not.equal(null);
                done();
            }
            catch (e) {
                done(e);
            }
        }, false);
    });
    skipOnBrowser("Produces valid and executable html text", function (done) {
        this.timeout(20000);
        var jsdom = __webpack_require__(39);
        var JSDOM = jsdom.JSDOM;
        var htmlText = createSyntaxDiagramsCode(serializedGrammar);
        // using a version in the url will fail in release build as the new version number has not been deployed yet.
        htmlText = htmlText.replace(new RegExp("@" + version_1.VERSION, "g"), "");
        var dom = new JSDOM(htmlText, {
            runScripts: "dangerously",
            resources: "usable"
        });
        var document = dom.window.document;
        document.addEventListener("DOMContentLoaded", function () {
            try {
                expect(document.scripts.length).to.equal(6);
                expect(document.scripts.item(1).src).to.include("unpkg");
                expect(document.getElementById("diagrams")).to.not.equal(null);
                done();
            }
            catch (e) {
                done(e);
            }
        }, false);
    });
});
//# sourceMappingURL=render_spec.js.map
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(28)))

/***/ }),
/* 44 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var lookahead_1 = __webpack_require__(15);
var utils_1 = __webpack_require__(0);
var parser_1 = __webpack_require__(4);
var keys_1 = __webpack_require__(19);
/**
 * Trait responsible for the lookahead related utilities and optimizations.
 */
var LooksAhead = /** @class */ (function () {
    function LooksAhead() {
    }
    LooksAhead.prototype.initLooksAhead = function (config) {
        this.dynamicTokensEnabled = utils_1.has(config, "dynamicTokensEnabled")
            ? config.dynamicTokensEnabled
            : parser_1.DEFAULT_PARSER_CONFIG.dynamicTokensEnabled;
        this.maxLookahead = utils_1.has(config, "maxLookahead")
            ? config.maxLookahead
            : parser_1.DEFAULT_PARSER_CONFIG.maxLookahead;
        /* istanbul ignore next - Using plain array as dictionary will be tested on older node.js versions and IE11 */
        this.lookAheadFuncsCache = utils_1.isES2015MapSupported() ? new Map() : [];
        // Performance optimization on newer engines that support ES6 Map
        // For larger Maps this is slightly faster than using a plain object (array in our case).
        /* istanbul ignore else - The else branch will be tested on older node.js versions and IE11 */
        if (utils_1.isES2015MapSupported()) {
            this.getLaFuncFromCache = this.getLaFuncFromMap;
            this.setLaFuncCache = this.setLaFuncCacheUsingMap;
        }
        else {
            this.getLaFuncFromCache = this.getLaFuncFromObj;
            this.setLaFuncCache = this.setLaFuncUsingObj;
        }
    };
    LooksAhead.prototype.lookAheadBuilderForOptional = function (alt, tokenMatcher, dynamicTokensEnabled) {
        return lookahead_1.buildSingleAlternativeLookaheadFunction(alt, tokenMatcher, dynamicTokensEnabled);
    };
    LooksAhead.prototype.lookAheadBuilderForAlternatives = function (alts, hasPredicates, tokenMatcher, dynamicTokensEnabled) {
        return lookahead_1.buildAlternativesLookAheadFunc(alts, hasPredicates, tokenMatcher, dynamicTokensEnabled);
    };
    // this actually returns a number, but it is always used as a string (object prop key)
    LooksAhead.prototype.getKeyForAutomaticLookahead = function (dslMethodIdx, occurrence) {
        var currRuleShortName = this.getLastExplicitRuleShortName();
        return keys_1.getKeyForAutomaticLookahead(currRuleShortName, dslMethodIdx, occurrence);
    };
    LooksAhead.prototype.getLookaheadFuncForOr = function (occurrence, alts) {
        var key = this.getKeyForAutomaticLookahead(keys_1.OR_IDX, occurrence);
        var laFunc = this.getLaFuncFromCache(key);
        if (laFunc === undefined) {
            var ruleName = this.getCurrRuleFullName();
            var ruleGrammar = this.getGAstProductions().get(ruleName);
            // note that hasPredicates is only computed once.
            var hasPredicates = utils_1.some(alts, function (currAlt) {
                return utils_1.isFunction(currAlt.GATE);
            });
            laFunc = lookahead_1.buildLookaheadFuncForOr(occurrence, ruleGrammar, this.maxLookahead, hasPredicates, this.dynamicTokensEnabled, this.lookAheadBuilderForAlternatives);
            this.setLaFuncCache(key, laFunc);
            return laFunc;
        }
        else {
            return laFunc;
        }
    };
    // Automatic lookahead calculation
    LooksAhead.prototype.getLookaheadFuncForOption = function (key, occurrence) {
        return this.getLookaheadFuncFor(key, occurrence, this.maxLookahead, lookahead_1.PROD_TYPE.OPTION);
    };
    LooksAhead.prototype.getLookaheadFuncForMany = function (key, occurrence) {
        return this.getLookaheadFuncFor(key, occurrence, this.maxLookahead, lookahead_1.PROD_TYPE.REPETITION);
    };
    LooksAhead.prototype.getLookaheadFuncForManySep = function (key, occurrence) {
        return this.getLookaheadFuncFor(key, occurrence, this.maxLookahead, lookahead_1.PROD_TYPE.REPETITION_WITH_SEPARATOR);
    };
    LooksAhead.prototype.getLookaheadFuncForAtLeastOne = function (key, occurrence) {
        return this.getLookaheadFuncFor(key, occurrence, this.maxLookahead, lookahead_1.PROD_TYPE.REPETITION_MANDATORY);
    };
    LooksAhead.prototype.getLookaheadFuncForAtLeastOneSep = function (key, occurrence) {
        return this.getLookaheadFuncFor(key, occurrence, this.maxLookahead, lookahead_1.PROD_TYPE.REPETITION_MANDATORY_WITH_SEPARATOR);
    };
    LooksAhead.prototype.getLookaheadFuncFor = function (key, occurrence, maxLookahead, prodType) {
        var laFunc = this.getLaFuncFromCache(key);
        if (laFunc === undefined) {
            var ruleName = this.getCurrRuleFullName();
            var ruleGrammar = this.getGAstProductions().get(ruleName);
            laFunc = lookahead_1.buildLookaheadFuncForOptionalProd(occurrence, ruleGrammar, maxLookahead, this.dynamicTokensEnabled, prodType, this.lookAheadBuilderForOptional);
            this.setLaFuncCache(key, laFunc);
            return laFunc;
        }
        else {
            return laFunc;
        }
    };
    /* istanbul ignore next */
    LooksAhead.prototype.getLaFuncFromCache = function (key) {
        return undefined;
    };
    LooksAhead.prototype.getLaFuncFromMap = function (key) {
        return this.lookAheadFuncsCache.get(key);
    };
    /* istanbul ignore next - Using plain array as dictionary will be tested on older node.js versions and IE11 */
    LooksAhead.prototype.getLaFuncFromObj = function (key) {
        return this.lookAheadFuncsCache[key];
    };
    /* istanbul ignore next */
    LooksAhead.prototype.setLaFuncCache = function (key, value) { };
    LooksAhead.prototype.setLaFuncCacheUsingMap = function (key, value) {
        this.lookAheadFuncsCache.set(key, value);
    };
    /* istanbul ignore next - Using plain array as dictionary will be tested on older node.js versions and IE11 */
    LooksAhead.prototype.setLaFuncUsingObj = function (key, value) {
        this.lookAheadFuncsCache[key] = value;
    };
    return LooksAhead;
}());
exports.LooksAhead = LooksAhead;
//# sourceMappingURL=looksahead.js.map

/***/ }),
/* 45 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var cst_1 = __webpack_require__(24);
var utils_1 = __webpack_require__(0);
var cst_visitor_1 = __webpack_require__(46);
var keys_1 = __webpack_require__(19);
var parser_1 = __webpack_require__(4);
/**
 * This trait is responsible for the CST building logic.
 */
var TreeBuilder = /** @class */ (function () {
    function TreeBuilder() {
    }
    TreeBuilder.prototype.initTreeBuilder = function (config) {
        this.LAST_EXPLICIT_RULE_STACK = [];
        this.CST_STACK = [];
        this.outputCst = utils_1.has(config, "outputCst")
            ? config.outputCst
            : parser_1.DEFAULT_PARSER_CONFIG.outputCst;
        if (!this.outputCst) {
            this.cstInvocationStateUpdate = utils_1.NOOP;
            this.cstFinallyStateUpdate = utils_1.NOOP;
            this.cstPostTerminal = utils_1.NOOP;
            this.cstPostNonTerminal = utils_1.NOOP;
            this.getLastExplicitRuleShortName = this.getLastExplicitRuleShortNameNoCst;
            this.getPreviousExplicitRuleShortName = this.getPreviousExplicitRuleShortNameNoCst;
            this.getLastExplicitRuleOccurrenceIndex = this.getLastExplicitRuleOccurrenceIndexNoCst;
            this.manyInternal = this.manyInternalNoCst;
            this.orInternal = this.orInternalNoCst;
            this.optionInternal = this.optionInternalNoCst;
            this.atLeastOneInternal = this.atLeastOneInternalNoCst;
            this.manySepFirstInternal = this.manySepFirstInternalNoCst;
            this.atLeastOneSepFirstInternal = this.atLeastOneSepFirstInternalNoCst;
        }
    };
    // CST
    TreeBuilder.prototype.cstNestedInvocationStateUpdate = function (nestedName, shortName) {
        this.CST_STACK.push({
            name: nestedName,
            fullName: this.shortRuleNameToFull.get(this.getLastExplicitRuleShortName()) + nestedName,
            children: {}
        });
    };
    TreeBuilder.prototype.cstInvocationStateUpdate = function (fullRuleName, shortName) {
        this.LAST_EXPLICIT_RULE_STACK.push(this.RULE_STACK.length - 1);
        this.CST_STACK.push({
            name: fullRuleName,
            children: {}
        });
    };
    TreeBuilder.prototype.cstFinallyStateUpdate = function () {
        this.LAST_EXPLICIT_RULE_STACK.pop();
        this.CST_STACK.pop();
    };
    TreeBuilder.prototype.cstNestedFinallyStateUpdate = function () {
        this.CST_STACK.pop();
    };
    TreeBuilder.prototype.cstPostTerminal = function (key, consumedToken) {
        // TODO: would save the "current rootCST be faster than locating it for each terminal?
        var rootCst = this.CST_STACK[this.CST_STACK.length - 1];
        cst_1.addTerminalToCst(rootCst, consumedToken, key);
    };
    TreeBuilder.prototype.cstPostNonTerminal = function (ruleCstResult, ruleName) {
        cst_1.addNoneTerminalToCst(this.CST_STACK[this.CST_STACK.length - 1], ruleName, ruleCstResult);
    };
    TreeBuilder.prototype.getBaseCstVisitorConstructor = function () {
        if (utils_1.isUndefined(this.baseCstVisitorConstructor)) {
            var newBaseCstVisitorConstructor = cst_visitor_1.createBaseSemanticVisitorConstructor(this.className, this.allRuleNames);
            this.baseCstVisitorConstructor = newBaseCstVisitorConstructor;
            return newBaseCstVisitorConstructor;
        }
        return this.baseCstVisitorConstructor;
    };
    TreeBuilder.prototype.getBaseCstVisitorConstructorWithDefaults = function () {
        if (utils_1.isUndefined(this.baseCstVisitorWithDefaultsConstructor)) {
            var newConstructor = cst_visitor_1.createBaseVisitorConstructorWithDefaults(this.className, this.allRuleNames, this.getBaseCstVisitorConstructor());
            this.baseCstVisitorWithDefaultsConstructor = newConstructor;
            return newConstructor;
        }
        return this.baseCstVisitorWithDefaultsConstructor;
    };
    TreeBuilder.prototype.nestedRuleBeforeClause = function (methodOpts, laKey) {
        var nestedName;
        if (methodOpts.NAME !== undefined) {
            nestedName = methodOpts.NAME;
            this.nestedRuleInvocationStateUpdate(nestedName, laKey);
            return nestedName;
        }
        else {
            return undefined;
        }
    };
    TreeBuilder.prototype.nestedAltBeforeClause = function (methodOpts, occurrence, methodKeyIdx, altIdx) {
        var ruleIdx = this.getLastExplicitRuleShortName();
        var shortName = keys_1.getKeyForAltIndex(ruleIdx, methodKeyIdx, occurrence, altIdx);
        var nestedName;
        if (methodOpts.NAME !== undefined) {
            nestedName = methodOpts.NAME;
            this.nestedRuleInvocationStateUpdate(nestedName, shortName);
            return {
                shortName: shortName,
                nestedName: nestedName
            };
        }
        else {
            return undefined;
        }
    };
    TreeBuilder.prototype.nestedRuleFinallyClause = function (laKey, nestedName) {
        var cstStack = this.CST_STACK;
        var nestedRuleCst = cstStack[cstStack.length - 1];
        this.nestedRuleFinallyStateUpdate();
        // this return a different result than the previous invocation because "nestedRuleFinallyStateUpdate" pops the cst stack
        var parentCstNode = cstStack[cstStack.length - 1];
        cst_1.addNoneTerminalToCst(parentCstNode, nestedName, nestedRuleCst);
    };
    TreeBuilder.prototype.getLastExplicitRuleShortName = function () {
        var lastExplictIndex = this.LAST_EXPLICIT_RULE_STACK[this.LAST_EXPLICIT_RULE_STACK.length - 1];
        return this.RULE_STACK[lastExplictIndex];
    };
    TreeBuilder.prototype.getLastExplicitRuleShortNameNoCst = function () {
        var ruleStack = this.RULE_STACK;
        return ruleStack[ruleStack.length - 1];
    };
    TreeBuilder.prototype.getPreviousExplicitRuleShortName = function () {
        var lastExplicitIndex = this.LAST_EXPLICIT_RULE_STACK[this.LAST_EXPLICIT_RULE_STACK.length - 2];
        return this.RULE_STACK[lastExplicitIndex];
    };
    TreeBuilder.prototype.getPreviousExplicitRuleShortNameNoCst = function () {
        var ruleStack = this.RULE_STACK;
        return ruleStack[ruleStack.length - 2];
    };
    TreeBuilder.prototype.getLastExplicitRuleOccurrenceIndex = function () {
        var lastExplicitIndex = this.LAST_EXPLICIT_RULE_STACK[this.LAST_EXPLICIT_RULE_STACK.length - 1];
        return this.RULE_OCCURRENCE_STACK[lastExplicitIndex];
    };
    TreeBuilder.prototype.getLastExplicitRuleOccurrenceIndexNoCst = function () {
        var occurrenceStack = this.RULE_OCCURRENCE_STACK;
        return occurrenceStack[occurrenceStack.length - 1];
    };
    TreeBuilder.prototype.nestedRuleInvocationStateUpdate = function (nestedRuleName, shortNameKey) {
        this.RULE_OCCURRENCE_STACK.push(1);
        this.RULE_STACK.push(shortNameKey);
        this.cstNestedInvocationStateUpdate(nestedRuleName, shortNameKey);
    };
    TreeBuilder.prototype.nestedRuleFinallyStateUpdate = function () {
        this.RULE_STACK.pop();
        this.RULE_OCCURRENCE_STACK.pop();
        // NOOP when cst is disabled
        this.cstNestedFinallyStateUpdate();
    };
    return TreeBuilder;
}());
exports.TreeBuilder = TreeBuilder;
//# sourceMappingURL=tree_builder.js.map

/***/ }),
/* 46 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var utils_1 = __webpack_require__(0);
var lang_extensions_1 = __webpack_require__(7);
var checks_1 = __webpack_require__(14);
function defaultVisit(ctx, param) {
    var childrenNames = utils_1.keys(ctx);
    var childrenNamesLength = childrenNames.length;
    for (var i = 0; i < childrenNamesLength; i++) {
        var currChildName = childrenNames[i];
        var currChildArray = ctx[currChildName];
        var currChildArrayLength = currChildArray.length;
        for (var j = 0; j < currChildArrayLength; j++) {
            var currChild = currChildArray[j];
            // distinction between Tokens Children and CstNode children
            if (currChild.tokenTypeIdx === undefined) {
                if (currChild.fullName !== undefined) {
                    this[currChild.fullName](currChild.children, param);
                }
                else {
                    this[currChild.name](currChild.children, param);
                }
            }
        }
    }
    // defaultVisit does not support generic out param
    return undefined;
}
exports.defaultVisit = defaultVisit;
function createBaseSemanticVisitorConstructor(grammarName, ruleNames) {
    var derivedConstructor = function () { };
    // can be overwritten according to:
    // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/
    // name?redirectlocale=en-US&redirectslug=JavaScript%2FReference%2FGlobal_Objects%2FFunction%2Fname
    lang_extensions_1.defineNameProp(derivedConstructor, grammarName + "BaseSemantics");
    var semanticProto = {
        visit: function (cstNode, param) {
            // enables writing more concise visitor methods when CstNode has only a single child
            if (utils_1.isArray(cstNode)) {
                // A CST Node's children dictionary can never have empty arrays as values
                // If a key is defined there will be at least one element in the corresponding value array.
                cstNode = cstNode[0];
            }
            // enables passing optional CstNodes concisely.
            if (utils_1.isUndefined(cstNode)) {
                return undefined;
            }
            if (cstNode.fullName !== undefined) {
                return this[cstNode.fullName](cstNode.children, param);
            }
            else {
                return this[cstNode.name](cstNode.children, param);
            }
        },
        validateVisitor: function () {
            var semanticDefinitionErrors = validateVisitor(this, ruleNames);
            if (!utils_1.isEmpty(semanticDefinitionErrors)) {
                var errorMessages = utils_1.map(semanticDefinitionErrors, function (currDefError) { return currDefError.msg; });
                throw Error("Errors Detected in CST Visitor <" + lang_extensions_1.functionName(this.constructor) + ">:\n\t" +
                    ("" + errorMessages.join("\n\n").replace(/\n/g, "\n\t")));
            }
        }
    };
    derivedConstructor.prototype = semanticProto;
    derivedConstructor.prototype.constructor = derivedConstructor;
    derivedConstructor._RULE_NAMES = ruleNames;
    return derivedConstructor;
}
exports.createBaseSemanticVisitorConstructor = createBaseSemanticVisitorConstructor;
function createBaseVisitorConstructorWithDefaults(grammarName, ruleNames, baseConstructor) {
    var derivedConstructor = function () { };
    // can be overwritten according to:
    // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/
    // name?redirectlocale=en-US&redirectslug=JavaScript%2FReference%2FGlobal_Objects%2FFunction%2Fname
    lang_extensions_1.defineNameProp(derivedConstructor, grammarName + "BaseSemanticsWithDefaults");
    var withDefaultsProto = Object.create(baseConstructor.prototype);
    utils_1.forEach(ruleNames, function (ruleName) {
        withDefaultsProto[ruleName] = defaultVisit;
    });
    derivedConstructor.prototype = withDefaultsProto;
    derivedConstructor.prototype.constructor = derivedConstructor;
    return derivedConstructor;
}
exports.createBaseVisitorConstructorWithDefaults = createBaseVisitorConstructorWithDefaults;
var CstVisitorDefinitionError;
(function (CstVisitorDefinitionError) {
    CstVisitorDefinitionError[CstVisitorDefinitionError["REDUNDANT_METHOD"] = 0] = "REDUNDANT_METHOD";
    CstVisitorDefinitionError[CstVisitorDefinitionError["MISSING_METHOD"] = 1] = "MISSING_METHOD";
})(CstVisitorDefinitionError = exports.CstVisitorDefinitionError || (exports.CstVisitorDefinitionError = {}));
function validateVisitor(visitorInstance, ruleNames) {
    var missingErrors = validateMissingCstMethods(visitorInstance, ruleNames);
    var redundantErrors = validateRedundantMethods(visitorInstance, ruleNames);
    return missingErrors.concat(redundantErrors);
}
exports.validateVisitor = validateVisitor;
function validateMissingCstMethods(visitorInstance, ruleNames) {
    var errors = utils_1.map(ruleNames, function (currRuleName) {
        if (!utils_1.isFunction(visitorInstance[currRuleName])) {
            return {
                msg: "Missing visitor method: <" + currRuleName + "> on " + lang_extensions_1.functionName(visitorInstance.constructor) + " CST Visitor.",
                type: CstVisitorDefinitionError.MISSING_METHOD,
                methodName: currRuleName
            };
        }
    });
    return utils_1.compact(errors);
}
exports.validateMissingCstMethods = validateMissingCstMethods;
var VALID_PROP_NAMES = ["constructor", "visit", "validateVisitor"];
function validateRedundantMethods(visitorInstance, ruleNames) {
    var errors = [];
    for (var prop in visitorInstance) {
        if (checks_1.validTermsPattern.test(prop) &&
            utils_1.isFunction(visitorInstance[prop]) &&
            !utils_1.contains(VALID_PROP_NAMES, prop) &&
            !utils_1.contains(ruleNames, prop)) {
            errors.push({
                msg: "Redundant visitor method: <" + prop + "> on " + lang_extensions_1.functionName(visitorInstance.constructor) + " CST Visitor\n" +
                    "There is no Grammar Rule corresponding to this method's name.\n" +
                    ("For utility methods on visitor classes use methods names that do not match /" + checks_1.validTermsPattern.source + "/."),
                type: CstVisitorDefinitionError.REDUNDANT_METHOD,
                methodName: prop
            });
        }
    }
    return errors;
}
exports.validateRedundantMethods = validateRedundantMethods;
//# sourceMappingURL=cst_visitor.js.map

/***/ }),
/* 47 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var parser_1 = __webpack_require__(4);
/**
 * Trait responsible abstracting over the interaction with Lexer output (Token vector).
 *
 * This could be generalized to support other kinds of lexers, e.g.
 * - Just in Time Lexing / Lexer-Less parsing.
 * - Streaming Lexer.
 */
var LexerAdapter = /** @class */ (function () {
    function LexerAdapter() {
    }
    LexerAdapter.prototype.initLexerAdapter = function () {
        this.tokVector = [];
        this.tokVectorLength = 0;
        this.currIdx = -1;
    };
    Object.defineProperty(LexerAdapter.prototype, "input", {
        get: function () {
            return this.tokVector;
        },
        set: function (newInput) {
            this.reset();
            this.tokVector = newInput;
            this.tokVectorLength = newInput.length;
        },
        enumerable: true,
        configurable: true
    });
    // skips a token and returns the next token
    LexerAdapter.prototype.SKIP_TOKEN = function () {
        if (this.currIdx <= this.tokVector.length - 2) {
            this.consumeToken();
            return this.LA(1);
        }
        else {
            return parser_1.END_OF_FILE;
        }
    };
    // Lexer (accessing Token vector) related methods which can be overridden to implement lazy lexers
    // or lexers dependent on parser context.
    LexerAdapter.prototype.LA = function (howMuch) {
        // does: is this optimization (saving tokVectorLength benefits?)
        if (this.currIdx + howMuch < 0 ||
            this.tokVectorLength <= this.currIdx + howMuch) {
            return parser_1.END_OF_FILE;
        }
        else {
            return this.tokVector[this.currIdx + howMuch];
        }
    };
    LexerAdapter.prototype.consumeToken = function () {
        this.currIdx++;
    };
    LexerAdapter.prototype.exportLexerState = function () {
        return this.currIdx;
    };
    LexerAdapter.prototype.importLexerState = function (newState) {
        this.currIdx = newState;
    };
    LexerAdapter.prototype.resetLexerState = function () {
        this.currIdx = -1;
    };
    LexerAdapter.prototype.moveToTerminatedState = function () {
        this.currIdx = this.tokVector.length - 1;
    };
    LexerAdapter.prototype.getLexerPosition = function () {
        return this.exportLexerState();
    };
    return LexerAdapter;
}());
exports.LexerAdapter = LexerAdapter;
//# sourceMappingURL=lexer_adapter.js.map

/***/ }),
/* 48 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var utils_1 = __webpack_require__(0);
var exceptions_public_1 = __webpack_require__(8);
var parser_1 = __webpack_require__(4);
var errors_public_1 = __webpack_require__(12);
var gast_builder_1 = __webpack_require__(18);
var checks_1 = __webpack_require__(14);
var gast_public_1 = __webpack_require__(2);
/**
 * This trait is responsible for implementing the offical API
 * for defining Chevrotain parsers, i.e:
 * - CONSUME
 * - RULE
 * - OPTION
 * - ...
 */
var RecognizerApi = /** @class */ (function () {
    function RecognizerApi() {
    }
    RecognizerApi.prototype.CONSUME = function (tokType, options) {
        return this.consumeInternal(tokType, 0, options);
    };
    RecognizerApi.prototype.CONSUME1 = function (tokType, options) {
        return this.consumeInternal(tokType, 1, options);
    };
    RecognizerApi.prototype.CONSUME2 = function (tokType, options) {
        return this.consumeInternal(tokType, 2, options);
    };
    RecognizerApi.prototype.CONSUME3 = function (tokType, options) {
        return this.consumeInternal(tokType, 3, options);
    };
    RecognizerApi.prototype.CONSUME4 = function (tokType, options) {
        return this.consumeInternal(tokType, 4, options);
    };
    RecognizerApi.prototype.CONSUME5 = function (tokType, options) {
        return this.consumeInternal(tokType, 5, options);
    };
    RecognizerApi.prototype.CONSUME6 = function (tokType, options) {
        return this.consumeInternal(tokType, 6, options);
    };
    RecognizerApi.prototype.CONSUME7 = function (tokType, options) {
        return this.consumeInternal(tokType, 7, options);
    };
    RecognizerApi.prototype.CONSUME8 = function (tokType, options) {
        return this.consumeInternal(tokType, 8, options);
    };
    RecognizerApi.prototype.CONSUME9 = function (tokType, options) {
        return this.consumeInternal(tokType, 9, options);
    };
    RecognizerApi.prototype.SUBRULE = function (ruleToCall, options) {
        return this.subruleInternal(ruleToCall, 0, options);
    };
    RecognizerApi.prototype.SUBRULE1 = function (ruleToCall, options) {
        return this.subruleInternal(ruleToCall, 1, options);
    };
    RecognizerApi.prototype.SUBRULE2 = function (ruleToCall, options) {
        return this.subruleInternal(ruleToCall, 2, options);
    };
    RecognizerApi.prototype.SUBRULE3 = function (ruleToCall, options) {
        return this.subruleInternal(ruleToCall, 3, options);
    };
    RecognizerApi.prototype.SUBRULE4 = function (ruleToCall, options) {
        return this.subruleInternal(ruleToCall, 4, options);
    };
    RecognizerApi.prototype.SUBRULE5 = function (ruleToCall, options) {
        return this.subruleInternal(ruleToCall, 5, options);
    };
    RecognizerApi.prototype.SUBRULE6 = function (ruleToCall, options) {
        return this.subruleInternal(ruleToCall, 6, options);
    };
    RecognizerApi.prototype.SUBRULE7 = function (ruleToCall, options) {
        return this.subruleInternal(ruleToCall, 7, options);
    };
    RecognizerApi.prototype.SUBRULE8 = function (ruleToCall, options) {
        return this.subruleInternal(ruleToCall, 8, options);
    };
    RecognizerApi.prototype.SUBRULE9 = function (ruleToCall, options) {
        return this.subruleInternal(ruleToCall, 9, options);
    };
    RecognizerApi.prototype.OPTION = function (actionORMethodDef) {
        return this.optionInternal(actionORMethodDef, 0);
    };
    RecognizerApi.prototype.OPTION1 = function (actionORMethodDef) {
        return this.optionInternal(actionORMethodDef, 1);
    };
    RecognizerApi.prototype.OPTION2 = function (actionORMethodDef) {
        return this.optionInternal(actionORMethodDef, 2);
    };
    RecognizerApi.prototype.OPTION3 = function (actionORMethodDef) {
        return this.optionInternal(actionORMethodDef, 3);
    };
    RecognizerApi.prototype.OPTION4 = function (actionORMethodDef) {
        return this.optionInternal(actionORMethodDef, 4);
    };
    RecognizerApi.prototype.OPTION5 = function (actionORMethodDef) {
        return this.optionInternal(actionORMethodDef, 5);
    };
    RecognizerApi.prototype.OPTION6 = function (actionORMethodDef) {
        return this.optionInternal(actionORMethodDef, 6);
    };
    RecognizerApi.prototype.OPTION7 = function (actionORMethodDef) {
        return this.optionInternal(actionORMethodDef, 7);
    };
    RecognizerApi.prototype.OPTION8 = function (actionORMethodDef) {
        return this.optionInternal(actionORMethodDef, 8);
    };
    RecognizerApi.prototype.OPTION9 = function (actionORMethodDef) {
        return this.optionInternal(actionORMethodDef, 9);
    };
    RecognizerApi.prototype.OR = function (altsOrOpts) {
        return this.orInternal(altsOrOpts, 0);
    };
    RecognizerApi.prototype.OR1 = function (altsOrOpts) {
        return this.orInternal(altsOrOpts, 1);
    };
    RecognizerApi.prototype.OR2 = function (altsOrOpts) {
        return this.orInternal(altsOrOpts, 2);
    };
    RecognizerApi.prototype.OR3 = function (altsOrOpts) {
        return this.orInternal(altsOrOpts, 3);
    };
    RecognizerApi.prototype.OR4 = function (altsOrOpts) {
        return this.orInternal(altsOrOpts, 4);
    };
    RecognizerApi.prototype.OR5 = function (altsOrOpts) {
        return this.orInternal(altsOrOpts, 5);
    };
    RecognizerApi.prototype.OR6 = function (altsOrOpts) {
        return this.orInternal(altsOrOpts, 6);
    };
    RecognizerApi.prototype.OR7 = function (altsOrOpts) {
        return this.orInternal(altsOrOpts, 7);
    };
    RecognizerApi.prototype.OR8 = function (altsOrOpts) {
        return this.orInternal(altsOrOpts, 8);
    };
    RecognizerApi.prototype.OR9 = function (altsOrOpts) {
        return this.orInternal(altsOrOpts, 9);
    };
    RecognizerApi.prototype.MANY = function (actionORMethodDef) {
        this.manyInternal(0, actionORMethodDef);
    };
    RecognizerApi.prototype.MANY1 = function (actionORMethodDef) {
        this.manyInternal(1, actionORMethodDef);
    };
    RecognizerApi.prototype.MANY2 = function (actionORMethodDef) {
        this.manyInternal(2, actionORMethodDef);
    };
    RecognizerApi.prototype.MANY3 = function (actionORMethodDef) {
        this.manyInternal(3, actionORMethodDef);
    };
    RecognizerApi.prototype.MANY4 = function (actionORMethodDef) {
        this.manyInternal(4, actionORMethodDef);
    };
    RecognizerApi.prototype.MANY5 = function (actionORMethodDef) {
        this.manyInternal(5, actionORMethodDef);
    };
    RecognizerApi.prototype.MANY6 = function (actionORMethodDef) {
        this.manyInternal(6, actionORMethodDef);
    };
    RecognizerApi.prototype.MANY7 = function (actionORMethodDef) {
        this.manyInternal(7, actionORMethodDef);
    };
    RecognizerApi.prototype.MANY8 = function (actionORMethodDef) {
        this.manyInternal(8, actionORMethodDef);
    };
    RecognizerApi.prototype.MANY9 = function (actionORMethodDef) {
        this.manyInternal(9, actionORMethodDef);
    };
    RecognizerApi.prototype.MANY_SEP = function (options) {
        this.manySepFirstInternal(0, options);
    };
    RecognizerApi.prototype.MANY_SEP1 = function (options) {
        this.manySepFirstInternal(1, options);
    };
    RecognizerApi.prototype.MANY_SEP2 = function (options) {
        this.manySepFirstInternal(2, options);
    };
    RecognizerApi.prototype.MANY_SEP3 = function (options) {
        this.manySepFirstInternal(3, options);
    };
    RecognizerApi.prototype.MANY_SEP4 = function (options) {
        this.manySepFirstInternal(4, options);
    };
    RecognizerApi.prototype.MANY_SEP5 = function (options) {
        this.manySepFirstInternal(5, options);
    };
    RecognizerApi.prototype.MANY_SEP6 = function (options) {
        this.manySepFirstInternal(6, options);
    };
    RecognizerApi.prototype.MANY_SEP7 = function (options) {
        this.manySepFirstInternal(7, options);
    };
    RecognizerApi.prototype.MANY_SEP8 = function (options) {
        this.manySepFirstInternal(8, options);
    };
    RecognizerApi.prototype.MANY_SEP9 = function (options) {
        this.manySepFirstInternal(9, options);
    };
    RecognizerApi.prototype.AT_LEAST_ONE = function (actionORMethodDef) {
        this.atLeastOneInternal(0, actionORMethodDef);
    };
    RecognizerApi.prototype.AT_LEAST_ONE1 = function (actionORMethodDef) {
        return this.atLeastOneInternal(1, actionORMethodDef);
    };
    RecognizerApi.prototype.AT_LEAST_ONE2 = function (actionORMethodDef) {
        this.atLeastOneInternal(2, actionORMethodDef);
    };
    RecognizerApi.prototype.AT_LEAST_ONE3 = function (actionORMethodDef) {
        this.atLeastOneInternal(3, actionORMethodDef);
    };
    RecognizerApi.prototype.AT_LEAST_ONE4 = function (actionORMethodDef) {
        this.atLeastOneInternal(4, actionORMethodDef);
    };
    RecognizerApi.prototype.AT_LEAST_ONE5 = function (actionORMethodDef) {
        this.atLeastOneInternal(5, actionORMethodDef);
    };
    RecognizerApi.prototype.AT_LEAST_ONE6 = function (actionORMethodDef) {
        this.atLeastOneInternal(6, actionORMethodDef);
    };
    RecognizerApi.prototype.AT_LEAST_ONE7 = function (actionORMethodDef) {
        this.atLeastOneInternal(7, actionORMethodDef);
    };
    RecognizerApi.prototype.AT_LEAST_ONE8 = function (actionORMethodDef) {
        this.atLeastOneInternal(8, actionORMethodDef);
    };
    RecognizerApi.prototype.AT_LEAST_ONE9 = function (actionORMethodDef) {
        this.atLeastOneInternal(9, actionORMethodDef);
    };
    RecognizerApi.prototype.AT_LEAST_ONE_SEP = function (options) {
        this.atLeastOneSepFirstInternal(0, options);
    };
    RecognizerApi.prototype.AT_LEAST_ONE_SEP1 = function (options) {
        this.atLeastOneSepFirstInternal(1, options);
    };
    RecognizerApi.prototype.AT_LEAST_ONE_SEP2 = function (options) {
        this.atLeastOneSepFirstInternal(2, options);
    };
    RecognizerApi.prototype.AT_LEAST_ONE_SEP3 = function (options) {
        this.atLeastOneSepFirstInternal(3, options);
    };
    RecognizerApi.prototype.AT_LEAST_ONE_SEP4 = function (options) {
        this.atLeastOneSepFirstInternal(4, options);
    };
    RecognizerApi.prototype.AT_LEAST_ONE_SEP5 = function (options) {
        this.atLeastOneSepFirstInternal(5, options);
    };
    RecognizerApi.prototype.AT_LEAST_ONE_SEP6 = function (options) {
        this.atLeastOneSepFirstInternal(6, options);
    };
    RecognizerApi.prototype.AT_LEAST_ONE_SEP7 = function (options) {
        this.atLeastOneSepFirstInternal(7, options);
    };
    RecognizerApi.prototype.AT_LEAST_ONE_SEP8 = function (options) {
        this.atLeastOneSepFirstInternal(8, options);
    };
    RecognizerApi.prototype.AT_LEAST_ONE_SEP9 = function (options) {
        this.atLeastOneSepFirstInternal(9, options);
    };
    RecognizerApi.prototype.RULE = function (name, implementation, 
    // TODO: how to describe the optional return type of CSTNode? T|CstNode is not good because it is not backward
    // compatible, T|any is very general...
    config) {
        if (config === void 0) { config = parser_1.DEFAULT_RULE_CONFIG; }
        if (utils_1.contains(this.definedRulesNames, name)) {
            var errMsg = errors_public_1.defaultGrammarValidatorErrorProvider.buildDuplicateRuleNameError({
                topLevelRule: name,
                grammarName: this.className
            });
            var error = {
                message: errMsg,
                type: parser_1.ParserDefinitionErrorType.DUPLICATE_RULE_NAME,
                ruleName: name
            };
            this.definitionErrors.push(error);
        }
        this.definedRulesNames.push(name);
        // only build the gast representation once.
        if (!this.gastProductionsCache.containsKey(name) &&
            !this.serializedGrammar) {
            var gastProduction = gast_builder_1.buildTopProduction(implementation.toString(), name, this.tokensMap);
            this.gastProductionsCache.put(name, gastProduction);
        }
        var ruleImplementation = this.defineRule(name, implementation, config);
        this[name] = ruleImplementation;
        return ruleImplementation;
    };
    RecognizerApi.prototype.OVERRIDE_RULE = function (name, impl, config) {
        if (config === void 0) { config = parser_1.DEFAULT_RULE_CONFIG; }
        var ruleErrors = [];
        ruleErrors = ruleErrors.concat(checks_1.validateRuleIsOverridden(name, this.definedRulesNames, this.className));
        this.definitionErrors.push.apply(this.definitionErrors, ruleErrors); // mutability for the win
        // Avoid constructing the GAST if we have serialized it
        if (!this.serializedGrammar) {
            var gastProduction = gast_builder_1.buildTopProduction(impl.toString(), name, this.tokensMap);
            this.gastProductionsCache.put(name, gastProduction);
        }
        var ruleImplementation = this.defineRule(name, impl, config);
        this[name] = ruleImplementation;
        return ruleImplementation;
    };
    RecognizerApi.prototype.BACKTRACK = function (grammarRule, args) {
        return function () {
            // save org state
            this.isBackTrackingStack.push(1);
            var orgState = this.saveRecogState();
            try {
                grammarRule.apply(this, args);
                // if no exception was thrown we have succeed parsing the rule.
                return true;
            }
            catch (e) {
                if (exceptions_public_1.isRecognitionException(e)) {
                    return false;
                }
                else {
                    throw e;
                }
            }
            finally {
                this.reloadRecogState(orgState);
                this.isBackTrackingStack.pop();
            }
        };
    };
    // GAST export APIs
    RecognizerApi.prototype.getGAstProductions = function () {
        return this.gastProductionsCache;
    };
    RecognizerApi.prototype.getSerializedGastProductions = function () {
        return gast_public_1.serializeGrammar(this.gastProductionsCache.values());
    };
    return RecognizerApi;
}());
exports.RecognizerApi = RecognizerApi;
//# sourceMappingURL=recognizer_api.js.map

/***/ }),
/* 49 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var utils_1 = __webpack_require__(0);
var keys_1 = __webpack_require__(19);
var exceptions_public_1 = __webpack_require__(8);
var lookahead_1 = __webpack_require__(15);
var interpreter_1 = __webpack_require__(16);
var parser_1 = __webpack_require__(4);
var recoverable_1 = __webpack_require__(36);
var tokens_public_1 = __webpack_require__(1);
var tokens_1 = __webpack_require__(6);
var lang_extensions_1 = __webpack_require__(7);
/**
 * This trait is responsible for the runtime parsing engine
 * Used by the official API (recognizer_api.ts)
 */
var RecognizerEngine = /** @class */ (function () {
    function RecognizerEngine() {
    }
    RecognizerEngine.prototype.initRecognizerEngine = function (tokenVocabulary, config) {
        this.className = lang_extensions_1.classNameFromInstance(this);
        // TODO: would using an ES6 Map or plain object be faster (CST building scenario)
        this.shortRuleNameToFull = new lang_extensions_1.HashTable();
        this.fullRuleNameToShort = new lang_extensions_1.HashTable();
        this.ruleShortNameIdx = 256;
        this.tokenMatcher = tokens_1.tokenStructuredMatcherNoCategories;
        this.definedRulesNames = [];
        this.tokensMap = {};
        this.allRuleNames = [];
        this.isBackTrackingStack = [];
        this.RULE_STACK = [];
        this.RULE_OCCURRENCE_STACK = [];
        this.gastProductionsCache = new lang_extensions_1.HashTable();
        this.serializedGrammar = utils_1.has(config, "serializedGrammar")
            ? config.serializedGrammar
            : parser_1.DEFAULT_PARSER_CONFIG.serializedGrammar;
        if (utils_1.isArray(tokenVocabulary)) {
            // This only checks for Token vocabularies provided as arrays.
            // That is good enough because the main objective is to detect users of pre-V4.0 APIs
            // rather than all edge cases of empty Token vocabularies.
            if (utils_1.isEmpty(tokenVocabulary)) {
                throw Error("A Token Vocabulary cannot be empty.\n" +
                    "\tNote that the first argument for the parser constructor\n" +
                    "\tis no longer a Token vector (since v4.0).");
            }
            if (typeof tokenVocabulary[0].startOffset === "number") {
                throw Error("The Parser constructor no longer accepts a token vector as the first argument.\n" +
                    "\tSee: https://sap.github.io/chevrotain/docs/changes/BREAKING_CHANGES.html#_4-0-0\n" +
                    "\tFor Further details.");
            }
        }
        if (utils_1.isArray(tokenVocabulary)) {
            this.tokensMap = utils_1.reduce(tokenVocabulary, function (acc, tokenClazz) {
                acc[tokens_public_1.tokenName(tokenClazz)] = tokenClazz;
                return acc;
            }, {});
        }
        else if (utils_1.has(tokenVocabulary, "modes") &&
            utils_1.every(utils_1.flatten(utils_1.values(tokenVocabulary.modes)), tokens_1.isTokenType)) {
            var allTokenTypes = utils_1.flatten(utils_1.values(tokenVocabulary.modes));
            var uniqueTokens = utils_1.uniq(allTokenTypes);
            this.tokensMap = utils_1.reduce(uniqueTokens, function (acc, tokenClazz) {
                acc[tokens_public_1.tokenName(tokenClazz)] = tokenClazz;
                return acc;
            }, {});
        }
        else if (utils_1.isObject(tokenVocabulary)) {
            this.tokensMap = utils_1.cloneObj(tokenVocabulary);
        }
        else {
            throw new Error("<tokensDictionary> argument must be An Array of Token constructors," +
                " A dictionary of Token constructors or an IMultiModeLexerDefinition");
        }
        // always add EOF to the tokenNames -> constructors map. it is useful to assure all the input has been
        // parsed with a clear error message ("expecting EOF but found ...")
        /* tslint:disable */
        this.tokensMap["EOF"] = tokens_public_1.EOF;
        // TODO: This check may not be accurate for multi mode lexers
        var noTokenCategoriesUsed = utils_1.every(utils_1.values(tokenVocabulary), function (tokenConstructor) { return utils_1.isEmpty(tokenConstructor.categoryMatches); });
        this.tokenMatcher = noTokenCategoriesUsed
            ? tokens_1.tokenStructuredMatcherNoCategories
            : tokens_1.tokenStructuredMatcher;
        // Because ES2015+ syntax should be supported for creating Token classes
        // We cannot assume that the Token classes were created using the "extendToken" utilities
        // Therefore we must augment the Token classes both on Lexer initialization and on Parser initialization
        tokens_1.augmentTokenTypes(utils_1.values(this.tokensMap));
    };
    RecognizerEngine.prototype.defineRule = function (ruleName, impl, config) {
        if (this.selfAnalysisDone) {
            throw Error("Grammar rule <" + ruleName + "> may not be defined after the 'performSelfAnalysis' method has been called'\n" +
                "Make sure that all grammar rule definitions are done before 'performSelfAnalysis' is called.");
        }
        var resyncEnabled = utils_1.has(config, "resyncEnabled")
            ? config.resyncEnabled
            : parser_1.DEFAULT_RULE_CONFIG.resyncEnabled;
        var recoveryValueFunc = utils_1.has(config, "recoveryValueFunc")
            ? config.recoveryValueFunc
            : parser_1.DEFAULT_RULE_CONFIG.recoveryValueFunc;
        // performance optimization: Use small integers as keys for the longer human readable "full" rule names.
        // this greatly improves Map access time (as much as 8% for some performance benchmarks).
        /* tslint:disable */
        var shortName = this.ruleShortNameIdx <<
            (keys_1.BITS_FOR_METHOD_IDX + keys_1.BITS_FOR_OCCURRENCE_IDX);
        /* tslint:enable */
        this.ruleShortNameIdx++;
        this.shortRuleNameToFull.put(shortName, ruleName);
        this.fullRuleNameToShort.put(ruleName, shortName);
        function invokeRuleWithTry(args) {
            try {
                // TODO: dynamically get rid of this?
                if (this.outputCst === true) {
                    impl.apply(this, args);
                    return this.CST_STACK[this.CST_STACK.length - 1];
                }
                else {
                    return impl.apply(this, args);
                }
            }
            catch (e) {
                var isFirstInvokedRule = this.RULE_STACK.length === 1;
                // note the reSync is always enabled for the first rule invocation, because we must always be able to
                // reSync with EOF and just output some INVALID ParseTree
                // during backtracking reSync recovery is disabled, otherwise we can't be certain the backtracking
                // path is really the most valid one
                var reSyncEnabled = resyncEnabled &&
                    !this.isBackTracking() &&
                    this.recoveryEnabled;
                if (exceptions_public_1.isRecognitionException(e)) {
                    if (reSyncEnabled) {
                        var reSyncTokType = this.findReSyncTokenType();
                        if (this.isInCurrentRuleReSyncSet(reSyncTokType)) {
                            e.resyncedTokens = this.reSyncTo(reSyncTokType);
                            if (this.outputCst) {
                                var partialCstResult = this.CST_STACK[this.CST_STACK.length - 1];
                                partialCstResult.recoveredNode = true;
                                return partialCstResult;
                            }
                            else {
                                return recoveryValueFunc();
                            }
                        }
                        else {
                            if (this.outputCst) {
                                var partialCstResult = this.CST_STACK[this.CST_STACK.length - 1];
                                partialCstResult.recoveredNode = true;
                                e.partialCstResult = partialCstResult;
                            }
                            // to be handled Further up the call stack
                            throw e;
                        }
                    }
                    else if (isFirstInvokedRule) {
                        // otherwise a Redundant input error will be created as well and we cannot guarantee that this is indeed the case
                        this.moveToTerminatedState();
                        // the parser should never throw one of its own errors outside its flow.
                        // even if error recovery is disabled
                        return recoveryValueFunc();
                    }
                    else {
                        // to be handled Further up the call stack
                        throw e;
                    }
                }
                else {
                    // some other Error type which we don't know how to handle (for example a built in JavaScript Error)
                    throw e;
                }
            }
            finally {
                this.ruleFinallyStateUpdate();
            }
        }
        var wrappedGrammarRule;
        wrappedGrammarRule = function (idxInCallingRule, args) {
            if (idxInCallingRule === void 0) { idxInCallingRule = 0; }
            this.ruleInvocationStateUpdate(shortName, ruleName, idxInCallingRule);
            return invokeRuleWithTry.call(this, args);
        };
        var ruleNamePropName = "ruleName";
        wrappedGrammarRule[ruleNamePropName] = ruleName;
        return wrappedGrammarRule;
    };
    // Implementation of parsing DSL
    RecognizerEngine.prototype.optionInternal = function (actionORMethodDef, occurrence) {
        var key = this.getKeyForAutomaticLookahead(keys_1.OPTION_IDX, occurrence);
        var nestedName = this.nestedRuleBeforeClause(actionORMethodDef, key);
        try {
            return this.optionInternalLogic(actionORMethodDef, occurrence, key);
        }
        finally {
            if (nestedName !== undefined) {
                this.nestedRuleFinallyClause(key, nestedName);
            }
        }
    };
    RecognizerEngine.prototype.optionInternalNoCst = function (actionORMethodDef, occurrence) {
        var key = this.getKeyForAutomaticLookahead(keys_1.OPTION_IDX, occurrence);
        return this.optionInternalLogic(actionORMethodDef, occurrence, key);
    };
    RecognizerEngine.prototype.optionInternalLogic = function (actionORMethodDef, occurrence, key) {
        var _this = this;
        var lookAheadFunc = this.getLookaheadFuncForOption(key, occurrence);
        var action;
        var predicate;
        if (actionORMethodDef.DEF !== undefined) {
            action = actionORMethodDef.DEF;
            predicate = actionORMethodDef.GATE;
            // predicate present
            if (predicate !== undefined) {
                var orgLookaheadFunction_1 = lookAheadFunc;
                lookAheadFunc = function () {
                    return (predicate.call(_this) && orgLookaheadFunction_1.call(_this));
                };
            }
        }
        else {
            action = actionORMethodDef;
        }
        if (lookAheadFunc.call(this) === true) {
            return action.call(this);
        }
        return undefined;
    };
    RecognizerEngine.prototype.atLeastOneInternal = function (prodOccurrence, actionORMethodDef) {
        var laKey = this.getKeyForAutomaticLookahead(keys_1.AT_LEAST_ONE_IDX, prodOccurrence);
        var nestedName = this.nestedRuleBeforeClause(actionORMethodDef, laKey);
        try {
            return this.atLeastOneInternalLogic(prodOccurrence, actionORMethodDef, laKey);
        }
        finally {
            if (nestedName !== undefined) {
                this.nestedRuleFinallyClause(laKey, nestedName);
            }
        }
    };
    RecognizerEngine.prototype.atLeastOneInternalNoCst = function (prodOccurrence, actionORMethodDef) {
        var key = this.getKeyForAutomaticLookahead(keys_1.AT_LEAST_ONE_IDX, prodOccurrence);
        this.atLeastOneInternalLogic(prodOccurrence, actionORMethodDef, key);
    };
    RecognizerEngine.prototype.atLeastOneInternalLogic = function (prodOccurrence, actionORMethodDef, key) {
        var _this = this;
        var lookAheadFunc = this.getLookaheadFuncForAtLeastOne(key, prodOccurrence);
        var action;
        var predicate;
        if (actionORMethodDef.DEF !== undefined) {
            action = actionORMethodDef.DEF;
            predicate = actionORMethodDef.GATE;
            // predicate present
            if (predicate !== undefined) {
                var orgLookaheadFunction_2 = lookAheadFunc;
                lookAheadFunc = function () {
                    return (predicate.call(_this) && orgLookaheadFunction_2.call(_this));
                };
            }
        }
        else {
            action = actionORMethodDef;
        }
        if (lookAheadFunc.call(this) === true) {
            ;
            action.call(this);
            while (lookAheadFunc.call(this) === true) {
                this.doSingleRepetition(action);
            }
        }
        else {
            throw this.raiseEarlyExitException(prodOccurrence, lookahead_1.PROD_TYPE.REPETITION_MANDATORY, actionORMethodDef.ERR_MSG);
        }
        // note that while it may seem that this can cause an error because by using a recursive call to
        // AT_LEAST_ONE we change the grammar to AT_LEAST_TWO, AT_LEAST_THREE ... , the possible recursive call
        // from the tryInRepetitionRecovery(...) will only happen IFF there really are TWO/THREE/.... items.
        // Performance optimization: "attemptInRepetitionRecovery" will be defined as NOOP unless recovery is enabled
        this.attemptInRepetitionRecovery(this.atLeastOneInternal, [prodOccurrence, actionORMethodDef], lookAheadFunc, keys_1.AT_LEAST_ONE_IDX, prodOccurrence, interpreter_1.NextTerminalAfterAtLeastOneWalker);
    };
    RecognizerEngine.prototype.atLeastOneSepFirstInternal = function (prodOccurrence, options) {
        var laKey = this.getKeyForAutomaticLookahead(keys_1.AT_LEAST_ONE_SEP_IDX, prodOccurrence);
        var nestedName = this.nestedRuleBeforeClause(options, laKey);
        try {
            this.atLeastOneSepFirstInternalLogic(prodOccurrence, options, laKey);
        }
        finally {
            if (nestedName !== undefined) {
                this.nestedRuleFinallyClause(laKey, nestedName);
            }
        }
    };
    RecognizerEngine.prototype.atLeastOneSepFirstInternalNoCst = function (prodOccurrence, options) {
        var laKey = this.getKeyForAutomaticLookahead(keys_1.AT_LEAST_ONE_SEP_IDX, prodOccurrence);
        this.atLeastOneSepFirstInternalLogic(prodOccurrence, options, laKey);
    };
    RecognizerEngine.prototype.atLeastOneSepFirstInternalLogic = function (prodOccurrence, options, key) {
        var _this = this;
        var action = options.DEF;
        var separator = options.SEP;
        var firstIterationLookaheadFunc = this.getLookaheadFuncForAtLeastOneSep(key, prodOccurrence);
        // 1st iteration
        if (firstIterationLookaheadFunc.call(this) === true) {
            ;
            action.call(this);
            //  TODO: Optimization can move this function construction into "attemptInRepetitionRecovery"
            //  because it is only needed in error recovery scenarios.
            var separatorLookAheadFunc = function () {
                return _this.tokenMatcher(_this.LA(1), separator);
            };
            // 2nd..nth iterations
            while (this.tokenMatcher(this.LA(1), separator) === true) {
                // note that this CONSUME will never enter recovery because
                // the separatorLookAheadFunc checks that the separator really does exist.
                this.CONSUME(separator);
                action.call(this);
            }
            // Performance optimization: "attemptInRepetitionRecovery" will be defined as NOOP unless recovery is enabled
            this.attemptInRepetitionRecovery(this.repetitionSepSecondInternal, [
                prodOccurrence,
                separator,
                separatorLookAheadFunc,
                action,
                interpreter_1.NextTerminalAfterAtLeastOneSepWalker
            ], separatorLookAheadFunc, keys_1.AT_LEAST_ONE_SEP_IDX, prodOccurrence, interpreter_1.NextTerminalAfterAtLeastOneSepWalker);
        }
        else {
            throw this.raiseEarlyExitException(prodOccurrence, lookahead_1.PROD_TYPE.REPETITION_MANDATORY_WITH_SEPARATOR, options.ERR_MSG);
        }
    };
    RecognizerEngine.prototype.manyInternal = function (prodOccurrence, actionORMethodDef) {
        var laKey = this.getKeyForAutomaticLookahead(keys_1.MANY_IDX, prodOccurrence);
        var nestedName = this.nestedRuleBeforeClause(actionORMethodDef, laKey);
        try {
            return this.manyInternalLogic(prodOccurrence, actionORMethodDef, laKey);
        }
        finally {
            if (nestedName !== undefined) {
                this.nestedRuleFinallyClause(laKey, nestedName);
            }
        }
    };
    RecognizerEngine.prototype.manyInternalNoCst = function (prodOccurrence, actionORMethodDef) {
        var laKey = this.getKeyForAutomaticLookahead(keys_1.MANY_IDX, prodOccurrence);
        return this.manyInternalLogic(prodOccurrence, actionORMethodDef, laKey);
    };
    RecognizerEngine.prototype.manyInternalLogic = function (prodOccurrence, actionORMethodDef, key) {
        var _this = this;
        var lookaheadFunction = this.getLookaheadFuncForMany(key, prodOccurrence);
        var action;
        var predicate;
        if (actionORMethodDef.DEF !== undefined) {
            action = actionORMethodDef.DEF;
            predicate = actionORMethodDef.GATE;
            // predicate present
            if (predicate !== undefined) {
                var orgLookaheadFunction_3 = lookaheadFunction;
                lookaheadFunction = function () {
                    return (predicate.call(_this) && orgLookaheadFunction_3.call(_this));
                };
            }
        }
        else {
            action = actionORMethodDef;
        }
        while (lookaheadFunction.call(this)) {
            this.doSingleRepetition(action);
        }
        // Performance optimization: "attemptInRepetitionRecovery" will be defined as NOOP unless recovery is enabled
        this.attemptInRepetitionRecovery(this.manyInternal, [prodOccurrence, actionORMethodDef], lookaheadFunction, keys_1.MANY_IDX, prodOccurrence, interpreter_1.NextTerminalAfterManyWalker);
    };
    RecognizerEngine.prototype.manySepFirstInternal = function (prodOccurrence, options) {
        var laKey = this.getKeyForAutomaticLookahead(keys_1.MANY_SEP_IDX, prodOccurrence);
        var nestedName = this.nestedRuleBeforeClause(options, laKey);
        try {
            this.manySepFirstInternalLogic(prodOccurrence, options, laKey);
        }
        finally {
            if (nestedName !== undefined) {
                this.nestedRuleFinallyClause(laKey, nestedName);
            }
        }
    };
    RecognizerEngine.prototype.manySepFirstInternalNoCst = function (prodOccurrence, options) {
        var laKey = this.getKeyForAutomaticLookahead(keys_1.MANY_SEP_IDX, prodOccurrence);
        this.manySepFirstInternalLogic(prodOccurrence, options, laKey);
    };
    RecognizerEngine.prototype.manySepFirstInternalLogic = function (prodOccurrence, options, key) {
        var _this = this;
        var action = options.DEF;
        var separator = options.SEP;
        var firstIterationLaFunc = this.getLookaheadFuncForManySep(key, prodOccurrence);
        // 1st iteration
        if (firstIterationLaFunc.call(this) === true) {
            action.call(this);
            var separatorLookAheadFunc = function () {
                return _this.tokenMatcher(_this.LA(1), separator);
            };
            // 2nd..nth iterations
            while (this.tokenMatcher(this.LA(1), separator) === true) {
                // note that this CONSUME will never enter recovery because
                // the separatorLookAheadFunc checks that the separator really does exist.
                this.CONSUME(separator);
                // No need for checking infinite loop here due to consuming the separator.
                action.call(this);
            }
            // Performance optimization: "attemptInRepetitionRecovery" will be defined as NOOP unless recovery is enabled
            this.attemptInRepetitionRecovery(this.repetitionSepSecondInternal, [
                prodOccurrence,
                separator,
                separatorLookAheadFunc,
                action,
                interpreter_1.NextTerminalAfterManySepWalker
            ], separatorLookAheadFunc, keys_1.MANY_SEP_IDX, prodOccurrence, interpreter_1.NextTerminalAfterManySepWalker);
        }
    };
    RecognizerEngine.prototype.repetitionSepSecondInternal = function (prodOccurrence, separator, separatorLookAheadFunc, action, nextTerminalAfterWalker) {
        while (separatorLookAheadFunc()) {
            // note that this CONSUME will never enter recovery because
            // the separatorLookAheadFunc checks that the separator really does exist.
            this.CONSUME(separator);
            action.call(this);
        }
        // we can only arrive to this function after an error
        // has occurred (hence the name 'second') so the following
        // IF will always be entered, its possible to remove it...
        // however it is kept to avoid confusion and be consistent.
        // Performance optimization: "attemptInRepetitionRecovery" will be defined as NOOP unless recovery is enabled
        /* istanbul ignore else */
        this.attemptInRepetitionRecovery(this.repetitionSepSecondInternal, [
            prodOccurrence,
            separator,
            separatorLookAheadFunc,
            action,
            nextTerminalAfterWalker
        ], separatorLookAheadFunc, keys_1.AT_LEAST_ONE_SEP_IDX, prodOccurrence, nextTerminalAfterWalker);
    };
    RecognizerEngine.prototype.doSingleRepetition = function (action) {
        var beforeIteration = this.getLexerPosition();
        var result = action.call(this);
        var afterIteration = this.getLexerPosition();
        if (afterIteration === beforeIteration) {
            throw Error("Infinite loop detected\n" +
                "\tSee: https://sap.github.io/chevrotain/docs/guide/resolving_grammar_errors.html#INFINITE_LOOP\n" +
                "\tFor Further details.");
        }
        return result;
    };
    RecognizerEngine.prototype.orInternalNoCst = function (altsOrOpts, occurrence) {
        var alts = utils_1.isArray(altsOrOpts)
            ? altsOrOpts
            : altsOrOpts.DEF;
        var laFunc = this.getLookaheadFuncForOr(occurrence, alts);
        var altIdxToTake = laFunc.call(this, alts);
        if (altIdxToTake !== undefined) {
            var chosenAlternative = alts[altIdxToTake];
            return chosenAlternative.ALT.call(this);
        }
        this.raiseNoAltException(occurrence, altsOrOpts.ERR_MSG);
    };
    RecognizerEngine.prototype.orInternal = function (altsOrOpts, occurrence) {
        var laKey = this.getKeyForAutomaticLookahead(keys_1.OR_IDX, occurrence);
        var nestedName = this.nestedRuleBeforeClause(altsOrOpts, laKey);
        try {
            var alts = utils_1.isArray(altsOrOpts)
                ? altsOrOpts
                : altsOrOpts.DEF;
            var laFunc = this.getLookaheadFuncForOr(occurrence, alts);
            var altIdxToTake = laFunc.call(this, alts);
            if (altIdxToTake !== undefined) {
                var chosenAlternative = alts[altIdxToTake];
                var nestedAltBeforeClauseResult = this.nestedAltBeforeClause(chosenAlternative, occurrence, keys_1.OR_IDX, altIdxToTake);
                try {
                    return chosenAlternative.ALT.call(this);
                }
                finally {
                    if (nestedAltBeforeClauseResult !== undefined) {
                        this.nestedRuleFinallyClause(nestedAltBeforeClauseResult.shortName, nestedAltBeforeClauseResult.nestedName);
                    }
                }
            }
            this.raiseNoAltException(occurrence, altsOrOpts.ERR_MSG);
        }
        finally {
            if (nestedName !== undefined) {
                this.nestedRuleFinallyClause(laKey, nestedName);
            }
        }
    };
    RecognizerEngine.prototype.ruleFinallyStateUpdate = function () {
        this.RULE_STACK.pop();
        this.RULE_OCCURRENCE_STACK.pop();
        // NOOP when cst is disabled
        this.cstFinallyStateUpdate();
        if (this.RULE_STACK.length === 0 && !this.isAtEndOfInput()) {
            var firstRedundantTok = this.LA(1);
            var errMsg = this.errorMessageProvider.buildNotAllInputParsedMessage({
                firstRedundant: firstRedundantTok,
                ruleName: this.getCurrRuleFullName()
            });
            this.SAVE_ERROR(new exceptions_public_1.NotAllInputParsedException(errMsg, firstRedundantTok));
        }
    };
    RecognizerEngine.prototype.subruleInternal = function (ruleToCall, idx, options) {
        var ruleResult;
        try {
            var args = options !== undefined ? options.ARGS : undefined;
            ruleResult = ruleToCall.call(this, idx, args);
            this.cstPostNonTerminal(ruleResult, options !== undefined && options.LABEL !== undefined
                ? options.LABEL
                : ruleToCall.ruleName);
            return ruleResult;
        }
        catch (e) {
            if (exceptions_public_1.isRecognitionException(e) && e.partialCstResult !== undefined) {
                this.cstPostNonTerminal(e.partialCstResult, options !== undefined && options.LABEL !== undefined
                    ? options.LABEL
                    : ruleToCall.ruleName);
                delete e.partialCstResult;
            }
            throw e;
        }
    };
    RecognizerEngine.prototype.consumeInternal = function (tokType, idx, options) {
        var consumedToken;
        try {
            var nextToken = this.LA(1);
            if (this.tokenMatcher(nextToken, tokType) === true) {
                this.consumeToken();
                consumedToken = nextToken;
            }
            else {
                var msg = void 0;
                var previousToken = this.LA(0);
                if (options !== undefined && options.ERR_MSG) {
                    msg = options.ERR_MSG;
                }
                else {
                    msg = this.errorMessageProvider.buildMismatchTokenMessage({
                        expected: tokType,
                        actual: nextToken,
                        previous: previousToken,
                        ruleName: this.getCurrRuleFullName()
                    });
                }
                throw this.SAVE_ERROR(new exceptions_public_1.MismatchedTokenException(msg, nextToken, previousToken));
            }
        }
        catch (eFromConsumption) {
            // no recovery allowed during backtracking, otherwise backtracking may recover invalid syntax and accept it
            // but the original syntax could have been parsed successfully without any backtracking + recovery
            if (this.recoveryEnabled &&
                // TODO: more robust checking of the exception type. Perhaps Typescript extending expressions?
                eFromConsumption.name === "MismatchedTokenException" &&
                !this.isBackTracking()) {
                var follows = this.getFollowsForInRuleRecovery(tokType, idx);
                try {
                    consumedToken = this.tryInRuleRecovery(tokType, follows);
                }
                catch (eFromInRuleRecovery) {
                    if (eFromInRuleRecovery.name === recoverable_1.IN_RULE_RECOVERY_EXCEPTION) {
                        // failed in RuleRecovery.
                        // throw the original error in order to trigger reSync error recovery
                        throw eFromConsumption;
                    }
                    else {
                        throw eFromInRuleRecovery;
                    }
                }
            }
            else {
                throw eFromConsumption;
            }
        }
        this.cstPostTerminal(options !== undefined && options.LABEL !== undefined
            ? options.LABEL
            : tokType.tokenName, consumedToken);
        return consumedToken;
    };
    RecognizerEngine.prototype.saveRecogState = function () {
        // errors is a getter which will clone the errors array
        var savedErrors = this.errors;
        var savedRuleStack = utils_1.cloneArr(this.RULE_STACK);
        return {
            errors: savedErrors,
            lexerState: this.exportLexerState(),
            RULE_STACK: savedRuleStack,
            CST_STACK: this.CST_STACK,
            LAST_EXPLICIT_RULE_STACK: this.LAST_EXPLICIT_RULE_STACK
        };
    };
    RecognizerEngine.prototype.reloadRecogState = function (newState) {
        this.errors = newState.errors;
        this.importLexerState(newState.lexerState);
        this.RULE_STACK = newState.RULE_STACK;
    };
    RecognizerEngine.prototype.ruleInvocationStateUpdate = function (shortName, fullName, idxInCallingRule) {
        this.RULE_OCCURRENCE_STACK.push(idxInCallingRule);
        this.RULE_STACK.push(shortName);
        // NOOP when cst is disabled
        this.cstInvocationStateUpdate(fullName, shortName);
    };
    RecognizerEngine.prototype.isBackTracking = function () {
        return !utils_1.isEmpty(this.isBackTrackingStack);
    };
    RecognizerEngine.prototype.getCurrRuleFullName = function () {
        var shortName = this.getLastExplicitRuleShortName();
        return this.shortRuleNameToFull.get(shortName);
    };
    RecognizerEngine.prototype.shortRuleNameToFullName = function (shortName) {
        return this.shortRuleNameToFull.get(shortName);
    };
    RecognizerEngine.prototype.isAtEndOfInput = function () {
        return this.tokenMatcher(this.LA(1), tokens_public_1.EOF);
    };
    RecognizerEngine.prototype.reset = function () {
        this.resetLexerState();
        this.isBackTrackingStack = [];
        this.errors = [];
        this.RULE_STACK = [];
        this.LAST_EXPLICIT_RULE_STACK = [];
        // TODO: extract a specific rest for TreeBuilder trait
        this.CST_STACK = [];
        this.RULE_OCCURRENCE_STACK = [];
    };
    return RecognizerEngine;
}());
exports.RecognizerEngine = RecognizerEngine;
//# sourceMappingURL=recognizer_engine.js.map

/***/ }),
/* 50 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var exceptions_public_1 = __webpack_require__(8);
var utils_1 = __webpack_require__(0);
var lookahead_1 = __webpack_require__(15);
var parser_1 = __webpack_require__(4);
/**
 * Trait responsible for runtime parsing errors.
 */
var ErrorHandler = /** @class */ (function () {
    function ErrorHandler() {
    }
    ErrorHandler.prototype.initErrorHandler = function (config) {
        this._errors = [];
        this.errorMessageProvider = utils_1.defaults(config.errorMessageProvider, parser_1.DEFAULT_PARSER_CONFIG.errorMessageProvider);
    };
    ErrorHandler.prototype.SAVE_ERROR = function (error) {
        if (exceptions_public_1.isRecognitionException(error)) {
            error.context = {
                ruleStack: this.getHumanReadableRuleStack(),
                ruleOccurrenceStack: utils_1.cloneArr(this.RULE_OCCURRENCE_STACK)
            };
            this._errors.push(error);
            return error;
        }
        else {
            throw Error("Trying to save an Error which is not a RecognitionException");
        }
    };
    Object.defineProperty(ErrorHandler.prototype, "errors", {
        // TODO: extract these methods to ErrorHandler Trait?
        get: function () {
            return utils_1.cloneArr(this._errors);
        },
        set: function (newErrors) {
            this._errors = newErrors;
        },
        enumerable: true,
        configurable: true
    });
    // TODO: consider caching the error message computed information
    ErrorHandler.prototype.raiseEarlyExitException = function (occurrence, prodType, userDefinedErrMsg) {
        var ruleName = this.getCurrRuleFullName();
        var ruleGrammar = this.getGAstProductions().get(ruleName);
        var lookAheadPathsPerAlternative = lookahead_1.getLookaheadPathsForOptionalProd(occurrence, ruleGrammar, prodType, this.maxLookahead);
        var insideProdPaths = lookAheadPathsPerAlternative[0];
        var actualTokens = [];
        for (var i = 1; i < this.maxLookahead; i++) {
            actualTokens.push(this.LA(i));
        }
        var msg = this.errorMessageProvider.buildEarlyExitMessage({
            expectedIterationPaths: insideProdPaths,
            actual: actualTokens,
            previous: this.LA(0),
            customUserDescription: userDefinedErrMsg,
            ruleName: ruleName
        });
        throw this.SAVE_ERROR(new exceptions_public_1.EarlyExitException(msg, this.LA(1), this.LA(0)));
    };
    // TODO: consider caching the error message computed information
    ErrorHandler.prototype.raiseNoAltException = function (occurrence, errMsgTypes) {
        var ruleName = this.getCurrRuleFullName();
        var ruleGrammar = this.getGAstProductions().get(ruleName);
        // TODO: getLookaheadPathsForOr can be slow for large enough maxLookahead and certain grammars, consider caching ?
        var lookAheadPathsPerAlternative = lookahead_1.getLookaheadPathsForOr(occurrence, ruleGrammar, this.maxLookahead);
        var actualTokens = [];
        for (var i = 1; i <= this.maxLookahead; i++) {
            actualTokens.push(this.LA(i));
        }
        var previousToken = this.LA(0);
        var errMsg = this.errorMessageProvider.buildNoViableAltMessage({
            expectedPathsPerAlt: lookAheadPathsPerAlternative,
            actual: actualTokens,
            previous: previousToken,
            customUserDescription: errMsgTypes,
            ruleName: this.getCurrRuleFullName()
        });
        throw this.SAVE_ERROR(new exceptions_public_1.NoViableAltException(errMsg, this.LA(1), previousToken));
    };
    return ErrorHandler;
}());
exports.ErrorHandler = ErrorHandler;
//# sourceMappingURL=error_handler.js.map

/***/ }),
/* 51 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var interpreter_1 = __webpack_require__(16);
var utils_1 = __webpack_require__(0);
var ContentAssist = /** @class */ (function () {
    function ContentAssist() {
    }
    ContentAssist.prototype.initContentAssist = function () { };
    ContentAssist.prototype.computeContentAssist = function (startRuleName, precedingInput) {
        var startRuleGast = this.gastProductionsCache.get(startRuleName);
        if (utils_1.isUndefined(startRuleGast)) {
            throw Error("Rule ->" + startRuleName + "<- does not exist in this grammar.");
        }
        return interpreter_1.nextPossibleTokensAfter([startRuleGast], precedingInput, this.tokenMatcher, this.maxLookahead);
    };
    // TODO: should this be a member method or a utility? it does not have any state or usage of 'this'...
    // TODO: should this be more explicitly part of the public API?
    ContentAssist.prototype.getNextPossibleTokenTypes = function (grammarPath) {
        var topRuleName = utils_1.first(grammarPath.ruleStack);
        var gastProductions = this.getGAstProductions();
        var topProduction = gastProductions.get(topRuleName);
        var nextPossibleTokenTypes = new interpreter_1.NextAfterTokenWalker(topProduction, grammarPath).startWalking();
        return nextPossibleTokenTypes;
    };
    return ContentAssist;
}());
exports.ContentAssist = ContentAssist;
//# sourceMappingURL=context_assist.js.map

/***/ }),
/* 52 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var version_1 = __webpack_require__(17);
function createSyntaxDiagramsCode(grammar, _a) {
    var _b = _a === void 0 ? {} : _a, _c = _b.resourceBase, resourceBase = _c === void 0 ? "https://unpkg.com/chevrotain@" + version_1.VERSION + "/diagrams/" : _c, _d = _b.css, css = _d === void 0 ? "https://unpkg.com/chevrotain@" + version_1.VERSION + "/diagrams/diagrams.css" : _d;
    var header = "\n<!-- This is a generated file -->\n<!DOCTYPE html>\n<meta charset=\"utf-8\">\n<style>\n  body {\n    background-color: hsl(30, 20%, 95%)\n  }\n</style>\n\n";
    var cssHtml = "\n<link rel='stylesheet' href='" + css + "'>\n";
    var scripts = "\n<script src='" + resourceBase + "vendor/railroad-diagrams.js'></script>\n<script src='" + resourceBase + "src/diagrams_builder.js'></script>\n<script src='" + resourceBase + "src/diagrams_behavior.js'></script>\n<script src='" + resourceBase + "src/main.js'></script>\n";
    var diagramsDiv = "\n<div id=\"diagrams\" align=\"center\"></div>    \n";
    var serializedGrammar = "\n<script>\n    window.serializedGrammar = " + JSON.stringify(grammar, null, "  ") + ";\n</script>\n";
    var initLogic = "\n<script>\n    var diagramsDiv = document.getElementById(\"diagrams\");\n    main.drawDiagramsFromSerializedGrammar(serializedGrammar, diagramsDiv);\n</script>\n";
    return (header + cssHtml + scripts + diagramsDiv + serializedGrammar + initLogic);
}
exports.createSyntaxDiagramsCode = createSyntaxDiagramsCode;
//# sourceMappingURL=render_public.js.map

/***/ }),
/* 53 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var utils_1 = __webpack_require__(0);
var tokens_public_1 = __webpack_require__(1);
var gast_public_1 = __webpack_require__(2);
/**
 * Missing features
 * 1. Rule arguments
 * 2. Gates
 * 3. embedded actions
 */
var NL = "\n";
function genUmdModule(options) {
    return "\n(function (root, factory) {\n    if (typeof define === 'function' && define.amd) {\n        // AMD. Register as an anonymous module.\n        define(['chevrotain'], factory);\n    } else if (typeof module === 'object' && module.exports) {\n        // Node. Does not work with strict CommonJS, but\n        // only CommonJS-like environments that support module.exports,\n        // like Node.\n        module.exports = factory(require('chevrotain'));\n    } else {\n        // Browser globals (root is window)\n        root.returnExports = factory(root.b);\n    }\n}(typeof self !== 'undefined' ? self : this, function (chevrotain) {\n\n" + genClass(options) + "\n    \nreturn {\n    " + options.name + ": " + options.name + " \n}\n}));\n";
}
exports.genUmdModule = genUmdModule;
function genWrapperFunction(options) {
    return "    \n" + genClass(options) + "\nreturn new " + options.name + "(tokenVocabulary, config)    \n";
}
exports.genWrapperFunction = genWrapperFunction;
function genClass(options) {
    // TODO: how to pass the token vocabulary? Constructor? other?
    // TODO: should outputCst be enabled by default?
    var result = "\nfunction " + options.name + "(tokenVocabulary, config) {\n    // invoke super constructor\n    chevrotain.Parser.call(this, tokenVocabulary, config)\n\n    const $ = this\n\n    " + genAllRules(options.rules) + "\n\n    // very important to call this after all the rules have been defined.\n    // otherwise the parser may not work correctly as it will lack information\n    // derived during the self analysis phase.\n    this.performSelfAnalysis(this)\n}\n\n// inheritance as implemented in javascript in the previous decade... :(\n" + options.name + ".prototype = Object.create(chevrotain.Parser.prototype)\n" + options.name + ".prototype.constructor = " + options.name + "    \n    ";
    return result;
}
exports.genClass = genClass;
function genAllRules(rules) {
    var rulesText = utils_1.map(rules, function (currRule) {
        return genRule(currRule, 1);
    });
    return rulesText.join("\n");
}
exports.genAllRules = genAllRules;
function genRule(prod, n) {
    var result = indent(n, "$.RULE(\"" + prod.name + "\", function() {") + NL;
    result += genDefinition(prod.definition, n + 1);
    result += indent(n + 1, "})") + NL;
    return result;
}
exports.genRule = genRule;
function genTerminal(prod, n) {
    var name = tokens_public_1.tokenName(prod.terminalType);
    // TODO: potential performance optimization, avoid tokenMap Dictionary access
    return indent(n, "$.CONSUME" + prod.idx + "(this.tokensMap." + name + ")" + NL);
}
exports.genTerminal = genTerminal;
function genNonTerminal(prod, n) {
    return indent(n, "$.SUBRULE" + prod.idx + "($." + prod.nonTerminalName + ")" + NL);
}
exports.genNonTerminal = genNonTerminal;
function genAlternation(prod, n) {
    var result = indent(n, "$.OR" + prod.idx + "([") + NL;
    var alts = utils_1.map(prod.definition, function (altDef) { return genSingleAlt(altDef, n + 1); });
    result += alts.join("," + NL);
    result += NL + indent(n, "])" + NL);
    return result;
}
exports.genAlternation = genAlternation;
function genSingleAlt(prod, n) {
    var result = indent(n, "{") + NL;
    if (prod.name) {
        result += indent(n + 1, "NAME: \"" + prod.name + "\",") + NL;
    }
    result += indent(n + 1, "ALT: function() {") + NL;
    result += genDefinition(prod.definition, n + 1);
    result += indent(n + 1, "}") + NL;
    result += indent(n, "}");
    return result;
}
exports.genSingleAlt = genSingleAlt;
function genProd(prod, n) {
    /* istanbul ignore else */
    if (prod instanceof gast_public_1.NonTerminal) {
        return genNonTerminal(prod, n);
    }
    else if (prod instanceof gast_public_1.Option) {
        return genDSLRule("OPTION", prod, n);
    }
    else if (prod instanceof gast_public_1.RepetitionMandatory) {
        return genDSLRule("AT_LEAST_ONE", prod, n);
    }
    else if (prod instanceof gast_public_1.RepetitionMandatoryWithSeparator) {
        return genDSLRule("AT_LEAST_ONE_SEP", prod, n);
    }
    else if (prod instanceof gast_public_1.RepetitionWithSeparator) {
        return genDSLRule("MANY_SEP", prod, n);
    }
    else if (prod instanceof gast_public_1.Repetition) {
        return genDSLRule("MANY", prod, n);
    }
    else if (prod instanceof gast_public_1.Alternation) {
        return genAlternation(prod, n);
    }
    else if (prod instanceof gast_public_1.Terminal) {
        return genTerminal(prod, n);
    }
    else if (prod instanceof gast_public_1.Flat) {
        return genDefinition(prod.definition, n);
    }
    else {
        throw Error("non exhaustive match");
    }
}
function genDSLRule(dslName, prod, n) {
    var result = indent(n, "$." + (dslName + prod.idx) + "(");
    if (prod.name || prod.separator) {
        result += "{" + NL;
        if (prod.name) {
            result += indent(n + 1, "NAME: \"" + prod.name + "\"") + "," + NL;
        }
        if (prod.separator) {
            result +=
                indent(n + 1, "SEP: this.tokensMap." + tokens_public_1.tokenName(prod.separator)) +
                    "," +
                    NL;
        }
        result += "DEF: " + genDefFunction(prod.definition, n + 2) + NL;
        result += indent(n, "}") + NL;
    }
    else {
        result += genDefFunction(prod.definition, n + 1);
    }
    result += indent(n, ")") + NL;
    return result;
}
function genDefFunction(definition, n) {
    var def = "function() {" + NL;
    def += genDefinition(definition, n);
    def += indent(n, "}") + NL;
    return def;
}
function genDefinition(def, n) {
    var result = "";
    utils_1.forEach(def, function (prod) {
        result += genProd(prod, n + 1);
    });
    return result;
}
function indent(howMuch, text) {
    var spaces = Array(howMuch * 4 + 1).join(" ");
    return spaces + text;
}
//# sourceMappingURL=generate.js.map

/***/ }),
/* 54 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var utils_1 = __webpack_require__(0);
var ParseTree = /** @class */ (function () {
    function ParseTree(payload, children) {
        if (children === void 0) { children = []; }
        this.payload = payload;
        this.children = children;
    }
    ParseTree.prototype.getImage = function () {
        return this.payload.image;
    };
    ParseTree.prototype.getLine = function () {
        return this.payload.startLine;
    };
    ParseTree.prototype.getColumn = function () {
        return this.payload.startColumn;
    };
    return ParseTree;
}());
exports.ParseTree = ParseTree;
/**
 * convenience factory for ParseTrees
 *
 * @param {TokenType|Token} tokenOrTokenClass The Token instance to be used as the root node, or a constructor Function
 *                         that will create the root node.
 * @param {ParseTree[]} children The sub nodes of the ParseTree to the built
 * @returns {ParseTree}
 */
function PT(tokenOrTokenClass, children) {
    if (children === void 0) { children = []; }
    var childrenCompact = utils_1.compact(children);
    if (tokenOrTokenClass.image !== undefined) {
        return new ParseTree(tokenOrTokenClass, childrenCompact);
    }
    else if (utils_1.isFunction(tokenOrTokenClass)) {
        return new ParseTree(new tokenOrTokenClass(), childrenCompact);
    }
    else if (utils_1.isUndefined(tokenOrTokenClass) || tokenOrTokenClass === null) {
        return null;
    }
    else {
        throw "Invalid parameter " + tokenOrTokenClass + " to PT factory.";
    }
}
exports.PT = PT;
//# sourceMappingURL=parse_tree.js.map

/***/ }),
/* 55 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(process) {exports = module.exports = SemVer;

// The debug function is excluded entirely from the minified version.
/* nomin */ var debug;
/* nomin */ if (typeof process === 'object' &&
    /* nomin */ process.env &&
    /* nomin */ process.env.NODE_DEBUG &&
    /* nomin */ /\bsemver\b/i.test(process.env.NODE_DEBUG))
  /* nomin */ debug = function() {
    /* nomin */ var args = Array.prototype.slice.call(arguments, 0);
    /* nomin */ args.unshift('SEMVER');
    /* nomin */ console.log.apply(console, args);
    /* nomin */ };
/* nomin */ else
  /* nomin */ debug = function() {};

// Note: this is the semver.org version of the spec that it implements
// Not necessarily the package version of this code.
exports.SEMVER_SPEC_VERSION = '2.0.0';

var MAX_LENGTH = 256;
var MAX_SAFE_INTEGER = Number.MAX_SAFE_INTEGER || 9007199254740991;

// Max safe segment length for coercion.
var MAX_SAFE_COMPONENT_LENGTH = 16;

// The actual regexps go on exports.re
var re = exports.re = [];
var src = exports.src = [];
var R = 0;

// The following Regular Expressions can be used for tokenizing,
// validating, and parsing SemVer version strings.

// ## Numeric Identifier
// A single `0`, or a non-zero digit followed by zero or more digits.

var NUMERICIDENTIFIER = R++;
src[NUMERICIDENTIFIER] = '0|[1-9]\\d*';
var NUMERICIDENTIFIERLOOSE = R++;
src[NUMERICIDENTIFIERLOOSE] = '[0-9]+';


// ## Non-numeric Identifier
// Zero or more digits, followed by a letter or hyphen, and then zero or
// more letters, digits, or hyphens.

var NONNUMERICIDENTIFIER = R++;
src[NONNUMERICIDENTIFIER] = '\\d*[a-zA-Z-][a-zA-Z0-9-]*';


// ## Main Version
// Three dot-separated numeric identifiers.

var MAINVERSION = R++;
src[MAINVERSION] = '(' + src[NUMERICIDENTIFIER] + ')\\.' +
                   '(' + src[NUMERICIDENTIFIER] + ')\\.' +
                   '(' + src[NUMERICIDENTIFIER] + ')';

var MAINVERSIONLOOSE = R++;
src[MAINVERSIONLOOSE] = '(' + src[NUMERICIDENTIFIERLOOSE] + ')\\.' +
                        '(' + src[NUMERICIDENTIFIERLOOSE] + ')\\.' +
                        '(' + src[NUMERICIDENTIFIERLOOSE] + ')';

// ## Pre-release Version Identifier
// A numeric identifier, or a non-numeric identifier.

var PRERELEASEIDENTIFIER = R++;
src[PRERELEASEIDENTIFIER] = '(?:' + src[NUMERICIDENTIFIER] +
                            '|' + src[NONNUMERICIDENTIFIER] + ')';

var PRERELEASEIDENTIFIERLOOSE = R++;
src[PRERELEASEIDENTIFIERLOOSE] = '(?:' + src[NUMERICIDENTIFIERLOOSE] +
                                 '|' + src[NONNUMERICIDENTIFIER] + ')';


// ## Pre-release Version
// Hyphen, followed by one or more dot-separated pre-release version
// identifiers.

var PRERELEASE = R++;
src[PRERELEASE] = '(?:-(' + src[PRERELEASEIDENTIFIER] +
                  '(?:\\.' + src[PRERELEASEIDENTIFIER] + ')*))';

var PRERELEASELOOSE = R++;
src[PRERELEASELOOSE] = '(?:-?(' + src[PRERELEASEIDENTIFIERLOOSE] +
                       '(?:\\.' + src[PRERELEASEIDENTIFIERLOOSE] + ')*))';

// ## Build Metadata Identifier
// Any combination of digits, letters, or hyphens.

var BUILDIDENTIFIER = R++;
src[BUILDIDENTIFIER] = '[0-9A-Za-z-]+';

// ## Build Metadata
// Plus sign, followed by one or more period-separated build metadata
// identifiers.

var BUILD = R++;
src[BUILD] = '(?:\\+(' + src[BUILDIDENTIFIER] +
             '(?:\\.' + src[BUILDIDENTIFIER] + ')*))';


// ## Full Version String
// A main version, followed optionally by a pre-release version and
// build metadata.

// Note that the only major, minor, patch, and pre-release sections of
// the version string are capturing groups.  The build metadata is not a
// capturing group, because it should not ever be used in version
// comparison.

var FULL = R++;
var FULLPLAIN = 'v?' + src[MAINVERSION] +
                src[PRERELEASE] + '?' +
                src[BUILD] + '?';

src[FULL] = '^' + FULLPLAIN + '$';

// like full, but allows v1.2.3 and =1.2.3, which people do sometimes.
// also, 1.0.0alpha1 (prerelease without the hyphen) which is pretty
// common in the npm registry.
var LOOSEPLAIN = '[v=\\s]*' + src[MAINVERSIONLOOSE] +
                 src[PRERELEASELOOSE] + '?' +
                 src[BUILD] + '?';

var LOOSE = R++;
src[LOOSE] = '^' + LOOSEPLAIN + '$';

var GTLT = R++;
src[GTLT] = '((?:<|>)?=?)';

// Something like "2.*" or "1.2.x".
// Note that "x.x" is a valid xRange identifer, meaning "any version"
// Only the first item is strictly required.
var XRANGEIDENTIFIERLOOSE = R++;
src[XRANGEIDENTIFIERLOOSE] = src[NUMERICIDENTIFIERLOOSE] + '|x|X|\\*';
var XRANGEIDENTIFIER = R++;
src[XRANGEIDENTIFIER] = src[NUMERICIDENTIFIER] + '|x|X|\\*';

var XRANGEPLAIN = R++;
src[XRANGEPLAIN] = '[v=\\s]*(' + src[XRANGEIDENTIFIER] + ')' +
                   '(?:\\.(' + src[XRANGEIDENTIFIER] + ')' +
                   '(?:\\.(' + src[XRANGEIDENTIFIER] + ')' +
                   '(?:' + src[PRERELEASE] + ')?' +
                   src[BUILD] + '?' +
                   ')?)?';

var XRANGEPLAINLOOSE = R++;
src[XRANGEPLAINLOOSE] = '[v=\\s]*(' + src[XRANGEIDENTIFIERLOOSE] + ')' +
                        '(?:\\.(' + src[XRANGEIDENTIFIERLOOSE] + ')' +
                        '(?:\\.(' + src[XRANGEIDENTIFIERLOOSE] + ')' +
                        '(?:' + src[PRERELEASELOOSE] + ')?' +
                        src[BUILD] + '?' +
                        ')?)?';

var XRANGE = R++;
src[XRANGE] = '^' + src[GTLT] + '\\s*' + src[XRANGEPLAIN] + '$';
var XRANGELOOSE = R++;
src[XRANGELOOSE] = '^' + src[GTLT] + '\\s*' + src[XRANGEPLAINLOOSE] + '$';

// Coercion.
// Extract anything that could conceivably be a part of a valid semver
var COERCE = R++;
src[COERCE] = '(?:^|[^\\d])' +
              '(\\d{1,' + MAX_SAFE_COMPONENT_LENGTH + '})' +
              '(?:\\.(\\d{1,' + MAX_SAFE_COMPONENT_LENGTH + '}))?' +
              '(?:\\.(\\d{1,' + MAX_SAFE_COMPONENT_LENGTH + '}))?' +
              '(?:$|[^\\d])';

// Tilde ranges.
// Meaning is "reasonably at or greater than"
var LONETILDE = R++;
src[LONETILDE] = '(?:~>?)';

var TILDETRIM = R++;
src[TILDETRIM] = '(\\s*)' + src[LONETILDE] + '\\s+';
re[TILDETRIM] = new RegExp(src[TILDETRIM], 'g');
var tildeTrimReplace = '$1~';

var TILDE = R++;
src[TILDE] = '^' + src[LONETILDE] + src[XRANGEPLAIN] + '$';
var TILDELOOSE = R++;
src[TILDELOOSE] = '^' + src[LONETILDE] + src[XRANGEPLAINLOOSE] + '$';

// Caret ranges.
// Meaning is "at least and backwards compatible with"
var LONECARET = R++;
src[LONECARET] = '(?:\\^)';

var CARETTRIM = R++;
src[CARETTRIM] = '(\\s*)' + src[LONECARET] + '\\s+';
re[CARETTRIM] = new RegExp(src[CARETTRIM], 'g');
var caretTrimReplace = '$1^';

var CARET = R++;
src[CARET] = '^' + src[LONECARET] + src[XRANGEPLAIN] + '$';
var CARETLOOSE = R++;
src[CARETLOOSE] = '^' + src[LONECARET] + src[XRANGEPLAINLOOSE] + '$';

// A simple gt/lt/eq thing, or just "" to indicate "any version"
var COMPARATORLOOSE = R++;
src[COMPARATORLOOSE] = '^' + src[GTLT] + '\\s*(' + LOOSEPLAIN + ')$|^$';
var COMPARATOR = R++;
src[COMPARATOR] = '^' + src[GTLT] + '\\s*(' + FULLPLAIN + ')$|^$';


// An expression to strip any whitespace between the gtlt and the thing
// it modifies, so that `> 1.2.3` ==> `>1.2.3`
var COMPARATORTRIM = R++;
src[COMPARATORTRIM] = '(\\s*)' + src[GTLT] +
                      '\\s*(' + LOOSEPLAIN + '|' + src[XRANGEPLAIN] + ')';

// this one has to use the /g flag
re[COMPARATORTRIM] = new RegExp(src[COMPARATORTRIM], 'g');
var comparatorTrimReplace = '$1$2$3';


// Something like `1.2.3 - 1.2.4`
// Note that these all use the loose form, because they'll be
// checked against either the strict or loose comparator form
// later.
var HYPHENRANGE = R++;
src[HYPHENRANGE] = '^\\s*(' + src[XRANGEPLAIN] + ')' +
                   '\\s+-\\s+' +
                   '(' + src[XRANGEPLAIN] + ')' +
                   '\\s*$';

var HYPHENRANGELOOSE = R++;
src[HYPHENRANGELOOSE] = '^\\s*(' + src[XRANGEPLAINLOOSE] + ')' +
                        '\\s+-\\s+' +
                        '(' + src[XRANGEPLAINLOOSE] + ')' +
                        '\\s*$';

// Star ranges basically just allow anything at all.
var STAR = R++;
src[STAR] = '(<|>)?=?\\s*\\*';

// Compile to actual regexp objects.
// All are flag-free, unless they were created above with a flag.
for (var i = 0; i < R; i++) {
  debug(i, src[i]);
  if (!re[i])
    re[i] = new RegExp(src[i]);
}

exports.parse = parse;
function parse(version, loose) {
  if (version instanceof SemVer)
    return version;

  if (typeof version !== 'string')
    return null;

  if (version.length > MAX_LENGTH)
    return null;

  var r = loose ? re[LOOSE] : re[FULL];
  if (!r.test(version))
    return null;

  try {
    return new SemVer(version, loose);
  } catch (er) {
    return null;
  }
}

exports.valid = valid;
function valid(version, loose) {
  var v = parse(version, loose);
  return v ? v.version : null;
}


exports.clean = clean;
function clean(version, loose) {
  var s = parse(version.trim().replace(/^[=v]+/, ''), loose);
  return s ? s.version : null;
}

exports.SemVer = SemVer;

function SemVer(version, loose) {
  if (version instanceof SemVer) {
    if (version.loose === loose)
      return version;
    else
      version = version.version;
  } else if (typeof version !== 'string') {
    throw new TypeError('Invalid Version: ' + version);
  }

  if (version.length > MAX_LENGTH)
    throw new TypeError('version is longer than ' + MAX_LENGTH + ' characters')

  if (!(this instanceof SemVer))
    return new SemVer(version, loose);

  debug('SemVer', version, loose);
  this.loose = loose;
  var m = version.trim().match(loose ? re[LOOSE] : re[FULL]);

  if (!m)
    throw new TypeError('Invalid Version: ' + version);

  this.raw = version;

  // these are actually numbers
  this.major = +m[1];
  this.minor = +m[2];
  this.patch = +m[3];

  if (this.major > MAX_SAFE_INTEGER || this.major < 0)
    throw new TypeError('Invalid major version')

  if (this.minor > MAX_SAFE_INTEGER || this.minor < 0)
    throw new TypeError('Invalid minor version')

  if (this.patch > MAX_SAFE_INTEGER || this.patch < 0)
    throw new TypeError('Invalid patch version')

  // numberify any prerelease numeric ids
  if (!m[4])
    this.prerelease = [];
  else
    this.prerelease = m[4].split('.').map(function(id) {
      if (/^[0-9]+$/.test(id)) {
        var num = +id;
        if (num >= 0 && num < MAX_SAFE_INTEGER)
          return num;
      }
      return id;
    });

  this.build = m[5] ? m[5].split('.') : [];
  this.format();
}

SemVer.prototype.format = function() {
  this.version = this.major + '.' + this.minor + '.' + this.patch;
  if (this.prerelease.length)
    this.version += '-' + this.prerelease.join('.');
  return this.version;
};

SemVer.prototype.toString = function() {
  return this.version;
};

SemVer.prototype.compare = function(other) {
  debug('SemVer.compare', this.version, this.loose, other);
  if (!(other instanceof SemVer))
    other = new SemVer(other, this.loose);

  return this.compareMain(other) || this.comparePre(other);
};

SemVer.prototype.compareMain = function(other) {
  if (!(other instanceof SemVer))
    other = new SemVer(other, this.loose);

  return compareIdentifiers(this.major, other.major) ||
         compareIdentifiers(this.minor, other.minor) ||
         compareIdentifiers(this.patch, other.patch);
};

SemVer.prototype.comparePre = function(other) {
  if (!(other instanceof SemVer))
    other = new SemVer(other, this.loose);

  // NOT having a prerelease is > having one
  if (this.prerelease.length && !other.prerelease.length)
    return -1;
  else if (!this.prerelease.length && other.prerelease.length)
    return 1;
  else if (!this.prerelease.length && !other.prerelease.length)
    return 0;

  var i = 0;
  do {
    var a = this.prerelease[i];
    var b = other.prerelease[i];
    debug('prerelease compare', i, a, b);
    if (a === undefined && b === undefined)
      return 0;
    else if (b === undefined)
      return 1;
    else if (a === undefined)
      return -1;
    else if (a === b)
      continue;
    else
      return compareIdentifiers(a, b);
  } while (++i);
};

// preminor will bump the version up to the next minor release, and immediately
// down to pre-release. premajor and prepatch work the same way.
SemVer.prototype.inc = function(release, identifier) {
  switch (release) {
    case 'premajor':
      this.prerelease.length = 0;
      this.patch = 0;
      this.minor = 0;
      this.major++;
      this.inc('pre', identifier);
      break;
    case 'preminor':
      this.prerelease.length = 0;
      this.patch = 0;
      this.minor++;
      this.inc('pre', identifier);
      break;
    case 'prepatch':
      // If this is already a prerelease, it will bump to the next version
      // drop any prereleases that might already exist, since they are not
      // relevant at this point.
      this.prerelease.length = 0;
      this.inc('patch', identifier);
      this.inc('pre', identifier);
      break;
    // If the input is a non-prerelease version, this acts the same as
    // prepatch.
    case 'prerelease':
      if (this.prerelease.length === 0)
        this.inc('patch', identifier);
      this.inc('pre', identifier);
      break;

    case 'major':
      // If this is a pre-major version, bump up to the same major version.
      // Otherwise increment major.
      // 1.0.0-5 bumps to 1.0.0
      // 1.1.0 bumps to 2.0.0
      if (this.minor !== 0 || this.patch !== 0 || this.prerelease.length === 0)
        this.major++;
      this.minor = 0;
      this.patch = 0;
      this.prerelease = [];
      break;
    case 'minor':
      // If this is a pre-minor version, bump up to the same minor version.
      // Otherwise increment minor.
      // 1.2.0-5 bumps to 1.2.0
      // 1.2.1 bumps to 1.3.0
      if (this.patch !== 0 || this.prerelease.length === 0)
        this.minor++;
      this.patch = 0;
      this.prerelease = [];
      break;
    case 'patch':
      // If this is not a pre-release version, it will increment the patch.
      // If it is a pre-release it will bump up to the same patch version.
      // 1.2.0-5 patches to 1.2.0
      // 1.2.0 patches to 1.2.1
      if (this.prerelease.length === 0)
        this.patch++;
      this.prerelease = [];
      break;
    // This probably shouldn't be used publicly.
    // 1.0.0 "pre" would become 1.0.0-0 which is the wrong direction.
    case 'pre':
      if (this.prerelease.length === 0)
        this.prerelease = [0];
      else {
        var i = this.prerelease.length;
        while (--i >= 0) {
          if (typeof this.prerelease[i] === 'number') {
            this.prerelease[i]++;
            i = -2;
          }
        }
        if (i === -1) // didn't increment anything
          this.prerelease.push(0);
      }
      if (identifier) {
        // 1.2.0-beta.1 bumps to 1.2.0-beta.2,
        // 1.2.0-beta.fooblz or 1.2.0-beta bumps to 1.2.0-beta.0
        if (this.prerelease[0] === identifier) {
          if (isNaN(this.prerelease[1]))
            this.prerelease = [identifier, 0];
        } else
          this.prerelease = [identifier, 0];
      }
      break;

    default:
      throw new Error('invalid increment argument: ' + release);
  }
  this.format();
  this.raw = this.version;
  return this;
};

exports.inc = inc;
function inc(version, release, loose, identifier) {
  if (typeof(loose) === 'string') {
    identifier = loose;
    loose = undefined;
  }

  try {
    return new SemVer(version, loose).inc(release, identifier).version;
  } catch (er) {
    return null;
  }
}

exports.diff = diff;
function diff(version1, version2) {
  if (eq(version1, version2)) {
    return null;
  } else {
    var v1 = parse(version1);
    var v2 = parse(version2);
    if (v1.prerelease.length || v2.prerelease.length) {
      for (var key in v1) {
        if (key === 'major' || key === 'minor' || key === 'patch') {
          if (v1[key] !== v2[key]) {
            return 'pre'+key;
          }
        }
      }
      return 'prerelease';
    }
    for (var key in v1) {
      if (key === 'major' || key === 'minor' || key === 'patch') {
        if (v1[key] !== v2[key]) {
          return key;
        }
      }
    }
  }
}

exports.compareIdentifiers = compareIdentifiers;

var numeric = /^[0-9]+$/;
function compareIdentifiers(a, b) {
  var anum = numeric.test(a);
  var bnum = numeric.test(b);

  if (anum && bnum) {
    a = +a;
    b = +b;
  }

  return (anum && !bnum) ? -1 :
         (bnum && !anum) ? 1 :
         a < b ? -1 :
         a > b ? 1 :
         0;
}

exports.rcompareIdentifiers = rcompareIdentifiers;
function rcompareIdentifiers(a, b) {
  return compareIdentifiers(b, a);
}

exports.major = major;
function major(a, loose) {
  return new SemVer(a, loose).major;
}

exports.minor = minor;
function minor(a, loose) {
  return new SemVer(a, loose).minor;
}

exports.patch = patch;
function patch(a, loose) {
  return new SemVer(a, loose).patch;
}

exports.compare = compare;
function compare(a, b, loose) {
  return new SemVer(a, loose).compare(new SemVer(b, loose));
}

exports.compareLoose = compareLoose;
function compareLoose(a, b) {
  return compare(a, b, true);
}

exports.rcompare = rcompare;
function rcompare(a, b, loose) {
  return compare(b, a, loose);
}

exports.sort = sort;
function sort(list, loose) {
  return list.sort(function(a, b) {
    return exports.compare(a, b, loose);
  });
}

exports.rsort = rsort;
function rsort(list, loose) {
  return list.sort(function(a, b) {
    return exports.rcompare(a, b, loose);
  });
}

exports.gt = gt;
function gt(a, b, loose) {
  return compare(a, b, loose) > 0;
}

exports.lt = lt;
function lt(a, b, loose) {
  return compare(a, b, loose) < 0;
}

exports.eq = eq;
function eq(a, b, loose) {
  return compare(a, b, loose) === 0;
}

exports.neq = neq;
function neq(a, b, loose) {
  return compare(a, b, loose) !== 0;
}

exports.gte = gte;
function gte(a, b, loose) {
  return compare(a, b, loose) >= 0;
}

exports.lte = lte;
function lte(a, b, loose) {
  return compare(a, b, loose) <= 0;
}

exports.cmp = cmp;
function cmp(a, op, b, loose) {
  var ret;
  switch (op) {
    case '===':
      if (typeof a === 'object') a = a.version;
      if (typeof b === 'object') b = b.version;
      ret = a === b;
      break;
    case '!==':
      if (typeof a === 'object') a = a.version;
      if (typeof b === 'object') b = b.version;
      ret = a !== b;
      break;
    case '': case '=': case '==': ret = eq(a, b, loose); break;
    case '!=': ret = neq(a, b, loose); break;
    case '>': ret = gt(a, b, loose); break;
    case '>=': ret = gte(a, b, loose); break;
    case '<': ret = lt(a, b, loose); break;
    case '<=': ret = lte(a, b, loose); break;
    default: throw new TypeError('Invalid operator: ' + op);
  }
  return ret;
}

exports.Comparator = Comparator;
function Comparator(comp, loose) {
  if (comp instanceof Comparator) {
    if (comp.loose === loose)
      return comp;
    else
      comp = comp.value;
  }

  if (!(this instanceof Comparator))
    return new Comparator(comp, loose);

  debug('comparator', comp, loose);
  this.loose = loose;
  this.parse(comp);

  if (this.semver === ANY)
    this.value = '';
  else
    this.value = this.operator + this.semver.version;

  debug('comp', this);
}

var ANY = {};
Comparator.prototype.parse = function(comp) {
  var r = this.loose ? re[COMPARATORLOOSE] : re[COMPARATOR];
  var m = comp.match(r);

  if (!m)
    throw new TypeError('Invalid comparator: ' + comp);

  this.operator = m[1];
  if (this.operator === '=')
    this.operator = '';

  // if it literally is just '>' or '' then allow anything.
  if (!m[2])
    this.semver = ANY;
  else
    this.semver = new SemVer(m[2], this.loose);
};

Comparator.prototype.toString = function() {
  return this.value;
};

Comparator.prototype.test = function(version) {
  debug('Comparator.test', version, this.loose);

  if (this.semver === ANY)
    return true;

  if (typeof version === 'string')
    version = new SemVer(version, this.loose);

  return cmp(version, this.operator, this.semver, this.loose);
};

Comparator.prototype.intersects = function(comp, loose) {
  if (!(comp instanceof Comparator)) {
    throw new TypeError('a Comparator is required');
  }

  var rangeTmp;

  if (this.operator === '') {
    rangeTmp = new Range(comp.value, loose);
    return satisfies(this.value, rangeTmp, loose);
  } else if (comp.operator === '') {
    rangeTmp = new Range(this.value, loose);
    return satisfies(comp.semver, rangeTmp, loose);
  }

  var sameDirectionIncreasing =
    (this.operator === '>=' || this.operator === '>') &&
    (comp.operator === '>=' || comp.operator === '>');
  var sameDirectionDecreasing =
    (this.operator === '<=' || this.operator === '<') &&
    (comp.operator === '<=' || comp.operator === '<');
  var sameSemVer = this.semver.version === comp.semver.version;
  var differentDirectionsInclusive =
    (this.operator === '>=' || this.operator === '<=') &&
    (comp.operator === '>=' || comp.operator === '<=');
  var oppositeDirectionsLessThan =
    cmp(this.semver, '<', comp.semver, loose) &&
    ((this.operator === '>=' || this.operator === '>') &&
    (comp.operator === '<=' || comp.operator === '<'));
  var oppositeDirectionsGreaterThan =
    cmp(this.semver, '>', comp.semver, loose) &&
    ((this.operator === '<=' || this.operator === '<') &&
    (comp.operator === '>=' || comp.operator === '>'));

  return sameDirectionIncreasing || sameDirectionDecreasing ||
    (sameSemVer && differentDirectionsInclusive) ||
    oppositeDirectionsLessThan || oppositeDirectionsGreaterThan;
};


exports.Range = Range;
function Range(range, loose) {
  if (range instanceof Range) {
    if (range.loose === loose) {
      return range;
    } else {
      return new Range(range.raw, loose);
    }
  }

  if (range instanceof Comparator) {
    return new Range(range.value, loose);
  }

  if (!(this instanceof Range))
    return new Range(range, loose);

  this.loose = loose;

  // First, split based on boolean or ||
  this.raw = range;
  this.set = range.split(/\s*\|\|\s*/).map(function(range) {
    return this.parseRange(range.trim());
  }, this).filter(function(c) {
    // throw out any that are not relevant for whatever reason
    return c.length;
  });

  if (!this.set.length) {
    throw new TypeError('Invalid SemVer Range: ' + range);
  }

  this.format();
}

Range.prototype.format = function() {
  this.range = this.set.map(function(comps) {
    return comps.join(' ').trim();
  }).join('||').trim();
  return this.range;
};

Range.prototype.toString = function() {
  return this.range;
};

Range.prototype.parseRange = function(range) {
  var loose = this.loose;
  range = range.trim();
  debug('range', range, loose);
  // `1.2.3 - 1.2.4` => `>=1.2.3 <=1.2.4`
  var hr = loose ? re[HYPHENRANGELOOSE] : re[HYPHENRANGE];
  range = range.replace(hr, hyphenReplace);
  debug('hyphen replace', range);
  // `> 1.2.3 < 1.2.5` => `>1.2.3 <1.2.5`
  range = range.replace(re[COMPARATORTRIM], comparatorTrimReplace);
  debug('comparator trim', range, re[COMPARATORTRIM]);

  // `~ 1.2.3` => `~1.2.3`
  range = range.replace(re[TILDETRIM], tildeTrimReplace);

  // `^ 1.2.3` => `^1.2.3`
  range = range.replace(re[CARETTRIM], caretTrimReplace);

  // normalize spaces
  range = range.split(/\s+/).join(' ');

  // At this point, the range is completely trimmed and
  // ready to be split into comparators.

  var compRe = loose ? re[COMPARATORLOOSE] : re[COMPARATOR];
  var set = range.split(' ').map(function(comp) {
    return parseComparator(comp, loose);
  }).join(' ').split(/\s+/);
  if (this.loose) {
    // in loose mode, throw out any that are not valid comparators
    set = set.filter(function(comp) {
      return !!comp.match(compRe);
    });
  }
  set = set.map(function(comp) {
    return new Comparator(comp, loose);
  });

  return set;
};

Range.prototype.intersects = function(range, loose) {
  if (!(range instanceof Range)) {
    throw new TypeError('a Range is required');
  }

  return this.set.some(function(thisComparators) {
    return thisComparators.every(function(thisComparator) {
      return range.set.some(function(rangeComparators) {
        return rangeComparators.every(function(rangeComparator) {
          return thisComparator.intersects(rangeComparator, loose);
        });
      });
    });
  });
};

// Mostly just for testing and legacy API reasons
exports.toComparators = toComparators;
function toComparators(range, loose) {
  return new Range(range, loose).set.map(function(comp) {
    return comp.map(function(c) {
      return c.value;
    }).join(' ').trim().split(' ');
  });
}

// comprised of xranges, tildes, stars, and gtlt's at this point.
// already replaced the hyphen ranges
// turn into a set of JUST comparators.
function parseComparator(comp, loose) {
  debug('comp', comp);
  comp = replaceCarets(comp, loose);
  debug('caret', comp);
  comp = replaceTildes(comp, loose);
  debug('tildes', comp);
  comp = replaceXRanges(comp, loose);
  debug('xrange', comp);
  comp = replaceStars(comp, loose);
  debug('stars', comp);
  return comp;
}

function isX(id) {
  return !id || id.toLowerCase() === 'x' || id === '*';
}

// ~, ~> --> * (any, kinda silly)
// ~2, ~2.x, ~2.x.x, ~>2, ~>2.x ~>2.x.x --> >=2.0.0 <3.0.0
// ~2.0, ~2.0.x, ~>2.0, ~>2.0.x --> >=2.0.0 <2.1.0
// ~1.2, ~1.2.x, ~>1.2, ~>1.2.x --> >=1.2.0 <1.3.0
// ~1.2.3, ~>1.2.3 --> >=1.2.3 <1.3.0
// ~1.2.0, ~>1.2.0 --> >=1.2.0 <1.3.0
function replaceTildes(comp, loose) {
  return comp.trim().split(/\s+/).map(function(comp) {
    return replaceTilde(comp, loose);
  }).join(' ');
}

function replaceTilde(comp, loose) {
  var r = loose ? re[TILDELOOSE] : re[TILDE];
  return comp.replace(r, function(_, M, m, p, pr) {
    debug('tilde', comp, _, M, m, p, pr);
    var ret;

    if (isX(M))
      ret = '';
    else if (isX(m))
      ret = '>=' + M + '.0.0 <' + (+M + 1) + '.0.0';
    else if (isX(p))
      // ~1.2 == >=1.2.0 <1.3.0
      ret = '>=' + M + '.' + m + '.0 <' + M + '.' + (+m + 1) + '.0';
    else if (pr) {
      debug('replaceTilde pr', pr);
      if (pr.charAt(0) !== '-')
        pr = '-' + pr;
      ret = '>=' + M + '.' + m + '.' + p + pr +
            ' <' + M + '.' + (+m + 1) + '.0';
    } else
      // ~1.2.3 == >=1.2.3 <1.3.0
      ret = '>=' + M + '.' + m + '.' + p +
            ' <' + M + '.' + (+m + 1) + '.0';

    debug('tilde return', ret);
    return ret;
  });
}

// ^ --> * (any, kinda silly)
// ^2, ^2.x, ^2.x.x --> >=2.0.0 <3.0.0
// ^2.0, ^2.0.x --> >=2.0.0 <3.0.0
// ^1.2, ^1.2.x --> >=1.2.0 <2.0.0
// ^1.2.3 --> >=1.2.3 <2.0.0
// ^1.2.0 --> >=1.2.0 <2.0.0
function replaceCarets(comp, loose) {
  return comp.trim().split(/\s+/).map(function(comp) {
    return replaceCaret(comp, loose);
  }).join(' ');
}

function replaceCaret(comp, loose) {
  debug('caret', comp, loose);
  var r = loose ? re[CARETLOOSE] : re[CARET];
  return comp.replace(r, function(_, M, m, p, pr) {
    debug('caret', comp, _, M, m, p, pr);
    var ret;

    if (isX(M))
      ret = '';
    else if (isX(m))
      ret = '>=' + M + '.0.0 <' + (+M + 1) + '.0.0';
    else if (isX(p)) {
      if (M === '0')
        ret = '>=' + M + '.' + m + '.0 <' + M + '.' + (+m + 1) + '.0';
      else
        ret = '>=' + M + '.' + m + '.0 <' + (+M + 1) + '.0.0';
    } else if (pr) {
      debug('replaceCaret pr', pr);
      if (pr.charAt(0) !== '-')
        pr = '-' + pr;
      if (M === '0') {
        if (m === '0')
          ret = '>=' + M + '.' + m + '.' + p + pr +
                ' <' + M + '.' + m + '.' + (+p + 1);
        else
          ret = '>=' + M + '.' + m + '.' + p + pr +
                ' <' + M + '.' + (+m + 1) + '.0';
      } else
        ret = '>=' + M + '.' + m + '.' + p + pr +
              ' <' + (+M + 1) + '.0.0';
    } else {
      debug('no pr');
      if (M === '0') {
        if (m === '0')
          ret = '>=' + M + '.' + m + '.' + p +
                ' <' + M + '.' + m + '.' + (+p + 1);
        else
          ret = '>=' + M + '.' + m + '.' + p +
                ' <' + M + '.' + (+m + 1) + '.0';
      } else
        ret = '>=' + M + '.' + m + '.' + p +
              ' <' + (+M + 1) + '.0.0';
    }

    debug('caret return', ret);
    return ret;
  });
}

function replaceXRanges(comp, loose) {
  debug('replaceXRanges', comp, loose);
  return comp.split(/\s+/).map(function(comp) {
    return replaceXRange(comp, loose);
  }).join(' ');
}

function replaceXRange(comp, loose) {
  comp = comp.trim();
  var r = loose ? re[XRANGELOOSE] : re[XRANGE];
  return comp.replace(r, function(ret, gtlt, M, m, p, pr) {
    debug('xRange', comp, ret, gtlt, M, m, p, pr);
    var xM = isX(M);
    var xm = xM || isX(m);
    var xp = xm || isX(p);
    var anyX = xp;

    if (gtlt === '=' && anyX)
      gtlt = '';

    if (xM) {
      if (gtlt === '>' || gtlt === '<') {
        // nothing is allowed
        ret = '<0.0.0';
      } else {
        // nothing is forbidden
        ret = '*';
      }
    } else if (gtlt && anyX) {
      // replace X with 0
      if (xm)
        m = 0;
      if (xp)
        p = 0;

      if (gtlt === '>') {
        // >1 => >=2.0.0
        // >1.2 => >=1.3.0
        // >1.2.3 => >= 1.2.4
        gtlt = '>=';
        if (xm) {
          M = +M + 1;
          m = 0;
          p = 0;
        } else if (xp) {
          m = +m + 1;
          p = 0;
        }
      } else if (gtlt === '<=') {
        // <=0.7.x is actually <0.8.0, since any 0.7.x should
        // pass.  Similarly, <=7.x is actually <8.0.0, etc.
        gtlt = '<';
        if (xm)
          M = +M + 1;
        else
          m = +m + 1;
      }

      ret = gtlt + M + '.' + m + '.' + p;
    } else if (xm) {
      ret = '>=' + M + '.0.0 <' + (+M + 1) + '.0.0';
    } else if (xp) {
      ret = '>=' + M + '.' + m + '.0 <' + M + '.' + (+m + 1) + '.0';
    }

    debug('xRange return', ret);

    return ret;
  });
}

// Because * is AND-ed with everything else in the comparator,
// and '' means "any version", just remove the *s entirely.
function replaceStars(comp, loose) {
  debug('replaceStars', comp, loose);
  // Looseness is ignored here.  star is always as loose as it gets!
  return comp.trim().replace(re[STAR], '');
}

// This function is passed to string.replace(re[HYPHENRANGE])
// M, m, patch, prerelease, build
// 1.2 - 3.4.5 => >=1.2.0 <=3.4.5
// 1.2.3 - 3.4 => >=1.2.0 <3.5.0 Any 3.4.x will do
// 1.2 - 3.4 => >=1.2.0 <3.5.0
function hyphenReplace($0,
                       from, fM, fm, fp, fpr, fb,
                       to, tM, tm, tp, tpr, tb) {

  if (isX(fM))
    from = '';
  else if (isX(fm))
    from = '>=' + fM + '.0.0';
  else if (isX(fp))
    from = '>=' + fM + '.' + fm + '.0';
  else
    from = '>=' + from;

  if (isX(tM))
    to = '';
  else if (isX(tm))
    to = '<' + (+tM + 1) + '.0.0';
  else if (isX(tp))
    to = '<' + tM + '.' + (+tm + 1) + '.0';
  else if (tpr)
    to = '<=' + tM + '.' + tm + '.' + tp + '-' + tpr;
  else
    to = '<=' + to;

  return (from + ' ' + to).trim();
}


// if ANY of the sets match ALL of its comparators, then pass
Range.prototype.test = function(version) {
  if (!version)
    return false;

  if (typeof version === 'string')
    version = new SemVer(version, this.loose);

  for (var i = 0; i < this.set.length; i++) {
    if (testSet(this.set[i], version))
      return true;
  }
  return false;
};

function testSet(set, version) {
  for (var i = 0; i < set.length; i++) {
    if (!set[i].test(version))
      return false;
  }

  if (version.prerelease.length) {
    // Find the set of versions that are allowed to have prereleases
    // For example, ^1.2.3-pr.1 desugars to >=1.2.3-pr.1 <2.0.0
    // That should allow `1.2.3-pr.2` to pass.
    // However, `1.2.4-alpha.notready` should NOT be allowed,
    // even though it's within the range set by the comparators.
    for (var i = 0; i < set.length; i++) {
      debug(set[i].semver);
      if (set[i].semver === ANY)
        continue;

      if (set[i].semver.prerelease.length > 0) {
        var allowed = set[i].semver;
        if (allowed.major === version.major &&
            allowed.minor === version.minor &&
            allowed.patch === version.patch)
          return true;
      }
    }

    // Version has a -pre, but it's not one of the ones we like.
    return false;
  }

  return true;
}

exports.satisfies = satisfies;
function satisfies(version, range, loose) {
  try {
    range = new Range(range, loose);
  } catch (er) {
    return false;
  }
  return range.test(version);
}

exports.maxSatisfying = maxSatisfying;
function maxSatisfying(versions, range, loose) {
  var max = null;
  var maxSV = null;
  try {
    var rangeObj = new Range(range, loose);
  } catch (er) {
    return null;
  }
  versions.forEach(function (v) {
    if (rangeObj.test(v)) { // satisfies(v, range, loose)
      if (!max || maxSV.compare(v) === -1) { // compare(max, v, true)
        max = v;
        maxSV = new SemVer(max, loose);
      }
    }
  })
  return max;
}

exports.minSatisfying = minSatisfying;
function minSatisfying(versions, range, loose) {
  var min = null;
  var minSV = null;
  try {
    var rangeObj = new Range(range, loose);
  } catch (er) {
    return null;
  }
  versions.forEach(function (v) {
    if (rangeObj.test(v)) { // satisfies(v, range, loose)
      if (!min || minSV.compare(v) === 1) { // compare(min, v, true)
        min = v;
        minSV = new SemVer(min, loose);
      }
    }
  })
  return min;
}

exports.validRange = validRange;
function validRange(range, loose) {
  try {
    // Return '*' instead of '' so that truthiness works.
    // This will throw if it's invalid anyway
    return new Range(range, loose).range || '*';
  } catch (er) {
    return null;
  }
}

// Determine if version is less than all the versions possible in the range
exports.ltr = ltr;
function ltr(version, range, loose) {
  return outside(version, range, '<', loose);
}

// Determine if version is greater than all the versions possible in the range.
exports.gtr = gtr;
function gtr(version, range, loose) {
  return outside(version, range, '>', loose);
}

exports.outside = outside;
function outside(version, range, hilo, loose) {
  version = new SemVer(version, loose);
  range = new Range(range, loose);

  var gtfn, ltefn, ltfn, comp, ecomp;
  switch (hilo) {
    case '>':
      gtfn = gt;
      ltefn = lte;
      ltfn = lt;
      comp = '>';
      ecomp = '>=';
      break;
    case '<':
      gtfn = lt;
      ltefn = gte;
      ltfn = gt;
      comp = '<';
      ecomp = '<=';
      break;
    default:
      throw new TypeError('Must provide a hilo val of "<" or ">"');
  }

  // If it satisifes the range it is not outside
  if (satisfies(version, range, loose)) {
    return false;
  }

  // From now on, variable terms are as if we're in "gtr" mode.
  // but note that everything is flipped for the "ltr" function.

  for (var i = 0; i < range.set.length; ++i) {
    var comparators = range.set[i];

    var high = null;
    var low = null;

    comparators.forEach(function(comparator) {
      if (comparator.semver === ANY) {
        comparator = new Comparator('>=0.0.0')
      }
      high = high || comparator;
      low = low || comparator;
      if (gtfn(comparator.semver, high.semver, loose)) {
        high = comparator;
      } else if (ltfn(comparator.semver, low.semver, loose)) {
        low = comparator;
      }
    });

    // If the edge version comparator has a operator then our version
    // isn't outside it
    if (high.operator === comp || high.operator === ecomp) {
      return false;
    }

    // If the lowest version comparator has an operator and our version
    // is less than it then it isn't higher than the range
    if ((!low.operator || low.operator === comp) &&
        ltefn(version, low.semver)) {
      return false;
    } else if (low.operator === ecomp && ltfn(version, low.semver)) {
      return false;
    }
  }
  return true;
}

exports.prerelease = prerelease;
function prerelease(version, loose) {
  var parsed = parse(version, loose);
  return (parsed && parsed.prerelease.length) ? parsed.prerelease : null;
}

exports.intersects = intersects;
function intersects(r1, r2, loose) {
  r1 = new Range(r1, loose)
  r2 = new Range(r2, loose)
  return r1.intersects(r2)
}

exports.coerce = coerce;
function coerce(version) {
  if (version instanceof SemVer)
    return version;

  if (typeof version !== 'string')
    return null;

  var match = version.match(re[COERCE]);

  if (match == null)
    return null;

  return parse((match[1] || '0') + '.' + (match[2] || '0') + '.' + (match[3] || '0')); 
}

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(28)))

/***/ }),
/* 56 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var backtracking_parser_1 = __webpack_require__(57);
var utils_1 = __webpack_require__(0);
var matchers_1 = __webpack_require__(3);
describe("Simple backtracking example", function () {
    // for side effect of augmenting the tokens metadata
    new backtracking_parser_1.BackTrackingParser();
    // TODO: modify example to use the Chevrotain Lexer to increase readability
    var largeFqnTokenVector = [
        matchers_1.createRegularToken(backtracking_parser_1.IdentTok, "ns1"),
        matchers_1.createRegularToken(backtracking_parser_1.DotTok, "."),
        matchers_1.createRegularToken(backtracking_parser_1.IdentTok, "ns2"),
        matchers_1.createRegularToken(backtracking_parser_1.DotTok, "."),
        matchers_1.createRegularToken(backtracking_parser_1.IdentTok, "ns3"),
        matchers_1.createRegularToken(backtracking_parser_1.DotTok, "."),
        matchers_1.createRegularToken(backtracking_parser_1.IdentTok, "ns4"),
        matchers_1.createRegularToken(backtracking_parser_1.DotTok, "."),
        matchers_1.createRegularToken(backtracking_parser_1.IdentTok, "ns5"),
        matchers_1.createRegularToken(backtracking_parser_1.DotTok, "."),
        matchers_1.createRegularToken(backtracking_parser_1.IdentTok, "ns6"),
        matchers_1.createRegularToken(backtracking_parser_1.DotTok, "."),
        matchers_1.createRegularToken(backtracking_parser_1.IdentTok, "ns7"),
        matchers_1.createRegularToken(backtracking_parser_1.DotTok, "."),
        matchers_1.createRegularToken(backtracking_parser_1.IdentTok, "ns8"),
        matchers_1.createRegularToken(backtracking_parser_1.DotTok, "."),
        matchers_1.createRegularToken(backtracking_parser_1.IdentTok, "ns9"),
        matchers_1.createRegularToken(backtracking_parser_1.DotTok, "."),
        matchers_1.createRegularToken(backtracking_parser_1.IdentTok, "ns10"),
        matchers_1.createRegularToken(backtracking_parser_1.DotTok, "."),
        matchers_1.createRegularToken(backtracking_parser_1.IdentTok, "ns11"),
        matchers_1.createRegularToken(backtracking_parser_1.DotTok, "."),
        matchers_1.createRegularToken(backtracking_parser_1.IdentTok, "ns12")
    ];
    // element A:ns1.ns2.ns3.ns4.ns5.ns6.ns7.ns8.ns9.ns10.ns11.ns12 default 666;
    // new ElementTok(1, 1), new IdentTok("A" , 0, 1, 1), new ColonTok(1,1),
    // largeFqnTokenVector,new DefaultTok(1,1), new NumberTok(1,1,"666"), createRegularToken(SemiColonTok, ";")
    it("can parse an element with Equals and a very long qualified name", function () {
        var input = utils_1.flatten([
            // element A:ns1.ns2.ns3.ns4.ns5.ns6.ns7.ns8.ns9.ns10.ns11.ns12 = 666;
            matchers_1.createRegularToken(backtracking_parser_1.ElementTok, "element"),
            matchers_1.createRegularToken(backtracking_parser_1.IdentTok, "A"),
            matchers_1.createRegularToken(backtracking_parser_1.ColonTok, ":"),
            largeFqnTokenVector,
            matchers_1.createRegularToken(backtracking_parser_1.EqualsTok, "="),
            matchers_1.createRegularToken(backtracking_parser_1.NumberTok, "666"),
            matchers_1.createRegularToken(backtracking_parser_1.SemiColonTok, ";")
        ]);
        var parser = new backtracking_parser_1.BackTrackingParser();
        parser.input = input;
        var result = parser.statement();
        expect(parser.errors.length).to.equal(0);
        expect(result).to.equal(backtracking_parser_1.RET_TYPE.WITH_EQUALS);
    });
    it("can parse an element with Default and a very long qualified name", function () {
        var input = utils_1.flatten([
            // element A:ns1.ns2.ns3.ns4.ns5.ns6.ns7.ns8.ns9.ns10.ns11.ns12 default 666;
            matchers_1.createRegularToken(backtracking_parser_1.ElementTok, "element"),
            matchers_1.createRegularToken(backtracking_parser_1.IdentTok, "A"),
            matchers_1.createRegularToken(backtracking_parser_1.ColonTok, ":"),
            largeFqnTokenVector,
            matchers_1.createRegularToken(backtracking_parser_1.DefaultTok, "deafult"),
            matchers_1.createRegularToken(backtracking_parser_1.NumberTok, "666"),
            matchers_1.createRegularToken(backtracking_parser_1.SemiColonTok, ";")
        ]);
        var parser = new backtracking_parser_1.BackTrackingParser();
        parser.input = input;
        var result = parser.statement();
        expect(parser.errors.length).to.equal(0);
        expect(result).to.equal(backtracking_parser_1.RET_TYPE.WITH_DEFAULT);
    });
});
//# sourceMappingURL=backtracking_parser_spec.js.map

/***/ }),
/* 57 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// DOCS: simple language with two statements which require backtracking to differentiate during parse time
//       element A:ns1.ns2...nsN = 5;
//       element B:ns1.ns2...nsN default 5;
// generally one should avoid having to use backtracking, and this specific example can be resolved by parsing
// both statements in a single rule and only distinguishing between them later, but lets see an example of using backtracking :)
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var parser_traits_1 = __webpack_require__(5);
var RET_TYPE;
(function (RET_TYPE) {
    RET_TYPE[RET_TYPE["WITH_DEFAULT"] = 0] = "WITH_DEFAULT";
    RET_TYPE[RET_TYPE["WITH_EQUALS"] = 1] = "WITH_EQUALS";
    RET_TYPE[RET_TYPE["QUALIFED_NAME"] = 2] = "QUALIFED_NAME";
    RET_TYPE[RET_TYPE["INVALID_WITH_DEFAULT"] = 3] = "INVALID_WITH_DEFAULT";
    RET_TYPE[RET_TYPE["INVALID_WITH_EQUALS"] = 4] = "INVALID_WITH_EQUALS";
    RET_TYPE[RET_TYPE["INVALID_STATEMENT"] = 5] = "INVALID_STATEMENT";
    RET_TYPE[RET_TYPE["INVALID_FQN"] = 6] = "INVALID_FQN";
})(RET_TYPE = exports.RET_TYPE || (exports.RET_TYPE = {}));
var NumberTok = /** @class */ (function () {
    function NumberTok() {
    }
    NumberTok.PATTERN = /NA/;
    return NumberTok;
}());
exports.NumberTok = NumberTok;
var ElementTok = /** @class */ (function () {
    function ElementTok() {
    }
    ElementTok.PATTERN = /NA/;
    return ElementTok;
}());
exports.ElementTok = ElementTok;
var DefaultTok = /** @class */ (function () {
    function DefaultTok() {
    }
    DefaultTok.PATTERN = /NA/;
    return DefaultTok;
}());
exports.DefaultTok = DefaultTok;
var DotTok = /** @class */ (function () {
    function DotTok() {
    }
    DotTok.PATTERN = /NA/;
    return DotTok;
}());
exports.DotTok = DotTok;
var ColonTok = /** @class */ (function () {
    function ColonTok() {
    }
    ColonTok.PATTERN = /NA/;
    return ColonTok;
}());
exports.ColonTok = ColonTok;
var EqualsTok = /** @class */ (function () {
    function EqualsTok() {
    }
    EqualsTok.PATTERN = /NA/;
    return EqualsTok;
}());
exports.EqualsTok = EqualsTok;
var SemiColonTok = /** @class */ (function () {
    function SemiColonTok() {
    }
    SemiColonTok.PATTERN = /NA/;
    return SemiColonTok;
}());
exports.SemiColonTok = SemiColonTok;
var IdentTok = /** @class */ (function () {
    function IdentTok() {
    }
    IdentTok.PATTERN = /NA/;
    return IdentTok;
}());
exports.IdentTok = IdentTok;
var configuration = {
    outputCst: false,
    ignoredIssues: {
        statement: { OR: true }
    }
};
// extending the BaseErrorRecoveryRecognizer in this example because it too has logic related to backtracking
// that needs to be tested too.
var BackTrackingParser = /** @class */ (function (_super) {
    __extends(BackTrackingParser, _super);
    function BackTrackingParser() {
        var _this = 
        // DOCS: note the second parameter in the super class. this is the namespace in which the token constructors are defined.
        //       it is mandatory to provide this map to be able to perform self analysis
        //       and allow the framework to "understand" the implemented grammar.
        _super.call(this, [
            NumberTok,
            ElementTok,
            DefaultTok,
            DotTok,
            ColonTok,
            EqualsTok,
            SemiColonTok,
            IdentTok
        ], configuration) || this;
        _this.statement = _this.RULE("statement", _this.parseStatement, {
            recoveryValueFunc: INVALID(RET_TYPE.INVALID_STATEMENT)
        });
        _this.withEqualsStatement = _this.RULE("withEqualsStatement", _this.parseWithEqualsStatement, { recoveryValueFunc: INVALID(RET_TYPE.INVALID_WITH_EQUALS) });
        _this.withDefaultStatement = _this.RULE("withDefaultStatement", _this.parseWithDefaultStatement, {
            recoveryValueFunc: INVALID(RET_TYPE.INVALID_WITH_DEFAULT)
        });
        _this.qualifiedName = _this.RULE("qualifiedName", _this.parseQualifiedName, {
            recoveryValueFunc: INVALID(RET_TYPE.INVALID_FQN),
            resyncEnabled: false
        });
        // DOCS: The call to performSelfAnalysis needs to happen after all the RULEs have been defined
        //       The typescript compiler places the constructor body last after initializations in the class's body
        //       which is why place the call here meets the criteria.
        _this.performSelfAnalysis();
        return _this;
    }
    BackTrackingParser.prototype.parseStatement = function () {
        var _this = this;
        var statementTypeFound = undefined;
        this.OR([
            // both statements have the same prefix which may be of "infinite" length, this means there is no K for which
            // we can build an LL(K) parser that can distinguish the two alternatives as a negative example
            // would be to simply create a qualifiedName with a length of k+1.
            {
                GATE: this.BACKTRACK(this.withEqualsStatement),
                ALT: function () {
                    statementTypeFound = _this.SUBRULE8(_this.withEqualsStatement);
                }
            },
            {
                GATE: this.BACKTRACK(this.withDefaultStatement),
                ALT: function () {
                    statementTypeFound = _this.SUBRULE9(_this.withDefaultStatement);
                }
            }
        ]);
        return statementTypeFound;
    };
    BackTrackingParser.prototype.parseWithEqualsStatement = function () {
        this.CONSUME(ElementTok);
        this.CONSUME6(IdentTok);
        this.CONSUME7(ColonTok);
        this.SUBRULE7(this.qualifiedName); // this rule creates the no fixed look ahead issue
        this.CONSUME8(EqualsTok);
        this.CONSUME9(NumberTok);
        this.CONSUME(SemiColonTok);
        return RET_TYPE.WITH_EQUALS;
    };
    BackTrackingParser.prototype.parseWithDefaultStatement = function () {
        this.CONSUME(ElementTok);
        this.CONSUME(IdentTok);
        this.CONSUME(ColonTok);
        this.SUBRULE6(this.qualifiedName); // this rule creates the no fixed look ahead issue
        this.CONSUME(DefaultTok);
        this.CONSUME(NumberTok);
        this.CONSUME(SemiColonTok);
        return RET_TYPE.WITH_DEFAULT;
    };
    BackTrackingParser.prototype.parseQualifiedName = function () {
        var _this = this;
        this.CONSUME(IdentTok);
        this.MANY(function () {
            _this.CONSUME(DotTok);
            _this.CONSUME2(IdentTok);
        });
        return RET_TYPE.QUALIFED_NAME;
    };
    return BackTrackingParser;
}(parser_traits_1.Parser));
exports.BackTrackingParser = BackTrackingParser;
function INVALID(stmtType) {
    return function () {
        return stmtType;
    };
}
exports.INVALID = INVALID;
//# sourceMappingURL=backtracking_parser.js.map

/***/ }),
/* 58 */
/***/ (function(module, exports, __webpack_require__) {

// the ecmaQuirks parser uses /y regExp flag
if (typeof new RegExp("(?:)").sticky === "boolean") {
    var parse_1 = __webpack_require__(59).parse;
    describe("ECMAScript Quirks Example (ScannerLess Mode)", function () {
        it("can parse a valid text successfully", function () {
            var result = parse_1("return ;");
            expect(result.errors).to.be.empty;
        });
        it("can parse a valid text successfully #2", function () {
            var result = parse_1("return 1;");
            expect(result.errors).to.be.empty;
        });
        it("can parse a valid text successfully #3 - Division", function () {
            var result = parse_1("return 8 / 2 ;");
            expect(result.errors).to.be.empty;
        });
        it("can parse a valid text successfully #3 - RegExp", function () {
            var result = parse_1("return /123/ ;");
            expect(result.errors).to.be.empty;
        });
        it("can parse a valid text successfully #3 - RegExp and Division", function () {
            var result = parse_1("return /123/ / 5 ;");
            expect(result.errors).to.be.empty;
        });
    });
}
//# sourceMappingURL=ecma_quirks_spec.js.map

/***/ }),
/* 59 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var tokens_public_1 = __webpack_require__(1);
var lexer_public_1 = __webpack_require__(9);
var parser_traits_1 = __webpack_require__(5);
var parser_1 = __webpack_require__(4);
var exceptions_public_1 = __webpack_require__(8);
var utils_1 = __webpack_require__(0);
var Return = tokens_public_1.createToken({
    name: "Return",
    pattern: /return/
});
var DivisionOperator = tokens_public_1.createToken({
    name: "DivisionOperator",
    pattern: /\//
});
var RegExpLiteral = tokens_public_1.createToken({
    name: "RegExpLiteral",
    pattern: /\/\d+\//
});
var NumberLiteral = tokens_public_1.createToken({
    name: "NumberLiteral",
    pattern: /\d+/
});
// todo differentiate line terminators and other whitespace?
var WhiteSpace = tokens_public_1.createToken({
    name: "WhiteSpace",
    pattern: /\s+/,
    group: lexer_public_1.Lexer.SKIPPED,
    line_breaks: true
});
var Semicolon = tokens_public_1.createToken({
    name: "Semicolon",
    pattern: /;/
});
var allTokens = [
    WhiteSpace,
    NumberLiteral,
    Return,
    DivisionOperator,
    RegExpLiteral,
    Semicolon
];
// Avoids errors in browser tests where the bundled specs will execute this
// file even if the tests will avoid running it.
if (typeof new RegExp("(?:)").sticky === "boolean") {
    utils_1.forEach(allTokens, function (currTokType) {
        currTokType.PATTERN = new RegExp(currTokType.PATTERN.source, "y");
    });
}
var ErrorToken = tokens_public_1.createToken({ name: "ErrorToken" });
var EcmaScriptQuirksParser = /** @class */ (function (_super) {
    __extends(EcmaScriptQuirksParser, _super);
    function EcmaScriptQuirksParser() {
        var _this = _super.call(this, allTokens, { outputCst: false }) || this;
        _this.statement = _this.RULE("statement", function () {
            _this.CONSUME(Return);
            _this.OPTION7(function () {
                _this.SUBRULE(_this.expression);
            });
            _this.CONSUME(Semicolon);
        });
        _this.expression = _this.RULE("expression", function () {
            _this.SUBRULE(_this.atomic);
            _this.MANY(function () {
                _this.CONSUME(DivisionOperator);
                _this.SUBRULE2(_this.atomic);
            });
        });
        _this.atomic = _this.RULE("atomic", function () {
            _this.OR6([
                { ALT: function () { return _this.CONSUME(RegExpLiteral); } },
                { ALT: function () { return _this.CONSUME(NumberLiteral); } }
            ]);
        });
        _this.performSelfAnalysis();
        return _this;
    }
    Object.defineProperty(EcmaScriptQuirksParser.prototype, "textInput", {
        get: function () {
            return this.orgText;
        },
        // lexer related methods
        set: function (newInput) {
            this.reset();
            this.orgText = newInput;
        },
        enumerable: true,
        configurable: true
    });
    // TODO: this should be protected at least but there seems some strange bug in the
    // definitions generation, try adding protected in newer releases of typescript.
    EcmaScriptQuirksParser.prototype.resetLexerState = function () {
        this.textIdx = 0;
    };
    EcmaScriptQuirksParser.prototype.IS_NEXT_TOKEN = function (expectedType) {
        if (this.orgText.length <= this.textIdx) {
            return parser_1.END_OF_FILE;
        }
        else {
            this.skipWhitespace();
            return this.consumeExpected(expectedType);
        }
    };
    EcmaScriptQuirksParser.prototype.skipWhitespace = function () {
        var wsPattern = WhiteSpace.PATTERN;
        wsPattern.lastIndex = this.textIdx;
        var wsMatch = wsPattern.exec(this.orgText);
        if (wsMatch !== null) {
            var wsLength = wsMatch[0].length;
            this.textIdx += wsLength;
        }
    };
    EcmaScriptQuirksParser.prototype.consumeExpected = function (expectedType) {
        // match expected
        var expectedPattern = expectedType.PATTERN;
        expectedPattern.lastIndex = this.textIdx;
        var match = expectedPattern.exec(this.orgText);
        if (match !== null) {
            var image = match[0];
            var startOffset = this.textIdx;
            var newToken = {
                tokenTypeIdx: expectedType.tokenTypeIdx,
                image: image,
                startOffset: startOffset
            };
            this.textIdx += image.length;
            return newToken;
        }
        return false;
    };
    EcmaScriptQuirksParser.prototype.consumeInternal = function (tokClass, idx) {
        this.skipWhitespace();
        var nextToken = this.consumeExpected(tokClass);
        if (nextToken !== false) {
            return nextToken;
        }
        else {
            var errorToken = {
                tokenTypeIdx: ErrorToken.tokenTypeIdx,
                image: this.orgText[this.textIdx],
                startOffset: this.textIdx
            };
            var previousToken = this.LA(0);
            var msg = this.errorMessageProvider.buildMismatchTokenMessage({
                expected: tokClass,
                actual: errorToken,
                previous: previousToken,
                ruleName: this.getCurrRuleFullName()
            });
            throw this.SAVE_ERROR(new exceptions_public_1.MismatchedTokenException(msg, errorToken, previousToken));
        }
    };
    EcmaScriptQuirksParser.prototype.exportLexerState = function () {
        return this.textIdx;
    };
    EcmaScriptQuirksParser.prototype.importLexerState = function (newState) {
        this.textIdx = newState;
    };
    EcmaScriptQuirksParser.prototype.lookAheadBuilderForOptional = function (alt, tokenMatcher, dynamicTokensEnabled) {
        if (!utils_1.every(alt, function (currAlt) { return currAlt.length === 1; })) {
            throw Error("This scannerLess parser only supports LL(1) lookahead.");
        }
        var allTokenTypes = utils_1.flatten(alt);
        return function () {
            // save & restore lexer state as otherwise the text index will move ahead
            // and the parser will fail consuming the tokens we have looked ahead for.
            var lexerState = this.exportLexerState();
            try {
                for (var i = 0; i < allTokenTypes.length; i++) {
                    var nextToken = this.IS_NEXT_TOKEN(allTokenTypes[i]);
                    if (nextToken !== false) {
                        return true;
                    }
                }
                return false;
            }
            finally {
                // this scannerLess parser is not very smart and efficient
                // because we do not remember the last token was saw while lookahead
                // we will have to lex it twice, once during lookahead and once during consumption...
                this.importLexerState(lexerState);
            }
        };
    };
    EcmaScriptQuirksParser.prototype.lookAheadBuilderForAlternatives = function (alts, hasPredicates, tokenMatcher, dynamicTokensEnabled) {
        if (!utils_1.every(alts, function (currPath) {
            return utils_1.every(currPath, function (currAlt) { return currAlt.length === 1; });
        })) {
            throw Error("This scannerLess parser only supports LL(1) lookahead.");
        }
        var allTokenTypesPerAlt = utils_1.map(alts, utils_1.flatten);
        return function () {
            // save & restore lexer state as otherwise the text index will move ahead
            // and the parser will fail consuming the tokens we have looked ahead for.
            var lexerState = this.exportLexerState();
            try {
                for (var i = 0; i < allTokenTypesPerAlt.length; i++) {
                    var currAltTypes = allTokenTypesPerAlt[i];
                    for (var j = 0; j < currAltTypes.length; j++) {
                        var nextToken = this.IS_NEXT_TOKEN(currAltTypes[j]);
                        if (nextToken !== false) {
                            return i;
                        }
                    }
                }
                return undefined;
            }
            finally {
                // this scannerLess parser is not very smart and efficient
                // because we do not remember the last token was saw while lookahead
                // we will have to lex it twice, once during lookahead and once during consumption...
                this.importLexerState(lexerState);
            }
        };
    };
    return EcmaScriptQuirksParser;
}(parser_traits_1.Parser));
// reuse the same parser instance.
var parser = new EcmaScriptQuirksParser();
function parse(text) {
    parser.textInput = text;
    var value = parser.statement();
    return {
        value: value,
        errors: parser.errors
    };
}
exports.parse = parse;
//# sourceMappingURL=ecma_quirks.js.map

/***/ }),
/* 60 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// long lines for token init seems more readable to me than to break them up
// into multiple line.
/* tslint:disable:max-line-length  */
Object.defineProperty(exports, "__esModule", { value: true });
var sql_recovery_tokens_1 = __webpack_require__(26);
var sql_recovery_parser_1 = __webpack_require__(38);
var tokens_public_1 = __webpack_require__(1);
var exceptions_public_1 = __webpack_require__(8);
var utils_1 = __webpack_require__(0);
var matchers_1 = __webpack_require__(3);
// for side effect if augmenting the Token classes.
new sql_recovery_parser_1.DDLExampleRecoveryParser();
describe("Error Recovery SQL DDL Example", function () {
    var schemaFQN = [
        matchers_1.createRegularToken(sql_recovery_tokens_1.IdentTok, "schema2"),
        matchers_1.createRegularToken(sql_recovery_tokens_1.DotTok),
        matchers_1.createRegularToken(sql_recovery_tokens_1.IdentTok, "Persons")
    ];
    /* tslint:disable:quotemark  */
    var shahar32Record = [
        matchers_1.createRegularToken(sql_recovery_tokens_1.LParenTok),
        matchers_1.createRegularToken(sql_recovery_tokens_1.IntTok, "32"),
        matchers_1.createRegularToken(sql_recovery_tokens_1.CommaTok),
        matchers_1.createRegularToken(sql_recovery_tokens_1.StringTok, "SHAHAR"),
        matchers_1.createRegularToken(sql_recovery_tokens_1.RParenTok)
    ];
    var shahar31Record = [
        matchers_1.createRegularToken(sql_recovery_tokens_1.LParenTok),
        matchers_1.createRegularToken(sql_recovery_tokens_1.IntTok, "31"),
        matchers_1.createRegularToken(sql_recovery_tokens_1.CommaTok),
        matchers_1.createRegularToken(sql_recovery_tokens_1.StringTok, '"SHAHAR"'),
        matchers_1.createRegularToken(sql_recovery_tokens_1.RParenTok)
    ];
    /* tslint:enable:quotemark  */
    it("can parse a series of three statements successfully", function () {
        var input = utils_1.flatten([
            // CREATE TABLE schema2.Persons
            matchers_1.createRegularToken(sql_recovery_tokens_1.CreateTok),
            matchers_1.createRegularToken(sql_recovery_tokens_1.TableTok),
            schemaFQN,
            matchers_1.createRegularToken(sql_recovery_tokens_1.SemiColonTok),
            // INSERT (32, "SHAHAR") INTO schema2.Persons
            matchers_1.createRegularToken(sql_recovery_tokens_1.InsertTok),
            shahar32Record,
            matchers_1.createRegularToken(sql_recovery_tokens_1.IntoTok),
            schemaFQN,
            matchers_1.createRegularToken(sql_recovery_tokens_1.SemiColonTok),
            // DELETE (31, "SHAHAR") FROM schema2.Persons
            matchers_1.createRegularToken(sql_recovery_tokens_1.DeleteTok),
            shahar31Record,
            matchers_1.createRegularToken(sql_recovery_tokens_1.FromTok),
            schemaFQN,
            matchers_1.createRegularToken(sql_recovery_tokens_1.SemiColonTok)
        ]);
        var parser = new sql_recovery_parser_1.DDLExampleRecoveryParser();
        parser.input = input;
        var ptResult = parser.ddl();
        expect(parser.errors.length).to.equal(0);
        assertAllThreeStatementsPresentAndValid(ptResult);
    });
    describe("Single Token insertion recovery mechanism", function () {
        var input = utils_1.flatten([
            // CREATE TABLE schema2.Persons
            matchers_1.createRegularToken(sql_recovery_tokens_1.CreateTok),
            matchers_1.createRegularToken(sql_recovery_tokens_1.TableTok),
            schemaFQN,
            matchers_1.createRegularToken(sql_recovery_tokens_1.SemiColonTok),
            // INSERT (32, "SHAHAR") INTO schema2.Persons
            matchers_1.createRegularToken(sql_recovery_tokens_1.InsertTok),
            shahar32Record,
            matchers_1.createRegularToken(sql_recovery_tokens_1.IntoTok),
            schemaFQN /*createRegularToken(SemiColonTok), <-- missing semicolon!*/,
            // DELETE (31, "SHAHAR") FROM schema2.Persons
            matchers_1.createRegularToken(sql_recovery_tokens_1.DeleteTok),
            shahar31Record,
            matchers_1.createRegularToken(sql_recovery_tokens_1.FromTok),
            schemaFQN,
            matchers_1.createRegularToken(sql_recovery_tokens_1.SemiColonTok)
        ]);
        it("can perform single token insertion for a missing semicolon", function () {
            var parser = new sql_recovery_parser_1.DDLExampleRecoveryParser();
            parser.input = input;
            var ptResult = parser.ddl();
            // one error encountered
            expect(parser.errors.length).to.equal(1);
            // yet the whole input has been parsed
            // and the output parseTree contains ALL three statements
            assertAllThreeStatementsPresentAndValid(ptResult);
            var insertedSemiColon = ptResult.children[1].children[4].payload;
            // the semicolon is present even though it did not exist in the input, magic!
            expect(tokens_public_1.tokenMatcher(insertedSemiColon, sql_recovery_tokens_1.SemiColonTok)).to.be.true;
            expect(insertedSemiColon.isInsertedInRecovery).to.equal(true);
        });
        it("can disable single token insertion for a missing semicolon", function () {
            var parser = new sql_recovery_parser_1.DDLExampleRecoveryParser(false);
            parser.input = input;
            var ptResult = parser.ddl();
            expect(parser.errors.length).to.equal(1);
            expect(ptResult.payload.tokenType).to.equal(sql_recovery_tokens_1.INVALID_DDL);
            expect(ptResult.children).to.have.length(0);
        });
    });
    describe("Single Token deletion recovery mechanism", function () {
        var input = utils_1.flatten([
            // CREATE TABLE schema2.Persons
            matchers_1.createRegularToken(sql_recovery_tokens_1.CreateTok),
            matchers_1.createRegularToken(sql_recovery_tokens_1.TableTok),
            schemaFQN,
            matchers_1.createRegularToken(sql_recovery_tokens_1.SemiColonTok),
            // INSERT (32, "SHAHAR") INTO INTO schema2.Persons
            matchers_1.createRegularToken(sql_recovery_tokens_1.InsertTok),
            shahar32Record,
            matchers_1.createRegularToken(sql_recovery_tokens_1.IntoTok),
            matchers_1.createRegularToken(sql_recovery_tokens_1.IntoTok),
            /* <-- "INTO INTO" oops */ schemaFQN,
            matchers_1.createRegularToken(sql_recovery_tokens_1.SemiColonTok),
            // DELETE (31, "SHAHAR") FROM schema2.Persons
            matchers_1.createRegularToken(sql_recovery_tokens_1.DeleteTok),
            shahar31Record,
            matchers_1.createRegularToken(sql_recovery_tokens_1.FromTok),
            schemaFQN,
            matchers_1.createRegularToken(sql_recovery_tokens_1.SemiColonTok)
        ]);
        it("can perform single token deletion for a redundant keyword", function () {
            var parser = new sql_recovery_parser_1.DDLExampleRecoveryParser();
            parser.input = input;
            var ptResult = parser.ddl();
            // one error encountered
            expect(parser.errors.length).to.equal(1);
            // yet the whole input has been parsed
            // and the output parseTree contains ALL three statements
            assertAllThreeStatementsPresentAndValid(ptResult);
        });
        it("can disable single token deletion for a redundant keyword", function () {
            var parser = new sql_recovery_parser_1.DDLExampleRecoveryParser(false);
            parser.input = input;
            var ptResult = parser.ddl();
            expect(parser.errors.length).to.equal(1);
            expect(ptResult.payload.tokenType).to.equal(sql_recovery_tokens_1.INVALID_DDL);
            expect(ptResult.children).to.have.length(0);
        });
    });
    describe("resync recovery mechanism", function () {
        it("can perform re-sync recovery and only 'lose' part of the input", function () {
            var input = utils_1.flatten([
                // CREATE TABLE schema2.Persons
                matchers_1.createRegularToken(sql_recovery_tokens_1.CreateTok),
                matchers_1.createRegularToken(sql_recovery_tokens_1.TableTok),
                schemaFQN,
                matchers_1.createRegularToken(sql_recovery_tokens_1.SemiColonTok),
                // INSERT (32, "SHAHAR") FROM (( schema2.Persons <-- this can't be recovered with a single token insertion of deletion, must do re-sync
                matchers_1.createRegularToken(sql_recovery_tokens_1.InsertTok),
                shahar32Record,
                matchers_1.createRegularToken(sql_recovery_tokens_1.FromTok),
                matchers_1.createRegularToken(sql_recovery_tokens_1.LParenTok),
                matchers_1.createRegularToken(sql_recovery_tokens_1.LParenTok),
                schemaFQN,
                matchers_1.createRegularToken(sql_recovery_tokens_1.SemiColonTok),
                // DELETE (31, "SHAHAR") FROM schema2.Persons
                matchers_1.createRegularToken(sql_recovery_tokens_1.DeleteTok),
                shahar31Record,
                matchers_1.createRegularToken(sql_recovery_tokens_1.FromTok),
                schemaFQN,
                matchers_1.createRegularToken(sql_recovery_tokens_1.SemiColonTok)
            ]);
            var parser = new sql_recovery_parser_1.DDLExampleRecoveryParser();
            parser.input = input;
            var ptResult = parser.ddl();
            // one error encountered
            expect(parser.errors.length).to.equal(1);
            // yet the whole input has been parsed
            expect(ptResult.payload.tokenType).to.equal(sql_recovery_tokens_1.STATEMENTS);
            // 3 statements found
            expect(ptResult.children.length).to.equal(3);
            expect(ptResult.children[0].payload.tokenType).to.equal(sql_recovery_tokens_1.CREATE_STMT);
            expect(ptResult.children[0].payload.tokenType).to.not.equal(sql_recovery_tokens_1.INVALID_CREATE_STMT);
            // but the second one is marked as invalid
            expect(ptResult.children[1].payload.tokenType).to.equal(sql_recovery_tokens_1.INVALID_INSERT_STMT);
            // yet the third one is still valid!, we recovered and continued parsing.
            expect(ptResult.children[2].payload.tokenType).to.equal(sql_recovery_tokens_1.DELETE_STMT);
            expect(ptResult.children[2].payload.tokenType).to.not.equal(sql_recovery_tokens_1.INVALID_DELETE_STMT);
        });
        // (32, "SHAHAR" ( <-- wrong parenthesis
        var badShahar32Record = [
            matchers_1.createRegularToken(sql_recovery_tokens_1.LParenTok),
            matchers_1.createRegularToken(sql_recovery_tokens_1.IntTok, "32"),
            matchers_1.createRegularToken(sql_recovery_tokens_1.CommaTok),
            matchers_1.createRegularToken(sql_recovery_tokens_1.StringTok, '"SHAHAR"'),
            matchers_1.createRegularToken(sql_recovery_tokens_1.LParenTok)
        ];
        var input = utils_1.flatten([
            // CREATE TABLE schema2.Persons
            matchers_1.createRegularToken(sql_recovery_tokens_1.CreateTok),
            matchers_1.createRegularToken(sql_recovery_tokens_1.TableTok),
            schemaFQN,
            matchers_1.createRegularToken(sql_recovery_tokens_1.SemiColonTok),
            // issues:
            // 1. FromTok instead of IntoTok so this rule also includes a bug
            // 2. using the bad/invalid record Token.
            matchers_1.createRegularToken(sql_recovery_tokens_1.InsertTok),
            badShahar32Record,
            matchers_1.createRegularToken(sql_recovery_tokens_1.FromTok),
            schemaFQN,
            matchers_1.createRegularToken(sql_recovery_tokens_1.SemiColonTok),
            // DELETE (31, "SHAHAR") FROM schema2.Persons
            matchers_1.createRegularToken(sql_recovery_tokens_1.DeleteTok),
            shahar31Record,
            matchers_1.createRegularToken(sql_recovery_tokens_1.FromTok),
            schemaFQN,
            matchers_1.createRegularToken(sql_recovery_tokens_1.SemiColonTok)
        ]);
        it("can perform re-sync recovery and only 'lose' part of the input even when re-syncing to two rules 'above'", function () {
            var parser = new sql_recovery_parser_1.DDLExampleRecoveryParser();
            parser.input = input;
            var ptResult = parser.ddl();
            // one error encountered
            expect(parser.errors.length).to.equal(1);
            // yet the whole input has been parsed
            expect(ptResult.payload.tokenType).to.equal(sql_recovery_tokens_1.STATEMENTS);
            // 3 statements found
            expect(ptResult.children.length).to.equal(3);
            expect(ptResult.children[0].payload.tokenType).to.equal(sql_recovery_tokens_1.CREATE_STMT);
            expect(ptResult.children[0].payload.tokenType).to.not.equal(sql_recovery_tokens_1.INVALID_CREATE_STMT);
            // but the second one is marked as invalid, this means we kept trying to re-sync to an "higher" rule
            expect(ptResult.children[1].payload.tokenType).to.equal(sql_recovery_tokens_1.INVALID_INSERT_STMT);
            // yet the third one is still valid!, we recovered and continued parsing.
            expect(ptResult.children[2].payload.tokenType).to.equal(sql_recovery_tokens_1.DELETE_STMT);
            expect(ptResult.children[2].payload.tokenType).to.not.equal(sql_recovery_tokens_1.INVALID_DELETE_STMT);
        });
        it("can disable re-sync recovery and only 'lose' part of the input even when re-syncing to two rules 'above'", function () {
            var parser = new sql_recovery_parser_1.DDLExampleRecoveryParser(false);
            parser.input = input;
            var ptResult = parser.ddl();
            // one error encountered
            expect(parser.errors.length).to.equal(1);
            // yet the whole input has been parsed
            expect(ptResult.payload.tokenType).to.equal(sql_recovery_tokens_1.INVALID_DDL);
            expect(ptResult.children).to.have.length(0);
        });
    });
    function assertAllThreeStatementsPresentAndValid(ptResult) {
        expect(ptResult.payload.tokenType).to.equal(sql_recovery_tokens_1.STATEMENTS);
        // 3 statements found
        expect(ptResult.children.length).to.equal(3);
        expect(ptResult.children[0].payload.tokenType).to.equal(sql_recovery_tokens_1.CREATE_STMT);
        expect(ptResult.children[0].payload.tokenType).to.not.equal(sql_recovery_tokens_1.INVALID_CREATE_STMT);
        expect(ptResult.children[1].payload.tokenType).to.equal(sql_recovery_tokens_1.INSERT_STMT);
        expect(ptResult.children[1].payload.tokenType).to.not.equal(sql_recovery_tokens_1.INVALID_INSERT_STMT);
        expect(ptResult.children[2].payload.tokenType).to.equal(sql_recovery_tokens_1.DELETE_STMT);
        expect(ptResult.children[2].payload.tokenType).to.not.equal(sql_recovery_tokens_1.INVALID_DELETE_STMT);
    }
    it("will encounter an NotAllInputParsedException when some of the input vector has not been parsed", function () {
        var input = utils_1.flatten([
            // CREATE TABLE schema2.Persons; TABLE <-- redundant "TABLE" token
            matchers_1.createRegularToken(sql_recovery_tokens_1.CreateTok),
            matchers_1.createRegularToken(sql_recovery_tokens_1.TableTok),
            schemaFQN,
            matchers_1.createRegularToken(sql_recovery_tokens_1.SemiColonTok),
            matchers_1.createRegularToken(sql_recovery_tokens_1.TableTok)
        ]);
        var parser = new sql_recovery_parser_1.DDLExampleRecoveryParser();
        parser.input = input;
        parser.ddl();
        expect(parser.errors.length).to.equal(1);
        expect(parser.errors[0]).to.be.an.instanceof(exceptions_public_1.NotAllInputParsedException);
    });
    it("can use the same parser instance to parse multiple inputs", function () {
        var input1 = utils_1.flatten([
            // CREATE TABLE schema2.Persons;
            matchers_1.createRegularToken(sql_recovery_tokens_1.CreateTok),
            matchers_1.createRegularToken(sql_recovery_tokens_1.TableTok),
            schemaFQN,
            matchers_1.createRegularToken(sql_recovery_tokens_1.SemiColonTok)
        ]);
        var parser = new sql_recovery_parser_1.DDLExampleRecoveryParser(input1);
        parser.ddl();
        expect(parser.errors.length).to.equal(0);
        var input2 = utils_1.flatten([
            // DELETE (31, "SHAHAR") FROM schema2.Persons
            matchers_1.createRegularToken(sql_recovery_tokens_1.DeleteTok),
            shahar31Record,
            matchers_1.createRegularToken(sql_recovery_tokens_1.FromTok),
            schemaFQN,
            matchers_1.createRegularToken(sql_recovery_tokens_1.SemiColonTok)
        ]);
        // the parser is being reset instead of creating a new instance for each new input
        parser.reset();
        parser.input = input2;
        var ptResult = parser.ddl();
        expect(parser.errors.length).to.equal(0);
        // verify returned ParseTree
        expect(ptResult.payload.tokenType).to.equal(sql_recovery_tokens_1.STATEMENTS);
        expect(ptResult.children.length).to.equal(1);
        expect(ptResult.children[0].payload.tokenType).to.equal(sql_recovery_tokens_1.DELETE_STMT);
        expect(ptResult.children[0].payload.tokenType).to.not.equal(sql_recovery_tokens_1.INVALID_DELETE_STMT);
    });
    it("can re-sync to the next iteration in a MANY rule", function () {
        var input = utils_1.flatten([
            // CREATE TABLE schema2.Persons
            matchers_1.createRegularToken(sql_recovery_tokens_1.CreateTok),
            matchers_1.createRegularToken(sql_recovery_tokens_1.TableTok),
            schemaFQN,
            matchers_1.createRegularToken(sql_recovery_tokens_1.SemiColonTok),
            // INSERT (32, "SHAHAR") INTO schema2.Persons TABLE <-- the redundant 'TABLE' should trigger in repetition recovery
            matchers_1.createRegularToken(sql_recovery_tokens_1.InsertTok),
            shahar32Record,
            matchers_1.createRegularToken(sql_recovery_tokens_1.IntoTok),
            schemaFQN,
            matchers_1.createRegularToken(sql_recovery_tokens_1.SemiColonTok),
            matchers_1.createRegularToken(sql_recovery_tokens_1.TableTok),
            // DELETE (31, "SHAHAR") FROM schema2.Persons
            matchers_1.createRegularToken(sql_recovery_tokens_1.DeleteTok),
            shahar31Record,
            matchers_1.createRegularToken(sql_recovery_tokens_1.FromTok),
            schemaFQN,
            matchers_1.createRegularToken(sql_recovery_tokens_1.SemiColonTok)
        ]);
        var parser = new sql_recovery_parser_1.DDLExampleRecoveryParser();
        parser.input = input;
        var ptResult = parser.ddl();
        expect(parser.errors.length).to.equal(1);
        assertAllThreeStatementsPresentAndValid(ptResult);
    });
});
//# sourceMappingURL=sql_recovery_spec.js.map

/***/ }),
/* 61 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// long lines for token init seems more readable to me than to break them up into multiple line.
/* tslint:disable:max-line-length  */
Object.defineProperty(exports, "__esModule", { value: true });
var Switchcase_recovery_tokens_1 = __webpack_require__(27);
var switchcase_recovery_parser_1 = __webpack_require__(62);
var exceptions_public_1 = __webpack_require__(8);
var matchers_1 = __webpack_require__(3);
describe("Error Recovery switch-case Example", function () {
    // called for side effect of augmenting
    new switchcase_recovery_parser_1.SwitchCaseRecoveryParser([]);
    it("can parse a valid text successfully", function () {
        var input = [
            // switch (name) {
            matchers_1.createRegularToken(Switchcase_recovery_tokens_1.SwitchTok),
            matchers_1.createRegularToken(Switchcase_recovery_tokens_1.LParenTok),
            matchers_1.createRegularToken(Switchcase_recovery_tokens_1.IdentTok, "name"),
            matchers_1.createRegularToken(Switchcase_recovery_tokens_1.RParenTok),
            matchers_1.createRegularToken(Switchcase_recovery_tokens_1.LCurlyTok),
            // case "Terry" : return 2;
            matchers_1.createRegularToken(Switchcase_recovery_tokens_1.CaseTok),
            matchers_1.createRegularToken(Switchcase_recovery_tokens_1.StringTok, "Terry"),
            matchers_1.createRegularToken(Switchcase_recovery_tokens_1.ColonTok),
            matchers_1.createRegularToken(Switchcase_recovery_tokens_1.ReturnTok),
            matchers_1.createRegularToken(Switchcase_recovery_tokens_1.IntTok, "2"),
            matchers_1.createRegularToken(Switchcase_recovery_tokens_1.SemiColonTok),
            // case "Robert" : return 4;
            matchers_1.createRegularToken(Switchcase_recovery_tokens_1.CaseTok),
            matchers_1.createRegularToken(Switchcase_recovery_tokens_1.StringTok, "Robert"),
            matchers_1.createRegularToken(Switchcase_recovery_tokens_1.ColonTok),
            matchers_1.createRegularToken(Switchcase_recovery_tokens_1.ReturnTok),
            matchers_1.createRegularToken(Switchcase_recovery_tokens_1.IntTok, "4"),
            matchers_1.createRegularToken(Switchcase_recovery_tokens_1.SemiColonTok),
            // case "Brandon" : return 6;
            matchers_1.createRegularToken(Switchcase_recovery_tokens_1.CaseTok),
            matchers_1.createRegularToken(Switchcase_recovery_tokens_1.StringTok, "Brandon"),
            matchers_1.createRegularToken(Switchcase_recovery_tokens_1.ColonTok),
            matchers_1.createRegularToken(Switchcase_recovery_tokens_1.ReturnTok),
            matchers_1.createRegularToken(Switchcase_recovery_tokens_1.IntTok, "6"),
            matchers_1.createRegularToken(Switchcase_recovery_tokens_1.SemiColonTok),
            matchers_1.createRegularToken(Switchcase_recovery_tokens_1.RCurlyTok)
        ];
        var parser = new switchcase_recovery_parser_1.SwitchCaseRecoveryParser();
        parser.input = input;
        var parseResult = parser.switchStmt();
        expect(parser.errors.length).to.equal(0);
        expect(parseResult).to.deep.equal({
            Terry: 2,
            Robert: 4,
            Brandon: 6
        });
    });
    it("can perform re-sync recovery to the next case stmt", function () {
        var input = [
            // switch (name) {
            matchers_1.createRegularToken(Switchcase_recovery_tokens_1.SwitchTok),
            matchers_1.createRegularToken(Switchcase_recovery_tokens_1.LParenTok),
            matchers_1.createRegularToken(Switchcase_recovery_tokens_1.IdentTok, "name"),
            matchers_1.createRegularToken(Switchcase_recovery_tokens_1.RParenTok),
            matchers_1.createRegularToken(Switchcase_recovery_tokens_1.LCurlyTok),
            // case "Terry" : return 2;
            matchers_1.createRegularToken(Switchcase_recovery_tokens_1.CaseTok),
            matchers_1.createRegularToken(Switchcase_recovery_tokens_1.StringTok, "Terry"),
            matchers_1.createRegularToken(Switchcase_recovery_tokens_1.ColonTok),
            matchers_1.createRegularToken(Switchcase_recovery_tokens_1.ReturnTok),
            matchers_1.createRegularToken(Switchcase_recovery_tokens_1.IntTok, "2"),
            matchers_1.createRegularToken(Switchcase_recovery_tokens_1.SemiColonTok),
            // case "Robert" ::: return 4; <-- using 3 colons to trigger re-sync recovery
            matchers_1.createRegularToken(Switchcase_recovery_tokens_1.CaseTok),
            matchers_1.createRegularToken(Switchcase_recovery_tokens_1.StringTok, "Robert"),
            matchers_1.createRegularToken(Switchcase_recovery_tokens_1.ColonTok, ":"),
            matchers_1.createRegularToken(Switchcase_recovery_tokens_1.ColonTok, ":"),
            matchers_1.createRegularToken(Switchcase_recovery_tokens_1.ColonTok, ":"),
            matchers_1.createRegularToken(Switchcase_recovery_tokens_1.ReturnTok, "return"),
            matchers_1.createRegularToken(Switchcase_recovery_tokens_1.IntTok, "4"),
            matchers_1.createRegularToken(Switchcase_recovery_tokens_1.SemiColonTok, ";"),
            // case "Brandon" : return 6;
            matchers_1.createRegularToken(Switchcase_recovery_tokens_1.CaseTok),
            matchers_1.createRegularToken(Switchcase_recovery_tokens_1.StringTok, "Brandon"),
            matchers_1.createRegularToken(Switchcase_recovery_tokens_1.ColonTok),
            matchers_1.createRegularToken(Switchcase_recovery_tokens_1.ReturnTok),
            matchers_1.createRegularToken(Switchcase_recovery_tokens_1.IntTok, "6"),
            matchers_1.createRegularToken(Switchcase_recovery_tokens_1.SemiColonTok),
            matchers_1.createRegularToken(Switchcase_recovery_tokens_1.RCurlyTok)
        ];
        var parser = new switchcase_recovery_parser_1.SwitchCaseRecoveryParser();
        parser.input = input;
        var parseResult = parser.switchStmt();
        expect(parseResult).to.deep.equal({
            Terry: 2,
            invalid1: undefined,
            Brandon: 6
        });
        expect(parser.errors.length).to.equal(1);
        expect(parser.errors[0].resyncedTokens).to.have.lengthOf(4);
        expect(parser.errors[0].resyncedTokens[0].image).to.equal(":");
        expect(parser.errors[0].resyncedTokens[1].image).to.equal("return");
        expect(parser.errors[0].resyncedTokens[2].image).to.equal("4");
        expect(parser.errors[0].resyncedTokens[3].image).to.equal(";");
    });
    it("will detect an error if missing AT_LEAST_ONCE occurrence", function () {
        var input = [
            // switch (name) { }
            matchers_1.createRegularToken(Switchcase_recovery_tokens_1.SwitchTok),
            matchers_1.createRegularToken(Switchcase_recovery_tokens_1.LParenTok),
            matchers_1.createRegularToken(Switchcase_recovery_tokens_1.IdentTok, "name"),
            matchers_1.createRegularToken(Switchcase_recovery_tokens_1.RParenTok),
            matchers_1.createRegularToken(Switchcase_recovery_tokens_1.LCurlyTok),
            matchers_1.createRegularToken(Switchcase_recovery_tokens_1.RCurlyTok)
        ];
        var parser = new switchcase_recovery_parser_1.SwitchCaseRecoveryParser();
        parser.input = input;
        var parseResult = parser.switchStmt();
        expect(parser.errors.length).to.equal(1);
        expect(parser.errors[0]).to.be.an.instanceof(exceptions_public_1.EarlyExitException);
        expect(parseResult).to.deep.equal({});
    });
    it("can perform re-sync recovery to the next case stmt even if the unexpected tokens are between valid case stmts", function () {
        var input = [
            // switch (name) {
            matchers_1.createRegularToken(Switchcase_recovery_tokens_1.SwitchTok),
            matchers_1.createRegularToken(Switchcase_recovery_tokens_1.LParenTok),
            matchers_1.createRegularToken(Switchcase_recovery_tokens_1.IdentTok, "name"),
            matchers_1.createRegularToken(Switchcase_recovery_tokens_1.RParenTok),
            matchers_1.createRegularToken(Switchcase_recovery_tokens_1.LCurlyTok),
            // case "Terry" : return 2;
            matchers_1.createRegularToken(Switchcase_recovery_tokens_1.CaseTok),
            matchers_1.createRegularToken(Switchcase_recovery_tokens_1.StringTok, "Terry"),
            matchers_1.createRegularToken(Switchcase_recovery_tokens_1.ColonTok),
            matchers_1.createRegularToken(Switchcase_recovery_tokens_1.ReturnTok),
            matchers_1.createRegularToken(Switchcase_recovery_tokens_1.IntTok, "2"),
            matchers_1.createRegularToken(Switchcase_recovery_tokens_1.SemiColonTok),
            // case "Robert" : return 4;
            matchers_1.createRegularToken(Switchcase_recovery_tokens_1.CaseTok),
            matchers_1.createRegularToken(Switchcase_recovery_tokens_1.StringTok, "Robert"),
            matchers_1.createRegularToken(Switchcase_recovery_tokens_1.ColonTok),
            matchers_1.createRegularToken(Switchcase_recovery_tokens_1.ReturnTok),
            matchers_1.createRegularToken(Switchcase_recovery_tokens_1.IntTok, "4"),
            matchers_1.createRegularToken(Switchcase_recovery_tokens_1.SemiColonTok),
            // "ima" "aba" "bamba" <-- these three strings do not belong here, but instead of failing everything
            // we should still get a valid output as these tokens will be ignored and the parser will re-sync to the next case stmt
            matchers_1.createRegularToken(Switchcase_recovery_tokens_1.StringTok, "ima"),
            matchers_1.createRegularToken(Switchcase_recovery_tokens_1.StringTok, "aba"),
            matchers_1.createRegularToken(Switchcase_recovery_tokens_1.StringTok, "bamba"),
            // case "Brandon" : return 6;
            matchers_1.createRegularToken(Switchcase_recovery_tokens_1.CaseTok),
            matchers_1.createRegularToken(Switchcase_recovery_tokens_1.StringTok, "Brandon"),
            matchers_1.createRegularToken(Switchcase_recovery_tokens_1.ColonTok),
            matchers_1.createRegularToken(Switchcase_recovery_tokens_1.ReturnTok),
            matchers_1.createRegularToken(Switchcase_recovery_tokens_1.IntTok, "6"),
            matchers_1.createRegularToken(Switchcase_recovery_tokens_1.SemiColonTok),
            matchers_1.createRegularToken(Switchcase_recovery_tokens_1.RCurlyTok)
        ];
        var parser = new switchcase_recovery_parser_1.SwitchCaseRecoveryParser();
        parser.input = input;
        var parseResult = parser.switchStmt();
        expect(parser.errors.length).to.equal(1);
        expect(parseResult).to.deep.equal({
            Terry: 2,
            Robert: 4,
            Brandon: 6
        });
    });
    it("can perform re-sync recovery to the right curly after the case statements repetition", function () {
        var input = [
            // switch (name) {
            matchers_1.createRegularToken(Switchcase_recovery_tokens_1.SwitchTok),
            matchers_1.createRegularToken(Switchcase_recovery_tokens_1.LParenTok),
            matchers_1.createRegularToken(Switchcase_recovery_tokens_1.IdentTok, "name"),
            matchers_1.createRegularToken(Switchcase_recovery_tokens_1.RParenTok),
            matchers_1.createRegularToken(Switchcase_recovery_tokens_1.LCurlyTok),
            // case "Terry" : return 2;
            matchers_1.createRegularToken(Switchcase_recovery_tokens_1.CaseTok),
            matchers_1.createRegularToken(Switchcase_recovery_tokens_1.StringTok, "Terry"),
            matchers_1.createRegularToken(Switchcase_recovery_tokens_1.ColonTok),
            matchers_1.createRegularToken(Switchcase_recovery_tokens_1.ReturnTok),
            matchers_1.createRegularToken(Switchcase_recovery_tokens_1.IntTok, "2"),
            matchers_1.createRegularToken(Switchcase_recovery_tokens_1.SemiColonTok),
            // case "Robert" : return 4;
            matchers_1.createRegularToken(Switchcase_recovery_tokens_1.CaseTok),
            matchers_1.createRegularToken(Switchcase_recovery_tokens_1.StringTok, "Robert"),
            matchers_1.createRegularToken(Switchcase_recovery_tokens_1.ColonTok),
            matchers_1.createRegularToken(Switchcase_recovery_tokens_1.ReturnTok),
            matchers_1.createRegularToken(Switchcase_recovery_tokens_1.IntTok, "4"),
            matchers_1.createRegularToken(Switchcase_recovery_tokens_1.SemiColonTok),
            // case "Brandon" : return 6;
            matchers_1.createRegularToken(Switchcase_recovery_tokens_1.CaseTok),
            matchers_1.createRegularToken(Switchcase_recovery_tokens_1.StringTok, "Brandon"),
            matchers_1.createRegularToken(Switchcase_recovery_tokens_1.ColonTok),
            matchers_1.createRegularToken(Switchcase_recovery_tokens_1.ReturnTok),
            matchers_1.createRegularToken(Switchcase_recovery_tokens_1.IntTok, "6"),
            matchers_1.createRegularToken(Switchcase_recovery_tokens_1.SemiColonTok),
            matchers_1.createRegularToken(Switchcase_recovery_tokens_1.StringTok, "ima"),
            matchers_1.createRegularToken(Switchcase_recovery_tokens_1.StringTok, "aba"),
            matchers_1.createRegularToken(Switchcase_recovery_tokens_1.StringTok, "bamba"),
            matchers_1.createRegularToken(Switchcase_recovery_tokens_1.RCurlyTok)
        ];
        var parser = new switchcase_recovery_parser_1.SwitchCaseRecoveryParser();
        parser.input = input;
        var parseResult = parser.switchStmt();
        expect(parser.errors.length).to.equal(1);
        expect(parseResult).to.deep.equal({
            Terry: 2,
            Robert: 4,
            Brandon: 6
        });
        expect(parser.errors.length).to.equal(1);
        expect(parser.errors[0].resyncedTokens).to.have.lengthOf(2);
        expect(parser.errors[0].token.image).to.equal("ima");
        expect(parser.errors[0].resyncedTokens[0].image).to.equal("aba");
        expect(parser.errors[0].resyncedTokens[1].image).to.equal("bamba");
    });
    it("can perform single token deletion recovery", function () {
        var input = [
            // switch (name) {
            matchers_1.createRegularToken(Switchcase_recovery_tokens_1.SwitchTok),
            matchers_1.createRegularToken(Switchcase_recovery_tokens_1.LParenTok),
            matchers_1.createRegularToken(Switchcase_recovery_tokens_1.IdentTok, "name"),
            matchers_1.createRegularToken(Switchcase_recovery_tokens_1.RParenTok),
            matchers_1.createRegularToken(Switchcase_recovery_tokens_1.LCurlyTok),
            // case "Terry" : return 2;
            matchers_1.createRegularToken(Switchcase_recovery_tokens_1.CaseTok),
            matchers_1.createRegularToken(Switchcase_recovery_tokens_1.StringTok, "Terry"),
            matchers_1.createRegularToken(Switchcase_recovery_tokens_1.ColonTok),
            matchers_1.createRegularToken(Switchcase_recovery_tokens_1.ReturnTok),
            matchers_1.createRegularToken(Switchcase_recovery_tokens_1.IntTok, "2"),
            matchers_1.createRegularToken(Switchcase_recovery_tokens_1.SemiColonTok),
            // case "Robert" : return 4;
            matchers_1.createRegularToken(Switchcase_recovery_tokens_1.CaseTok),
            matchers_1.createRegularToken(Switchcase_recovery_tokens_1.StringTok, "Robert"),
            matchers_1.createRegularToken(Switchcase_recovery_tokens_1.ColonTok),
            matchers_1.createRegularToken(Switchcase_recovery_tokens_1.ReturnTok),
            matchers_1.createRegularToken(Switchcase_recovery_tokens_1.IntTok, "4"),
            matchers_1.createRegularToken(Switchcase_recovery_tokens_1.SemiColonTok),
            // case "Brandon" : return 6;
            matchers_1.createRegularToken(Switchcase_recovery_tokens_1.CaseTok),
            matchers_1.createRegularToken(Switchcase_recovery_tokens_1.StringTok, "Brandon"),
            matchers_1.createRegularToken(Switchcase_recovery_tokens_1.ColonTok),
            matchers_1.createRegularToken(Switchcase_recovery_tokens_1.ReturnTok),
            matchers_1.createRegularToken(Switchcase_recovery_tokens_1.IntTok, "6"),
            matchers_1.createRegularToken(Switchcase_recovery_tokens_1.SemiColonTok),
            matchers_1.createRegularToken(Switchcase_recovery_tokens_1.SemiColonTok),
            matchers_1.createRegularToken(Switchcase_recovery_tokens_1.RCurlyTok)
        ];
        var parser = new switchcase_recovery_parser_1.SwitchCaseRecoveryParser();
        parser.input = input;
        var parseResult = parser.switchStmt();
        expect(parser.errors.length).to.equal(1);
        expect(parseResult).to.deep.equal({
            Terry: 2,
            Robert: 4,
            Brandon: 6
        });
    });
    it("will perform single token insertion for a missing colon", function () {
        var input = [
            // case "Terry" return 2 <-- missing the colon between "Terry" and return
            matchers_1.createRegularToken(Switchcase_recovery_tokens_1.CaseTok),
            matchers_1.createRegularToken(Switchcase_recovery_tokens_1.StringTok, "Terry"),
            /* createRegularToken(ColonTok) ,*/ matchers_1.createRegularToken(Switchcase_recovery_tokens_1.ReturnTok),
            matchers_1.createRegularToken(Switchcase_recovery_tokens_1.IntTok, "2"),
            matchers_1.createRegularToken(Switchcase_recovery_tokens_1.SemiColonTok)
        ];
        var parser = new switchcase_recovery_parser_1.SwitchCaseRecoveryParser();
        parser.input = input;
        var parseResult = parser.caseStmt();
        expect(parser.errors.length).to.equal(1);
        expect(parser.errors[0]).to.be.an.instanceof(exceptions_public_1.MismatchedTokenException);
        expect(parseResult).to.deep.equal({ Terry: 2 });
    });
    it("will NOT perform single token insertion for a missing string", function () {
        var input = [
            // case  : return 2 <-- missing the string for the case's value
            matchers_1.createRegularToken(Switchcase_recovery_tokens_1.CaseTok),
            /* new StringTok("Terry" , 0, 1, 1),*/ matchers_1.createRegularToken(Switchcase_recovery_tokens_1.ColonTok),
            matchers_1.createRegularToken(Switchcase_recovery_tokens_1.ReturnTok),
            matchers_1.createRegularToken(Switchcase_recovery_tokens_1.IntTok, "2"),
            matchers_1.createRegularToken(Switchcase_recovery_tokens_1.SemiColonTok)
        ];
        var parser = new switchcase_recovery_parser_1.SwitchCaseRecoveryParser();
        parser.input = input;
        var parseResult = parser.caseStmt();
        expect(parser.errors.length).to.equal(1);
        expect(parser.errors[0]).to.be.an.instanceof(exceptions_public_1.MismatchedTokenException);
        expect(parseResult).to.deep.equal({ invalid1: undefined });
    });
});
//# sourceMappingURL=swithcase_recovery_spec.js.map

/***/ }),
/* 62 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * a simple language made up of only
 * switch/case/return identifiers strings and integers
 *
 * example:
 * switch (name) {
 *    case "Terry" : return 2;
 *    case "Robert" : return 4;
 *    case "Brandon" : return 6;
 * }
 *
 * In this case the parser result is a "JSON" object representing the switch case:
 * for the above example the result would be:
 *
 * {
 *    "Terry"    : 2,
 *    "Robert"   : 4,
 *    "Brandon"   : 6
 * }
 *
 * forEach invalid case statement an invalidN property will be added
 * with an undefined value. for example :
 *
 * {
 *    "Terry"    : 2,
 *    "invalid1  : undefined
 *    "Brandon"   : 6
 * }
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var parser_traits_1 = __webpack_require__(5);
var allTokens = __webpack_require__(27);
var Switchcase_recovery_tokens_1 = __webpack_require__(27);
var utils_1 = __webpack_require__(0);
// DOCS: to enable error recovery functionality one must extend BaseErrorRecoveryRecognizer
var SwitchCaseRecoveryParser = /** @class */ (function (_super) {
    __extends(SwitchCaseRecoveryParser, _super);
    function SwitchCaseRecoveryParser(input) {
        if (input === void 0) { input = []; }
        var _this = 
        // DOCS: note the second parameter in the super class. this is the namespace in which the token constructors are defined.
        //       it is mandatory to provide this map to be able to perform self analysis
        //       and allow the framework to "understand" the implemented grammar.
        _super.call(this, allTokens, {
            recoveryEnabled: true,
            outputCst: false
        }) || this;
        _this.switchStmt = _this.RULE("switchStmt", _this.parseSwitchStmt, {
            recoveryValueFunc: function () {
                return {};
            }
        });
        _this.caseStmt = _this.RULE("caseStmt", _this.parseCaseStmt, {
            recoveryValueFunc: _this.INVALID()
        });
        // DOCS: in this example we avoid automatic missing token insertion for tokens that have additional semantic meaning.
        //       to understand this first consider the positive case, which tokens can we safely insert?
        //       a missing colon / semicolon ? yes a missing parenthesis ? yes
        //       but what about a missing StringToken? if we insert one, what will be its string value?
        //       an empty string? in the grammar this could lead to an empty key in the created object...
        //       what about a string with some random value? this could still lead to duplicate keys in the returned parse result
        _this.tokTypesThatCannotBeInsertedInRecovery = [
            Switchcase_recovery_tokens_1.IdentTok,
            Switchcase_recovery_tokens_1.StringTok,
            Switchcase_recovery_tokens_1.IntTok
        ];
        // because we are building a javascript object we must not have any duplications
        // in the name of the keys, the index below is used to solve this.
        _this.invalidIdx = 1;
        // DOCS: The call to performSelfAnalysis needs to happen after all the RULEs have been defined
        //       The typescript compiler places the constructor body last after initializations in the class's body
        //       which is why place the call here meets the criteria.
        _this.performSelfAnalysis();
        return _this;
    }
    // DOCS: overriding this method allows us to customize the logic for which tokens may not be automaticaly inserted
    // during error recovery.
    SwitchCaseRecoveryParser.prototype.canTokenTypeBeInsertedInRecovery = function (tokType) {
        return !utils_1.contains(this.tokTypesThatCannotBeInsertedInRecovery, tokType);
    };
    SwitchCaseRecoveryParser.prototype.parseSwitchStmt = function () {
        var _this = this;
        // house keeping so the invalid property names will not be dependent on
        // previous grammar rule invocations.
        this.invalidIdx = 1;
        var retObj = {};
        this.CONSUME(Switchcase_recovery_tokens_1.SwitchTok);
        this.CONSUME(Switchcase_recovery_tokens_1.LParenTok);
        this.CONSUME(Switchcase_recovery_tokens_1.IdentTok);
        this.CONSUME(Switchcase_recovery_tokens_1.RParenTok);
        this.CONSUME(Switchcase_recovery_tokens_1.LCurlyTok);
        this.AT_LEAST_ONE(function () {
            utils_1.assign(retObj, _this.SUBRULE(_this.caseStmt));
        });
        this.CONSUME(Switchcase_recovery_tokens_1.RCurlyTok);
        return retObj;
    };
    SwitchCaseRecoveryParser.prototype.parseCaseStmt = function () {
        var _this = this;
        var keyTok, valueTok, key, value;
        this.CONSUME(Switchcase_recovery_tokens_1.CaseTok);
        keyTok = this.CONSUME(Switchcase_recovery_tokens_1.StringTok);
        this.CONSUME(Switchcase_recovery_tokens_1.ColonTok);
        this.CONSUME(Switchcase_recovery_tokens_1.ReturnTok);
        valueTok = this.CONSUME(Switchcase_recovery_tokens_1.IntTok);
        this.OPTION6(function () {
            _this.CONSUME(Switchcase_recovery_tokens_1.SemiColonTok);
        });
        key = keyTok.image;
        value = parseInt(valueTok.image, 10);
        var caseKeyValue = {};
        caseKeyValue[key] = value;
        return caseKeyValue;
    };
    SwitchCaseRecoveryParser.prototype.INVALID = function () {
        var _this = this;
        return function () {
            var retObj = {};
            retObj["invalid" + _this.invalidIdx++] = undefined;
            return retObj;
        };
    };
    return SwitchCaseRecoveryParser;
}(parser_traits_1.Parser));
exports.SwitchCaseRecoveryParser = SwitchCaseRecoveryParser;
//# sourceMappingURL=switchcase_recovery_parser.js.map

/***/ }),
/* 63 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var parser_traits_1 = __webpack_require__(5);
var generate_public_1 = __webpack_require__(37);
var tokens_public_1 = __webpack_require__(1);
var matchers_1 = __webpack_require__(3);
var gast_public_1 = __webpack_require__(2);
var describeNodeOnly = describe;
if (typeof window !== "undefined") {
    describeNodeOnly = describe.skip;
}
describe("The Code Generation capabilities", function () {
    it("can generate a Terminal", function () {
        var Identifier = tokens_public_1.createToken({ name: "Identifier", pattern: /\w+/ });
        var tokenVocabulary = [Identifier];
        var rules = [
            new gast_public_1.Rule({
                name: "topRule",
                definition: [new gast_public_1.Terminal({ terminalType: Identifier })]
            })
        ];
        var parserFactory = generate_public_1.generateParserFactory({
            name: "genTerminalParser",
            rules: rules,
            tokenVocabulary: tokenVocabulary
        });
        var myParser = parserFactory({});
        myParser.input = [matchers_1.createRegularToken(Identifier)];
        myParser.topRule();
        expect(myParser.errors).to.be.empty;
    });
    it("can generate a NonTerminal", function () {
        var Identifier = tokens_public_1.createToken({ name: "Identifier", pattern: /\w+/ });
        var tokenVocabulary = [Identifier];
        var rules = [
            new gast_public_1.Rule({
                name: "topRule",
                definition: [
                    new gast_public_1.NonTerminal({ nonTerminalName: "nestedRules" })
                ]
            }),
            new gast_public_1.Rule({
                name: "nestedRules",
                definition: [new gast_public_1.Terminal({ terminalType: Identifier })]
            })
        ];
        var parserFactory = generate_public_1.generateParserFactory({
            name: "genNoneTerminalParser",
            rules: rules,
            tokenVocabulary: tokenVocabulary
        });
        var myParser = parserFactory();
        myParser.input = [matchers_1.createRegularToken(Identifier)];
        myParser.topRule();
        expect(myParser.errors).to.be.empty;
    });
    it("can generate a Option", function () {
        var Identifier = tokens_public_1.createToken({ name: "Identifier", pattern: /\w+/ });
        var tokenVocabulary = [Identifier];
        var rules = [
            new gast_public_1.Rule({
                name: "topRule",
                definition: [
                    new gast_public_1.Option({
                        definition: [
                            new gast_public_1.Flat({
                                definition: [
                                    new gast_public_1.Terminal({ terminalType: Identifier })
                                ]
                            })
                        ]
                    })
                ]
            })
        ];
        var parserFactory = generate_public_1.generateParserFactory({
            name: "genOptionParser",
            rules: rules,
            tokenVocabulary: tokenVocabulary
        });
        var myParser = parserFactory();
        myParser.input = [matchers_1.createRegularToken(Identifier)];
        myParser.topRule();
        expect(myParser.errors).to.be.empty;
        myParser.input = [];
        myParser.topRule();
        expect(myParser.errors).to.be.empty;
    });
    it("can generate a Or", function () {
        var Identifier = tokens_public_1.createToken({ name: "Identifier", pattern: /\w+/ });
        var Integer = tokens_public_1.createToken({ name: "Integer", pattern: /\d+/ });
        var tokenVocabulary = [Identifier, Integer];
        var rules = [
            new gast_public_1.Rule({
                name: "topRule",
                definition: [
                    new gast_public_1.Alternation({
                        definition: [
                            new gast_public_1.Flat({
                                definition: [
                                    new gast_public_1.Terminal({
                                        terminalType: Identifier
                                    })
                                ]
                            }),
                            new gast_public_1.Flat({
                                definition: [
                                    new gast_public_1.Terminal({ terminalType: Integer })
                                ],
                                name: "$inlinedRule"
                            })
                        ]
                    })
                ]
            })
        ];
        var parserFactory = generate_public_1.generateParserFactory({
            name: "genOrParser",
            rules: rules,
            tokenVocabulary: tokenVocabulary
        });
        var myParser = parserFactory();
        myParser.input = [matchers_1.createRegularToken(Identifier)];
        myParser.topRule();
        expect(myParser.errors).to.be.empty;
        myParser.input = [matchers_1.createRegularToken(Integer)];
        myParser.topRule();
        expect(myParser.errors).to.be.empty;
    });
    it("can generate a Repetition", function () {
        var Identifier = tokens_public_1.createToken({ name: "Identifier", pattern: /\w+/ });
        var tokenVocabulary = [Identifier];
        var rules = [
            new gast_public_1.Rule({
                name: "topRule",
                definition: [
                    new gast_public_1.Repetition({
                        definition: [
                            new gast_public_1.Terminal({ terminalType: Identifier })
                        ],
                        idx: 1,
                        name: "$inlinedRule"
                    })
                ]
            })
        ];
        var parserFactory = generate_public_1.generateParserFactory({
            name: "genManyParser",
            rules: rules,
            tokenVocabulary: tokenVocabulary
        });
        var myParser = parserFactory();
        myParser.input = [matchers_1.createRegularToken(Identifier)];
        myParser.topRule();
        expect(myParser.errors).to.be.empty;
        myParser.input = [
            matchers_1.createRegularToken(Identifier),
            matchers_1.createRegularToken(Identifier),
            matchers_1.createRegularToken(Identifier)
        ];
        myParser.topRule();
        expect(myParser.errors).to.be.empty;
    });
    it("can generate a Mandatory Repetition", function () {
        var Identifier = tokens_public_1.createToken({ name: "Identifier", pattern: /\w+/ });
        var tokenVocabulary = [Identifier];
        var rules = [
            new gast_public_1.Rule({
                name: "topRule",
                definition: [
                    new gast_public_1.RepetitionMandatory({
                        definition: [new gast_public_1.Terminal({ terminalType: Identifier })]
                    })
                ]
            })
        ];
        var parserFactory = generate_public_1.generateParserFactory({
            name: "genAtLeastOneParser",
            rules: rules,
            tokenVocabulary: tokenVocabulary
        });
        var myParser = parserFactory();
        myParser.input = [matchers_1.createRegularToken(Identifier)];
        myParser.topRule();
        expect(myParser.errors).to.be.empty;
        myParser.input = [
            matchers_1.createRegularToken(Identifier),
            matchers_1.createRegularToken(Identifier),
            matchers_1.createRegularToken(Identifier)
        ];
        myParser.topRule();
        expect(myParser.errors).to.be.empty;
    });
    it("can generate a Repetition with separator", function () {
        var Identifier = tokens_public_1.createToken({ name: "Identifier", pattern: /\w+/ });
        var Comma = tokens_public_1.createToken({ name: "Comma", pattern: /,/ });
        var tokenVocabulary = [Identifier, Comma];
        var rules = [
            new gast_public_1.Rule({
                name: "topRule",
                definition: [
                    new gast_public_1.RepetitionWithSeparator({
                        definition: [
                            new gast_public_1.Terminal({ terminalType: Identifier })
                        ],
                        separator: Comma
                    })
                ]
            })
        ];
        var parserFactory = generate_public_1.generateParserFactory({
            name: "genManySepParser",
            rules: rules,
            tokenVocabulary: tokenVocabulary
        });
        var myParser = parserFactory();
        myParser.input = [];
        myParser.topRule();
        expect(myParser.errors).to.be.empty;
        myParser.input = [
            matchers_1.createRegularToken(Identifier),
            matchers_1.createRegularToken(Comma),
            matchers_1.createRegularToken(Identifier),
            matchers_1.createRegularToken(Comma),
            matchers_1.createRegularToken(Identifier)
        ];
        myParser.topRule();
        expect(myParser.errors).to.be.empty;
    });
    it("can generate a Mandatory Repetition with separator", function () {
        var Identifier = tokens_public_1.createToken({ name: "Identifier", pattern: /\w+/ });
        var Comma = tokens_public_1.createToken({ name: "Comma", pattern: /,/ });
        var tokenVocabulary = [Identifier, Comma];
        var rules = [
            new gast_public_1.Rule({
                name: "topRule",
                definition: [
                    new gast_public_1.RepetitionMandatoryWithSeparator({
                        definition: [
                            new gast_public_1.Terminal({ terminalType: Identifier })
                        ],
                        separator: Comma
                    })
                ]
            })
        ];
        var parserFactory = generate_public_1.generateParserFactory({
            name: "genAtLeastOneSepParser",
            rules: rules,
            tokenVocabulary: tokenVocabulary
        });
        var myParser = parserFactory();
        myParser.input = [matchers_1.createRegularToken(Identifier)];
        myParser.topRule();
        expect(myParser.errors).to.be.empty;
        myParser.input = [
            matchers_1.createRegularToken(Identifier),
            matchers_1.createRegularToken(Comma),
            matchers_1.createRegularToken(Identifier),
            matchers_1.createRegularToken(Comma),
            matchers_1.createRegularToken(Identifier)
        ];
        myParser.topRule();
        expect(myParser.errors).to.be.empty;
    });
    describeNodeOnly("moduleGeneration", function () {
        before(function () {
            var mock = __webpack_require__(40);
            mock("chevrotain", { Parser: parser_traits_1.Parser });
        });
        it("Can generate a module", function () {
            var requireFromString = __webpack_require__(64);
            var Identifier = tokens_public_1.createToken({
                name: "Identifier",
                pattern: /\w+/
            });
            var Integer = tokens_public_1.createToken({ name: "Integer", pattern: /\d+/ });
            var tokenVocabulary = [Identifier, Integer];
            var rules = [
                new gast_public_1.Rule({
                    name: "topRule",
                    definition: [
                        new gast_public_1.Alternation({
                            definition: [
                                new gast_public_1.Flat({
                                    definition: [
                                        new gast_public_1.RepetitionMandatory({
                                            definition: [
                                                new gast_public_1.Terminal({
                                                    terminalType: Identifier
                                                })
                                            ]
                                        })
                                    ]
                                }),
                                new gast_public_1.Flat({
                                    definition: [
                                        new gast_public_1.Terminal({
                                            terminalType: Integer
                                        })
                                    ]
                                })
                            ]
                        })
                    ]
                })
            ];
            var parserModuleText = generate_public_1.generateParserModule({
                name: "genOrParserModule",
                rules: rules
            });
            var parserModule = requireFromString(parserModuleText);
            var myParser = new parserModule.genOrParserModule(tokenVocabulary);
            myParser.input = [matchers_1.createRegularToken(Identifier)];
            myParser.topRule();
            expect(myParser.errors).to.be.empty;
            myParser.input = [matchers_1.createRegularToken(Integer)];
            myParser.topRule();
            expect(myParser.errors).to.be.empty;
        });
        after(function () {
            var mock = __webpack_require__(40);
            mock.stop("chevrotain");
        });
    });
});
//# sourceMappingURL=generate_spec.js.map

/***/ }),
/* 64 */
/***/ (function(module, exports) {

module.exports = require-from-string;

/***/ }),
/* 65 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var lang_extensions_1 = __webpack_require__(7);
describe("The HashTable implementation", function () {
    it("will return undefined for a key that does not exist, and the value for a key that does exist", function () {
        var hashTable = new lang_extensions_1.HashTable();
        hashTable.put("one", 1);
        hashTable.put("two", 2);
        expect(hashTable.get("one")).to.equal(1);
        expect(hashTable.get("two")).to.equal(2);
        expect(hashTable.get("three")).to.be.undefined;
    });
    it("support property names that are also names of built in properties on javascript Object", function () {
        var hashTable = new lang_extensions_1.HashTable();
        hashTable.put("toString", 1);
        hashTable.put("hasOwnProperty", 2);
        expect(hashTable.get("toString")).to.equal(1);
        expect(hashTable.get("hasOwnProperty")).to.equal(2);
    });
    it("can be cleared", function () {
        var hashTable = new lang_extensions_1.HashTable();
        hashTable.put("one", 1);
        hashTable.put("two", 2);
        expect(hashTable.get("one")).to.equal(1);
        expect(hashTable.get("two")).to.equal(2);
        hashTable.clear();
        expect(hashTable.get("one")).to.be.undefined;
        expect(hashTable.get("two")).to.be.undefined;
    });
});
//# sourceMappingURL=hash_table_spec.js.map

/***/ }),
/* 66 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var tokens_public_1 = __webpack_require__(1);
var parser_traits_1 = __webpack_require__(5);
var tokens_1 = __webpack_require__(6);
var matchers_1 = __webpack_require__(3);
var utils_1 = __webpack_require__(0);
function createTokenVector(tokTypes) {
    return utils_1.map(tokTypes, function (curTokType) {
        return matchers_1.createRegularToken(curTokType);
    });
}
context("CST", function () {
    var A = tokens_public_1.createToken({ name: "A" });
    var B = tokens_public_1.createToken({ name: "B" });
    var C = tokens_public_1.createToken({ name: "C" });
    var D = tokens_public_1.createToken({ name: "D" });
    var E = tokens_public_1.createToken({ name: "E" });
    var ALL_TOKENS = [A, B, C, D, E];
    it("Can output a CST for a flat structure", function () {
        var CstTerminalParser = /** @class */ (function (_super) {
            __extends(CstTerminalParser, _super);
            function CstTerminalParser(input) {
                if (input === void 0) { input = []; }
                var _this = _super.call(this, ALL_TOKENS) || this;
                _this.testRule = _this.RULE("testRule", function () {
                    _this.CONSUME(A);
                    _this.CONSUME(B);
                    _this.SUBRULE(_this.bamba);
                });
                _this.bamba = _this.RULE("bamba", function () {
                    _this.CONSUME(C);
                });
                _this.input = input;
                _this.performSelfAnalysis();
                return _this;
            }
            return CstTerminalParser;
        }(parser_traits_1.Parser));
        var input = [
            matchers_1.createRegularToken(A),
            matchers_1.createRegularToken(B),
            matchers_1.createRegularToken(C)
        ];
        var parser = new CstTerminalParser(input);
        var cst = parser.testRule();
        expect(cst.name).to.equal("testRule");
        expect(cst.children).to.have.keys("A", "B", "bamba");
        expect(tokens_1.tokenStructuredMatcher(cst.children.A[0], A)).to.be.true;
        expect(tokens_1.tokenStructuredMatcher(cst.children.B[0], B)).to.be.true;
        expect(cst.children.bamba[0].name).to.equal("bamba");
        expect(tokens_1.tokenStructuredMatcher(cst.children.bamba[0].children.C[0], C))
            .to.be.true;
    });
    it("Can output a CST with labels", function () {
        var CstTerminalParser2 = /** @class */ (function (_super) {
            __extends(CstTerminalParser2, _super);
            function CstTerminalParser2(input) {
                if (input === void 0) { input = []; }
                var _this = _super.call(this, ALL_TOKENS, {
                    outputCst: true
                }) || this;
                _this.testRule = _this.RULE("testRule", function () {
                    _this.CONSUME(A, { LABEL: "myLabel" });
                    _this.CONSUME(B);
                    _this.SUBRULE(_this.bamba, { LABEL: "myOtherLabel" });
                });
                _this.bamba = _this.RULE("bamba", function () {
                    _this.CONSUME(C);
                });
                _this.input = input;
                _this.performSelfAnalysis();
                return _this;
            }
            return CstTerminalParser2;
        }(parser_traits_1.Parser));
        var input = [
            matchers_1.createRegularToken(A),
            matchers_1.createRegularToken(B),
            matchers_1.createRegularToken(C)
        ];
        var parser = new CstTerminalParser2(input);
        var cst = parser.testRule();
        expect(cst.name).to.equal("testRule");
        expect(cst.children).to.have.keys("myLabel", "B", "myOtherLabel");
        expect(tokens_1.tokenStructuredMatcher(cst.children.myLabel[0], A)).to.be.true;
        expect(tokens_1.tokenStructuredMatcher(cst.children.B[0], B)).to.be.true;
        expect(cst.children.myOtherLabel[0].name).to.equal("bamba");
        expect(tokens_1.tokenStructuredMatcher(cst.children.myOtherLabel[0].children.C[0], C)).to.be.true;
    });
    it("Can output a CST with labels in recovery", function () {
        var CstTerminalParserWithLabels = /** @class */ (function (_super) {
            __extends(CstTerminalParserWithLabels, _super);
            function CstTerminalParserWithLabels(input) {
                if (input === void 0) { input = []; }
                var _this = _super.call(this, ALL_TOKENS, {
                    outputCst: true,
                    recoveryEnabled: true
                }) || this;
                _this.testRule = _this.RULE("testRule", function () {
                    _this.CONSUME(A, { LABEL: "myLabel" });
                    _this.CONSUME(B);
                    _this.SUBRULE(_this.bamba, { LABEL: "myOtherLabel" });
                });
                _this.bamba = _this.RULE("bamba", function () {
                    _this.CONSUME(C);
                });
                _this.input = input;
                _this.performSelfAnalysis();
                return _this;
            }
            return CstTerminalParserWithLabels;
        }(parser_traits_1.Parser));
        var input = [matchers_1.createRegularToken(A), matchers_1.createRegularToken(B)];
        var parser = new CstTerminalParserWithLabels(input);
        var cst = parser.testRule();
        expect(cst.name).to.equal("testRule");
        expect(cst.children).to.have.keys("myLabel", "B", "myOtherLabel");
        expect(tokens_1.tokenStructuredMatcher(cst.children.myLabel[0], A)).to.be.true;
        expect(tokens_1.tokenStructuredMatcher(cst.children.B[0], B)).to.be.true;
        expect(cst.children.myOtherLabel[0].name).to.equal("bamba");
        expect(cst.children.myOtherLabel[0].recoveredNode).to.be.true;
    });
    it("Can output a CST for a Terminal - alternations", function () {
        var CstTerminalAlternationParser = /** @class */ (function (_super) {
            __extends(CstTerminalAlternationParser, _super);
            function CstTerminalAlternationParser(input) {
                if (input === void 0) { input = []; }
                var _this = _super.call(this, ALL_TOKENS, {
                    outputCst: true
                }) || this;
                _this.testRule = _this.RULE("testRule", function () {
                    _this.OR([
                        {
                            ALT: function () {
                                _this.CONSUME(A);
                            }
                        },
                        {
                            ALT: function () {
                                _this.CONSUME(B);
                                _this.SUBRULE(_this.bamba);
                            }
                        }
                    ]);
                });
                _this.bamba = _this.RULE("bamba", function () {
                    _this.CONSUME(C);
                });
                _this.input = input;
                _this.performSelfAnalysis();
                return _this;
            }
            return CstTerminalAlternationParser;
        }(parser_traits_1.Parser));
        var input = [matchers_1.createRegularToken(A)];
        var parser = new CstTerminalAlternationParser(input);
        var cst = parser.testRule();
        expect(cst.name).to.equal("testRule");
        expect(cst.children).to.have.keys("A");
        expect(tokens_1.tokenStructuredMatcher(cst.children.A[0], A)).to.be.true;
        expect(cst.children.bamba).to.be.undefined;
    });
    it("Can output a CST for a Terminal - alternations - single", function () {
        var CstTerminalAlternationSingleAltParser = /** @class */ (function (_super) {
            __extends(CstTerminalAlternationSingleAltParser, _super);
            function CstTerminalAlternationSingleAltParser(input) {
                if (input === void 0) { input = []; }
                var _this = _super.call(this, ALL_TOKENS, {
                    outputCst: true
                }) || this;
                _this.testRule = _this.RULE("testRule", function () {
                    _this.OR([
                        {
                            ALT: function () {
                                _this.CONSUME(A);
                                _this.CONSUME(B);
                            }
                        }
                    ]);
                });
                _this.input = input;
                _this.performSelfAnalysis();
                return _this;
            }
            return CstTerminalAlternationSingleAltParser;
        }(parser_traits_1.Parser));
        var input = [matchers_1.createRegularToken(A), matchers_1.createRegularToken(B)];
        var parser = new CstTerminalAlternationSingleAltParser(input);
        var cst = parser.testRule();
        expect(cst.name).to.equal("testRule");
        expect(cst.children).to.have.keys("A", "B");
        expect(tokens_1.tokenStructuredMatcher(cst.children.A[0], A)).to.be.true;
        expect(tokens_1.tokenStructuredMatcher(cst.children.B[0], B)).to.be.true;
    });
    it("Can output a CST for a Terminal with multiple occurrences", function () {
        var CstMultiTerminalParser = /** @class */ (function (_super) {
            __extends(CstMultiTerminalParser, _super);
            function CstMultiTerminalParser(input) {
                if (input === void 0) { input = []; }
                var _this = _super.call(this, ALL_TOKENS, {
                    outputCst: true
                }) || this;
                _this.testRule = _this.RULE("testRule", function () {
                    _this.CONSUME(A);
                    _this.CONSUME(B);
                    _this.CONSUME2(A);
                });
                _this.input = input;
                _this.performSelfAnalysis();
                return _this;
            }
            return CstMultiTerminalParser;
        }(parser_traits_1.Parser));
        var input = [
            matchers_1.createRegularToken(A),
            matchers_1.createRegularToken(B),
            matchers_1.createRegularToken(A)
        ];
        var parser = new CstMultiTerminalParser(input);
        var cst = parser.testRule();
        expect(cst.name).to.equal("testRule");
        expect(cst.children).to.have.keys("A", "B");
        expect(cst.children.A).to.have.length(2);
        expect(tokens_1.tokenStructuredMatcher(cst.children.A[0], A)).to.be.true;
        expect(tokens_1.tokenStructuredMatcher(cst.children.A[1], A)).to.be.true;
        expect(tokens_1.tokenStructuredMatcher(cst.children.B[0], B)).to.be.true;
    });
    it("Can output a CST for a Terminal with multiple occurrences - iteration", function () {
        var CstMultiTerminalWithManyParser = /** @class */ (function (_super) {
            __extends(CstMultiTerminalWithManyParser, _super);
            function CstMultiTerminalWithManyParser(input) {
                if (input === void 0) { input = []; }
                var _this = _super.call(this, ALL_TOKENS, {
                    outputCst: true
                }) || this;
                _this.testRule = _this.RULE("testRule", function () {
                    _this.MANY(function () {
                        _this.CONSUME(A);
                        _this.SUBRULE(_this.bamba);
                    });
                    _this.CONSUME(B);
                });
                _this.bamba = _this.RULE("bamba", function () {
                    _this.CONSUME(C);
                });
                _this.input = input;
                _this.performSelfAnalysis();
                return _this;
            }
            return CstMultiTerminalWithManyParser;
        }(parser_traits_1.Parser));
        var input = [
            matchers_1.createRegularToken(A),
            matchers_1.createRegularToken(C),
            matchers_1.createRegularToken(A),
            matchers_1.createRegularToken(C),
            matchers_1.createRegularToken(A),
            matchers_1.createRegularToken(C),
            matchers_1.createRegularToken(B)
        ];
        var parser = new CstMultiTerminalWithManyParser(input);
        var cst = parser.testRule();
        expect(cst.name).to.equal("testRule");
        expect(cst.children).to.have.keys("A", "B", "bamba");
        expect(cst.children.A).to.have.length(3);
        expect(tokens_1.tokenStructuredMatcher(cst.children.A[0], A)).to.be.true;
        expect(tokens_1.tokenStructuredMatcher(cst.children.A[1], A)).to.be.true;
        expect(tokens_1.tokenStructuredMatcher(cst.children.A[2], A)).to.be.true;
        expect(tokens_1.tokenStructuredMatcher(cst.children.B[0], B)).to.be.true;
        expect(cst.children.bamba).to.have.length(3);
        expect(tokens_1.tokenStructuredMatcher(cst.children.bamba[0].children.C[0], C))
            .to.be.true;
        expect(tokens_1.tokenStructuredMatcher(cst.children.bamba[1].children.C[0], C))
            .to.be.true;
        expect(tokens_1.tokenStructuredMatcher(cst.children.bamba[2].children.C[0], C))
            .to.be.true;
    });
    context("Can output a CST for an optional terminal", function () {
        var CstOptionalTerminalParser = /** @class */ (function (_super) {
            __extends(CstOptionalTerminalParser, _super);
            function CstOptionalTerminalParser(input) {
                if (input === void 0) { input = []; }
                var _this = _super.call(this, ALL_TOKENS, {
                    outputCst: true
                }) || this;
                _this.ruleWithOptional = _this.RULE("ruleWithOptional", function () {
                    _this.OPTION(function () {
                        _this.CONSUME(A);
                        _this.SUBRULE(_this.bamba);
                    });
                    _this.CONSUME(B);
                });
                _this.bamba = _this.RULE("bamba", function () {
                    _this.CONSUME(C);
                });
                _this.input = input;
                _this.performSelfAnalysis();
                return _this;
            }
            return CstOptionalTerminalParser;
        }(parser_traits_1.Parser));
        it("path taken", function () {
            var input = [
                matchers_1.createRegularToken(A),
                matchers_1.createRegularToken(C),
                matchers_1.createRegularToken(B)
            ];
            var parser = new CstOptionalTerminalParser(input);
            var cst = parser.ruleWithOptional();
            expect(cst.name).to.equal("ruleWithOptional");
            expect(cst.children).to.have.keys("A", "B", "bamba");
            expect(tokens_1.tokenStructuredMatcher(cst.children.A[0], A)).to.be.true;
            expect(cst.children.bamba[0].name).to.equal("bamba");
            expect(tokens_1.tokenStructuredMatcher(cst.children.bamba[0].children.C[0], C)).to.be.true;
            expect(tokens_1.tokenStructuredMatcher(cst.children.B[0], B)).to.be.true;
        });
        it("path NOT taken", function () {
            var input = [matchers_1.createRegularToken(B)];
            var parser = new CstOptionalTerminalParser(input);
            var cst = parser.ruleWithOptional();
            expect(cst.name).to.equal("ruleWithOptional");
            expect(cst.children).to.have.keys("B");
            expect(cst.children.A).to.be.undefined;
            expect(cst.children.bamba).to.be.undefined;
            expect(tokens_1.tokenStructuredMatcher(cst.children.B[0], B)).to.be.true;
        });
    });
    it("Can output a CST for a Terminal with multiple occurrences - iteration mandatory", function () {
        var CstMultiTerminalWithAtLeastOneParser = /** @class */ (function (_super) {
            __extends(CstMultiTerminalWithAtLeastOneParser, _super);
            function CstMultiTerminalWithAtLeastOneParser(input) {
                if (input === void 0) { input = []; }
                var _this = _super.call(this, ALL_TOKENS, {
                    outputCst: true
                }) || this;
                _this.testRule = _this.RULE("testRule", function () {
                    _this.AT_LEAST_ONE(function () {
                        _this.CONSUME(A);
                    });
                    _this.CONSUME(B);
                });
                _this.input = input;
                _this.performSelfAnalysis();
                return _this;
            }
            return CstMultiTerminalWithAtLeastOneParser;
        }(parser_traits_1.Parser));
        var input = [
            matchers_1.createRegularToken(A),
            matchers_1.createRegularToken(A),
            matchers_1.createRegularToken(A),
            matchers_1.createRegularToken(B)
        ];
        var parser = new CstMultiTerminalWithAtLeastOneParser(input);
        var cst = parser.testRule();
        expect(cst.name).to.equal("testRule");
        expect(cst.children).to.have.keys("A", "B");
        expect(cst.children.A).to.have.length(3);
        expect(tokens_1.tokenStructuredMatcher(cst.children.A[0], A)).to.be.true;
        expect(tokens_1.tokenStructuredMatcher(cst.children.A[1], A)).to.be.true;
        expect(tokens_1.tokenStructuredMatcher(cst.children.A[2], A)).to.be.true;
        expect(tokens_1.tokenStructuredMatcher(cst.children.B[0], B)).to.be.true;
    });
    it("Can output a CST for a Terminal with multiple occurrences - iteration SEP", function () {
        var CstMultiTerminalWithManySepParser = /** @class */ (function (_super) {
            __extends(CstMultiTerminalWithManySepParser, _super);
            function CstMultiTerminalWithManySepParser(input) {
                if (input === void 0) { input = []; }
                var _this = _super.call(this, ALL_TOKENS, {
                    outputCst: true
                }) || this;
                _this.testRule = _this.RULE("testRule", function () {
                    _this.MANY_SEP({
                        SEP: C,
                        DEF: function () {
                            _this.CONSUME(A);
                        }
                    });
                    _this.CONSUME(B);
                });
                _this.input = input;
                _this.performSelfAnalysis();
                return _this;
            }
            return CstMultiTerminalWithManySepParser;
        }(parser_traits_1.Parser));
        var input = [
            matchers_1.createRegularToken(A),
            matchers_1.createRegularToken(C),
            matchers_1.createRegularToken(A),
            matchers_1.createRegularToken(B)
        ];
        var parser = new CstMultiTerminalWithManySepParser(input);
        var cst = parser.testRule();
        expect(cst.name).to.equal("testRule");
        expect(cst.children).to.have.keys("A", "B", "C");
        expect(cst.children.A).to.have.length(2);
        expect(tokens_1.tokenStructuredMatcher(cst.children.A[0], A)).to.be.true;
        expect(tokens_1.tokenStructuredMatcher(cst.children.A[1], A)).to.be.true;
        expect(tokens_1.tokenStructuredMatcher(cst.children.B[0], B)).to.be.true;
        expect(cst.children.C).to.have.length(1);
        expect(tokens_1.tokenStructuredMatcher(cst.children.C[0], C)).to.be.true;
    });
    it("Can output a CST for a Terminal with multiple occurrences - iteration SEP mandatory", function () {
        var CstMultiTerminalWithAtLeastOneSepParser = /** @class */ (function (_super) {
            __extends(CstMultiTerminalWithAtLeastOneSepParser, _super);
            function CstMultiTerminalWithAtLeastOneSepParser(input) {
                if (input === void 0) { input = []; }
                var _this = _super.call(this, ALL_TOKENS, {
                    outputCst: true
                }) || this;
                _this.testRule = _this.RULE("testRule", function () {
                    _this.AT_LEAST_ONE_SEP({
                        SEP: C,
                        DEF: function () {
                            _this.CONSUME(A);
                        }
                    });
                    _this.CONSUME(B);
                });
                _this.input = input;
                _this.performSelfAnalysis();
                return _this;
            }
            return CstMultiTerminalWithAtLeastOneSepParser;
        }(parser_traits_1.Parser));
        var input = [
            matchers_1.createRegularToken(A),
            matchers_1.createRegularToken(C),
            matchers_1.createRegularToken(A),
            matchers_1.createRegularToken(B)
        ];
        var parser = new CstMultiTerminalWithAtLeastOneSepParser(input);
        var cst = parser.testRule();
        expect(cst.name).to.equal("testRule");
        expect(cst.children).to.have.keys("A", "B", "C");
        expect(cst.children.A).to.have.length(2);
        expect(tokens_1.tokenStructuredMatcher(cst.children.A[0], A)).to.be.true;
        expect(tokens_1.tokenStructuredMatcher(cst.children.A[1], A)).to.be.true;
        expect(tokens_1.tokenStructuredMatcher(cst.children.B[0], B)).to.be.true;
        expect(cst.children.C).to.have.length(1);
        expect(tokens_1.tokenStructuredMatcher(cst.children.C[0], C)).to.be.true;
    });
    context("nested rules", function () {
        context("Can output cst when using OPTION", function () {
            var CstOptionalNestedTerminalParser = /** @class */ (function (_super) {
                __extends(CstOptionalNestedTerminalParser, _super);
                function CstOptionalNestedTerminalParser(input) {
                    if (input === void 0) { input = []; }
                    var _this = _super.call(this, ALL_TOKENS, {
                        outputCst: true
                    }) || this;
                    _this.ruleWithOptional = _this.RULE("ruleWithOptional", function () {
                        _this.OPTION({
                            NAME: "$nestedOption",
                            DEF: function () {
                                _this.CONSUME(A);
                                _this.SUBRULE(_this.bamba);
                            }
                        });
                        _this.CONSUME(B);
                    });
                    _this.bamba = _this.RULE("bamba", function () {
                        _this.CONSUME(C);
                    });
                    _this.input = input;
                    _this.performSelfAnalysis();
                    return _this;
                }
                return CstOptionalNestedTerminalParser;
            }(parser_traits_1.Parser));
            it("path taken", function () {
                var input = [
                    matchers_1.createRegularToken(A),
                    matchers_1.createRegularToken(C),
                    matchers_1.createRegularToken(B)
                ];
                var parser = new CstOptionalNestedTerminalParser(input);
                var cst = parser.ruleWithOptional();
                expect(cst.name).to.equal("ruleWithOptional");
                expect(cst.children).to.have.keys("$nestedOption", "B");
                var $nestedOptionCst = cst.children.$nestedOption[0];
                expect(tokens_1.tokenStructuredMatcher($nestedOptionCst.children.A[0], A)).to.be.true;
                expect($nestedOptionCst.children.bamba[0].name).to.equal("bamba");
                expect(tokens_1.tokenStructuredMatcher($nestedOptionCst.children.bamba[0].children.C[0], C)).to.be.true;
                expect(tokens_1.tokenStructuredMatcher(cst.children.B[0], B)).to.be.true;
            });
            it("path NOT taken", function () {
                var input = [matchers_1.createRegularToken(B)];
                var parser = new CstOptionalNestedTerminalParser(input);
                var cst = parser.ruleWithOptional();
                expect(cst.name).to.equal("ruleWithOptional");
                // nested rule is equivalent to an optionally empty rule call
                expect(cst.children).to.have.keys("B", "$nestedOption");
                var $nestedOptionCst = cst.children.$nestedOption[0];
                expect($nestedOptionCst.children.A).to.be.undefined;
                expect($nestedOptionCst.children.bamba).to.be.undefined;
                expect(tokens_1.tokenStructuredMatcher(cst.children.B[0], B)).to.be.true;
            });
        });
        it("Can output a CST when using OR with nested named Alternatives", function () {
            var CstAlternationNestedAltParser = /** @class */ (function (_super) {
                __extends(CstAlternationNestedAltParser, _super);
                function CstAlternationNestedAltParser(input) {
                    if (input === void 0) { input = []; }
                    var _this = _super.call(this, ALL_TOKENS, {
                        outputCst: true
                    }) || this;
                    _this.testRule = _this.RULE("testRule", function () {
                        _this.OR([
                            {
                                NAME: "$first_alternative",
                                ALT: function () {
                                    _this.CONSUME(A);
                                }
                            },
                            {
                                ALT: function () {
                                    _this.CONSUME(B);
                                    _this.SUBRULE(_this.bamba);
                                }
                            }
                        ]);
                    });
                    _this.bamba = _this.RULE("bamba", function () {
                        _this.CONSUME(C);
                    });
                    _this.input = input;
                    _this.performSelfAnalysis();
                    return _this;
                }
                return CstAlternationNestedAltParser;
            }(parser_traits_1.Parser));
            var input = [matchers_1.createRegularToken(A)];
            var parser = new CstAlternationNestedAltParser(input);
            var cst = parser.testRule();
            expect(cst.name).to.equal("testRule");
            expect(cst.children).to.have.keys("$first_alternative");
            var firstAltCst = cst.children.$first_alternative[0];
            expect(tokens_1.tokenStructuredMatcher(firstAltCst.children.A[0], A)).to.be
                .true;
            expect(cst.children.bamba).to.be.undefined;
            expect(cst.children.B).to.be.undefined;
        });
        it("Can output a CST when using OR", function () {
            var CstAlternationNestedParser = /** @class */ (function (_super) {
                __extends(CstAlternationNestedParser, _super);
                function CstAlternationNestedParser(input) {
                    if (input === void 0) { input = []; }
                    var _this = _super.call(this, ALL_TOKENS, {
                        outputCst: true
                    }) || this;
                    _this.testRule = _this.RULE("testRule", function () {
                        _this.OR({
                            NAME: "$nestedOr",
                            DEF: [
                                {
                                    ALT: function () {
                                        _this.CONSUME(A);
                                    }
                                },
                                {
                                    ALT: function () {
                                        _this.CONSUME(B);
                                        _this.SUBRULE(_this.bamba);
                                    }
                                }
                            ]
                        });
                    });
                    _this.bamba = _this.RULE("bamba", function () {
                        _this.CONSUME(C);
                    });
                    _this.input = input;
                    _this.performSelfAnalysis();
                    return _this;
                }
                return CstAlternationNestedParser;
            }(parser_traits_1.Parser));
            var input = [matchers_1.createRegularToken(A)];
            var parser = new CstAlternationNestedParser(input);
            var cst = parser.testRule();
            expect(cst.name).to.equal("testRule");
            expect(cst.children).to.have.keys("$nestedOr");
            var orCst = cst.children.$nestedOr[0];
            expect(orCst.children).to.have.keys("A");
            expect(tokens_1.tokenStructuredMatcher(orCst.children.A[0], A)).to.be.true;
            expect(orCst.children.bamba).to.be.undefined;
            expect(orCst.children.B).to.be.undefined;
        });
        it("Can output a CST when using OR - single Alt", function () {
            var CstAlternationNestedAltSingleParser = /** @class */ (function (_super) {
                __extends(CstAlternationNestedAltSingleParser, _super);
                function CstAlternationNestedAltSingleParser(input) {
                    if (input === void 0) { input = []; }
                    var _this = _super.call(this, ALL_TOKENS, {
                        outputCst: true
                    }) || this;
                    _this.testRule = _this.RULE("testRule", function () {
                        _this.OR([
                            {
                                NAME: "$nestedAlt",
                                ALT: function () {
                                    _this.CONSUME(B);
                                    _this.SUBRULE(_this.bamba);
                                }
                            }
                        ]);
                    });
                    _this.bamba = _this.RULE("bamba", function () {
                        _this.CONSUME(C);
                    });
                    _this.input = input;
                    _this.performSelfAnalysis();
                    return _this;
                }
                return CstAlternationNestedAltSingleParser;
            }(parser_traits_1.Parser));
            var input = [matchers_1.createRegularToken(B), matchers_1.createRegularToken(C)];
            var parser = new CstAlternationNestedAltSingleParser(input);
            var cst = parser.testRule();
            expect(cst.name).to.equal("testRule");
            expect(cst.children).to.have.keys("$nestedAlt");
            var altCst = cst.children.$nestedAlt[0];
            expect(altCst.children).to.have.keys("B", "bamba");
            expect(tokens_1.tokenStructuredMatcher(altCst.children.B[0], B)).to.be.true;
            expect(altCst.children.bamba[0].children).to.have.keys("C");
        });
        it("Can output a CST using Repetitions", function () {
            var CstMultiTerminalWithManyNestedParser = /** @class */ (function (_super) {
                __extends(CstMultiTerminalWithManyNestedParser, _super);
                function CstMultiTerminalWithManyNestedParser(input) {
                    if (input === void 0) { input = []; }
                    var _this = _super.call(this, ALL_TOKENS, {
                        outputCst: true
                    }) || this;
                    _this.testRule = _this.RULE("testRule", function () {
                        _this.MANY({
                            NAME: "$nestedMany",
                            DEF: function () {
                                _this.CONSUME(A);
                                _this.SUBRULE(_this.bamba);
                            }
                        });
                        _this.CONSUME(B);
                    });
                    _this.bamba = _this.RULE("bamba", function () {
                        _this.CONSUME(C);
                    });
                    _this.input = input;
                    _this.performSelfAnalysis();
                    return _this;
                }
                return CstMultiTerminalWithManyNestedParser;
            }(parser_traits_1.Parser));
            var input = [
                matchers_1.createRegularToken(A),
                matchers_1.createRegularToken(C),
                matchers_1.createRegularToken(A),
                matchers_1.createRegularToken(C),
                matchers_1.createRegularToken(A),
                matchers_1.createRegularToken(C),
                matchers_1.createRegularToken(B)
            ];
            var parser = new CstMultiTerminalWithManyNestedParser(input);
            var cst = parser.testRule();
            expect(cst.name).to.equal("testRule");
            expect(cst.children).to.have.keys("B", "$nestedMany");
            expect(tokens_1.tokenStructuredMatcher(cst.children.B[0], B)).to.be.true;
            var nestedManyCst = cst.children.$nestedMany[0];
            expect(nestedManyCst.children).to.have.keys("A", "bamba");
            expect(nestedManyCst.children.A).to.have.length(3);
            expect(tokens_1.tokenStructuredMatcher(nestedManyCst.children.A[0], A)).to.be
                .true;
            expect(tokens_1.tokenStructuredMatcher(nestedManyCst.children.A[1], A)).to.be
                .true;
            expect(tokens_1.tokenStructuredMatcher(nestedManyCst.children.A[2], A)).to.be
                .true;
            expect(nestedManyCst.children.bamba).to.have.length(3);
            expect(tokens_1.tokenStructuredMatcher(nestedManyCst.children.bamba[0].children.C[0], C)).to.be.true;
            expect(tokens_1.tokenStructuredMatcher(nestedManyCst.children.bamba[1].children.C[0], C)).to.be.true;
            expect(tokens_1.tokenStructuredMatcher(nestedManyCst.children.bamba[2].children.C[0], C)).to.be.true;
        });
        it("Can output a CST using mandatory Repetitions", function () {
            var CstAtLeastOneNestedParser = /** @class */ (function (_super) {
                __extends(CstAtLeastOneNestedParser, _super);
                function CstAtLeastOneNestedParser(input) {
                    if (input === void 0) { input = []; }
                    var _this = _super.call(this, ALL_TOKENS, {
                        outputCst: true
                    }) || this;
                    _this.testRule = _this.RULE("testRule", function () {
                        _this.AT_LEAST_ONE({
                            NAME: "$oops",
                            DEF: function () {
                                _this.CONSUME(A);
                            }
                        });
                        _this.CONSUME(B);
                    });
                    _this.input = input;
                    _this.performSelfAnalysis();
                    return _this;
                }
                return CstAtLeastOneNestedParser;
            }(parser_traits_1.Parser));
            var input = [
                matchers_1.createRegularToken(A),
                matchers_1.createRegularToken(A),
                matchers_1.createRegularToken(A),
                matchers_1.createRegularToken(B)
            ];
            var parser = new CstAtLeastOneNestedParser(input);
            var cst = parser.testRule();
            expect(cst.name).to.equal("testRule");
            expect(cst.children).to.have.keys("$oops", "B");
            expect(tokens_1.tokenStructuredMatcher(cst.children.B[0], B)).to.be.true;
            var oopsCst = cst.children.$oops[0];
            expect(oopsCst.children).to.have.keys("A");
            expect(oopsCst.children.A).to.have.length(3);
            expect(tokens_1.tokenStructuredMatcher(oopsCst.children.A[0], A)).to.be.true;
            expect(tokens_1.tokenStructuredMatcher(oopsCst.children.A[1], A)).to.be.true;
            expect(tokens_1.tokenStructuredMatcher(oopsCst.children.A[2], A)).to.be.true;
        });
        it("Can output a CST using Repetitions with separator", function () {
            var CstNestedRuleWithManySepParser = /** @class */ (function (_super) {
                __extends(CstNestedRuleWithManySepParser, _super);
                function CstNestedRuleWithManySepParser(input) {
                    if (input === void 0) { input = []; }
                    var _this = _super.call(this, ALL_TOKENS, {
                        outputCst: true
                    }) || this;
                    _this.testRule = _this.RULE("testRule", function () {
                        _this.MANY_SEP({
                            NAME: "$pizza",
                            SEP: C,
                            DEF: function () {
                                _this.CONSUME(A);
                            }
                        });
                        _this.CONSUME(B);
                    });
                    _this.input = input;
                    _this.performSelfAnalysis();
                    return _this;
                }
                return CstNestedRuleWithManySepParser;
            }(parser_traits_1.Parser));
            var input = [
                matchers_1.createRegularToken(A),
                matchers_1.createRegularToken(C),
                matchers_1.createRegularToken(A),
                matchers_1.createRegularToken(B)
            ];
            var parser = new CstNestedRuleWithManySepParser(input);
            var cst = parser.testRule();
            expect(cst.name).to.equal("testRule");
            expect(cst.children).to.have.keys("$pizza", "B");
            expect(tokens_1.tokenStructuredMatcher(cst.children.B[0], B)).to.be.true;
            var pizzaCst = cst.children.$pizza[0];
            expect(pizzaCst.children.A).to.have.length(2);
            expect(tokens_1.tokenStructuredMatcher(pizzaCst.children.A[0], A)).to.be.true;
            expect(tokens_1.tokenStructuredMatcher(pizzaCst.children.A[1], A)).to.be.true;
            expect(pizzaCst.children.C).to.have.length(1);
            expect(tokens_1.tokenStructuredMatcher(pizzaCst.children.C[0], C)).to.be.true;
        });
        it("Can output a CST using Repetitions with separator - mandatory", function () {
            var CstAtLeastOneSepNestedParser = /** @class */ (function (_super) {
                __extends(CstAtLeastOneSepNestedParser, _super);
                function CstAtLeastOneSepNestedParser(input) {
                    if (input === void 0) { input = []; }
                    var _this = _super.call(this, ALL_TOKENS, {
                        outputCst: true
                    }) || this;
                    _this.testRule = _this.RULE("testRule", function () {
                        _this.AT_LEAST_ONE_SEP({
                            NAME: "$nestedName",
                            SEP: C,
                            DEF: function () {
                                _this.CONSUME(A);
                            }
                        });
                        _this.CONSUME(B);
                    });
                    _this.input = input;
                    _this.performSelfAnalysis();
                    return _this;
                }
                return CstAtLeastOneSepNestedParser;
            }(parser_traits_1.Parser));
            var input = [
                matchers_1.createRegularToken(A),
                matchers_1.createRegularToken(C),
                matchers_1.createRegularToken(A),
                matchers_1.createRegularToken(B)
            ];
            var parser = new CstAtLeastOneSepNestedParser(input);
            var cst = parser.testRule();
            expect(cst.name).to.equal("testRule");
            expect(cst.children).to.have.keys("$nestedName", "B");
            expect(tokens_1.tokenStructuredMatcher(cst.children.B[0], B)).to.be.true;
            var nestedCst = cst.children.$nestedName[0];
            expect(nestedCst.children.A).to.have.length(2);
            expect(tokens_1.tokenStructuredMatcher(nestedCst.children.A[0], A)).to.be
                .true;
            expect(tokens_1.tokenStructuredMatcher(nestedCst.children.A[1], A)).to.be
                .true;
            expect(nestedCst.children.C).to.have.length(1);
            expect(tokens_1.tokenStructuredMatcher(nestedCst.children.C[0], C)).to.be
                .true;
        });
    });
    context("Error Recovery", function () {
        it("re-sync recovery", function () {
            var CstRecoveryParserReSync = /** @class */ (function (_super) {
                __extends(CstRecoveryParserReSync, _super);
                function CstRecoveryParserReSync(input) {
                    if (input === void 0) { input = []; }
                    var _this = _super.call(this, ALL_TOKENS, {
                        outputCst: true,
                        recoveryEnabled: true
                    }) || this;
                    _this.root = _this.RULE("root", function () {
                        _this.MANY(function () {
                            _this.OR([
                                {
                                    ALT: function () {
                                        _this.SUBRULE(_this.first);
                                    }
                                },
                                {
                                    ALT: function () {
                                        _this.SUBRULE(_this.second);
                                    }
                                }
                            ]);
                        });
                    });
                    _this.first = _this.RULE("first", function () {
                        _this.CONSUME(A);
                        _this.CONSUME(B);
                    });
                    _this.second = _this.RULE("second", function () {
                        _this.CONSUME(C);
                        _this.CONSUME(D);
                    });
                    _this.input = input;
                    _this.performSelfAnalysis();
                    return _this;
                }
                CstRecoveryParserReSync.prototype.canTokenTypeBeInsertedInRecovery = function (tokType) {
                    // we want to force re-sync recovery
                    return false;
                };
                return CstRecoveryParserReSync;
            }(parser_traits_1.Parser));
            var input = createTokenVector([A, E, E, C, D]);
            var parser = new CstRecoveryParserReSync(input);
            var cst = parser.root();
            expect(parser.errors).to.have.lengthOf(1);
            expect(parser.errors[0].message).to.include("Expecting token of type --> B <--");
            expect(parser.errors[0].resyncedTokens).to.have.lengthOf(1);
            expect(tokens_1.tokenStructuredMatcher(parser.errors[0].resyncedTokens[0], E)).to.be.true;
            // expect(parser.errors[0]).
            expect(cst.name).to.equal("root");
            expect(cst.children).to.have.keys("first", "second");
            var firstCollection = cst.children.first;
            expect(firstCollection).to.have.lengthOf(1);
            var first = firstCollection[0];
            expect(first.recoveredNode).to.be.true;
            expect(first.children).to.have.keys("A");
            expect(tokens_1.tokenStructuredMatcher(first.children.A[0], A)).to.be.true;
            expect(first.children.B).to.be.undefined;
            var secondCollection = cst.children.second;
            expect(secondCollection).to.have.lengthOf(1);
            var second = secondCollection[0];
            expect(second.recoveredNode).to.be.undefined;
            expect(second.children).to.have.keys("C", "D");
            expect(tokens_1.tokenStructuredMatcher(second.children.C[0], C)).to.be.true;
            expect(tokens_1.tokenStructuredMatcher(second.children.D[0], D)).to.be.true;
        });
        it("re-sync recovery nested", function () {
            var CstRecoveryParserReSyncNested = /** @class */ (function (_super) {
                __extends(CstRecoveryParserReSyncNested, _super);
                function CstRecoveryParserReSyncNested(input) {
                    if (input === void 0) { input = []; }
                    var _this = _super.call(this, ALL_TOKENS, {
                        outputCst: true,
                        recoveryEnabled: true
                    }) || this;
                    _this.root = _this.RULE("root", function () {
                        _this.MANY(function () {
                            _this.OR([
                                {
                                    ALT: function () {
                                        _this.SUBRULE(_this.first_root);
                                    }
                                },
                                {
                                    ALT: function () {
                                        _this.SUBRULE(_this.second);
                                    }
                                }
                            ]);
                        });
                    });
                    _this.first_root = _this.RULE("first_root", function () {
                        _this.SUBRULE(_this.first);
                    });
                    _this.first = _this.RULE("first", function () {
                        _this.CONSUME(A);
                        _this.CONSUME(B);
                    });
                    _this.second = _this.RULE("second", function () {
                        _this.CONSUME(C);
                        _this.CONSUME(D);
                    });
                    _this.input = input;
                    _this.performSelfAnalysis();
                    return _this;
                }
                CstRecoveryParserReSyncNested.prototype.canTokenTypeBeInsertedInRecovery = function (tokType) {
                    // we want to force re-sync recovery
                    return false;
                };
                return CstRecoveryParserReSyncNested;
            }(parser_traits_1.Parser));
            var input = createTokenVector([A, E, E, C, D]);
            var parser = new CstRecoveryParserReSyncNested(input);
            var cst = parser.root();
            expect(parser.errors).to.have.lengthOf(1);
            expect(parser.errors[0].message).to.include("Expecting token of type --> B <--");
            expect(parser.errors[0].resyncedTokens).to.have.lengthOf(1);
            expect(tokens_1.tokenStructuredMatcher(parser.errors[0].resyncedTokens[0], E)).to.be.true;
            expect(cst.name).to.equal("root");
            expect(cst.children).to.have.keys("first_root", "second");
            var firstRootCollection = cst.children.first_root;
            expect(firstRootCollection).to.have.lengthOf(1);
            var firstRoot = firstRootCollection[0];
            expect(firstRoot.children).to.have.keys("first");
            var first = firstRoot.children.first[0];
            expect(first.recoveredNode).to.be.true;
            expect(first.children).to.have.keys("A");
            expect(tokens_1.tokenStructuredMatcher(first.children.A[0], A)).to.be.true;
            expect(first.children.B).to.be.undefined;
            var secondCollection = cst.children.second;
            expect(secondCollection).to.have.lengthOf(1);
            var second = secondCollection[0];
            expect(second.recoveredNode).to.be.undefined;
            expect(second.children).to.have.keys("C", "D");
            expect(tokens_1.tokenStructuredMatcher(second.children.C[0], C)).to.be.true;
            expect(tokens_1.tokenStructuredMatcher(second.children.D[0], D)).to.be.true;
        });
    });
});
//# sourceMappingURL=cst_spec.js.map

/***/ }),
/* 67 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var tokens_public_1 = __webpack_require__(1);
var parser_traits_1 = __webpack_require__(5);
var matchers_1 = __webpack_require__(3);
var utils_1 = __webpack_require__(0);
describe("The CSTVisitor", function () {
    var A = tokens_public_1.createToken({ name: "A" });
    var B = tokens_public_1.createToken({ name: "B" });
    var C = tokens_public_1.createToken({ name: "C" });
    var ALL_TOKENS = [A, B, C];
    var CstTerminalParserReturnVisitor = /** @class */ (function (_super) {
        __extends(CstTerminalParserReturnVisitor, _super);
        function CstTerminalParserReturnVisitor(input) {
            if (input === void 0) { input = []; }
            var _this = _super.call(this, ALL_TOKENS, { outputCst: true }) || this;
            _this.testRule = _this.RULE("testRule", function () {
                _this.CONSUME(A);
                _this.CONSUME(B);
                _this.OPTION({
                    NAME: "$bisli",
                    DEF: function () {
                        _this.SUBRULE(_this.bamba);
                    }
                });
            });
            _this.bamba = _this.RULE("bamba", function () {
                _this.CONSUME(C);
            });
            _this.performSelfAnalysis();
            return _this;
        }
        return CstTerminalParserReturnVisitor;
    }(parser_traits_1.Parser));
    var parserInstance = new CstTerminalParserReturnVisitor([]);
    var BaseVisitor = parserInstance.getBaseCstVisitorConstructor();
    var BaseVisitorWithDefaults = parserInstance.getBaseCstVisitorConstructorWithDefaults();
    // to avoid issues with other tests clearing the cache
    before(function () {
        parserInstance = new CstTerminalParserReturnVisitor([]);
        BaseVisitor = parserInstance.getBaseCstVisitorConstructor();
        BaseVisitorWithDefaults = parserInstance.getBaseCstVisitorConstructorWithDefaults();
        // to hit all coverage branches
        BaseVisitorWithDefaults = parserInstance.getBaseCstVisitorConstructorWithDefaults();
    });
    it("can execute a Visitor with a return Value", function () {
        var CstVisitorValidator = /** @class */ (function (_super) {
            __extends(CstVisitorValidator, _super);
            function CstVisitorValidator() {
                var _this = _super.call(this) || this;
                _this.validateVisitor();
                return _this;
            }
            CstVisitorValidator.prototype.testRule = function (ctx) {
                expect(utils_1.keys(ctx)).to.deep.equal(["A", "B", "$bisli"]);
                return this.visit(ctx.$bisli[0]);
            };
            CstVisitorValidator.prototype.testRule$bisli = function (ctx) {
                expect(utils_1.keys(ctx)).to.deep.equal(["bamba"]);
                return this.visit(ctx.bamba[0]);
            };
            CstVisitorValidator.prototype.bamba = function (ctx) {
                expect(utils_1.keys(ctx)).to.deep.equal(["C"]);
                return 666;
            };
            return CstVisitorValidator;
        }(BaseVisitor));
        var input = [
            matchers_1.createRegularToken(A),
            matchers_1.createRegularToken(B),
            matchers_1.createRegularToken(C)
        ];
        parserInstance.input = input;
        var cst = parserInstance.testRule();
        var visitor = new CstVisitorValidator();
        expect(visitor.visit(cst)).to.equal(666);
    });
    it("can execute a Visitor with an 'in' param", function () {
        var CstVisitorValidator = /** @class */ (function (_super) {
            __extends(CstVisitorValidator, _super);
            function CstVisitorValidator() {
                var _this = _super.call(this) || this;
                _this.validateVisitor();
                return _this;
            }
            CstVisitorValidator.prototype.testRule = function (ctx, param) {
                expect(utils_1.keys(ctx)).to.deep.equal(["A", "B", "$bisli"]);
                return this.visit(ctx.$bisli[0], param);
            };
            CstVisitorValidator.prototype.testRule$bisli = function (ctx, param) {
                expect(utils_1.keys(ctx)).to.deep.equal(["bamba"]);
                return this.visit(ctx.bamba[0], param);
            };
            CstVisitorValidator.prototype.bamba = function (ctx, param) {
                // inspecting handling of optional arguments
                expect(this.visit(ctx.missingKey)).to.be.undefined;
                expect(utils_1.keys(ctx)).to.deep.equal(["C"]);
                return 666 + param;
            };
            return CstVisitorValidator;
        }(BaseVisitor));
        var input = [
            matchers_1.createRegularToken(A),
            matchers_1.createRegularToken(B),
            matchers_1.createRegularToken(C)
        ];
        parserInstance.input = input;
        var cst = parserInstance.testRule();
        var visitor = new CstVisitorValidator();
        expect(visitor.visit(cst, 1)).to.equal(667);
    });
    it("can create a visitor with default methods implementations", function () {
        var visited = false;
        var CstVisitorValidator = /** @class */ (function (_super) {
            __extends(CstVisitorValidator, _super);
            function CstVisitorValidator() {
                var _this = _super.call(this) || this;
                _this.validateVisitor();
                return _this;
            }
            // testRule and testRule$bisli visitor should be created automatically
            CstVisitorValidator.prototype.bamba = function (ctx) {
                expect(utils_1.keys(ctx)).to.deep.equal(["C"]);
                visited = true;
            };
            return CstVisitorValidator;
        }(BaseVisitorWithDefaults));
        var input = [
            matchers_1.createRegularToken(A),
            matchers_1.createRegularToken(B),
            matchers_1.createRegularToken(C)
        ];
        parserInstance.input = input;
        var cst = parserInstance.testRule();
        var visitor = new CstVisitorValidator();
        visitor.visit(cst);
        expect(visited).to.be.true;
    });
    it("can invoke visit with an array", function () {
        var CstVisitorValidator = /** @class */ (function (_super) {
            __extends(CstVisitorValidator, _super);
            function CstVisitorValidator() {
                var _this = _super.call(this) || this;
                _this.validateVisitor();
                return _this;
            }
            CstVisitorValidator.prototype.testRule = function (ctx, param) {
                expect(utils_1.keys(ctx)).to.deep.equal(["A", "B", "$bisli"]);
                return this.visit(ctx.$bisli[0], param);
            };
            CstVisitorValidator.prototype.testRule$bisli = function (ctx, param) {
                expect(utils_1.keys(ctx)).to.deep.equal(["bamba"]);
                return this.visit(ctx.bamba[0], param);
            };
            CstVisitorValidator.prototype.bamba = function (ctx, param) {
                expect(utils_1.keys(ctx)).to.deep.equal(["C"]);
                return 666 + param;
            };
            return CstVisitorValidator;
        }(BaseVisitor));
        var input = [
            matchers_1.createRegularToken(A),
            matchers_1.createRegularToken(B),
            matchers_1.createRegularToken(C)
        ];
        parserInstance.input = input;
        var cst = parserInstance.testRule();
        var visitor = new CstVisitorValidator();
        expect(visitor.visit([cst], 1)).to.equal(667);
        expect(visitor.visit([], 1)).to.be.undefined;
    });
    it("can detect missing visitor methods", function () {
        var CstVisitorValidator = /** @class */ (function (_super) {
            __extends(CstVisitorValidator, _super);
            function CstVisitorValidator() {
                var _this = _super.call(this) || this;
                _this.validateVisitor();
                return _this;
            }
            CstVisitorValidator.prototype.testRule = function (ctx, param) { };
            CstVisitorValidator.prototype.testRule$bisli = function (ctx, param) { };
            return CstVisitorValidator;
        }(BaseVisitor));
        expect(function () { return new CstVisitorValidator(); }).to.throw("Missing visitor method: <bamba>");
        expect(function () { return new CstVisitorValidator(); }).to.throw("Errors Detected in CST Visitor");
    });
    it("can detect redundant visitor methods", function () {
        var CstVisitorValidatorRedundant = /** @class */ (function (_super) {
            __extends(CstVisitorValidatorRedundant, _super);
            function CstVisitorValidatorRedundant() {
                var _this = _super.call(this) || this;
                _this.validateVisitor();
                return _this;
            }
            CstVisitorValidatorRedundant.prototype.testRule = function (ctx, param) { };
            CstVisitorValidatorRedundant.prototype.testRule$bisli = function (ctx, param) { };
            CstVisitorValidatorRedundant.prototype.bamba = function (ctx, param) { };
            CstVisitorValidatorRedundant.prototype.oops = function (ctx, param) { };
            return CstVisitorValidatorRedundant;
        }(BaseVisitor));
        expect(function () { return new CstVisitorValidatorRedundant(); }).to.throw("Redundant visitor method: <oops>");
        expect(function () { return new CstVisitorValidatorRedundant(); }).to.throw("Errors Detected in CST Visitor");
    });
});
//# sourceMappingURL=cst_visitor_spec.js.map

/***/ }),
/* 68 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(module) {
Object.defineProperty(exports, "__esModule", { value: true });
var tokens_public_1 = __webpack_require__(1);
var exceptions_public_1 = __webpack_require__(8);
var lang_extensions_1 = __webpack_require__(7);
describe("Chevrotain's Parsing Exceptions", function () {
    describe("the mappings between a an exception instance and its matching an exception's name for: ", function () {
        var isRunningInNodeJS = module && module.exports;
        var it_node = isRunningInNodeJS ? it : it.skip;
        var dummyToken = tokens_public_1.createTokenInstance(tokens_public_1.EOF, "", -1, -1, -1, -1, -1, -1);
        it_node("EarlyExitException", function () {
            var exceptionInstance = new exceptions_public_1.EarlyExitException("", dummyToken, dummyToken);
            expect(exceptionInstance.name).to.equal(lang_extensions_1.functionName(exceptionInstance));
        });
        it_node("NoViableAltException", function () {
            var exceptionInstance = new exceptions_public_1.NoViableAltException("", dummyToken, dummyToken);
            expect(exceptionInstance.name).to.equal(lang_extensions_1.functionName(exceptionInstance));
        });
        it_node("NotAllInputParsedException", function () {
            var exceptionInstance = new exceptions_public_1.NotAllInputParsedException("", dummyToken);
            expect(exceptionInstance.name).to.equal(lang_extensions_1.functionName(exceptionInstance));
        });
        it_node("MismatchedTokenException", function () {
            var exceptionInstance = new exceptions_public_1.MismatchedTokenException("", dummyToken, dummyToken);
            expect(exceptionInstance.name).to.equal(lang_extensions_1.functionName(exceptionInstance));
        });
    });
});
//# sourceMappingURL=exceptions_spec.js.map
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(69)(module)))

/***/ }),
/* 69 */
/***/ (function(module, exports) {

module.exports = function(module) {
	if (!module.webpackPolyfill) {
		module.deprecate = function() {};
		module.paths = [];
		// module.parent = undefined by default
		if (!module.children) module.children = [];
		Object.defineProperty(module, "loaded", {
			enumerable: true,
			get: function() {
				return module.l;
			}
		});
		Object.defineProperty(module, "id", {
			enumerable: true,
			get: function() {
				return module.i;
			}
		});
		module.webpackPolyfill = 1;
	}
	return module;
};


/***/ }),
/* 70 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var gastBuilder = __webpack_require__(18);
var gast_builder_1 = __webpack_require__(18);
var matchers_1 = __webpack_require__(3);
var range_1 = __webpack_require__(23);
var tok = __webpack_require__(13);
var samples_1 = __webpack_require__(13);
var utils_1 = __webpack_require__(0);
var gast_public_1 = __webpack_require__(2);
describe("The GAst Builder namespace", function () {
    var typeDefText = "// parse\r\n" +
        "            let typeKw = this.CONSUME1(TypeTok)\r\n" +
        "            let typeName = this.CONSUME1(IdentTok)\r\n" +
        "            let typeSpec = this.OR([\r\n" +
        "                {ALT: this.isStructType, ALT: ()=> {\r\n" +
        "                    let structType = this.SUBRULE(this.structuredType)\r\n" +
        "                    this.OPTION(()=> {return this.NEXT_TOKEN() instanceof SemicolonTok}, ()=> {\r\n" +
        "                        semiColon = this.CONSUME1(SemicolonTok)\r\n" +
        "                    })\r\n" +
        "                    return structType\r\n" +
        "                }},\r\n" +
        "                {ALT: this.isAssignedTypeSpec, ALT: ()=> {\r\n" +
        "                    let assTypeSpec = this.SUBRULE(this.assignedTypeSpec)\r\n" +
        "                    semiColon = this.CONSUME2(SemicolonTok)\r\n" +
        "                    return assTypeSpec\r\n" +
        "                }}\r\n" +
        '            ], "StructuredType or AssignedTypeSpec").tree';
    var elementDefText = "this.OPTION(this.isRequiredKw, ()=> {\r\n" +
        "                requiredKW = this.CONSUME1(RequiredTok)\r\n" +
        "            })\r\n" +
        "            this.OPTION(this.isKeyKw, ()=> {\r\n" +
        "                keyKW = this.CONSUME1(KeyTok)\r\n" +
        "            })\r\n" +
        "            let elementKW = this.CONSUME1(ElementTok)\r\n" +
        "            let elementName = this.CONSUME1(IdentTok)\r\n" +
        "\r\n" +
        "            let assTypeSpec = this.OR([\r\n" +
        "                {GATE: this.isAssignedTypeSpec, ALT: ()=> {\r\n" +
        "                    return this.SUBRULE(this.assignedTypeSpec)\r\n" +
        "                }},\r\n" +
        "                {GATE: ()=> {return true}, ALT: ()=> {\r\n" +
        "                    return this.SUBRULE(this.assignedTypeSpecImplicit)\r\n" +
        "                }}\r\n" +
        '            ], "").tree\r\n' +
        "\r\n" +
        "            let semiColon = this.CONSUME1(SemicolonTok)";
    var literalArrayText = "let lSquare = this.CONSUME1(LSquareTok)\r\n" +
        "            arrValues.push(this.SUBRULE(this.expression))\r\n" +
        "            this.MANY(this.isAdditionalArgument, () => {\r\n" +
        "                    commas.push(this.CONSUME1(CommaTok))\r\n" +
        "                    arrValues.push(this.SUBRULE2(this.expression))\r\n" +
        "                }\r\n" +
        "            )\r\n" +
        "            let rSquare = this.CONSUME1(RSquareTok)";
    it("can extract Terminals IPRODRanges from a text", function () {
        var actual = gast_builder_1.createTerminalRanges(typeDefText);
        expect(actual.length).to.equal(4);
        var terminalTypes = utils_1.map(actual, function (rangeProd) {
            return rangeProd.type;
        });
        expect(utils_1.uniq(terminalTypes).length).to.equal(1);
        expect(terminalTypes[0]).to.equal(gast_builder_1.ProdType.TERMINAL);
        var terminalTexts = utils_1.map(actual, function (rangeProd) {
            return rangeProd.text;
        });
        expect(terminalTexts[0]).to.equal(".CONSUME1(TypeTok");
        expect(terminalTexts[1]).to.equal(".CONSUME1(IdentTok");
        expect(terminalTexts[2]).to.equal(".CONSUME1(SemicolonTok");
        expect(terminalTexts[3]).to.equal(".CONSUME2(SemicolonTok");
    });
    it("can extract SubRule references IPRODRanges from a text", function () {
        var actual = gast_builder_1.createRefsRanges(typeDefText);
        expect(actual.length).to.equal(2);
        var refTypes = utils_1.map(actual, function (rangeProd) {
            return rangeProd.type;
        });
        expect(utils_1.uniq(refTypes).length).to.equal(1);
        expect(refTypes[0]).to.equal(gast_builder_1.ProdType.REF);
        var refText = utils_1.map(actual, function (rangeProd) {
            return rangeProd.text;
        });
        expect(refText[0]).to.equal(".SUBRULE(this.structuredType");
        expect(refText[1]).to.equal(".SUBRULE(this.assignedTypeSpec");
    });
    it("can extract Option IPRODRanges from a text", function () {
        var actual = gast_builder_1.createOptionRanges(elementDefText);
        expect(actual.length).to.equal(2);
        var refTypes = utils_1.map(actual, function (rangeProd) {
            return rangeProd.type;
        });
        expect(utils_1.uniq(refTypes).length).to.equal(1);
        expect(refTypes[0]).to.equal(gast_builder_1.ProdType.OPTION);
        var refText = utils_1.map(actual, function (rangeProd) {
            return rangeProd.text;
        });
        expect(refText[0]).to.equal(".OPTION(this.isRequiredKw, ()=> {\r\n" +
            "                requiredKW = this.CONSUME1(RequiredTok)\r\n" +
            "            })");
        expect(refText[1]).to.equal(".OPTION(this.isKeyKw, ()=> {\r\n" +
            "                keyKW = this.CONSUME1(KeyTok)\r\n" +
            "            })");
    });
    it("can extract 'at least one' IPRODRanges from a text", function () {
        var actual = gast_builder_1.createAtLeastOneRanges("this.MANY(...) this.AT_LEAST_ONE(bamba) this.AT_LEAST_ONE(THIS.OPTION(bisli))");
        expect(actual.length).to.equal(2);
        var refTypes = utils_1.map(actual, function (rangeProd) {
            return rangeProd.type;
        });
        expect(utils_1.uniq(refTypes).length).to.equal(1);
        expect(refTypes[0]).to.equal(gast_builder_1.ProdType.AT_LEAST_ONE);
        var refText = utils_1.map(actual, function (rangeProd) {
            return rangeProd.text;
        });
        expect(refText[0]).to.equal(".AT_LEAST_ONE(bamba)");
        expect(refText[1]).to.equal(".AT_LEAST_ONE(THIS.OPTION(bisli))");
    });
    it("can extract 'many' IPRODRanges from a text", function () {
        var actual = gast_builder_1.createManyRanges(literalArrayText);
        expect(actual.length).to.equal(1);
        var refTypes = utils_1.map(actual, function (rangeProd) {
            return rangeProd.type;
        });
        expect(utils_1.uniq(refTypes).length).to.equal(1);
        expect(refTypes[0]).to.equal(gast_builder_1.ProdType.MANY);
        var refText = utils_1.map(actual, function (rangeProd) {
            return rangeProd.text;
        });
        expect(refText[0]).to.equal(".MANY(this.isAdditionalArgument, () => {\r\n" +
            "                    commas.push(this.CONSUME1(CommaTok))\r\n" +
            "                    arrValues.push(this.SUBRULE2(this.expression))\r\n" +
            "                }\r\n" +
            "            )");
    });
    it("can extract 'or' IPRODRanges from a text", function () {
        var actual = gast_builder_1.createOrRanges(elementDefText);
        // 1 or range + 2 orPart ranges (flat ranges)
        expect(actual.length).to.equal(3);
        var refTypes = utils_1.map(actual, function (rangeProd) {
            return rangeProd.type;
        });
        expect(utils_1.uniq(refTypes).length).to.equal(2);
        matchers_1.setEquality(utils_1.uniq(refTypes), [gast_builder_1.ProdType.OR, gast_builder_1.ProdType.FLAT]);
        var refText = utils_1.map(actual, function (rangeProd) {
            return rangeProd.text;
        });
        expect(refText[0]).to.equal(".OR([\r\n" +
            "                {GATE: this.isAssignedTypeSpec, ALT: ()=> {\r\n" +
            "                    return this.SUBRULE(this.assignedTypeSpec)\r\n" +
            "                }},\r\n" +
            "                {GATE: ()=> {return true}, ALT: ()=> {\r\n" +
            "                    return this.SUBRULE(this.assignedTypeSpecImplicit)\r\n" +
            "                }}\r\n" +
            '            ], "")');
    });
    it("can extract all IPRODRanges from a text", function () {
        var ter = ".CONSUME3(one1";
        var option = ".OPTION(2)";
        var many = ".MANY(3)";
        var many_sep = ".MANY_SEP({SEP:Comma,)";
        var at_least_one_sep = ".AT_LEAST_ONE_SEP({SEP:Comma,)";
        var ref = ".SUBRULE5(this.other";
        var atLeastOne = ".AT_LEAST_ONE(6)";
        var or = ".OR(7)";
        var actual = gast_builder_1.createRanges(ter +
            ") " +
            option +
            many_sep +
            " " +
            at_least_one_sep +
            " " +
            many +
            ref +
            ") " +
            atLeastOne +
            or);
        expect(actual.length).to.equal(8);
        var refTypes = utils_1.map(actual, function (rangeProd) {
            return rangeProd.type;
        });
        expect(utils_1.uniq(refTypes).length).to.equal(8);
        var refText = utils_1.map(actual, function (rangeProd) {
            return rangeProd.text;
        });
        matchers_1.setEquality(refText, [
            ter,
            option,
            many,
            many_sep,
            ref,
            at_least_one_sep,
            atLeastOne,
            or
        ]);
    });
    it("has a utility function that can remove comments(single line and multiline) from texts", function () {
        var input = "// single line comment" +
            "\nhello" +
            "/* multi line comment \n" +
            "* blah blah blah" +
            "*/" +
            " world" +
            "// another single line!";
        var actual = gast_builder_1.removeComments(input);
        expect(actual).to.equal("\nhello world");
    });
    context("has a utility function that can remove string literals from texts", function () {
        it("simple flow", function () {
            var input = "'single quotes string'" +
                "\nhello" +
                '""' +
                '"double quotes string"' +
                " world" +
                "'bam\\'ba\"\"'";
            var actual = gast_builder_1.removeStringLiterals(input);
            expect(actual).to.equal("\nhello world");
        });
        it("won't get suck in infinite loop", function () {
            var input = '   throw new TypeError(`Type hint "${typeHintName}" dosen\'t match real type`);aaaaaa\n' +
                "return aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa";
            var actual = gast_builder_1.removeStringLiterals(input);
        });
    });
    it("can detect missing closing parenthesis in a string", function () {
        var input = " ((()))"; // the input is assumed to start right after an opening parenthesis
        expect(function () { return gast_builder_1.findClosingOffset("(", ")", 0, input); }).to.throw("INVALID INPUT TEXT, UNTERMINATED PARENTHESIS");
    });
    it("can find the direct 'childs' of another Production from an IProd representation", function () {
        var allProdRanges = [
            {
                range: new range_1.Range(1, 10),
                text: "1.1",
                type: gast_builder_1.ProdType.TERMINAL
            },
            {
                range: new range_1.Range(11, 200),
                text: "1.2",
                type: gast_builder_1.ProdType.OR
            },
            {
                range: new range_1.Range(20, 180),
                text: "1.2.1",
                type: gast_builder_1.ProdType.MANY
            },
            {
                range: new range_1.Range(30, 100),
                text: "1.2.1.1",
                type: gast_builder_1.ProdType.TERMINAL
            },
            {
                range: new range_1.Range(101, 170),
                text: "1.2.1.2",
                type: gast_builder_1.ProdType.TERMINAL
            },
            {
                range: new range_1.Range(181, 190),
                text: "1.2.2",
                type: gast_builder_1.ProdType.TERMINAL
            },
            {
                range: new range_1.Range(201, 209),
                text: "1.3",
                type: gast_builder_1.ProdType.TERMINAL
            }
        ];
        var topRange = gast_builder_1.getDirectlyContainedRanges(new range_1.Range(0, 210), allProdRanges);
        expect(topRange.length).to.equal(3);
        expect(topRange[0].text).to.equal("1.1");
        expect(topRange[1].text).to.equal("1.2");
        expect(topRange[2].text).to.equal("1.3");
        var orRange = gast_builder_1.getDirectlyContainedRanges(new range_1.Range(11, 200), allProdRanges);
        expect(orRange.length).to.equal(2);
        expect(orRange[0].text).to.equal("1.2.1");
        expect(orRange[1].text).to.equal("1.2.2");
        var manyRange = gast_builder_1.getDirectlyContainedRanges(new range_1.Range(20, 180), allProdRanges);
        expect(manyRange.length).to.equal(2);
        expect(manyRange[0].text).to.equal("1.2.1.1");
        expect(manyRange[1].text).to.equal("1.2.1.2");
    });
    it("can build a Terminal Production from a RangeProd", function () {
        ;
        gastBuilder.terminalNameToConstructor = tok;
        var actual = gast_builder_1.buildProdGast({
            range: new range_1.Range(1, 2),
            text: "this.CONSUME2(IdentTok)",
            type: gast_builder_1.ProdType.TERMINAL
        }, []);
        expect(actual).to.be.an.instanceof(gast_public_1.Terminal);
        expect(actual.idx).to.equal(2);
        expect(actual.terminalType).to.equal(samples_1.IdentTok);
    });
    it("will fail building a terminal if it cannot find it's constructor", function () {
        ;
        gastBuilder.terminalNameToConstructor = {};
        var buildMissingTerminal = function () {
            return gast_builder_1.buildProdGast({
                range: new range_1.Range(1, 2),
                text: "this.CONSUME2(IdentTok)",
                type: gast_builder_1.ProdType.TERMINAL
            }, []);
        };
        expect(buildMissingTerminal).to.throw("Terminal Token name: " + "IdentTok" + " not found");
    });
    it("can build a Ref Production from a RangeProd", function () {
        var actual = gast_builder_1.buildProdGast({
            range: new range_1.Range(1, 2),
            text: "this.SUBRULE(this.bamba(1))",
            type: gast_builder_1.ProdType.REF
        }, []);
        expect(actual).to.be.an.instanceof(gast_public_1.NonTerminal);
        expect(actual.idx).to.equal(0);
        expect(actual.nonTerminalName).to.equal("bamba");
    });
    it("can build an OR Production from a RangeProd", function () {
        var actual = gast_builder_1.buildProdGast({
            range: new range_1.Range(1, 2),
            text: "this.OR(...)",
            type: gast_builder_1.ProdType.OR
        }, []);
        expect(actual).to.be.an.instanceof(gast_public_1.Alternation);
        expect(actual.definition.length).to.equal(0);
    });
    it("can build a MANY Production from a RangeProd", function () {
        var actual = gast_builder_1.buildProdGast({
            range: new range_1.Range(1, 2),
            text: "this.MANY(...)",
            type: gast_builder_1.ProdType.MANY
        }, []);
        expect(actual).to.be.an.instanceof(gast_public_1.Repetition);
        expect(actual.definition.length).to.equal(0);
    });
    it("can build a MANY_SEP Production from a RangeProd", function () {
        // hack, using "toString" because it exists on plain js object as the "separator".
        var actual = gast_builder_1.buildProdGast({
            range: new range_1.Range(1, 2),
            text: "this.MANY_SEP({SEP:toString...)",
            type: gast_builder_1.ProdType.MANY_SEP
        }, []);
        expect(actual).to.be.an.instanceof(gast_public_1.RepetitionWithSeparator);
        expect(actual.definition.length).to.equal(0);
    });
    it("will fail when building a MANY_SEP Production from a RangeProd in the seperator is not known", function () {
        expect(function () {
            return gast_builder_1.buildProdGast({
                range: new range_1.Range(1, 2),
                text: "this.MANY_SEP({SEP: MISSING...)",
                type: gast_builder_1.ProdType.MANY_SEP
            }, []);
        }).to.throw("Separator Terminal Token name: MISSING not found");
    });
    it("can build an AT_LEAST_ONE Production from a RangeProd", function () {
        var actual = gast_builder_1.buildProdGast({
            range: new range_1.Range(1, 2),
            text: "this.AT_LEAST_ONE(...)",
            type: gast_builder_1.ProdType.AT_LEAST_ONE
        }, []);
        expect(actual).to.be.an.instanceof(gast_public_1.RepetitionMandatory);
        expect(actual.definition.length).to.equal(0);
    });
    it("can build an OPTION Production from a RangeProd", function () {
        var actual = gast_builder_1.buildProdGast({
            range: new range_1.Range(1, 2),
            text: "this.OPTION(...)",
            type: gast_builder_1.ProdType.OPTION
        }, []);
        expect(actual).to.be.an.instanceof(gast_public_1.Option);
        expect(actual.definition.length).to.equal(0);
    });
    it("can build an OR Production from a RangeProd", function () {
        var actual = gast_builder_1.buildProdGast({
            range: new range_1.Range(1, 2),
            text: "this.OR(...)",
            type: gast_builder_1.ProdType.OR
        }, []);
        expect(actual).to.be.an.instanceof(gast_public_1.Alternation);
        expect(actual.definition.length).to.equal(0);
    });
    it("can build The Gast representation of a literalArray Grammar Rule", function () {
        var actual = gast_builder_1.buildTopProduction(literalArrayText, "literalArray", (tok));
        expect(actual.name).to.equal("literalArray");
        expect(actual.orgText).to.equal(literalArrayText);
        var def = actual.definition;
        expect(def.length).to.equal(4);
        expect(def[0]).to.be.an.instanceof(gast_public_1.Terminal);
        expect(def[0].idx).to.equal(1);
        expect(def[0].terminalType).to.equal(samples_1.LSquareTok);
        expect(def[1]).to.be.an.instanceof(gast_public_1.NonTerminal);
        expect(def[1].idx).to.equal(0);
        expect(def[1].nonTerminalName).to.equal("expression");
        expect(def[2]).to.be.an.instanceof(gast_public_1.Repetition);
        // -- MANY part begin
        var manyDef = def[2].definition;
        expect(manyDef.length).to.equal(2);
        expect(manyDef[0]).to.be.an.instanceof(gast_public_1.Terminal);
        expect(manyDef[0].idx).to.equal(1);
        expect(manyDef[0].terminalType).to.equal(samples_1.CommaTok);
        expect(manyDef[1]).to.be.an.instanceof(gast_public_1.NonTerminal);
        expect(manyDef[1].idx).to.equal(2);
        expect(manyDef[1].nonTerminalName).to.equal("expression");
        // -- MANY part end
        expect(def[3]).to.be.an.instanceof(gast_public_1.Terminal);
        expect(def[3].idx).to.equal(1);
        expect(def[3].terminalType).to.equal(samples_1.RSquareTok);
    });
    it("can build The Gast representation of an elementDefinition Grammar Rule", function () {
        var actual = gast_builder_1.buildTopProduction(elementDefText, "elementDef", tok);
        expect(actual.orgText).to.equal(elementDefText);
        expect(actual.name).to.equal("elementDef");
        var def = actual.definition;
        expect(def.length).to.equal(6);
        expect(def[0]).to.be.an.instanceof(gast_public_1.Option);
        var option1Def = def[0].definition;
        expect(option1Def.length).to.equal(1);
        expect(option1Def[0]).to.be.an.instanceof(gast_public_1.Terminal);
        expect(option1Def[0].idx).to.equal(1);
        expect(option1Def[0].terminalType).to.equal(samples_1.RequiredTok);
        expect(def[1]).to.be.an.instanceof(gast_public_1.Option);
        var option2Def = def[1].definition;
        expect(option2Def.length).to.equal(1);
        expect(option2Def[0]).to.be.an.instanceof(gast_public_1.Terminal);
        expect(option2Def[0].idx).to.equal(1);
        expect(option2Def[0].terminalType).to.equal(samples_1.KeyTok);
        expect(def[2]).to.be.an.instanceof(gast_public_1.Terminal);
        expect(def[2].idx).to.equal(1);
        expect(def[2].terminalType).to.equal(samples_1.ElementTok);
        expect(def[3]).to.be.an.instanceof(gast_public_1.Terminal);
        expect(def[3].idx).to.equal(1);
        expect(def[3].terminalType).to.equal(samples_1.IdentTok);
        expect(def[4]).to.be.an.instanceof(gast_public_1.Alternation);
        var orDef = def[4].definition;
        expect(orDef.length).to.equal(2);
        expect(orDef[0]).to.be.an.instanceof(gast_public_1.Flat);
        var orPartDef1 = orDef[0].definition;
        expect(orPartDef1.length).to.equal(1);
        expect(orPartDef1[0]).to.be.an.instanceof(gast_public_1.NonTerminal);
        expect(orPartDef1[0].idx).to.equal(0);
        expect(orPartDef1[0].nonTerminalName).to.equal("assignedTypeSpec");
        expect(orDef[1]).to.be.an.instanceof(gast_public_1.Flat);
        var orPartDef2 = orDef[1].definition;
        expect(orPartDef2.length).to.equal(1);
        expect(orPartDef2[0]).to.be.an.instanceof(gast_public_1.NonTerminal);
        expect(orPartDef2[0].idx).to.equal(0);
        expect(orPartDef2[0].nonTerminalName).to.equal("assignedTypeSpecImplicit");
        expect(def[5]).to.be.an.instanceof(gast_public_1.Terminal);
        expect(def[5].idx).to.equal(1);
        expect(def[5].terminalType).to.equal(samples_1.SemicolonTok);
    });
    it("can build nested OR grammar successfully", function () {
        var input = " let max = this.OR([\n\
                {GATE: isExpression, ALT: ()=> {\n\
                    this.OR([\n\
                            \n\
                        {GATE: isAlias, ALT: ()=> {\n\
                            return PT(this.CONSUME1(ViaTok))\n\
                        }}\n\
                    ], 'Expression or Star Token')\n\
                }}\n\
            ], 'Expression or Star Token').tree ";
        var orRanges = gast_builder_1.createOrRanges(input);
        expect(orRanges.length).to.equal(4);
        var allFlatRanges = utils_1.filter(orRanges, function (prodRange) {
            return prodRange.type === gast_builder_1.ProdType.FLAT;
        });
        expect(allFlatRanges.length).to.equal(2);
        var allOrRanges = utils_1.filter(orRanges, function (prodRange) {
            return prodRange.type === gast_builder_1.ProdType.FLAT;
        });
        expect(allOrRanges.length).to.equal(2);
    });
    it("can serialize and deserialize an elementDefinition Grammar Rule", function () {
        var expected = [
            gast_builder_1.buildTopProduction(typeDefText, "typeDef", tok),
            gast_builder_1.buildTopProduction(literalArrayText, "literalArray", tok),
            gast_builder_1.buildTopProduction(elementDefText, "elementDef", tok)
        ];
        var actual = gast_builder_1.deserializeGrammar(gast_public_1.serializeGrammar(expected), tok);
        expect(expected).to.deep.equal(actual);
    });
});
//# sourceMappingURL=gast_builder_spec.js.map

/***/ }),
/* 71 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var parser_traits_1 = __webpack_require__(5);
var parser_1 = __webpack_require__(4);
var samples_1 = __webpack_require__(13);
var checks_1 = __webpack_require__(14);
var tokens_public_1 = __webpack_require__(1);
var utils_1 = __webpack_require__(0);
var gast_public_1 = __webpack_require__(2);
var errors_public_1 = __webpack_require__(12);
describe("the grammar validations", function () {
    it("validates every one of the TOP_RULEs in the input", function () {
        var expectedErrorsNoMsg = [
            {
                type: parser_1.ParserDefinitionErrorType.DUPLICATE_PRODUCTIONS,
                ruleName: "qualifiedNameErr1",
                dslName: "CONSUME",
                occurrence: 1,
                parameter: "IdentTok"
            },
            {
                type: parser_1.ParserDefinitionErrorType.DUPLICATE_PRODUCTIONS,
                ruleName: "qualifiedNameErr2",
                dslName: "MANY",
                occurrence: 1
            },
            {
                type: parser_1.ParserDefinitionErrorType.DUPLICATE_PRODUCTIONS,
                ruleName: "qualifiedNameErr2",
                dslName: "CONSUME",
                occurrence: 1,
                parameter: "DotTok"
            },
            {
                type: parser_1.ParserDefinitionErrorType.DUPLICATE_PRODUCTIONS,
                ruleName: "qualifiedNameErr2",
                dslName: "CONSUME",
                occurrence: 2,
                parameter: "IdentTok"
            }
        ];
        var qualifiedNameErr1 = new gast_public_1.Rule({
            name: "qualifiedNameErr1",
            definition: [
                new gast_public_1.Terminal({ terminalType: samples_1.IdentTok, idx: 1 }),
                new gast_public_1.Repetition({
                    definition: [
                        new gast_public_1.Terminal({ terminalType: samples_1.DotTok }),
                        new gast_public_1.Terminal({
                            terminalType: samples_1.IdentTok,
                            idx: 1
                        }) // duplicate Terminal IdentTok with occurrence index 1
                    ]
                })
            ]
        });
        var qualifiedNameErr2 = new gast_public_1.Rule({
            name: "qualifiedNameErr2",
            definition: [
                new gast_public_1.Terminal({ terminalType: samples_1.IdentTok, idx: 1 }),
                new gast_public_1.Repetition({
                    definition: [
                        new gast_public_1.Terminal({ terminalType: samples_1.DotTok }),
                        new gast_public_1.Terminal({
                            terminalType: samples_1.IdentTok,
                            idx: 2
                        })
                    ]
                }),
                new gast_public_1.Repetition({
                    definition: [
                        new gast_public_1.Terminal({ terminalType: samples_1.DotTok }),
                        new gast_public_1.Terminal({
                            terminalType: samples_1.IdentTok,
                            idx: 2
                        })
                    ]
                })
            ]
        });
        var actualErrors = checks_1.validateGrammar([qualifiedNameErr1, qualifiedNameErr2], 5, [], {}, errors_public_1.defaultGrammarValidatorErrorProvider, "bamba");
        expect(actualErrors.length).to.equal(4);
        utils_1.forEach(actualErrors, function (err) { return delete err.message; });
        expect(actualErrors).to.deep.include.members(expectedErrorsNoMsg);
        expect(expectedErrorsNoMsg).to.deep.include.members(actualErrors);
    });
    it("does not allow duplicate grammar rule names", function () {
        var noErrors = checks_1.validateRuleDoesNotAlreadyExist(new gast_public_1.Rule({ name: "A", definition: [] }), [
            new gast_public_1.Rule({ name: "B", definition: [] }),
            new gast_public_1.Rule({ name: "C", definition: [] })
        ], "className", errors_public_1.defaultGrammarValidatorErrorProvider);
        //noinspection BadExpressionStatementJS
        expect(noErrors).to.be.empty;
        var duplicateErr = checks_1.validateRuleDoesNotAlreadyExist(new gast_public_1.Rule({ name: "A", definition: [] }), [
            new gast_public_1.Rule({ name: "A", definition: [] }),
            new gast_public_1.Rule({ name: "A", definition: [] }),
            new gast_public_1.Rule({ name: "B", definition: [] }),
            new gast_public_1.Rule({ name: "C", definition: [] })
        ], "className", errors_public_1.defaultGrammarValidatorErrorProvider);
        //noinspection BadExpressionStatementJS
        expect(duplicateErr).to.have.length(1);
        expect(duplicateErr[0]).to.have.property("message");
        expect(duplicateErr[0]).to.have.property("type", parser_1.ParserDefinitionErrorType.DUPLICATE_RULE_NAME);
        expect(duplicateErr[0]).to.have.property("ruleName", "A");
    });
    it("only allows a subset of ECMAScript identifiers as rule names", function () {
        var res1 = checks_1.validateRuleName(new gast_public_1.Rule({ name: "1baa", definition: [] }), errors_public_1.defaultGrammarValidatorErrorProvider);
        expect(res1).to.have.lengthOf(1);
        expect(res1[0]).to.have.property("message");
        expect(res1[0]).to.have.property("type", parser_1.ParserDefinitionErrorType.INVALID_RULE_NAME);
        expect(res1[0]).to.have.property("ruleName", "1baa");
        var res2 = checks_1.validateRuleName(new gast_public_1.Rule({ name: "שלום", definition: [] }), errors_public_1.defaultGrammarValidatorErrorProvider);
        expect(res2).to.have.lengthOf(1);
        expect(res2[0]).to.have.property("message");
        expect(res2[0]).to.have.property("type", parser_1.ParserDefinitionErrorType.INVALID_RULE_NAME);
        expect(res2[0]).to.have.property("ruleName", "שלום");
        var res3 = checks_1.validateRuleName(new gast_public_1.Rule({ name: "$bamba", definition: [] }), errors_public_1.defaultGrammarValidatorErrorProvider);
        expect(res3).to.have.lengthOf(1);
        expect(res3[0]).to.have.property("message");
        expect(res3[0]).to.have.property("type", parser_1.ParserDefinitionErrorType.INVALID_RULE_NAME);
        expect(res3[0]).to.have.property("ruleName", "$bamba");
    });
    it("does not allow overriding a rule which does not already exist", function () {
        var positive = checks_1.validateRuleIsOverridden("AAA", ["BBB", "CCC"], "className");
        expect(positive).to.have.lengthOf(1);
        expect(positive[0].message).to.contain("Invalid rule override");
        expect(positive[0].type).to.equal(parser_1.ParserDefinitionErrorType.INVALID_RULE_OVERRIDE);
        expect(positive[0].ruleName).to.equal("AAA");
        var negative = checks_1.validateRuleIsOverridden("AAA", ["BBB", "CCC", "AAA"], "className");
        expect(negative).to.have.lengthOf(0);
    });
});
describe("identifyProductionForDuplicates function", function () {
    it("generates DSL code for a ProdRef", function () {
        var dslCode = checks_1.identifyProductionForDuplicates(new gast_public_1.NonTerminal({ nonTerminalName: "ActionDeclaration" }));
        expect(dslCode).to.equal("SUBRULE_#_1_#_ActionDeclaration");
    });
    it("generates DSL code for a OPTION", function () {
        var dslCode = checks_1.identifyProductionForDuplicates(new gast_public_1.Option({ definition: [], idx: 3 }));
        expect(dslCode).to.equal("OPTION_#_3_#_");
    });
    it("generates DSL code for a AT_LEAST_ONE", function () {
        var dslCode = checks_1.identifyProductionForDuplicates(new gast_public_1.RepetitionMandatory({ definition: [] }));
        expect(dslCode).to.equal("AT_LEAST_ONE_#_1_#_");
    });
    it("generates DSL code for a MANY", function () {
        var dslCode = checks_1.identifyProductionForDuplicates(new gast_public_1.Repetition({ definition: [], idx: 5 }));
        expect(dslCode).to.equal("MANY_#_5_#_");
    });
    it("generates DSL code for a OR", function () {
        var dslCode = checks_1.identifyProductionForDuplicates(new gast_public_1.Alternation({ definition: [], idx: 1 }));
        expect(dslCode).to.equal("OR_#_1_#_");
    });
    it("generates DSL code for a Terminal", function () {
        var dslCode = checks_1.identifyProductionForDuplicates(new gast_public_1.Terminal({ terminalType: samples_1.IdentTok, idx: 4 }));
        expect(dslCode).to.equal("CONSUME_#_4_#_IdentTok");
    });
});
describe("OccurrenceValidationCollector GASTVisitor class", function () {
    it("collects all the productions relevant to occurrence validation", function () {
        var qualifiedNameVisitor = new checks_1.OccurrenceValidationCollector();
        samples_1.qualifiedName.accept(qualifiedNameVisitor);
        expect(qualifiedNameVisitor.allProductions.length).to.equal(4);
        // TODO: check set equality
        var actionDecVisitor = new checks_1.OccurrenceValidationCollector();
        samples_1.actionDec.accept(actionDecVisitor);
        expect(actionDecVisitor.allProductions.length).to.equal(13);
        // TODO: check set equality
    });
});
var DummyToken = /** @class */ (function () {
    function DummyToken() {
    }
    DummyToken.PATTERN = /NA/;
    return DummyToken;
}());
var dummyRule = new gast_public_1.Rule({
    name: "dummyRule",
    definition: [new gast_public_1.Terminal({ terminalType: DummyToken })]
});
var dummyRule2 = new gast_public_1.Rule({
    name: "dummyRule2",
    definition: [new gast_public_1.Terminal({ terminalType: DummyToken })]
});
var dummyRule3 = new gast_public_1.Rule({
    name: "dummyRule3",
    definition: [new gast_public_1.Terminal({ terminalType: DummyToken })]
});
describe("the getFirstNoneTerminal function", function () {
    it("can find the firstNoneTerminal of an empty sequence", function () {
        expect(checks_1.getFirstNoneTerminal([])).to.be.empty;
    });
    it("can find the firstNoneTerminal of a sequence with only one item", function () {
        var result = checks_1.getFirstNoneTerminal([
            new gast_public_1.NonTerminal({
                nonTerminalName: "dummyRule",
                referencedRule: dummyRule
            })
        ]);
        expect(result).to.have.length(1);
        expect(utils_1.first(result).name).to.equal("dummyRule");
    });
    it("can find the firstNoneTerminal of a sequence with two items", function () {
        var sqeuence = [
            new gast_public_1.NonTerminal({
                nonTerminalName: "dummyRule",
                referencedRule: dummyRule
            }),
            new gast_public_1.NonTerminal({
                nonTerminalName: "dummyRule2",
                referencedRule: dummyRule2
            })
        ];
        var result = checks_1.getFirstNoneTerminal(sqeuence);
        expect(result).to.have.length(1);
        expect(utils_1.first(result).name).to.equal("dummyRule");
    });
    it("can find the firstNoneTerminal of a sequence with two items where the first is optional", function () {
        var sqeuence = [
            new gast_public_1.Option({
                definition: [
                    new gast_public_1.NonTerminal({
                        nonTerminalName: "dummyRule",
                        referencedRule: dummyRule
                    })
                ]
            }),
            new gast_public_1.NonTerminal({
                nonTerminalName: "dummyRule2",
                referencedRule: dummyRule2
            })
        ];
        var result = checks_1.getFirstNoneTerminal(sqeuence);
        expect(result).to.have.length(2);
        var resultRuleNames = utils_1.map(result, function (currItem) { return currItem.name; });
        expect(resultRuleNames).to.include.members(["dummyRule", "dummyRule2"]);
    });
    it("can find the firstNoneTerminal of an alternation", function () {
        var alternation = [
            new gast_public_1.Alternation({
                definition: [
                    new gast_public_1.Flat({
                        definition: [
                            new gast_public_1.NonTerminal({
                                nonTerminalName: "dummyRule",
                                referencedRule: dummyRule
                            })
                        ]
                    }),
                    new gast_public_1.Flat({
                        definition: [
                            new gast_public_1.NonTerminal({
                                nonTerminalName: "dummyRule2",
                                referencedRule: dummyRule2
                            })
                        ]
                    }),
                    new gast_public_1.Flat({
                        definition: [
                            new gast_public_1.NonTerminal({
                                nonTerminalName: "dummyRule3",
                                referencedRule: dummyRule3
                            })
                        ]
                    })
                ]
            })
        ];
        var result = checks_1.getFirstNoneTerminal(alternation);
        expect(result).to.have.length(3);
        var resultRuleNames = utils_1.map(result, function (currItem) { return currItem.name; });
        expect(resultRuleNames).to.include.members([
            "dummyRule",
            "dummyRule2",
            "dummyRule3"
        ]);
    });
    it("can find the firstNoneTerminal of an optional repetition", function () {
        var alternation = [
            new gast_public_1.Repetition({
                definition: [
                    new gast_public_1.Flat({
                        definition: [
                            new gast_public_1.NonTerminal({
                                nonTerminalName: "dummyRule",
                                referencedRule: dummyRule
                            })
                        ]
                    }),
                    new gast_public_1.Flat({
                        definition: [
                            new gast_public_1.NonTerminal({
                                nonTerminalName: "dummyRule2",
                                referencedRule: dummyRule2
                            })
                        ]
                    })
                ]
            }),
            new gast_public_1.NonTerminal({
                nonTerminalName: "dummyRule3",
                referencedRule: dummyRule3
            })
        ];
        var result = checks_1.getFirstNoneTerminal(alternation);
        expect(result).to.have.length(2);
        var resultRuleNames = utils_1.map(result, function (currItem) { return currItem.name; });
        expect(resultRuleNames).to.include.members(["dummyRule", "dummyRule3"]);
    });
    it("can find the firstNoneTerminal of a mandatory repetition", function () {
        var alternation = [
            new gast_public_1.RepetitionMandatory({
                definition: [
                    new gast_public_1.Flat({
                        definition: [
                            new gast_public_1.NonTerminal({
                                nonTerminalName: "dummyRule",
                                referencedRule: dummyRule
                            })
                        ]
                    }),
                    new gast_public_1.Flat({
                        definition: [
                            new gast_public_1.NonTerminal({
                                nonTerminalName: "dummyRule2",
                                referencedRule: dummyRule2
                            })
                        ]
                    })
                ]
            }),
            new gast_public_1.NonTerminal({
                nonTerminalName: "dummyRule3",
                referencedRule: dummyRule3
            })
        ];
        var result = checks_1.getFirstNoneTerminal(alternation);
        expect(result).to.have.length(1);
        var resultRuleNames = utils_1.map(result, function (currItem) { return currItem.name; });
        expect(resultRuleNames).to.include.members(["dummyRule"]);
    });
});
var PlusTok = /** @class */ (function () {
    function PlusTok() {
    }
    PlusTok.PATTERN = /NA/;
    return PlusTok;
}());
exports.PlusTok = PlusTok;
var MinusTok = /** @class */ (function () {
    function MinusTok() {
    }
    MinusTok.PATTERN = /NA/;
    return MinusTok;
}());
exports.MinusTok = MinusTok;
var StarTok = /** @class */ (function () {
    function StarTok() {
    }
    StarTok.PATTERN = /NA/;
    return StarTok;
}());
exports.StarTok = StarTok;
var ErroneousOccurrenceNumUsageParser1 = /** @class */ (function (_super) {
    __extends(ErroneousOccurrenceNumUsageParser1, _super);
    function ErroneousOccurrenceNumUsageParser1(input) {
        if (input === void 0) { input = []; }
        var _this = _super.call(this, [PlusTok]) || this;
        _this.duplicateRef = _this.RULE("duplicateRef", function () {
            _this.SUBRULE1(_this.anotherRule);
            _this.SUBRULE1(_this.anotherRule);
        });
        _this.anotherRule = _this.RULE("anotherRule", function () {
            _this.CONSUME(PlusTok);
        });
        _this.input = input;
        _this.performSelfAnalysis();
        return _this;
    }
    return ErroneousOccurrenceNumUsageParser1;
}(parser_traits_1.Parser));
var ErroneousOccurrenceNumUsageParser2 = /** @class */ (function (_super) {
    __extends(ErroneousOccurrenceNumUsageParser2, _super);
    function ErroneousOccurrenceNumUsageParser2(input) {
        if (input === void 0) { input = []; }
        var _this = _super.call(this, [PlusTok]) || this;
        _this.duplicateTerminal = _this.RULE("duplicateTerminal", function () {
            _this.CONSUME3(PlusTok);
            _this.CONSUME3(PlusTok);
        });
        _this.input = input;
        _this.performSelfAnalysis();
        return _this;
    }
    return ErroneousOccurrenceNumUsageParser2;
}(parser_traits_1.Parser));
var ErroneousOccurrenceNumUsageParser3 = /** @class */ (function (_super) {
    __extends(ErroneousOccurrenceNumUsageParser3, _super);
    function ErroneousOccurrenceNumUsageParser3(input) {
        if (input === void 0) { input = []; }
        var _this = _super.call(this, [PlusTok, MinusTok]) || this;
        _this.duplicateMany = _this.RULE("duplicateMany", function () {
            _this.MANY(function () {
                _this.CONSUME1(MinusTok);
                _this.MANY(function () {
                    _this.CONSUME1(PlusTok);
                });
            });
        });
        _this.input = input;
        _this.performSelfAnalysis();
        return _this;
    }
    return ErroneousOccurrenceNumUsageParser3;
}(parser_traits_1.Parser));
var myToken = tokens_public_1.createToken({ name: "myToken" });
var myOtherToken = tokens_public_1.createToken({ name: "myOtherToken" });
var ValidOccurrenceNumUsageParser = /** @class */ (function (_super) {
    __extends(ValidOccurrenceNumUsageParser, _super);
    function ValidOccurrenceNumUsageParser(input) {
        if (input === void 0) { input = []; }
        var _this = _super.call(this, [myToken, myOtherToken]) || this;
        _this.anonymousTokens = _this.RULE("anonymousTokens", function () {
            _this.CONSUME1(myToken);
            _this.CONSUME1(myOtherToken);
        });
        _this.input = input;
        _this.performSelfAnalysis();
        return _this;
    }
    return ValidOccurrenceNumUsageParser;
}(parser_traits_1.Parser));
describe("The duplicate occurrence validations full flow", function () {
    it("will throw errors on duplicate Terminals consumption in the same top level rule", function () {
        expect(function () { return new ErroneousOccurrenceNumUsageParser1(); }).to.throw("SUBRULE");
        expect(function () { return new ErroneousOccurrenceNumUsageParser1(); }).to.throw("1");
        expect(function () { return new ErroneousOccurrenceNumUsageParser1(); }).to.throw("duplicateRef");
        expect(function () { return new ErroneousOccurrenceNumUsageParser1(); }).to.throw("anotherRule");
        expect(function () { return new ErroneousOccurrenceNumUsageParser1(); }).to.throw("with numerical suffix: ->1<-");
    });
    it("will throw errors on duplicate Subrules references in the same top level rule", function () {
        expect(function () { return new ErroneousOccurrenceNumUsageParser2(); }).to.throw("CONSUME");
        expect(function () { return new ErroneousOccurrenceNumUsageParser2(); }).to.throw("3");
        expect(function () { return new ErroneousOccurrenceNumUsageParser2(); }).to.throw("PlusTok");
        expect(function () { return new ErroneousOccurrenceNumUsageParser2(); }).to.throw("duplicateTerminal");
    });
    it("will throw errors on duplicate MANY productions in the same top level rule", function () {
        expect(function () { return new ErroneousOccurrenceNumUsageParser3(); }).to.throw("MANY");
        expect(function () { return new ErroneousOccurrenceNumUsageParser3(); }).to.throw("0");
        expect(function () { return new ErroneousOccurrenceNumUsageParser3(); }).to.throw("duplicateMany");
        expect(function () { return new ErroneousOccurrenceNumUsageParser3(); }).to.throw("appears more than once (2 times)");
    });
    it("won't detect issues in a Parser using Tokens created by extendToken(...) utility (anonymous)", function () {
        //noinspection JSUnusedLocalSymbols
        var parser = new ValidOccurrenceNumUsageParser();
    });
});
var InvalidRefParser = /** @class */ (function (_super) {
    __extends(InvalidRefParser, _super);
    function InvalidRefParser(input) {
        if (input === void 0) { input = []; }
        var _this = _super.call(this, [myToken, myOtherToken]) || this;
        _this.one = _this.RULE("one", function () {
            _this.SUBRULE2(_this.oopsTypo);
        });
        _this.input = input;
        _this.performSelfAnalysis();
        return _this;
    }
    return InvalidRefParser;
}(parser_traits_1.Parser));
var InvalidRefParser2 = /** @class */ (function (_super) {
    __extends(InvalidRefParser2, _super);
    function InvalidRefParser2(input) {
        if (input === void 0) { input = []; }
        var _this = _super.call(this, [myToken, myOtherToken]) || this;
        _this.one = _this.RULE("one", function () {
            _this.SUBRULE2(_this.oopsTypo);
        });
        _this.input = input;
        _this.performSelfAnalysis();
        return _this;
    }
    return InvalidRefParser2;
}(parser_traits_1.Parser));
describe("The reference resolver validation full flow", function () {
    it("will throw an error when trying to init a parser with unresolved rule references", function () {
        expect(function () { return new InvalidRefParser(); }).to.throw("oopsTypo");
        expect(function () { return new InvalidRefParser(); }).to.throw("Parser Definition Errors detected");
        expect(function () { return new InvalidRefParser(); }).to.throw("reference to a rule which is not defined");
    });
    it("won't throw an error when trying to init a parser with definition errors but with a flag active to defer handling" +
        "of definition errors", function () {
        ;
        parser_traits_1.Parser.DEFER_DEFINITION_ERRORS_HANDLING = true;
        expect(function () { return new InvalidRefParser2(); }).to.not.throw();
        expect(function () { return new InvalidRefParser2(); }).to.not.throw();
        expect(function () { return new InvalidRefParser2(); }).to.not.throw();
        parser_traits_1.Parser.DEFER_DEFINITION_ERRORS_HANDLING = false;
    });
});
var DuplicateRulesParser = /** @class */ (function (_super) {
    __extends(DuplicateRulesParser, _super);
    function DuplicateRulesParser(input) {
        if (input === void 0) { input = []; }
        var _this = _super.call(this, [myToken, myOtherToken]) || this;
        _this.one = _this.RULE("oops_duplicate", function () { });
        _this.two = _this.RULE("oops_duplicate", function () { });
        _this.input = input;
        _this.performSelfAnalysis();
        return _this;
    }
    return DuplicateRulesParser;
}(parser_traits_1.Parser));
var InvalidRuleNameParser = /** @class */ (function (_super) {
    __extends(InvalidRuleNameParser, _super);
    function InvalidRuleNameParser(input) {
        if (input === void 0) { input = []; }
        var _this = _super.call(this, [myToken, myOtherToken]) || this;
        _this.one = _this.RULE("שלום", function () { });
        _this.input = input;
        _this.performSelfAnalysis();
        return _this;
    }
    return InvalidRuleNameParser;
}(parser_traits_1.Parser));
describe("The rule names validation full flow", function () {
    it("will throw an error when trying to init a parser with duplicate ruleNames", function () {
        expect(function () { return new DuplicateRulesParser(); }).to.throw("is already defined in the grammar");
        expect(function () { return new DuplicateRulesParser(); }).to.throw("DuplicateRulesParser");
        expect(function () { return new DuplicateRulesParser(); }).to.throw("oops_duplicate");
    });
    it("will throw an error when trying to init a parser with an invalid rule names", function () {
        expect(function () { return new InvalidRuleNameParser(); }).to.throw("it must match the pattern");
        expect(function () { return new InvalidRuleNameParser(); }).to.throw("Invalid grammar rule name");
        expect(function () { return new InvalidRuleNameParser(); }).to.throw("שלום");
    });
    it("won't throw an errors when trying to init a parser with definition errors but with a flag active to defer handling" +
        "of definition errors (ruleName validation", function () {
        ;
        parser_traits_1.Parser.DEFER_DEFINITION_ERRORS_HANDLING = true;
        expect(function () { return new InvalidRuleNameParser(); }).to.not.throw();
        expect(function () { return new InvalidRuleNameParser(); }).to.not.throw();
        expect(function () { return new DuplicateRulesParser(); }).to.not.throw();
        expect(function () { return new DuplicateRulesParser(); }).to.not.throw();
        parser_traits_1.Parser.DEFER_DEFINITION_ERRORS_HANDLING = false;
    });
});
var StarToken = /** @class */ (function () {
    function StarToken() {
    }
    StarToken.PATTERN = /NA/;
    return StarToken;
}());
var DirectlyLeftRecursive = /** @class */ (function (_super) {
    __extends(DirectlyLeftRecursive, _super);
    function DirectlyLeftRecursive(input) {
        if (input === void 0) { input = []; }
        var _this = _super.call(this, [StarToken]) || this;
        _this.A = _this.RULE("A", function () {
            _this.SUBRULE1(_this.A);
        });
        _this.input = input;
        _this.performSelfAnalysis();
        return _this;
    }
    return DirectlyLeftRecursive;
}(parser_traits_1.Parser));
var InDirectlyLeftRecursive = /** @class */ (function (_super) {
    __extends(InDirectlyLeftRecursive, _super);
    function InDirectlyLeftRecursive(input) {
        if (input === void 0) { input = []; }
        var _this = _super.call(this, [StarToken]) || this;
        _this.A = _this.RULE("A", function () {
            _this.SUBRULE1(_this.B);
        });
        _this.B = _this.RULE("B", function () {
            _this.SUBRULE1(_this.A);
        });
        _this.input = input;
        _this.performSelfAnalysis();
        return _this;
    }
    return InDirectlyLeftRecursive;
}(parser_traits_1.Parser));
var ComplexInDirectlyLeftRecursive = /** @class */ (function (_super) {
    __extends(ComplexInDirectlyLeftRecursive, _super);
    function ComplexInDirectlyLeftRecursive(input) {
        if (input === void 0) { input = []; }
        var _this = _super.call(this, [StarToken]) || this;
        _this.A = _this.RULE("A", function () {
            _this.SUBRULE1(_this.B);
        });
        _this.B = _this.RULE("B", function () {
            _this.MANY(function () {
                _this.SUBRULE1(_this.A);
            });
            _this.CONSUME(StarToken);
        });
        _this.input = input;
        _this.performSelfAnalysis();
        return _this;
    }
    return ComplexInDirectlyLeftRecursive;
}(parser_traits_1.Parser));
describe("The left recursion detection full flow", function () {
    it("will throw an error when trying to init a parser with direct left recursion", function () {
        expect(function () { return new DirectlyLeftRecursive(); }).to.throw("Left Recursion found in grammar");
        expect(function () { return new DirectlyLeftRecursive(); }).to.throw("A --> A");
    });
    it("will throw an error when trying to init a parser with indirect left recursion", function () {
        expect(function () { return new InDirectlyLeftRecursive(); }).to.throw("Left Recursion found in grammar");
        expect(function () { return new InDirectlyLeftRecursive(); }).to.throw("A --> B --> A");
    });
    it("will throw an error when trying to init a parser with indirect left recursion", function () {
        expect(function () { return new ComplexInDirectlyLeftRecursive(); }).to.throw("Left Recursion found in grammar");
        expect(function () { return new ComplexInDirectlyLeftRecursive(); }).to.throw("A --> B --> A");
    });
});
describe("The empty alternative detection full flow", function () {
    it("will throw an error when an empty alternative is not the last alternative", function () {
        var EmptyAltAmbiguityParser = /** @class */ (function (_super) {
            __extends(EmptyAltAmbiguityParser, _super);
            function EmptyAltAmbiguityParser(input) {
                if (input === void 0) { input = []; }
                var _this = _super.call(this, [PlusTok, StarTok]) || this;
                _this.noneLastEmpty = _this.RULE("noneLastEmpty", function () {
                    _this.OR1([
                        {
                            ALT: function () {
                                _this.CONSUME1(PlusTok);
                            }
                        },
                        {
                            ALT: parser_1.EMPTY_ALT()
                        },
                        // empty alternative #3 which is not the last one!
                        { ALT: function () { } },
                        {
                            ALT: function () {
                                _this.CONSUME2(StarTok);
                            }
                        }
                    ]);
                });
                _this.input = input;
                _this.performSelfAnalysis();
                return _this;
            }
            return EmptyAltAmbiguityParser;
        }(parser_traits_1.Parser));
        expect(function () { return new EmptyAltAmbiguityParser(); }).to.throw("Ambiguous empty alternative");
        expect(function () { return new EmptyAltAmbiguityParser(); }).to.throw("3");
        expect(function () { return new EmptyAltAmbiguityParser(); }).to.throw("2");
    });
    it("will throw an error when an empty alternative is not the last alternative - Indirect", function () {
        var EmptyAltIndirectAmbiguityParser = /** @class */ (function (_super) {
            __extends(EmptyAltIndirectAmbiguityParser, _super);
            function EmptyAltIndirectAmbiguityParser(input) {
                if (input === void 0) { input = []; }
                var _this = _super.call(this, [PlusTok, StarTok]) || this;
                _this.noneLastEmpty = _this.RULE("noneLastEmpty", function () {
                    _this.OR1([
                        {
                            ALT: function () {
                                _this.CONSUME1(PlusTok);
                            }
                        },
                        {
                            ALT: function () {
                                _this.SUBRULE(_this.emptyRule);
                            }
                        },
                        // empty alternative #3 which is not the last one!
                        { ALT: function () { } },
                        {
                            ALT: function () {
                                _this.CONSUME2(StarTok);
                            }
                        }
                    ]);
                });
                _this.emptyRule = _this.RULE("emptyRule", function () { });
                _this.input = input;
                _this.performSelfAnalysis();
                return _this;
            }
            return EmptyAltIndirectAmbiguityParser;
        }(parser_traits_1.Parser));
        expect(function () { return new EmptyAltIndirectAmbiguityParser(); }).to.throw("Ambiguous empty alternative");
        expect(function () { return new EmptyAltIndirectAmbiguityParser(); }).to.throw("3");
        expect(function () { return new EmptyAltIndirectAmbiguityParser(); }).to.throw("2");
    });
    it("will detect alternative ambiguity with identical lookaheads", function () {
        var AltAmbiguityParserImplicitOccurence = /** @class */ (function (_super) {
            __extends(AltAmbiguityParserImplicitOccurence, _super);
            function AltAmbiguityParserImplicitOccurence(input) {
                if (input === void 0) { input = []; }
                var _this = _super.call(this, [PlusTok, StarTok]) || this;
                _this.noneLastEmpty = _this.RULE("noneLastEmpty", function () {
                    _this.OR([
                        {
                            ALT: function () {
                                _this.CONSUME1(PlusTok);
                                _this.CONSUME1(StarTok);
                            }
                        },
                        {
                            ALT: function () {
                                _this.CONSUME2(PlusTok);
                                _this.CONSUME2(StarTok);
                            }
                        }
                    ]);
                });
                _this.input = input;
                _this.performSelfAnalysis();
                return _this;
            }
            return AltAmbiguityParserImplicitOccurence;
        }(parser_traits_1.Parser));
        expect(function () { return new AltAmbiguityParserImplicitOccurence(); }).to.throw("Ambiguous alternative");
        expect(function () { return new AltAmbiguityParserImplicitOccurence(); }).to.throw("1");
        expect(function () { return new AltAmbiguityParserImplicitOccurence(); }).to.throw("2");
        expect(function () { return new AltAmbiguityParserImplicitOccurence(); }).to.throw("<PlusTok, StarTok> may appears as a prefix path");
    });
    it("will throw an error when an empty alternative is not the last alternative #2", function () {
        var EmptyAltAmbiguityParser2 = /** @class */ (function (_super) {
            __extends(EmptyAltAmbiguityParser2, _super);
            function EmptyAltAmbiguityParser2(input) {
                if (input === void 0) { input = []; }
                var _this = _super.call(this, [PlusTok, StarTok]) || this;
                _this.noneLastEmpty = _this.RULE("noneLastEmpty", function () {
                    _this.OR([
                        // using OR without occurrence suffix, test to check for fix for https://github.com/SAP/chevrotain/issues/101
                        {
                            ALT: parser_1.EMPTY_ALT()
                        },
                        {
                            ALT: function () {
                                _this.CONSUME1(PlusTok);
                            }
                        },
                        {
                            ALT: function () {
                                _this.CONSUME2(StarTok);
                            }
                        }
                    ]);
                });
                _this.input = input;
                _this.performSelfAnalysis();
                return _this;
            }
            return EmptyAltAmbiguityParser2;
        }(parser_traits_1.Parser));
        expect(function () { return new EmptyAltAmbiguityParser2(); }).to.throw("Ambiguous empty alternative");
        expect(function () { return new EmptyAltAmbiguityParser2(); }).to.throw("1");
        expect(function () { return new EmptyAltAmbiguityParser2(); }).to.throw("Only the last alternative may be an empty alternative.");
        expect(function () { return new EmptyAltAmbiguityParser2(); }).to.not.throw("undefined");
    });
});
describe("The prefix ambiguity detection full flow", function () {
    it("will throw an error when an a common prefix ambiguity is detected", function () {
        var PrefixAltAmbiguity = /** @class */ (function (_super) {
            __extends(PrefixAltAmbiguity, _super);
            function PrefixAltAmbiguity(input) {
                if (input === void 0) { input = []; }
                var _this = _super.call(this, [PlusTok, MinusTok, StarTok]) || this;
                _this.prefixAltAmbiguity = _this.RULE("prefixAltAmbiguity", function () {
                    _this.OR3([
                        {
                            ALT: function () {
                                _this.CONSUME1(PlusTok);
                                _this.CONSUME1(MinusTok);
                            }
                        },
                        {
                            ALT: function () {
                                _this.CONSUME2(PlusTok);
                                _this.CONSUME2(MinusTok);
                                _this.CONSUME1(StarTok);
                            }
                        }
                    ]);
                });
                _this.input = input;
                _this.performSelfAnalysis();
                return _this;
            }
            return PrefixAltAmbiguity;
        }(parser_traits_1.Parser));
        expect(function () { return new PrefixAltAmbiguity(); }).to.throw("OR3");
        expect(function () { return new PrefixAltAmbiguity(); }).to.throw("Ambiguous alternatives");
        expect(function () { return new PrefixAltAmbiguity(); }).to.throw("due to common lookahead prefix");
        expect(function () { return new PrefixAltAmbiguity(); }).to.throw("<PlusTok, MinusTok>");
        expect(function () { return new PrefixAltAmbiguity(); }).to.throw("https://sap.github.io/chevrotain/docs/guide/resolving_grammar_errors.html#COMMON_PREFIX");
    });
    it("will throw an error when an an alts ambiguity is detected", function () {
        var OneTok = tokens_public_1.createToken({ name: "OneTok" });
        var TwoTok = tokens_public_1.createToken({ name: "TwoTok" });
        var Comma = tokens_public_1.createToken({ name: "Comma" });
        var ALL_TOKENS = [OneTok, TwoTok, Comma];
        var AlternativesAmbiguityParser = /** @class */ (function (_super) {
            __extends(AlternativesAmbiguityParser, _super);
            function AlternativesAmbiguityParser() {
                var _this = _super.call(this, ALL_TOKENS) || this;
                _this.main = _this.RULE("main", function () {
                    _this.OR([
                        { ALT: function () { return _this.SUBRULE(_this.alt1); } },
                        { ALT: function () { return _this.SUBRULE(_this.alt2); } }
                    ]);
                });
                _this.alt1 = _this.RULE("alt1", function () {
                    _this.MANY(function () {
                        _this.CONSUME(Comma);
                    });
                    _this.CONSUME(OneTok);
                });
                _this.alt2 = _this.RULE("alt2", function () {
                    _this.MANY(function () {
                        _this.CONSUME(Comma);
                    });
                    _this.CONSUME(TwoTok);
                });
                _this.performSelfAnalysis();
                return _this;
            }
            return AlternativesAmbiguityParser;
        }(parser_traits_1.Parser));
        expect(function () { return new AlternativesAmbiguityParser(); }).to.throw("Ambiguous alternatives: <1 ,2>");
        expect(function () { return new AlternativesAmbiguityParser(); }).to.throw("in <OR> inside <main> Rule");
        expect(function () { return new AlternativesAmbiguityParser(); }).to.throw("Comma, Comma, Comma, Comma");
        expect(function () { return new AlternativesAmbiguityParser(); }).to.throw("interfaces/iparserconfig.html#ignoredissues for more details\n");
    });
    it("will throw an error when an a common prefix ambiguity is detected - implicit occurrence idx", function () {
        var PrefixAltAmbiguity2 = /** @class */ (function (_super) {
            __extends(PrefixAltAmbiguity2, _super);
            function PrefixAltAmbiguity2(input) {
                if (input === void 0) { input = []; }
                var _this = _super.call(this, [PlusTok, MinusTok, StarTok]) || this;
                _this.prefixAltAmbiguity = _this.RULE("prefixAltAmbiguity", function () {
                    _this.OR([
                        {
                            ALT: function () {
                                _this.CONSUME1(PlusTok);
                                _this.CONSUME1(MinusTok);
                            }
                        },
                        {
                            ALT: function () {
                                _this.CONSUME2(PlusTok);
                                _this.CONSUME2(MinusTok);
                                _this.CONSUME1(StarTok);
                            }
                        }
                    ]);
                });
                _this.input = input;
                _this.performSelfAnalysis();
                return _this;
            }
            return PrefixAltAmbiguity2;
        }(parser_traits_1.Parser));
        expect(function () { return new PrefixAltAmbiguity2(); }).to.throw("OR");
        expect(function () { return new PrefixAltAmbiguity2(); }).to.throw("Ambiguous alternatives");
        expect(function () { return new PrefixAltAmbiguity2(); }).to.throw("due to common lookahead prefix");
        expect(function () { return new PrefixAltAmbiguity2(); }).to.throw("<PlusTok, MinusTok>");
        expect(function () { return new PrefixAltAmbiguity2(); }).to.throw("https://sap.github.io/chevrotain/docs/guide/resolving_grammar_errors.html#COMMON_PREFIX");
    });
});
describe("The namespace conflict detection full flow", function () {
    it("will throw an error when a Terminal and a NoneTerminal have the same name", function () {
        var Bamba = /** @class */ (function () {
            function Bamba() {
            }
            Bamba.PATTERN = /NA/;
            return Bamba;
        }());
        var A = /** @class */ (function () {
            function A() {
            }
            A.PATTERN = /NA/;
            return A;
        }());
        var NameSpaceConflict = /** @class */ (function (_super) {
            __extends(NameSpaceConflict, _super);
            function NameSpaceConflict(input) {
                if (input === void 0) { input = []; }
                var _this = _super.call(this, [Bamba, A]) || this;
                _this.Bamba = _this.RULE("Bamba", function () {
                    _this.CONSUME(A);
                });
                _this.input = input;
                _this.performSelfAnalysis();
                return _this;
            }
            return NameSpaceConflict;
        }(parser_traits_1.Parser));
        expect(function () { return new NameSpaceConflict([]); }).to.throw("The grammar has both a Terminal(Token) and a Non-Terminal(Rule) named: <Bamba>");
    });
});
describe("The nested rule name validation full flow", function () {
    it("will throw an error when a nested name does not start with $(dollar)", function () {
        var A = /** @class */ (function () {
            function A() {
            }
            A.PATTERN = /NA/;
            return A;
        }());
        var NestedNamedInvalid = /** @class */ (function (_super) {
            __extends(NestedNamedInvalid, _super);
            function NestedNamedInvalid(input) {
                if (input === void 0) { input = []; }
                var _this = _super.call(this, [A]) || this;
                _this.someRule = _this.RULE("someRule", function () {
                    _this.OPTION({
                        NAME: "blah",
                        DEF: function () {
                            _this.CONSUME(A);
                        }
                    });
                });
                _this.input = input;
                _this.performSelfAnalysis();
                return _this;
            }
            return NestedNamedInvalid;
        }(parser_traits_1.Parser));
        expect(function () { return new NestedNamedInvalid([]); }).to.throw("Invalid nested rule name: ->blah<- inside rule: ->someRule<-");
    });
});
describe("The duplicated nested name validation full flow", function () {
    it("will throw an error when two nested rules share the same name", function () {
        var A = /** @class */ (function () {
            function A() {
            }
            A.PATTERN = /NA/;
            return A;
        }());
        var B = /** @class */ (function () {
            function B() {
            }
            B.PATTERN = /NA/;
            return B;
        }());
        var NestedNamedDuplicate = /** @class */ (function (_super) {
            __extends(NestedNamedDuplicate, _super);
            function NestedNamedDuplicate(input) {
                if (input === void 0) { input = []; }
                var _this = _super.call(this, [A, B]) || this;
                _this.someRule = _this.RULE("someRule", function () {
                    _this.OPTION({
                        NAME: "$blah",
                        DEF: function () {
                            _this.CONSUME(A);
                        }
                    });
                    _this.OPTION2({
                        NAME: "$blah",
                        DEF: function () {
                            _this.CONSUME(B);
                        }
                    });
                });
                _this.input = input;
                _this.performSelfAnalysis();
                return _this;
            }
            return NestedNamedDuplicate;
        }(parser_traits_1.Parser));
        expect(function () { return new NestedNamedDuplicate([]); }).to.throw("Duplicate nested rule name: ->$blah<- inside rule: ->someRule<-");
    });
});
describe("The invalid token name validation", function () {
    it("will throw an error when a Token is using an invalid name", function () {
        var במבה = /** @class */ (function () {
            function במבה() {
            }
            במבה.PATTERN = /NA/;
            return במבה;
        }());
        var A = /** @class */ (function () {
            function A() {
            }
            A.PATTERN = /NA/;
            return A;
        }());
        var InvalidTokenName = /** @class */ (function (_super) {
            __extends(InvalidTokenName, _super);
            function InvalidTokenName(input) {
                if (input === void 0) { input = []; }
                var _this = _super.call(this, [במבה, A]) || this;
                _this.someRule = _this.RULE("someRule", function () {
                    _this.CONSUME(A);
                });
                _this.input = input;
                _this.performSelfAnalysis();
                return _this;
            }
            return InvalidTokenName;
        }(parser_traits_1.Parser));
        expect(function () { return new InvalidTokenName([]); }).to.throw("Invalid Grammar Token name: ->במבה<- it must match the pattern: ->/^[a-zA-Z_]\\w*$/<-");
    });
});
describe("The no non-empty lookahead validation", function () {
    var EmptyLookaheadParser = /** @class */ (function (_super) {
        __extends(EmptyLookaheadParser, _super);
        function EmptyLookaheadParser(input) {
            if (input === void 0) { input = []; }
            var _this = _super.call(this, [PlusTok]) || this;
            _this.block = _this.RULE("block", function () { return _this.CONSUME(PlusTok); });
            _this.input = input;
            return _this;
        }
        return EmptyLookaheadParser;
    }(parser_traits_1.Parser));
    it("will throw an error when there are no non-empty lookaheads for AT_LEAST_ONE", function () {
        var EmptyLookaheadParserAtLeastOne = /** @class */ (function (_super) {
            __extends(EmptyLookaheadParserAtLeastOne, _super);
            function EmptyLookaheadParserAtLeastOne(input) {
                if (input === void 0) { input = []; }
                var _this = _super.call(this, input) || this;
                _this.someRule = _this.RULE("someRule", function () {
                    return _this.AT_LEAST_ONE(_this.block);
                });
                _this.performSelfAnalysis();
                return _this;
            }
            return EmptyLookaheadParserAtLeastOne;
        }(EmptyLookaheadParser));
        expect(function () { return new EmptyLookaheadParserAtLeastOne(); }).to.throw("The repetition <AT_LEAST_ONE>");
        expect(function () { return new EmptyLookaheadParserAtLeastOne(); }).to.throw("<someRule> can never consume any tokens");
    });
    it("will throw an error when there are no non-empty lookaheads for AT_LEAST_ONE_SEP", function () {
        var EmptyLookaheadParserAtLeastOneSep = /** @class */ (function (_super) {
            __extends(EmptyLookaheadParserAtLeastOneSep, _super);
            function EmptyLookaheadParserAtLeastOneSep(input) {
                if (input === void 0) { input = []; }
                var _this = _super.call(this, input) || this;
                _this.someRule = _this.RULE("someRule", function () {
                    return _this.AT_LEAST_ONE_SEP5({
                        SEP: PlusTok,
                        DEF: _this.block
                    });
                });
                _this.performSelfAnalysis();
                return _this;
            }
            return EmptyLookaheadParserAtLeastOneSep;
        }(EmptyLookaheadParser));
        expect(function () { return new EmptyLookaheadParserAtLeastOneSep(); }).to.throw("The repetition <AT_LEAST_ONE_SEP5>");
        expect(function () { return new EmptyLookaheadParserAtLeastOneSep(); }).to.throw("within Rule <someRule>");
    });
    it("will throw an error when there are no non-empty lookaheads for MANY", function () {
        var EmptyLookaheadParserMany = /** @class */ (function (_super) {
            __extends(EmptyLookaheadParserMany, _super);
            function EmptyLookaheadParserMany(input) {
                if (input === void 0) { input = []; }
                var _this = _super.call(this, input) || this;
                _this.someRule = _this.RULE("someRule", function () {
                    return _this.MANY2(_this.block);
                });
                _this.performSelfAnalysis();
                return _this;
            }
            return EmptyLookaheadParserMany;
        }(EmptyLookaheadParser));
        expect(function () { return new EmptyLookaheadParserMany(); }).to.throw("The repetition <MANY2>");
        expect(function () { return new EmptyLookaheadParserMany(); }).to.throw("<someRule> can never consume any tokens");
    });
    it("will throw an error when there are no non-empty lookaheads for MANY_SEP", function () {
        var EmptyLookaheadParserManySep = /** @class */ (function (_super) {
            __extends(EmptyLookaheadParserManySep, _super);
            function EmptyLookaheadParserManySep(input) {
                if (input === void 0) { input = []; }
                var _this = _super.call(this, input) || this;
                _this.someRule = _this.RULE("someRule", function () {
                    return _this.MANY_SEP3({
                        SEP: PlusTok,
                        DEF: _this.block
                    });
                });
                _this.performSelfAnalysis();
                return _this;
            }
            return EmptyLookaheadParserManySep;
        }(EmptyLookaheadParser));
        expect(function () { return new EmptyLookaheadParserManySep(); }).to.throw("The repetition <MANY_SEP3>");
        expect(function () { return new EmptyLookaheadParserManySep(); }).to.throw("within Rule <someRule>");
    });
    it("will throw an error when there are too many alternatives in an alternation", function () {
        var alternatives = [];
        for (var i = 0; i < 256; i++) {
            alternatives.push(new gast_public_1.Flat({
                definition: [
                    new gast_public_1.NonTerminal({
                        nonTerminalName: "dummyRule",
                        referencedRule: dummyRule
                    })
                ]
            }));
        }
        var ruleWithTooManyAlts = new gast_public_1.Rule({
            name: "blah",
            definition: [new gast_public_1.Alternation({ definition: alternatives })]
        });
        var actual = checks_1.validateTooManyAlts(ruleWithTooManyAlts, errors_public_1.defaultGrammarValidatorErrorProvider);
        expect(actual).to.have.lengthOf(1);
        expect(actual[0].type).to.equal(parser_1.ParserDefinitionErrorType.TOO_MANY_ALTS);
        expect(actual[0].ruleName).to.equal("blah");
        expect(actual[0].message).to.contain("An Alternation cannot have more than 256 alternatives");
    });
});
//# sourceMappingURL=checks_spec.js.map

/***/ }),
/* 72 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var first_1 = __webpack_require__(22);
var samples_1 = __webpack_require__(13);
var matchers_1 = __webpack_require__(3);
var gast_public_1 = __webpack_require__(2);
describe("The Grammar Ast first model", function () {
    it("can compute the first for a terminal", function () {
        var terminal = new gast_public_1.Terminal({ terminalType: samples_1.EntityTok });
        var actual = first_1.first(terminal);
        expect(actual.length).to.equal(1);
        expect(actual[0]).to.equal(samples_1.EntityTok);
        var terminal2 = new gast_public_1.Terminal({ terminalType: samples_1.CommaTok });
        var actual2 = first_1.first(terminal2);
        expect(actual2.length).to.equal(1);
        expect(actual2[0]).to.equal(samples_1.CommaTok);
    });
    it("can compute the first for a Sequence production ", function () {
        var seqProduction = new gast_public_1.Flat({
            definition: [new gast_public_1.Terminal({ terminalType: samples_1.EntityTok })]
        });
        var actual = first_1.first(seqProduction);
        expect(actual.length).to.equal(1);
        expect(actual[0]).to.equal(samples_1.EntityTok);
        var seqProduction2 = new gast_public_1.Flat({
            definition: [
                new gast_public_1.Terminal({ terminalType: samples_1.EntityTok }),
                new gast_public_1.Option({
                    definition: [new gast_public_1.Terminal({ terminalType: samples_1.NamespaceTok })]
                })
            ]
        });
        var actual2 = first_1.first(seqProduction2);
        expect(actual2.length).to.equal(1);
        expect(actual2[0]).to.equal(samples_1.EntityTok);
    });
    it("can compute the first for an alternatives production ", function () {
        var altProduction = new gast_public_1.Alternation({
            definition: [
                new gast_public_1.Flat({
                    definition: [new gast_public_1.Terminal({ terminalType: samples_1.EntityTok })]
                }),
                new gast_public_1.Flat({
                    definition: [new gast_public_1.Terminal({ terminalType: samples_1.NamespaceTok })]
                }),
                new gast_public_1.Flat({
                    definition: [new gast_public_1.Terminal({ terminalType: samples_1.TypeTok })]
                })
            ]
        });
        var actual = first_1.first(altProduction);
        expect(actual.length).to.equal(3);
        expect(actual[0]).to.equal(samples_1.EntityTok);
        expect(actual[1]).to.equal(samples_1.NamespaceTok);
        expect(actual[2]).to.equal(samples_1.TypeTok);
    });
    it("can compute the first for an production with optional prefix", function () {
        var withOptionalPrefix = new gast_public_1.Flat({
            definition: [
                new gast_public_1.Option({
                    definition: [new gast_public_1.Terminal({ terminalType: samples_1.NamespaceTok })]
                }),
                new gast_public_1.Terminal({ terminalType: samples_1.EntityTok })
            ]
        });
        var actual = first_1.first(withOptionalPrefix);
        matchers_1.setEquality(actual, [samples_1.NamespaceTok, samples_1.EntityTok]);
        var withTwoOptPrefix = new gast_public_1.Flat({
            definition: [
                new gast_public_1.Option({
                    definition: [new gast_public_1.Terminal({ terminalType: samples_1.NamespaceTok })]
                }),
                new gast_public_1.Option({
                    definition: [new gast_public_1.Terminal({ terminalType: samples_1.ColonTok })]
                }),
                new gast_public_1.Terminal({ terminalType: samples_1.EntityTok }),
                new gast_public_1.Option({
                    definition: [new gast_public_1.Terminal({ terminalType: samples_1.ConstTok })]
                })
            ]
        });
        var actual2 = first_1.first(withTwoOptPrefix);
        matchers_1.setEquality(actual2, [samples_1.NamespaceTok, samples_1.ColonTok, samples_1.EntityTok]);
    });
});
//# sourceMappingURL=first_spec.js.map

/***/ }),
/* 73 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var samples_1 = __webpack_require__(13);
var follow_1 = __webpack_require__(30);
var matchers_1 = __webpack_require__(3);
var gast_public_1 = __webpack_require__(2);
describe("The Grammar Ast Follows model", function () {
    it("can build a followNamePrefix from a Terminal", function () {
        var terminal = new gast_public_1.Terminal({ terminalType: samples_1.IdentTok });
        var actual = follow_1.buildInProdFollowPrefix(terminal);
        expect(actual).to.equal("IdentTok1_~IN~_");
        var terminal2 = new gast_public_1.Terminal({ terminalType: samples_1.EntityTok });
        terminal2.idx = 3;
        var actual2 = follow_1.buildInProdFollowPrefix(terminal2);
        expect(actual2).to.equal("EntityTok3_~IN~_");
    });
    it("can build a followName prefix from a TopLevel Production and index", function () {
        var prod = new gast_public_1.Rule({ name: "bamba", definition: [] });
        var index = 5;
        var actual = follow_1.buildBetweenProdsFollowPrefix(prod, index);
        expect(actual).to.equal("bamba5_~IN~_");
    });
    it("can compute the follows for Top level production ref in ActionDec", function () {
        var actual = new follow_1.ResyncFollowsWalker(samples_1.actionDec).startWalking();
        var actualFollowNames = actual.keys();
        expect(actualFollowNames.length).to.equal(3);
        expect(actual.get("paramSpec1_~IN~_actionDec").length).to.equal(2);
        matchers_1.setEquality(actual.get("paramSpec1_~IN~_actionDec"), [
            samples_1.CommaTok,
            samples_1.RParenTok
        ]);
        expect(actual.get("paramSpec2_~IN~_actionDec").length).to.equal(2);
        matchers_1.setEquality(actual.get("paramSpec1_~IN~_actionDec"), [
            samples_1.CommaTok,
            samples_1.RParenTok
        ]);
        expect(actual.get("qualifiedName1_~IN~_actionDec").length).to.equal(1);
        matchers_1.setEquality(actual.get("qualifiedName1_~IN~_actionDec"), [samples_1.SemicolonTok]);
    });
    it("can compute all follows for a set of top level productions", function () {
        var actual = follow_1.computeAllProdsFollows([samples_1.actionDec]);
        expect(actual.keys().length).to.equal(3);
    });
});
//# sourceMappingURL=follow_spec.js.map

/***/ }),
/* 74 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var gast_1 = __webpack_require__(10);
var tokens_public_1 = __webpack_require__(1);
var gast_public_1 = __webpack_require__(2);
describe("GAst namespace", function () {
    describe("the ProdRef class", function () {
        it("will always return a valid empty definition, even if it's ref is unresolved", function () {
            var prodRef = new gast_public_1.NonTerminal({
                nonTerminalName: "SomeGrammarRuleName"
            });
            expect(prodRef.definition).to.be.an.instanceof(Array);
        });
    });
    describe("the mappings between a GAst instance and its matching DSL method name for: ", function () {
        var Comma = /** @class */ (function () {
            function Comma() {
            }
            Comma.PATTERN = /NA/;
            return Comma;
        }());
        it("Terminal", function () {
            var gastInstance = new gast_public_1.Terminal({ terminalType: Comma });
            expect(gast_1.getProductionDslName(gastInstance)).to.equal("CONSUME");
        });
        it("NonTerminal", function () {
            var gastInstance = new gast_public_1.NonTerminal({
                nonTerminalName: "bamba"
            });
            expect(gast_1.getProductionDslName(gastInstance)).to.equal("SUBRULE");
        });
        it("Option", function () {
            var gastInstance = new gast_public_1.Option({ definition: [] });
            expect(gast_1.getProductionDslName(gastInstance)).to.equal("OPTION");
        });
        it("Alternation", function () {
            var gastInstance = new gast_public_1.Alternation({ definition: [] });
            expect(gast_1.getProductionDslName(gastInstance)).to.equal("OR");
        });
        it("RepetitionMandatory", function () {
            var gastInstance = new gast_public_1.RepetitionMandatory({ definition: [] });
            expect(gast_1.getProductionDslName(gastInstance)).to.equal("AT_LEAST_ONE");
        });
        it("RepetitionMandatoryWithSeparator", function () {
            var gastInstance = new gast_public_1.RepetitionMandatoryWithSeparator({
                definition: [],
                separator: Comma
            });
            expect(gast_1.getProductionDslName(gastInstance)).to.equal("AT_LEAST_ONE_SEP");
        });
        it("RepetitionWithSeparator", function () {
            var gastInstance = new gast_public_1.RepetitionWithSeparator({
                definition: [],
                separator: Comma
            });
            expect(gast_1.getProductionDslName(gastInstance)).to.equal("MANY_SEP");
        });
        it("Repetition", function () {
            var gastInstance = new gast_public_1.Repetition({ definition: [] });
            expect(gast_1.getProductionDslName(gastInstance)).to.equal("MANY");
        });
    });
    describe("the GAst serialization capabilities", function () {
        var A = tokens_public_1.createToken({ name: "A" });
        A.LABEL = "bamba";
        var B = tokens_public_1.createToken({ name: "B", pattern: /[a-zA-Z]\w*/ });
        var C = tokens_public_1.createToken({ name: "C" });
        var D = tokens_public_1.createToken({ name: "D" });
        var Comma = tokens_public_1.createToken({ name: "Comma" });
        var WithLiteral = tokens_public_1.createToken({
            name: "WithLiteral",
            pattern: "bamba"
        });
        it("can serialize a NonTerminal", function () {
            var input = new gast_public_1.NonTerminal({
                nonTerminalName: "qualifiedName"
            });
            var actual = gast_public_1.serializeProduction(input);
            expect(actual).to.deep.equal({
                type: "NonTerminal",
                name: "qualifiedName",
                idx: 1
            });
        });
        it("can serialize a Flat", function () {
            var input = new gast_public_1.Flat({
                definition: [
                    new gast_public_1.Terminal({ terminalType: WithLiteral }),
                    new gast_public_1.NonTerminal({ nonTerminalName: "bamba" })
                ]
            });
            var actual = gast_public_1.serializeProduction(input);
            expect(actual).to.deep.equal({
                type: "Flat",
                definition: [
                    {
                        type: "Terminal",
                        name: "WithLiteral",
                        pattern: "bamba",
                        label: "WithLiteral",
                        idx: 1
                    },
                    {
                        type: "NonTerminal",
                        name: "bamba",
                        idx: 1
                    }
                ]
            });
        });
        it("can serialize a Option", function () {
            var input = new gast_public_1.Option({
                definition: [
                    new gast_public_1.Terminal({ terminalType: C }),
                    new gast_public_1.NonTerminal({ nonTerminalName: "bamba" })
                ]
            });
            var actual = gast_public_1.serializeProduction(input);
            expect(actual).to.deep.equal({
                type: "Option",
                idx: 1,
                definition: [
                    {
                        type: "Terminal",
                        name: "C",
                        label: "C",
                        idx: 1
                    },
                    {
                        type: "NonTerminal",
                        name: "bamba",
                        idx: 1
                    }
                ]
            });
        });
        it("can serialize a RepetitionMandatory", function () {
            var input = new gast_public_1.RepetitionMandatory({
                name: "repMany",
                definition: [
                    new gast_public_1.Terminal({ terminalType: C }),
                    new gast_public_1.NonTerminal({ nonTerminalName: "bamba" })
                ]
            });
            var actual = gast_public_1.serializeProduction(input);
            expect(actual).to.deep.equal({
                type: "RepetitionMandatory",
                idx: 1,
                name: "repMany",
                definition: [
                    {
                        type: "Terminal",
                        name: "C",
                        label: "C",
                        idx: 1
                    },
                    {
                        type: "NonTerminal",
                        name: "bamba",
                        idx: 1
                    }
                ]
            });
        });
        it("can serialize a RepetitionMandatoryWithSeparator", function () {
            var input = new gast_public_1.RepetitionMandatoryWithSeparator({
                name: "repManyWithSep",
                definition: [
                    new gast_public_1.Terminal({ terminalType: C }),
                    new gast_public_1.NonTerminal({ nonTerminalName: "bamba" })
                ],
                separator: Comma
            });
            var actual = gast_public_1.serializeProduction(input);
            expect(actual).to.deep.equal({
                type: "RepetitionMandatoryWithSeparator",
                idx: 1,
                name: "repManyWithSep",
                separator: {
                    type: "Terminal",
                    name: "Comma",
                    label: "Comma",
                    idx: 1
                },
                definition: [
                    {
                        type: "Terminal",
                        name: "C",
                        label: "C",
                        idx: 1
                    },
                    {
                        type: "NonTerminal",
                        name: "bamba",
                        idx: 1
                    }
                ]
            });
        });
        it("can serialize a Repetition", function () {
            var input = new gast_public_1.Repetition({
                name: "rep",
                definition: [
                    new gast_public_1.Terminal({ terminalType: C }),
                    new gast_public_1.NonTerminal({ nonTerminalName: "bamba" })
                ]
            });
            var actual = gast_public_1.serializeProduction(input);
            expect(actual).to.deep.equal({
                type: "Repetition",
                idx: 1,
                name: "rep",
                definition: [
                    {
                        type: "Terminal",
                        name: "C",
                        label: "C",
                        idx: 1
                    },
                    {
                        type: "NonTerminal",
                        name: "bamba",
                        idx: 1
                    }
                ]
            });
        });
        it("can serialize a RepetitionWithSeparator", function () {
            var input = new gast_public_1.RepetitionWithSeparator({
                name: "repWithSep",
                definition: [
                    new gast_public_1.Terminal({ terminalType: C }),
                    new gast_public_1.NonTerminal({ nonTerminalName: "bamba" })
                ],
                separator: Comma
            });
            var actual = gast_public_1.serializeProduction(input);
            expect(actual).to.deep.equal({
                type: "RepetitionWithSeparator",
                idx: 1,
                name: "repWithSep",
                separator: {
                    type: "Terminal",
                    name: "Comma",
                    label: "Comma",
                    idx: 1
                },
                definition: [
                    {
                        type: "Terminal",
                        name: "C",
                        label: "C",
                        idx: 1
                    },
                    {
                        type: "NonTerminal",
                        name: "bamba",
                        idx: 1
                    }
                ]
            });
        });
        it("can serialize a Alternation", function () {
            var input = new gast_public_1.Alternation({
                name: "alt",
                definition: [
                    new gast_public_1.Flat({
                        definition: [new gast_public_1.Terminal({ terminalType: A })]
                    }),
                    new gast_public_1.Flat({
                        definition: [new gast_public_1.Terminal({ terminalType: B })]
                    }),
                    new gast_public_1.Flat({
                        definition: [new gast_public_1.Terminal({ terminalType: C })]
                    })
                ]
            });
            var actual = gast_public_1.serializeProduction(input);
            expect(actual).to.deep.equal({
                type: "Alternation",
                idx: 1,
                name: "alt",
                definition: [
                    {
                        type: "Flat",
                        definition: [
                            {
                                type: "Terminal",
                                name: "A",
                                label: "bamba",
                                idx: 1
                            }
                        ]
                    },
                    {
                        type: "Flat",
                        definition: [
                            {
                                type: "Terminal",
                                name: "B",
                                label: "B",
                                pattern: "[a-zA-Z]\\w*",
                                idx: 1
                            }
                        ]
                    },
                    {
                        type: "Flat",
                        definition: [
                            {
                                type: "Terminal",
                                name: "C",
                                label: "C",
                                idx: 1
                            }
                        ]
                    }
                ]
            });
        });
        it("can serialize a Terminal with a custom label", function () {
            var input = new gast_public_1.Terminal({ terminalType: A });
            var actual = gast_public_1.serializeProduction(input);
            expect(actual).to.deep.equal({
                type: "Terminal",
                name: "A",
                label: "bamba",
                idx: 1
            });
        });
        it("can serialize a Terminal with a pattern", function () {
            var input = new gast_public_1.Terminal({ terminalType: B });
            var actual = gast_public_1.serializeProduction(input);
            expect(actual).to.deep.equal({
                type: "Terminal",
                name: "B",
                label: "B",
                pattern: "[a-zA-Z]\\w*",
                idx: 1
            });
        });
        it("can serialize a Rule", function () {
            var input = new gast_public_1.Rule({
                name: "myRule",
                orgText: "",
                definition: [
                    new gast_public_1.Terminal({ terminalType: C }),
                    new gast_public_1.NonTerminal({ nonTerminalName: "bamba" })
                ]
            });
            var actual = gast_public_1.serializeProduction(input);
            expect(actual).to.deep.equal({
                type: "Rule",
                name: "myRule",
                orgText: "",
                definition: [
                    {
                        type: "Terminal",
                        name: "C",
                        label: "C",
                        idx: 1
                    },
                    {
                        type: "NonTerminal",
                        name: "bamba",
                        idx: 1
                    }
                ]
            });
        });
        it("can serialize an array of Rules", function () {
            var input = [
                new gast_public_1.Rule({
                    name: "myRule",
                    orgText: "",
                    definition: [
                        new gast_public_1.Terminal({ terminalType: C }),
                        new gast_public_1.NonTerminal({ nonTerminalName: "bamba" })
                    ]
                }),
                new gast_public_1.Rule({
                    name: "myRule2",
                    orgText: "",
                    definition: [
                        new gast_public_1.Terminal({ terminalType: D }),
                        new gast_public_1.NonTerminal({ nonTerminalName: "bisli" })
                    ]
                })
            ];
            var actual = gast_public_1.serializeGrammar(input);
            expect(actual).to.deep.equal([
                {
                    type: "Rule",
                    name: "myRule",
                    orgText: "",
                    definition: [
                        {
                            type: "Terminal",
                            name: "C",
                            label: "C",
                            idx: 1
                        },
                        {
                            type: "NonTerminal",
                            name: "bamba",
                            idx: 1
                        }
                    ]
                },
                {
                    type: "Rule",
                    orgText: "",
                    name: "myRule2",
                    definition: [
                        {
                            type: "Terminal",
                            name: "D",
                            label: "D",
                            idx: 1
                        },
                        {
                            type: "NonTerminal",
                            name: "bisli",
                            idx: 1
                        }
                    ]
                }
            ]);
        });
    });
});
//# sourceMappingURL=gast_spec.js.map

/***/ }),
/* 75 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var samples_1 = __webpack_require__(13);
var interpreter_1 = __webpack_require__(16);
var matchers_1 = __webpack_require__(3);
var tokens_public_1 = __webpack_require__(1);
var utils_1 = __webpack_require__(0);
var lexer_public_1 = __webpack_require__(9);
var tokens_1 = __webpack_require__(6);
var parser_traits_1 = __webpack_require__(5);
var gast_public_1 = __webpack_require__(2);
describe("The Grammar Interpeter namespace", function () {
    describe("The NextAfterTokenWalker", function () {
        it("can compute the next possible token types From ActionDec in scope of ActionDec #1", function () {
            var caPath = {
                ruleStack: ["actionDec"],
                occurrenceStack: [1],
                lastTok: samples_1.ActionTok,
                lastTokOccurrence: 1
            };
            var possibleNextTokTypes = new interpreter_1.NextAfterTokenWalker(samples_1.actionDec, caPath).startWalking();
            expect(possibleNextTokTypes.length).to.equal(1);
            expect(possibleNextTokTypes[0]).to.equal(samples_1.IdentTok);
        });
        it("can compute the next possible token types From ActionDec in scope of ActionDec #2", function () {
            var caPath = {
                ruleStack: ["actionDec"],
                occurrenceStack: [1],
                lastTok: samples_1.IdentTok,
                lastTokOccurrence: 1
            };
            var possibleNextTokTypes = new interpreter_1.NextAfterTokenWalker(samples_1.actionDec, caPath).startWalking();
            expect(possibleNextTokTypes.length).to.equal(1);
            expect(possibleNextTokTypes[0]).to.equal(samples_1.LParenTok);
        });
        it("can compute the next possible token types From ActionDec in scope of ActionDec #3", function () {
            var caPath = {
                ruleStack: ["actionDec"],
                occurrenceStack: [1],
                lastTok: samples_1.LParenTok,
                lastTokOccurrence: 1
            };
            var possibleNextTokTypes = new interpreter_1.NextAfterTokenWalker(samples_1.actionDec, caPath).startWalking();
            expect(possibleNextTokTypes.length).to.equal(2);
            matchers_1.setEquality(possibleNextTokTypes, [samples_1.IdentTok, samples_1.RParenTok]);
        });
        it("can compute the next possible token types From ActionDec in scope of ActionDec #4", function () {
            var caPath = {
                ruleStack: ["actionDec"],
                occurrenceStack: [1],
                lastTok: samples_1.CommaTok,
                lastTokOccurrence: 1
            };
            var possibleNextTokTypes = new interpreter_1.NextAfterTokenWalker(samples_1.actionDec, caPath).startWalking();
            expect(possibleNextTokTypes.length).to.equal(1);
            expect(possibleNextTokTypes[0]).to.equal(samples_1.IdentTok);
        });
        it("can compute the next possible token types From ActionDec in scope of ActionDec #5", function () {
            var caPath = {
                ruleStack: ["actionDec"],
                occurrenceStack: [1],
                lastTok: samples_1.RParenTok,
                lastTokOccurrence: 1
            };
            var possibleNextTokTypes = new interpreter_1.NextAfterTokenWalker(samples_1.actionDec, caPath).startWalking();
            expect(possibleNextTokTypes.length).to.equal(2);
            matchers_1.setEquality(possibleNextTokTypes, [samples_1.SemicolonTok, samples_1.ColonTok]);
        });
        it("can compute the next possible token types From ActionDec in scope of ActionDec #6", function () {
            var caPath = {
                ruleStack: ["actionDec"],
                occurrenceStack: [1],
                lastTok: samples_1.ColonTok,
                lastTokOccurrence: 1
            };
            var possibleNextTokTypes = new interpreter_1.NextAfterTokenWalker(samples_1.actionDec, caPath).startWalking();
            expect(possibleNextTokTypes.length).to.equal(1);
            expect(possibleNextTokTypes[0]).to.equal(samples_1.IdentTok);
        });
        it("can compute the next possible token types From ActionDec in scope of ActionDec #7", function () {
            var caPath = {
                ruleStack: ["actionDec"],
                occurrenceStack: [1],
                lastTok: samples_1.SemicolonTok,
                lastTokOccurrence: 1
            };
            var possibleNextTokTypes = new interpreter_1.NextAfterTokenWalker(samples_1.actionDec, caPath).startWalking();
            expect(possibleNextTokTypes.length).to.equal(0);
        });
        it("can compute the next possible token types From the first paramSpec INSIDE ActionDec #1", function () {
            var caPath = {
                ruleStack: ["actionDec", "paramSpec"],
                occurrenceStack: [1, 1],
                lastTok: samples_1.IdentTok,
                lastTokOccurrence: 1
            };
            var possibleNextTokTypes = new interpreter_1.NextAfterTokenWalker(samples_1.actionDec, caPath).startWalking();
            expect(possibleNextTokTypes.length).to.equal(1);
            expect(possibleNextTokTypes[0]).to.equal(samples_1.ColonTok);
        });
        it("can compute the next possible token types From the first paramSpec INSIDE ActionDec #2", function () {
            var caPath = {
                ruleStack: ["actionDec", "paramSpec"],
                occurrenceStack: [1, 1],
                lastTok: samples_1.ColonTok,
                lastTokOccurrence: 1
            };
            var possibleNextTokTypes = new interpreter_1.NextAfterTokenWalker(samples_1.actionDec, caPath).startWalking();
            expect(possibleNextTokTypes.length).to.equal(1);
            expect(possibleNextTokTypes[0]).to.equal(samples_1.IdentTok);
        });
        it("can compute the next possible token types From the first paramSpec INSIDE ActionDec #3", function () {
            var caPath = {
                ruleStack: ["actionDec", "paramSpec"],
                occurrenceStack: [1, 1],
                lastTok: samples_1.LSquareTok,
                lastTokOccurrence: 1
            };
            var possibleNextTokTypes = new interpreter_1.NextAfterTokenWalker(samples_1.actionDec, caPath).startWalking();
            expect(possibleNextTokTypes.length).to.equal(1);
            expect(possibleNextTokTypes[0]).to.equal(samples_1.RSquareTok);
        });
        it("can compute the next possible token types From the first paramSpec INSIDE ActionDec #4", function () {
            var caPath = {
                ruleStack: ["actionDec", "paramSpec"],
                occurrenceStack: [1, 1],
                lastTok: samples_1.RSquareTok,
                lastTokOccurrence: 1
            };
            var possibleNextTokTypes = new interpreter_1.NextAfterTokenWalker(samples_1.actionDec, caPath).startWalking();
            expect(possibleNextTokTypes.length).to.equal(2);
            matchers_1.setEquality(possibleNextTokTypes, [samples_1.CommaTok, samples_1.RParenTok]);
        });
        it("can compute the next possible token types From the second paramSpec INSIDE ActionDec #1", function () {
            var caPath = {
                ruleStack: ["actionDec", "paramSpec"],
                occurrenceStack: [1, 2],
                lastTok: samples_1.IdentTok,
                lastTokOccurrence: 1
            };
            var possibleNextTokTypes = new interpreter_1.NextAfterTokenWalker(samples_1.actionDec, caPath).startWalking();
            expect(possibleNextTokTypes.length).to.equal(1);
            expect(possibleNextTokTypes[0]).to.equal(samples_1.ColonTok);
        });
        it("can compute the next possible token types From the second paramSpec INSIDE ActionDec #2", function () {
            var caPath = {
                ruleStack: ["actionDec", "paramSpec"],
                occurrenceStack: [1, 2],
                lastTok: samples_1.ColonTok,
                lastTokOccurrence: 1
            };
            var possibleNextTokTypes = new interpreter_1.NextAfterTokenWalker(samples_1.actionDec, caPath).startWalking();
            expect(possibleNextTokTypes.length).to.equal(1);
            expect(possibleNextTokTypes[0]).to.equal(samples_1.IdentTok);
        });
        it("can compute the next possible token types From the second paramSpec INSIDE ActionDec #3", function () {
            var caPath = {
                ruleStack: ["actionDec", "paramSpec"],
                occurrenceStack: [1, 2],
                lastTok: samples_1.LSquareTok,
                lastTokOccurrence: 1
            };
            var possibleNextTokTypes = new interpreter_1.NextAfterTokenWalker(samples_1.actionDec, caPath).startWalking();
            expect(possibleNextTokTypes.length).to.equal(1);
            expect(possibleNextTokTypes[0]).to.equal(samples_1.RSquareTok);
        });
        it("can compute the next possible token types From the second paramSpec INSIDE ActionDec #4", function () {
            var caPath = {
                ruleStack: ["actionDec", "paramSpec"],
                occurrenceStack: [1, 2],
                lastTok: samples_1.RSquareTok,
                lastTokOccurrence: 1
            };
            var possibleNextTokTypes = new interpreter_1.NextAfterTokenWalker(samples_1.actionDec, caPath).startWalking();
            expect(possibleNextTokTypes.length).to.equal(2);
            matchers_1.setEquality(possibleNextTokTypes, [samples_1.CommaTok, samples_1.RParenTok]);
        });
        it("can compute the next possible token types From a fqn inside an actionParamSpec" +
            " inside an paramSpec INSIDE ActionDec #1", function () {
            var caPath = {
                ruleStack: ["actionDec", "paramSpec", "qualifiedName"],
                occurrenceStack: [1, 1, 1],
                lastTok: samples_1.IdentTok,
                lastTokOccurrence: 1
            };
            var possibleNextTokTypes = new interpreter_1.NextAfterTokenWalker(samples_1.actionDec, caPath).startWalking();
            expect(possibleNextTokTypes.length).to.equal(4);
            matchers_1.setEquality(possibleNextTokTypes, [
                samples_1.DotTok,
                samples_1.LSquareTok,
                samples_1.CommaTok,
                samples_1.RParenTok
            ]);
        });
        it("can compute the next possible token types From a fqn inside an actionParamSpec" +
            " inside an paramSpec INSIDE ActionDec #2", function () {
            var caPath = {
                ruleStack: ["actionDec", "paramSpec", "qualifiedName"],
                occurrenceStack: [1, 1, 1],
                lastTok: samples_1.DotTok,
                lastTokOccurrence: 1
            };
            var possibleNextTokTypes = new interpreter_1.NextAfterTokenWalker(samples_1.actionDec, caPath).startWalking();
            expect(possibleNextTokTypes.length).to.equal(1);
            expect(possibleNextTokTypes[0]).to.equal(samples_1.IdentTok);
        });
        it("can compute the next possible token types From a fqn inside an actionParamSpec" +
            " inside an paramSpec INSIDE ActionDec #3", function () {
            var caPath = {
                ruleStack: ["actionDec", "paramSpec", "qualifiedName"],
                occurrenceStack: [1, 1, 1],
                lastTok: samples_1.IdentTok,
                lastTokOccurrence: 2
            };
            var possibleNextTokTypes = new interpreter_1.NextAfterTokenWalker(samples_1.actionDec, caPath).startWalking();
            expect(possibleNextTokTypes.length).to.equal(4);
            matchers_1.setEquality(possibleNextTokTypes, [
                samples_1.DotTok,
                samples_1.LSquareTok,
                samples_1.CommaTok,
                samples_1.RParenTok
            ]);
        });
        it("can compute the next possible token types From a fqn inside an actionParamSpec" +
            " inside an paramSpec INSIDE ActionDec #3", function () {
            var caPath = {
                ruleStack: ["paramSpec", "qualifiedName"],
                occurrenceStack: [1, 1],
                lastTok: samples_1.IdentTok,
                lastTokOccurrence: 1
            };
            var possibleNextTokTypes = new interpreter_1.NextAfterTokenWalker(samples_1.paramSpec, caPath).startWalking();
            expect(possibleNextTokTypes.length).to.equal(2);
            matchers_1.setEquality(possibleNextTokTypes, [samples_1.DotTok, samples_1.LSquareTok]);
        });
        it("can compute the next possible token types From a fqn inside an actionParamSpec" +
            " inside an paramSpec INSIDE ActionDec #3", function () {
            var caPath = {
                ruleStack: ["paramSpec", "qualifiedName"],
                occurrenceStack: [1, 1],
                lastTok: samples_1.DotTok,
                lastTokOccurrence: 1
            };
            var possibleNextTokTypes = new interpreter_1.NextAfterTokenWalker(samples_1.paramSpec, caPath).startWalking();
            expect(possibleNextTokTypes.length).to.equal(1);
            expect(possibleNextTokTypes[0]).to.equal(samples_1.IdentTok);
        });
        it("can compute the next possible token types From a fqn inside an actionParamSpec" +
            " inside an paramSpec INSIDE ActionDec #3", function () {
            var caPath = {
                ruleStack: ["paramSpec", "qualifiedName"],
                occurrenceStack: [1, 1],
                lastTok: samples_1.IdentTok,
                lastTokOccurrence: 2
            };
            var possibleNextTokTypes = new interpreter_1.NextAfterTokenWalker(samples_1.paramSpec, caPath).startWalking();
            expect(possibleNextTokTypes.length).to.equal(2);
            matchers_1.setEquality(possibleNextTokTypes, [samples_1.DotTok, samples_1.LSquareTok]);
        });
        it("will fail if we try to compute the next token starting from a rule that does not match the path", function () {
            var caPath = {
                ruleStack: ["I_WILL_FAIL_THE_WALKER", "qualifiedName"],
                occurrenceStack: [1, 1],
                lastTok: samples_1.IdentTok,
                lastTokOccurrence: 2
            };
            var walker = new interpreter_1.NextAfterTokenWalker(samples_1.paramSpec, caPath);
            expect(function () { return walker.startWalking(); }).to.throw("The path does not start with the walker's top Rule!");
        });
    });
});
describe("The NextTerminalAfterManyWalker", function () {
    it("can compute the next possible token types after the MANY in QualifiedName", function () {
        var rule = new gast_public_1.Rule({
            name: "TwoRepetitionRule",
            definition: [
                new gast_public_1.Repetition({
                    definition: [
                        new gast_public_1.Terminal({
                            terminalType: samples_1.IdentTok,
                            idx: 1
                        })
                    ],
                    idx: 2
                }),
                new gast_public_1.Terminal({
                    terminalType: samples_1.IdentTok,
                    idx: 2
                }),
                new gast_public_1.Repetition({
                    definition: [
                        new gast_public_1.Terminal({ terminalType: samples_1.DotTok }),
                        new gast_public_1.Terminal({
                            terminalType: samples_1.IdentTok,
                            idx: 3
                        })
                    ]
                })
            ]
        });
        var result = new interpreter_1.NextTerminalAfterManyWalker(rule, 1).startWalking();
        //noinspection BadExpressionStatementJS
        expect(result.occurrence).to.be.undefined;
        //noinspection BadExpressionStatementJS
        expect(result.token).to.be.undefined;
    });
    it("can compute the next possible token types after the MANY in paramSpec inside ActionDec", function () {
        var result = new interpreter_1.NextTerminalAfterManyWalker(samples_1.actionDec, 1).startWalking();
        expect(result.occurrence).to.equal(1);
        expect(result.token).to.equal(samples_1.RParenTok);
    });
});
describe("The NextTerminalAfterManySepWalker", function () {
    it("can compute the next possible token types after the MANY_SEP in QualifiedName", function () {
        var result = new interpreter_1.NextTerminalAfterManySepWalker(samples_1.callArguments, 1).startWalking();
        //noinspection BadExpressionStatementJS
        expect(result.occurrence).to.be.undefined;
        //noinspection BadExpressionStatementJS
        expect(result.token).to.be.undefined;
    });
    it("can compute the next possible token types after the MANY in paramSpec inside ActionDec", function () {
        var result = new interpreter_1.NextTerminalAfterManySepWalker(samples_1.actionDecSep, 1).startWalking();
        expect(result.occurrence).to.equal(1);
        expect(result.token).to.equal(samples_1.RParenTok);
    });
});
describe("The NextTerminalAfterAtLeastOneWalker", function () {
    it("can compute the next possible token types after an AT_LEAST_ONE production", function () {
        var result = new interpreter_1.NextTerminalAfterAtLeastOneWalker(samples_1.atLeastOneRule, 1).startWalking();
        expect(result.occurrence).to.equal(2);
        expect(result.token).to.equal(samples_1.DotTok);
        var result2 = new interpreter_1.NextTerminalAfterAtLeastOneWalker(samples_1.atLeastOneRule, 2).startWalking();
        expect(result2.occurrence).to.equal(1);
        expect(result2.token).to.equal(samples_1.DotTok);
        var result3 = new interpreter_1.NextTerminalAfterAtLeastOneWalker(samples_1.atLeastOneRule, 3).startWalking();
        expect(result3.occurrence).to.equal(1);
        expect(result3.token).to.equal(samples_1.CommaTok);
    });
    it("can compute the next possible token types after an AT_LEAST_ONE production - EMPTY", function () {
        var atLeastOneRule = new gast_public_1.Rule({
            name: "atLeastOneRule",
            definition: [
                new gast_public_1.RepetitionMandatory({
                    definition: [
                        new gast_public_1.Terminal({
                            terminalType: samples_1.DotTok,
                            idx: 1
                        })
                    ]
                })
            ]
        });
        var result = new interpreter_1.NextTerminalAfterAtLeastOneWalker(atLeastOneRule, 1).startWalking();
        expect(result.occurrence).to.be.undefined;
        expect(result.token).to.be.undefined;
    });
});
describe("The NextTerminalAfterAtLeastOneSepWalker", function () {
    it("can compute the next possible token types after an AT_LEAST_ONE_SEP production", function () {
        var result = new interpreter_1.NextTerminalAfterAtLeastOneSepWalker(samples_1.atLeastOneSepRule, 1).startWalking();
        expect(result.occurrence).to.equal(2);
        expect(result.token).to.equal(samples_1.DotTok);
        var result2 = new interpreter_1.NextTerminalAfterAtLeastOneSepWalker(samples_1.atLeastOneSepRule, 2).startWalking();
        expect(result2.occurrence).to.equal(1);
        expect(result2.token).to.equal(samples_1.DotTok);
        var result3 = new interpreter_1.NextTerminalAfterAtLeastOneSepWalker(samples_1.atLeastOneSepRule, 3).startWalking();
        expect(result3.occurrence).to.equal(1);
        expect(result3.token).to.equal(samples_1.CommaTok);
    });
    it("can compute the next possible token types after an AT_LEAST_ONE_SEP production EMPTY", function () {
        var result = new interpreter_1.NextTerminalAfterAtLeastOneSepWalker(samples_1.qualifiedNameSep, 1).startWalking();
        //noinspection BadExpressionStatementJS
        expect(result.occurrence).to.be.undefined;
        //noinspection BadExpressionStatementJS
        expect(result.token).to.be.undefined;
    });
});
describe("The chevrotain grammar interpreter capabilities", function () {
    function extractPartialPaths(newResultFormat) {
        return utils_1.map(newResultFormat, function (currItem) { return currItem.partialPath; });
    }
    var Alpha = /** @class */ (function () {
        function Alpha() {
        }
        Alpha.PATTERN = /NA/;
        return Alpha;
    }());
    var Beta = /** @class */ (function () {
        function Beta() {
        }
        Beta.PATTERN = /NA/;
        return Beta;
    }());
    var Gamma = /** @class */ (function () {
        function Gamma() {
        }
        Gamma.PATTERN = /NA/;
        return Gamma;
    }());
    var Comma = /** @class */ (function () {
        function Comma() {
        }
        Comma.PATTERN = /NA/;
        return Comma;
    }());
    tokens_1.augmentTokenTypes([Alpha, Beta, Gamma, Comma]);
    context("can calculate the next possible paths in a", function () {
        it("Sequence", function () {
            var seq = [
                new gast_public_1.Terminal({ terminalType: Alpha }),
                new gast_public_1.Terminal({ terminalType: Beta }),
                new gast_public_1.Terminal({ terminalType: Gamma })
            ];
            expect(extractPartialPaths(interpreter_1.possiblePathsFrom(seq, 1))).to.deep.equal([[Alpha]]);
            expect(extractPartialPaths(interpreter_1.possiblePathsFrom(seq, 2))).to.deep.equal([[Alpha, Beta]]);
            expect(extractPartialPaths(interpreter_1.possiblePathsFrom(seq, 3))).to.deep.equal([[Alpha, Beta, Gamma]]);
            expect(extractPartialPaths(interpreter_1.possiblePathsFrom(seq, 4))).to.deep.equal([[Alpha, Beta, Gamma]]);
        });
        it("Optional", function () {
            var seq = [
                new gast_public_1.Terminal({ terminalType: Alpha }),
                new gast_public_1.Option({
                    definition: [new gast_public_1.Terminal({ terminalType: Beta })]
                }),
                new gast_public_1.Terminal({ terminalType: Gamma })
            ];
            expect(extractPartialPaths(interpreter_1.possiblePathsFrom(seq, 1))).to.deep.equal([[Alpha]]);
            expect(extractPartialPaths(interpreter_1.possiblePathsFrom(seq, 2))).to.deep.equal([[Alpha, Beta], [Alpha, Gamma]]);
            expect(extractPartialPaths(interpreter_1.possiblePathsFrom(seq, 3))).to.deep.equal([[Alpha, Beta, Gamma], [Alpha, Gamma]]);
            expect(extractPartialPaths(interpreter_1.possiblePathsFrom(seq, 4))).to.deep.equal([[Alpha, Beta, Gamma], [Alpha, Gamma]]);
        });
        it("Alternation", function () {
            var alts = [
                new gast_public_1.Alternation({
                    definition: [
                        new gast_public_1.Flat({
                            definition: [new gast_public_1.Terminal({ terminalType: Alpha })]
                        }),
                        new gast_public_1.Flat({
                            definition: [
                                new gast_public_1.Terminal({ terminalType: Beta }),
                                new gast_public_1.Terminal({ terminalType: Beta })
                            ]
                        }),
                        new gast_public_1.Flat({
                            definition: [
                                new gast_public_1.Terminal({ terminalType: Beta }),
                                new gast_public_1.Terminal({ terminalType: Alpha }),
                                new gast_public_1.Terminal({ terminalType: Gamma })
                            ]
                        })
                    ]
                })
            ];
            expect(extractPartialPaths(interpreter_1.possiblePathsFrom(alts, 1))).to.deep.equal([[Alpha], [Beta], [Beta]]);
            expect(extractPartialPaths(interpreter_1.possiblePathsFrom(alts, 2))).to.deep.equal([[Alpha], [Beta, Beta], [Beta, Alpha]]);
            expect(extractPartialPaths(interpreter_1.possiblePathsFrom(alts, 3))).to.deep.equal([[Alpha], [Beta, Beta], [Beta, Alpha, Gamma]]);
            expect(extractPartialPaths(interpreter_1.possiblePathsFrom(alts, 4))).to.deep.equal([[Alpha], [Beta, Beta], [Beta, Alpha, Gamma]]);
        });
        it("Repetition", function () {
            var rep = [
                new gast_public_1.Repetition({
                    definition: [
                        new gast_public_1.Terminal({ terminalType: Alpha }),
                        new gast_public_1.Terminal({ terminalType: Alpha })
                    ]
                }),
                new gast_public_1.Terminal({ terminalType: Gamma })
            ];
            expect(extractPartialPaths(interpreter_1.possiblePathsFrom(rep, 1))).to.deep.equal([[Alpha], [Gamma]]);
            expect(extractPartialPaths(interpreter_1.possiblePathsFrom(rep, 2))).to.deep.equal([[Alpha, Alpha], [Gamma]]);
            expect(extractPartialPaths(interpreter_1.possiblePathsFrom(rep, 3))).to.deep.equal([
                [Alpha, Alpha, Alpha],
                [Alpha, Alpha, Gamma],
                [Gamma]
            ]);
            expect(extractPartialPaths(interpreter_1.possiblePathsFrom(rep, 4))).to.deep.equal([
                [Alpha, Alpha, Alpha, Alpha],
                [Alpha, Alpha, Gamma],
                [Gamma]
            ]);
        });
        it("Mandatory Repetition", function () {
            var repMand = [
                new gast_public_1.RepetitionMandatory({
                    definition: [
                        new gast_public_1.Terminal({ terminalType: Alpha }),
                        new gast_public_1.Terminal({ terminalType: Alpha })
                    ]
                }),
                new gast_public_1.Terminal({ terminalType: Gamma })
            ];
            expect(extractPartialPaths(interpreter_1.possiblePathsFrom(repMand, 1))).to.deep.equal([[Alpha]]);
            expect(extractPartialPaths(interpreter_1.possiblePathsFrom(repMand, 2))).to.deep.equal([[Alpha, Alpha]]);
            expect(extractPartialPaths(interpreter_1.possiblePathsFrom(repMand, 3))).to.deep.equal([[Alpha, Alpha, Alpha], [Alpha, Alpha, Gamma]]);
            expect(extractPartialPaths(interpreter_1.possiblePathsFrom(repMand, 4))).to.deep.equal([
                [Alpha, Alpha, Alpha, Alpha],
                [Alpha, Alpha, Gamma]
            ]);
        });
        it("Repetition with Separator", function () {
            // same as Mandatory Repetition because currently possiblePaths only cares about
            // the first repetition.
            var rep = [
                new gast_public_1.RepetitionWithSeparator({
                    definition: [
                        new gast_public_1.Terminal({ terminalType: Alpha }),
                        new gast_public_1.Terminal({ terminalType: Alpha })
                    ],
                    separator: Comma
                }),
                new gast_public_1.Terminal({ terminalType: Gamma })
            ];
            expect(extractPartialPaths(interpreter_1.possiblePathsFrom(rep, 1))).to.deep.equal([[Alpha], [Gamma]]);
            expect(extractPartialPaths(interpreter_1.possiblePathsFrom(rep, 2))).to.deep.equal([[Alpha, Alpha], [Gamma]]);
            expect(extractPartialPaths(interpreter_1.possiblePathsFrom(rep, 3))).to.deep.equal([
                [Alpha, Alpha, Comma],
                [Alpha, Alpha, Gamma],
                [Gamma]
            ]);
            expect(extractPartialPaths(interpreter_1.possiblePathsFrom(rep, 4))).to.deep.equal([
                [Alpha, Alpha, Comma, Alpha],
                [Alpha, Alpha, Gamma],
                [Gamma]
            ]);
        });
        it("Mandatory Repetition with Separator", function () {
            // same as Mandatory Repetition because currently possiblePaths only cares about
            // the first repetition.
            var repMandSep = [
                new gast_public_1.RepetitionMandatoryWithSeparator({
                    definition: [
                        new gast_public_1.Terminal({ terminalType: Alpha }),
                        new gast_public_1.Terminal({ terminalType: Alpha })
                    ],
                    separator: Comma
                }),
                new gast_public_1.Terminal({ terminalType: Gamma })
            ];
            expect(extractPartialPaths(interpreter_1.possiblePathsFrom(repMandSep, 1))).to.deep.equal([[Alpha]]);
            expect(extractPartialPaths(interpreter_1.possiblePathsFrom(repMandSep, 2))).to.deep.equal([[Alpha, Alpha]]);
            expect(extractPartialPaths(interpreter_1.possiblePathsFrom(repMandSep, 3))).to.deep.equal([[Alpha, Alpha, Comma], [Alpha, Alpha, Gamma]]);
            expect(extractPartialPaths(interpreter_1.possiblePathsFrom(repMandSep, 4))).to.deep.equal([
                [Alpha, Alpha, Comma, Alpha],
                [Alpha, Alpha, Gamma]
            ]);
        });
        it("NonTerminal", function () {
            var someSubRule = new gast_public_1.Rule({
                name: "blah",
                definition: [new gast_public_1.Terminal({ terminalType: Beta })]
            });
            var seq = [
                new gast_public_1.Terminal({ terminalType: Alpha }),
                new gast_public_1.NonTerminal({
                    nonTerminalName: "blah",
                    referencedRule: someSubRule
                }),
                new gast_public_1.Terminal({ terminalType: Gamma })
            ];
            expect(extractPartialPaths(interpreter_1.possiblePathsFrom(seq, 1))).to.deep.equal([[Alpha]]);
            expect(extractPartialPaths(interpreter_1.possiblePathsFrom(seq, 2))).to.deep.equal([[Alpha, Beta]]);
            expect(extractPartialPaths(interpreter_1.possiblePathsFrom(seq, 3))).to.deep.equal([[Alpha, Beta, Gamma]]);
            expect(extractPartialPaths(interpreter_1.possiblePathsFrom(seq, 4))).to.deep.equal([[Alpha, Beta, Gamma]]);
        });
    });
    context("can calculate the next possible single tokens for: ", function () {
        function INPUT(tokTypes) {
            return utils_1.map(tokTypes, function (currTokType) { return matchers_1.createRegularToken(currTokType); });
        }
        function pluckTokenTypes(arr) {
            return utils_1.map(arr, function (currItem) { return currItem.nextTokenType; });
        }
        it("Sequence positive", function () {
            var seq = [
                new gast_public_1.Flat({
                    definition: [
                        new gast_public_1.Terminal({ terminalType: Alpha }),
                        new gast_public_1.Terminal({ terminalType: Beta }),
                        new gast_public_1.Terminal({ terminalType: Gamma })
                    ]
                })
            ];
            matchers_1.setEquality(pluckTokenTypes(interpreter_1.nextPossibleTokensAfter(seq, INPUT([]), tokens_1.tokenStructuredMatcher, 5)), [Alpha]);
            matchers_1.setEquality(pluckTokenTypes(interpreter_1.nextPossibleTokensAfter(seq, INPUT([Alpha]), tokens_1.tokenStructuredMatcher, 5)), [Beta]);
            matchers_1.setEquality(pluckTokenTypes(interpreter_1.nextPossibleTokensAfter(seq, INPUT([Alpha, Beta]), tokens_1.tokenStructuredMatcher, 5)), [Gamma]);
        });
        it("Sequence negative", function () {
            var seq = [
                new gast_public_1.Flat({
                    definition: [
                        new gast_public_1.Terminal({ terminalType: Alpha }),
                        new gast_public_1.Terminal({ terminalType: Beta }),
                        new gast_public_1.Terminal({ terminalType: Gamma })
                    ]
                })
            ];
            // negative
            expect(interpreter_1.nextPossibleTokensAfter(seq, INPUT([Alpha, Beta, Gamma]), tokens_1.tokenStructuredMatcher, 5)).to.be.empty;
            expect(interpreter_1.nextPossibleTokensAfter(seq, INPUT([Alpha, Gamma]), tokens_1.tokenStructuredMatcher, 5)).to.be.empty;
            expect(interpreter_1.nextPossibleTokensAfter(seq, INPUT([Beta]), tokens_1.tokenStructuredMatcher, 5)).to.be.empty;
        });
        it("Optional positive", function () {
            var seq = [
                new gast_public_1.Terminal({ terminalType: Alpha }),
                new gast_public_1.Option({
                    definition: [new gast_public_1.Terminal({ terminalType: Beta })]
                }),
                new gast_public_1.Terminal({ terminalType: Gamma })
            ];
            // setEquality(pluckTokenTypes(nextPossibleTokensAfter(seq, INPUT([]), tokenStructuredMatcher, 5)), [Alpha])
            matchers_1.setEquality(pluckTokenTypes(interpreter_1.nextPossibleTokensAfter(seq, INPUT([Alpha]), tokens_1.tokenStructuredMatcher, 5)), [Beta, Gamma]);
            // setEquality(pluckTokenTypes(nextPossibleTokensAfter(seq, INPUT([Alpha, Beta]), tokenStructuredMatcher, 5)), [Gamma])
        });
        it("Optional Negative", function () {
            var seq = [
                new gast_public_1.Terminal({ terminalType: Alpha }),
                new gast_public_1.Option({
                    definition: [new gast_public_1.Terminal({ terminalType: Beta })]
                }),
                new gast_public_1.Terminal({ terminalType: Gamma })
            ];
            expect(interpreter_1.nextPossibleTokensAfter(seq, INPUT([Beta]), tokens_1.tokenStructuredMatcher, 5)).to.be.empty;
            expect(interpreter_1.nextPossibleTokensAfter(seq, INPUT([Alpha, Alpha]), tokens_1.tokenStructuredMatcher, 5)).to.be.empty;
            expect(interpreter_1.nextPossibleTokensAfter(seq, INPUT([Alpha, Beta, Gamma]), tokens_1.tokenStructuredMatcher, 5)).to.be.empty;
        });
        it("Alternation positive", function () {
            var alts = [
                new gast_public_1.Alternation({
                    definition: [
                        new gast_public_1.Flat({
                            definition: [new gast_public_1.Terminal({ terminalType: Alpha })]
                        }),
                        new gast_public_1.Flat({
                            definition: [
                                new gast_public_1.Terminal({ terminalType: Beta }),
                                new gast_public_1.Terminal({ terminalType: Beta })
                            ]
                        }),
                        new gast_public_1.Flat({
                            definition: [
                                new gast_public_1.Terminal({ terminalType: Beta }),
                                new gast_public_1.Terminal({ terminalType: Alpha }),
                                new gast_public_1.Terminal({ terminalType: Gamma })
                            ]
                        }),
                        new gast_public_1.Flat({
                            definition: [new gast_public_1.Terminal({ terminalType: Gamma })]
                        })
                    ]
                })
            ];
            matchers_1.setEquality(pluckTokenTypes(interpreter_1.nextPossibleTokensAfter(alts, INPUT([]), tokens_1.tokenStructuredMatcher, 5)), [Alpha, Beta, Beta, Gamma]);
            matchers_1.setEquality(pluckTokenTypes(interpreter_1.nextPossibleTokensAfter(alts, INPUT([Beta]), tokens_1.tokenStructuredMatcher, 5)), [Beta, Alpha]);
            matchers_1.setEquality(pluckTokenTypes(interpreter_1.nextPossibleTokensAfter(alts, INPUT([Beta, Alpha]), tokens_1.tokenStructuredMatcher, 5)), [Gamma]);
        });
        it("Alternation Negative", function () {
            var alts = [
                new gast_public_1.Alternation({
                    definition: [
                        new gast_public_1.Flat({
                            definition: [new gast_public_1.Terminal({ terminalType: Alpha })]
                        }),
                        new gast_public_1.Flat({
                            definition: [
                                new gast_public_1.Terminal({ terminalType: Beta }),
                                new gast_public_1.Terminal({ terminalType: Beta })
                            ]
                        }),
                        new gast_public_1.Flat({
                            definition: [
                                new gast_public_1.Terminal({ terminalType: Beta }),
                                new gast_public_1.Terminal({ terminalType: Alpha }),
                                new gast_public_1.Terminal({ terminalType: Gamma })
                            ]
                        })
                    ]
                })
            ];
            expect(interpreter_1.nextPossibleTokensAfter(alts, INPUT([Alpha]), tokens_1.tokenStructuredMatcher, 5)).to.be.empty;
            expect(interpreter_1.nextPossibleTokensAfter(alts, INPUT([Gamma, Alpha]), tokens_1.tokenStructuredMatcher, 5)).to.be.empty;
            expect(interpreter_1.nextPossibleTokensAfter(alts, INPUT([Beta, Beta]), tokens_1.tokenStructuredMatcher, 5)).to.be.empty;
            expect(interpreter_1.nextPossibleTokensAfter(alts, INPUT([Gamma]), tokens_1.tokenStructuredMatcher, 5)).to.be.empty;
        });
        it("Repetition - positive", function () {
            var rep = [
                new gast_public_1.Repetition({
                    definition: [
                        new gast_public_1.Terminal({ terminalType: Alpha }),
                        new gast_public_1.Terminal({ terminalType: Beta })
                    ]
                }),
                new gast_public_1.Terminal({ terminalType: Gamma })
            ];
            matchers_1.setEquality(pluckTokenTypes(interpreter_1.nextPossibleTokensAfter(rep, INPUT([]), tokens_1.tokenStructuredMatcher, 5)), [Alpha, Gamma]);
            matchers_1.setEquality(pluckTokenTypes(interpreter_1.nextPossibleTokensAfter(rep, INPUT([Alpha]), tokens_1.tokenStructuredMatcher, 5)), [Beta]);
            matchers_1.setEquality(pluckTokenTypes(interpreter_1.nextPossibleTokensAfter(rep, INPUT([Alpha, Beta]), tokens_1.tokenStructuredMatcher, 5)), [Alpha, Gamma]);
            matchers_1.setEquality(pluckTokenTypes(interpreter_1.nextPossibleTokensAfter(rep, INPUT([Alpha, Beta, Alpha]), tokens_1.tokenStructuredMatcher, 5)), [Beta]);
            matchers_1.setEquality(pluckTokenTypes(interpreter_1.nextPossibleTokensAfter(rep, INPUT([Alpha, Beta, Alpha, Beta]), tokens_1.tokenStructuredMatcher, 5)), [Alpha, Gamma]);
        });
        it("Repetition - negative", function () {
            var rep = [
                new gast_public_1.Repetition({
                    definition: [
                        new gast_public_1.Terminal({ terminalType: Alpha }),
                        new gast_public_1.Terminal({ terminalType: Beta })
                    ]
                }),
                new gast_public_1.Terminal({ terminalType: Gamma })
            ];
            expect(interpreter_1.nextPossibleTokensAfter(rep, INPUT([Beta]), tokens_1.tokenStructuredMatcher, 5)).to.be.empty;
            expect(interpreter_1.nextPossibleTokensAfter(rep, INPUT([Alpha, Gamma]), tokens_1.tokenStructuredMatcher, 5)).to.be.empty;
            expect(interpreter_1.nextPossibleTokensAfter(rep, INPUT([Alpha, Beta, Alpha, Gamma]), tokens_1.tokenStructuredMatcher, 5)).to.be.empty;
            expect(interpreter_1.nextPossibleTokensAfter(rep, INPUT([Alpha, Beta, Alpha, Beta, Gamma]), tokens_1.tokenStructuredMatcher, 5)).to.be.empty;
        });
        it("Mandatory Repetition - positive", function () {
            var repMand = [
                new gast_public_1.RepetitionMandatory({
                    definition: [
                        new gast_public_1.Terminal({ terminalType: Alpha }),
                        new gast_public_1.Terminal({ terminalType: Beta })
                    ]
                }),
                new gast_public_1.Terminal({ terminalType: Gamma })
            ];
            matchers_1.setEquality(pluckTokenTypes(interpreter_1.nextPossibleTokensAfter(repMand, INPUT([]), tokens_1.tokenStructuredMatcher, 5)), [Alpha]);
            matchers_1.setEquality(pluckTokenTypes(interpreter_1.nextPossibleTokensAfter(repMand, INPUT([Alpha]), tokens_1.tokenStructuredMatcher, 5)), [Beta]);
            matchers_1.setEquality(pluckTokenTypes(interpreter_1.nextPossibleTokensAfter(repMand, INPUT([Alpha, Beta]), tokens_1.tokenStructuredMatcher, 5)), [Alpha, Gamma]);
            matchers_1.setEquality(pluckTokenTypes(interpreter_1.nextPossibleTokensAfter(repMand, INPUT([Alpha, Beta, Alpha]), tokens_1.tokenStructuredMatcher, 5)), [Beta]);
            matchers_1.setEquality(pluckTokenTypes(interpreter_1.nextPossibleTokensAfter(repMand, INPUT([Alpha, Beta, Alpha, Beta]), tokens_1.tokenStructuredMatcher, 5)), [Alpha, Gamma]);
        });
        it("Mandatory Repetition - negative", function () {
            var repMand = [
                new gast_public_1.RepetitionMandatory({
                    definition: [
                        new gast_public_1.Terminal({ terminalType: Alpha }),
                        new gast_public_1.Terminal({ terminalType: Beta })
                    ]
                }),
                new gast_public_1.Terminal({ terminalType: Gamma })
            ];
            expect(interpreter_1.nextPossibleTokensAfter(repMand, INPUT([Beta]), tokens_1.tokenStructuredMatcher, 5)).to.be.empty;
            expect(interpreter_1.nextPossibleTokensAfter(repMand, INPUT([Alpha, Gamma]), tokens_1.tokenStructuredMatcher, 5)).to.be.empty;
            expect(interpreter_1.nextPossibleTokensAfter(repMand, INPUT([Alpha, Beta, Alpha, Gamma]), tokens_1.tokenStructuredMatcher, 5)).to.be.empty;
            expect(interpreter_1.nextPossibleTokensAfter(repMand, INPUT([Alpha, Beta, Alpha, Beta, Gamma]), tokens_1.tokenStructuredMatcher, 5)).to.be.empty;
        });
        it("Repetition with Separator - positive", function () {
            var repSep = [
                new gast_public_1.RepetitionWithSeparator({
                    definition: [
                        new gast_public_1.Terminal({ terminalType: Alpha }),
                        new gast_public_1.Terminal({ terminalType: Beta })
                    ],
                    separator: Comma
                }),
                new gast_public_1.Terminal({ terminalType: Gamma })
            ];
            matchers_1.setEquality(pluckTokenTypes(interpreter_1.nextPossibleTokensAfter(repSep, INPUT([]), tokens_1.tokenStructuredMatcher, 5)), [Alpha, Gamma]);
            matchers_1.setEquality(pluckTokenTypes(interpreter_1.nextPossibleTokensAfter(repSep, INPUT([Alpha]), tokens_1.tokenStructuredMatcher, 5)), [Beta]);
            matchers_1.setEquality(pluckTokenTypes(interpreter_1.nextPossibleTokensAfter(repSep, INPUT([Alpha, Beta]), tokens_1.tokenStructuredMatcher, 5)), [Comma, Gamma]);
            matchers_1.setEquality(pluckTokenTypes(interpreter_1.nextPossibleTokensAfter(repSep, INPUT([Alpha, Beta, Comma]), tokens_1.tokenStructuredMatcher, 5)), [Alpha]);
            matchers_1.setEquality(pluckTokenTypes(interpreter_1.nextPossibleTokensAfter(repSep, INPUT([Alpha, Beta, Comma, Alpha, Beta]), tokens_1.tokenStructuredMatcher, 5)), [Comma, Gamma]);
        });
        it("Repetition with Separator - negative", function () {
            var repMand = [
                new gast_public_1.RepetitionWithSeparator({
                    definition: [
                        new gast_public_1.Terminal({ terminalType: Alpha }),
                        new gast_public_1.Terminal({ terminalType: Beta })
                    ],
                    separator: Comma
                }),
                new gast_public_1.Terminal({ terminalType: Gamma })
            ];
            expect(interpreter_1.nextPossibleTokensAfter(repMand, INPUT([Comma]), tokens_1.tokenStructuredMatcher, 5)).to.be.empty;
            expect(interpreter_1.nextPossibleTokensAfter(repMand, INPUT([Alpha, Gamma]), tokens_1.tokenStructuredMatcher, 5)).to.be.empty;
            expect(interpreter_1.nextPossibleTokensAfter(repMand, INPUT([Alpha, Beta, Comma, Alpha, Gamma]), tokens_1.tokenStructuredMatcher, 5)).to.be.empty;
            expect(interpreter_1.nextPossibleTokensAfter(repMand, INPUT([Alpha, Beta, Comma, Alpha, Beta, Gamma]), tokens_1.tokenStructuredMatcher, 5)).to.be.empty;
        });
        it("Repetition with Separator Mandatory - positive", function () {
            var repSep = [
                new gast_public_1.RepetitionMandatoryWithSeparator({
                    definition: [
                        new gast_public_1.Terminal({ terminalType: Alpha }),
                        new gast_public_1.Terminal({ terminalType: Beta })
                    ],
                    separator: Comma
                }),
                new gast_public_1.Terminal({ terminalType: Gamma })
            ];
            matchers_1.setEquality(pluckTokenTypes(interpreter_1.nextPossibleTokensAfter(repSep, INPUT([]), tokens_1.tokenStructuredMatcher, 5)), [Alpha]);
            matchers_1.setEquality(pluckTokenTypes(interpreter_1.nextPossibleTokensAfter(repSep, INPUT([Alpha]), tokens_1.tokenStructuredMatcher, 5)), [Beta]);
            matchers_1.setEquality(pluckTokenTypes(interpreter_1.nextPossibleTokensAfter(repSep, INPUT([Alpha, Beta]), tokens_1.tokenStructuredMatcher, 5)), [Comma, Gamma]);
            matchers_1.setEquality(pluckTokenTypes(interpreter_1.nextPossibleTokensAfter(repSep, INPUT([Alpha, Beta, Comma]), tokens_1.tokenStructuredMatcher, 5)), [Alpha]);
            matchers_1.setEquality(pluckTokenTypes(interpreter_1.nextPossibleTokensAfter(repSep, INPUT([Alpha, Beta, Comma, Alpha, Beta]), tokens_1.tokenStructuredMatcher, 5)), [Comma, Gamma]);
        });
        it("Repetition with Separator Mandatory - negative", function () {
            var repMand = [
                new gast_public_1.RepetitionMandatoryWithSeparator({
                    definition: [
                        new gast_public_1.Terminal({ terminalType: Alpha }),
                        new gast_public_1.Terminal({ terminalType: Beta })
                    ],
                    separator: Comma
                }),
                new gast_public_1.Terminal({ terminalType: Gamma })
            ];
            expect(interpreter_1.nextPossibleTokensAfter(repMand, INPUT([Comma]), tokens_1.tokenStructuredMatcher, 5)).to.be.empty;
            expect(interpreter_1.nextPossibleTokensAfter(repMand, INPUT([Alpha, Gamma]), tokens_1.tokenStructuredMatcher, 5)).to.be.empty;
            expect(interpreter_1.nextPossibleTokensAfter(repMand, INPUT([Gamma]), tokens_1.tokenStructuredMatcher, 5)).to.be.empty;
            expect(interpreter_1.nextPossibleTokensAfter(repMand, INPUT([Alpha, Beta, Comma, Alpha, Gamma]), tokens_1.tokenStructuredMatcher, 5)).to.be.empty;
            expect(interpreter_1.nextPossibleTokensAfter(repMand, INPUT([Alpha, Beta, Comma, Alpha, Beta, Gamma]), tokens_1.tokenStructuredMatcher, 5)).to.be.empty;
        });
        it("NonTerminal - positive", function () {
            var someSubRule = new gast_public_1.Rule({
                name: "blah",
                definition: [new gast_public_1.Terminal({ terminalType: Beta })]
            });
            var seq = [
                new gast_public_1.Terminal({ terminalType: Alpha }),
                new gast_public_1.NonTerminal({
                    nonTerminalName: "blah",
                    referencedRule: someSubRule
                }),
                new gast_public_1.Terminal({ terminalType: Gamma })
            ];
            matchers_1.setEquality(pluckTokenTypes(interpreter_1.nextPossibleTokensAfter(seq, INPUT([]), tokens_1.tokenStructuredMatcher, 5)), [Alpha]);
            matchers_1.setEquality(pluckTokenTypes(interpreter_1.nextPossibleTokensAfter(seq, INPUT([Alpha]), tokens_1.tokenStructuredMatcher, 5)), [Beta]);
            matchers_1.setEquality(pluckTokenTypes(interpreter_1.nextPossibleTokensAfter(seq, INPUT([Alpha, Beta]), tokens_1.tokenStructuredMatcher, 5)), [Gamma]);
        });
        it("NonTerminal - negative", function () {
            var someSubRule = new gast_public_1.Rule({
                name: "blah",
                definition: [new gast_public_1.Terminal({ terminalType: Beta })]
            });
            var seq = [
                new gast_public_1.Terminal({ terminalType: Alpha }),
                new gast_public_1.NonTerminal({
                    nonTerminalName: "blah",
                    referencedRule: someSubRule
                }),
                new gast_public_1.Terminal({ terminalType: Gamma })
            ];
            expect(interpreter_1.nextPossibleTokensAfter(seq, INPUT([Beta]), tokens_1.tokenStructuredMatcher, 5)).to.be.empty;
            expect(interpreter_1.nextPossibleTokensAfter(seq, INPUT([Alpha, Gamma]), tokens_1.tokenStructuredMatcher, 5)).to.be.empty;
            expect(interpreter_1.nextPossibleTokensAfter(seq, INPUT([Alpha, Beta, Gamma]), tokens_1.tokenStructuredMatcher, 5)).to.be.empty;
        });
    });
});
describe("issue 391 - WITH_SEP variants do not take SEP into account in lookahead", function () {
    it("Reproduce issue", function () {
        var LParen = tokens_public_1.createToken({
            name: "LParen",
            pattern: /\(/
        });
        var RParen = tokens_public_1.createToken({
            name: "RParen",
            pattern: /\)/
        });
        var Comma = tokens_public_1.createToken({ name: "Comma", pattern: /,/ });
        var FatArrow = tokens_public_1.createToken({
            name: "FatArrow",
            pattern: /=>/
        });
        var Identifier = tokens_public_1.createToken({
            name: "Identifier",
            pattern: /[a-zA-Z]+/
        });
        var WhiteSpace = tokens_public_1.createToken({
            name: "WhiteSpace",
            pattern: /\s+/,
            group: lexer_public_1.Lexer.SKIPPED,
            line_breaks: true
        });
        var allTokens = [
            WhiteSpace,
            LParen,
            RParen,
            Comma,
            FatArrow,
            Identifier
        ];
        var issue391Lexer = new lexer_public_1.Lexer(allTokens);
        var Issue391Parser = /** @class */ (function (_super) {
            __extends(Issue391Parser, _super);
            function Issue391Parser(input) {
                if (input === void 0) { input = []; }
                var _this = _super.call(this, allTokens, {
                    maxLookahead: 4
                }) || this;
                _this.topRule = _this.RULE("topRule", function () {
                    return _this.OR9([
                        {
                            // Lambda Function
                            ALT: function () {
                                _this.CONSUME1(LParen);
                                _this.MANY_SEP({
                                    SEP: Comma,
                                    DEF: function () {
                                        _this.CONSUME1(Identifier);
                                    }
                                });
                                _this.CONSUME1(RParen);
                                _this.CONSUME1(FatArrow);
                            }
                        },
                        {
                            // Parenthesis Expression
                            ALT: function () {
                                _this.CONSUME2(LParen);
                                _this.CONSUME2(Identifier);
                                _this.CONSUME2(RParen);
                            }
                        }
                    ]);
                });
                _this.input = input;
                _this.performSelfAnalysis();
                return _this;
            }
            return Issue391Parser;
        }(parser_traits_1.Parser));
        expect(function () { return new Issue391Parser([]); }).to.not.throw("Ambiguous alternatives: <1 ,2>");
        var myParser = new Issue391Parser([]);
        function testInput(input) {
            var tokens = issue391Lexer.tokenize(input).tokens;
            myParser.input = tokens;
            myParser.topRule();
            expect(myParser.errors).to.be.empty;
        }
        testInput("(x, y) => ");
        testInput("() =>");
        testInput("(x) =>");
        testInput("(x)");
    });
});
//# sourceMappingURL=interperter_spec.js.map

/***/ }),
/* 76 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var parser_1 = __webpack_require__(4);
var tokens_public_1 = __webpack_require__(1);
var lookahead_1 = __webpack_require__(15);
var utils_1 = __webpack_require__(0);
var tokens_1 = __webpack_require__(6);
var matchers_1 = __webpack_require__(3);
var gast_public_1 = __webpack_require__(2);
var IdentTok = tokens_public_1.createToken({ name: "IdentTok" });
var DotTok = tokens_public_1.createToken({ name: "DotTok" });
var DotDotTok = tokens_public_1.createToken({ name: "DotDotTok" });
var ColonTok = tokens_public_1.createToken({ name: "ColonTok" });
var LSquareTok = tokens_public_1.createToken({ name: "LSquareTok" });
var RSquareTok = tokens_public_1.createToken({ name: "RSquareTok" });
var ActionTok = tokens_public_1.createToken({ name: "ActionTok" });
var LParenTok = tokens_public_1.createToken({ name: "LParenTok" });
var RParenTok = tokens_public_1.createToken({ name: "RParenTok" });
var CommaTok = tokens_public_1.createToken({ name: "CommaTok" });
var SemicolonTok = tokens_public_1.createToken({ name: "SemicolonTok" });
var UnsignedIntegerLiteralTok = tokens_public_1.createToken({
    name: "UnsignedIntegerLiteralTok"
});
var DefaultTok = tokens_public_1.createToken({ name: "DefaultTok" });
var AsteriskTok = tokens_public_1.createToken({ name: "AsteriskTok" });
var EntityTok = tokens_public_1.createToken({ name: "EntityTok" });
var KeyTok = tokens_public_1.createToken({ name: "KeyTok" });
var atLeastOneRule = new gast_public_1.Rule({
    name: "atLeastOneRule",
    definition: [
        new gast_public_1.RepetitionMandatory({
            definition: [
                new gast_public_1.RepetitionMandatory({
                    definition: [
                        new gast_public_1.RepetitionMandatory({
                            definition: [
                                new gast_public_1.Terminal({ terminalType: EntityTok })
                            ],
                            idx: 3
                        }),
                        new gast_public_1.Terminal({ terminalType: CommaTok })
                    ],
                    idx: 2
                }),
                new gast_public_1.Terminal({ terminalType: DotTok, idx: 1 })
            ]
        }),
        new gast_public_1.Terminal({ terminalType: DotTok, idx: 2 })
    ]
});
var atLeastOneSepRule = new gast_public_1.Rule({
    name: "atLeastOneSepRule",
    definition: [
        new gast_public_1.RepetitionMandatoryWithSeparator({
            definition: [
                new gast_public_1.RepetitionMandatoryWithSeparator({
                    definition: [
                        new gast_public_1.RepetitionMandatoryWithSeparator({
                            definition: [
                                new gast_public_1.Terminal({ terminalType: EntityTok })
                            ],
                            separator: SemicolonTok,
                            idx: 3
                        }),
                        new gast_public_1.Terminal({ terminalType: CommaTok })
                    ],
                    separator: SemicolonTok,
                    idx: 2
                }),
                new gast_public_1.Terminal({ terminalType: DotTok, idx: 1 })
            ],
            separator: SemicolonTok
        }),
        new gast_public_1.Terminal({ terminalType: DotTok, idx: 2 })
    ]
});
var qualifiedName = new gast_public_1.Rule({
    name: "qualifiedName",
    definition: [
        new gast_public_1.Terminal({ terminalType: IdentTok }),
        new gast_public_1.Repetition({
            definition: [
                new gast_public_1.Terminal({ terminalType: DotTok }),
                new gast_public_1.Terminal({ terminalType: IdentTok, idx: 2 })
            ]
        })
    ]
});
var qualifiedNameSep = new gast_public_1.Rule({
    name: "qualifiedNameSep",
    definition: [
        new gast_public_1.RepetitionMandatoryWithSeparator({
            definition: [new gast_public_1.Terminal({ terminalType: IdentTok, idx: 1 })],
            separator: DotTok
        })
    ]
});
var paramSpec = new gast_public_1.Rule({
    name: "paramSpec",
    definition: [
        new gast_public_1.Terminal({ terminalType: IdentTok }),
        new gast_public_1.Terminal({ terminalType: ColonTok }),
        new gast_public_1.NonTerminal({
            nonTerminalName: "qualifiedName",
            referencedRule: qualifiedName
        }),
        new gast_public_1.Option({
            definition: [
                new gast_public_1.Terminal({ terminalType: LSquareTok }),
                new gast_public_1.Terminal({ terminalType: RSquareTok })
            ]
        })
    ]
});
var actionDec = new gast_public_1.Rule({
    name: "actionDec",
    definition: [
        new gast_public_1.Terminal({ terminalType: ActionTok }),
        new gast_public_1.Terminal({ terminalType: IdentTok }),
        new gast_public_1.Terminal({ terminalType: LParenTok }),
        new gast_public_1.Option({
            definition: [
                new gast_public_1.NonTerminal({
                    nonTerminalName: "paramSpec",
                    referencedRule: paramSpec
                }),
                new gast_public_1.Repetition({
                    definition: [
                        new gast_public_1.Terminal({ terminalType: CommaTok }),
                        new gast_public_1.NonTerminal({
                            nonTerminalName: "paramSpec",
                            referencedRule: paramSpec,
                            idx: 2
                        })
                    ]
                })
            ]
        }),
        new gast_public_1.Terminal({ terminalType: RParenTok }),
        new gast_public_1.Option({
            definition: [
                new gast_public_1.Terminal({ terminalType: ColonTok }),
                new gast_public_1.NonTerminal({
                    nonTerminalName: "qualifiedName",
                    referencedRule: qualifiedName
                })
            ],
            idx: 2
        }),
        new gast_public_1.Terminal({ terminalType: SemicolonTok })
    ]
});
var actionDecSep = new gast_public_1.Rule({
    name: "actionDecSep",
    definition: [
        new gast_public_1.Terminal({ terminalType: ActionTok }),
        new gast_public_1.Terminal({ terminalType: IdentTok }),
        new gast_public_1.Terminal({ terminalType: LParenTok }),
        new gast_public_1.RepetitionWithSeparator({
            definition: [
                new gast_public_1.NonTerminal({
                    nonTerminalName: "paramSpec",
                    referencedRule: paramSpec,
                    idx: 2
                })
            ],
            separator: CommaTok
        }),
        new gast_public_1.Terminal({ terminalType: RParenTok }),
        new gast_public_1.Option({
            definition: [
                new gast_public_1.Terminal({ terminalType: ColonTok }),
                new gast_public_1.NonTerminal({
                    nonTerminalName: "qualifiedName",
                    referencedRule: qualifiedName
                })
            ],
            idx: 2
        }),
        new gast_public_1.Terminal({ terminalType: SemicolonTok })
    ]
});
var manyActions = new gast_public_1.Rule({
    name: "manyActions",
    definition: [
        new gast_public_1.Repetition({
            definition: [
                new gast_public_1.NonTerminal({
                    nonTerminalName: "actionDec",
                    referencedRule: actionDec,
                    idx: 1
                })
            ]
        })
    ]
});
var cardinality = new gast_public_1.Rule({
    name: "cardinality",
    definition: [
        new gast_public_1.Terminal({ terminalType: LSquareTok }),
        new gast_public_1.Terminal({ terminalType: UnsignedIntegerLiteralTok }),
        new gast_public_1.Terminal({ terminalType: DotDotTok }),
        new gast_public_1.Alternation({
            definition: [
                new gast_public_1.Flat({
                    definition: [
                        new gast_public_1.Terminal({
                            terminalType: UnsignedIntegerLiteralTok,
                            idx: 2
                        })
                    ]
                }),
                new gast_public_1.Flat({
                    definition: [new gast_public_1.Terminal({ terminalType: AsteriskTok })]
                })
            ]
        }),
        new gast_public_1.Terminal({ terminalType: RSquareTok })
    ]
});
var assignedTypeSpec = new gast_public_1.Rule({
    name: "assignedTypeSpec",
    definition: [
        new gast_public_1.Terminal({ terminalType: ColonTok }),
        new gast_public_1.NonTerminal({ nonTerminalName: "assignedType" }),
        new gast_public_1.Option({
            definition: [new gast_public_1.NonTerminal({ nonTerminalName: "enumClause" })]
        }),
        new gast_public_1.Option({
            definition: [
                new gast_public_1.Terminal({ terminalType: DefaultTok }),
                new gast_public_1.NonTerminal({ nonTerminalName: "expression" })
            ],
            idx: 2
        })
    ]
});
var lotsOfOrs = new gast_public_1.Rule({
    name: "lotsOfOrs",
    definition: [
        new gast_public_1.Alternation({
            definition: [
                new gast_public_1.Flat({
                    definition: [
                        new gast_public_1.Alternation({
                            definition: [
                                new gast_public_1.Flat({
                                    definition: [
                                        new gast_public_1.Terminal({
                                            terminalType: CommaTok,
                                            idx: 1
                                        })
                                    ]
                                }),
                                new gast_public_1.Flat({
                                    definition: [
                                        new gast_public_1.Terminal({
                                            terminalType: KeyTok,
                                            idx: 1
                                        })
                                    ]
                                })
                            ],
                            idx: 2
                        })
                    ]
                }),
                new gast_public_1.Flat({
                    definition: [
                        new gast_public_1.Terminal({
                            terminalType: EntityTok,
                            idx: 1
                        })
                    ]
                })
            ]
        }),
        new gast_public_1.Alternation({
            definition: [
                new gast_public_1.Flat({
                    definition: [
                        new gast_public_1.Terminal({
                            terminalType: DotTok,
                            idx: 1
                        })
                    ]
                })
            ],
            idx: 3
        })
    ]
});
var emptyAltOr = new gast_public_1.Rule({
    name: "emptyAltOr",
    definition: [
        new gast_public_1.Alternation({
            definition: [
                new gast_public_1.Flat({
                    definition: [
                        new gast_public_1.Terminal({
                            terminalType: KeyTok,
                            idx: 1
                        })
                    ]
                }),
                new gast_public_1.Flat({
                    definition: [
                        new gast_public_1.Terminal({
                            terminalType: EntityTok,
                            idx: 1
                        })
                    ]
                }),
                new gast_public_1.Flat({ definition: [] }) // an empty alternative
            ]
        })
    ]
});
var callArguments = new gast_public_1.Rule({
    name: "callArguments",
    definition: [
        new gast_public_1.RepetitionWithSeparator({
            definition: [new gast_public_1.Terminal({ terminalType: IdentTok, idx: 1 })],
            separator: CommaTok
        }),
        new gast_public_1.RepetitionWithSeparator({
            definition: [new gast_public_1.Terminal({ terminalType: IdentTok, idx: 2 })],
            separator: CommaTok,
            idx: 2
        })
    ]
});
describe("getProdType", function () {
    it("handles `Option`", function () {
        expect(lookahead_1.getProdType(new gast_public_1.Option({ definition: [] }))).to.equal(lookahead_1.PROD_TYPE.OPTION);
    });
    it("handles `Repetition`", function () {
        expect(lookahead_1.getProdType(new gast_public_1.Repetition({ definition: [] }))).to.equal(lookahead_1.PROD_TYPE.REPETITION);
    });
    it("handles `RepetitionMandatory`", function () {
        expect(lookahead_1.getProdType(new gast_public_1.RepetitionMandatory({ definition: [] }))).to.equal(lookahead_1.PROD_TYPE.REPETITION_MANDATORY);
    });
    it("handles `RepetitionWithSeparator`", function () {
        expect(lookahead_1.getProdType(new gast_public_1.RepetitionWithSeparator({ definition: [], separator: null }))).to.equal(lookahead_1.PROD_TYPE.REPETITION_WITH_SEPARATOR);
    });
    it("handles `RepetitionMandatoryWithSeparator`", function () {
        expect(lookahead_1.getProdType(new gast_public_1.RepetitionMandatoryWithSeparator({
            definition: [],
            separator: null
        }))).to.equal(lookahead_1.PROD_TYPE.REPETITION_MANDATORY_WITH_SEPARATOR);
    });
    it("handles `Alternation`", function () {
        expect(lookahead_1.getProdType(new gast_public_1.Alternation({ definition: [] }))).to.equal(lookahead_1.PROD_TYPE.ALTERNATION);
    });
});
context("lookahead specs", function () {
    var ColonParserMock = /** @class */ (function (_super) {
        __extends(ColonParserMock, _super);
        function ColonParserMock() {
            return _super.call(this, [ColonTok]) || this;
        }
        ColonParserMock.prototype.LA = function () {
            return matchers_1.createRegularToken(ColonTok, ":");
        };
        return ColonParserMock;
    }(parser_1.Parser));
    var IdentParserMock = /** @class */ (function (_super) {
        __extends(IdentParserMock, _super);
        function IdentParserMock() {
            return _super.call(this, [IdentTok]) || this;
        }
        IdentParserMock.prototype.LA = function () {
            return matchers_1.createRegularToken(IdentTok, "bamba");
        };
        return IdentParserMock;
    }(parser_1.Parser));
    var CommaParserMock = /** @class */ (function (_super) {
        __extends(CommaParserMock, _super);
        function CommaParserMock() {
            return _super.call(this, [CommaTok]) || this;
        }
        CommaParserMock.prototype.LA = function () {
            return matchers_1.createRegularToken(CommaTok, ",");
        };
        return CommaParserMock;
    }(parser_1.Parser));
    var EntityParserMock = /** @class */ (function (_super) {
        __extends(EntityParserMock, _super);
        function EntityParserMock() {
            return _super.call(this, [EntityTok]) || this;
        }
        EntityParserMock.prototype.LA = function () {
            return matchers_1.createRegularToken(EntityTok, ",");
        };
        return EntityParserMock;
    }(parser_1.Parser));
    var KeyParserMock = /** @class */ (function (_super) {
        __extends(KeyParserMock, _super);
        function KeyParserMock() {
            return _super.call(this, [KeyTok]) || this;
        }
        KeyParserMock.prototype.LA = function () {
            return matchers_1.createRegularToken(KeyTok, ",");
        };
        return KeyParserMock;
    }(parser_1.Parser));
    describe("The Grammar Lookahead namespace", function () {
        it("can compute the lookahead function for the first OPTION in ActionDec", function () {
            var colonMock = new ColonParserMock();
            var indentMock = new IdentParserMock();
            var laFunc = lookahead_1.buildLookaheadFuncForOptionalProd(1, actionDec, 1, false, lookahead_1.PROD_TYPE.OPTION, lookahead_1.buildSingleAlternativeLookaheadFunction);
            expect(laFunc.call(colonMock)).to.equal(false);
            expect(laFunc.call(indentMock)).to.equal(true);
        });
        it("can compute the lookahead function for the second OPTION in ActionDec", function () {
            var colonParserMock = new ColonParserMock();
            var identParserMock = new IdentParserMock();
            var laFunc = lookahead_1.buildLookaheadFuncForOptionalProd(2, actionDec, 1, false, lookahead_1.PROD_TYPE.OPTION, lookahead_1.buildSingleAlternativeLookaheadFunction);
            expect(laFunc.call(colonParserMock)).to.equal(true);
            expect(laFunc.call(identParserMock)).to.equal(false);
        });
        it("can compute the lookahead function for OPTION with categories", function () {
            var B = tokens_public_1.createToken({ name: "B" });
            var C = tokens_public_1.createToken({ name: "C", categories: [B] });
            var optionRule = new gast_public_1.Rule({
                name: "optionRule",
                definition: [
                    new gast_public_1.Option({
                        definition: [
                            new gast_public_1.Terminal({
                                terminalType: B,
                                idx: 1
                            })
                        ]
                    })
                ]
            });
            var laFunc = lookahead_1.buildLookaheadFuncForOptionalProd(1, optionRule, 1, false, lookahead_1.PROD_TYPE.OPTION, lookahead_1.buildSingleAlternativeLookaheadFunction);
            var laMock = {
                LA: function () {
                    return matchers_1.createRegularToken(C, "c");
                }
            };
            // C can match B (2nd alternative) due to its categories definition
            expect(laFunc.call(laMock)).to.be.true;
        });
        it("can compute the lookahead function for the first MANY in ActionDec", function () {
            var identParserMock = new IdentParserMock();
            var commaParserMock = new CommaParserMock();
            var laFunc = lookahead_1.buildLookaheadFuncForOptionalProd(1, actionDec, 1, false, lookahead_1.PROD_TYPE.REPETITION, lookahead_1.buildSingleAlternativeLookaheadFunction);
            expect(laFunc.call(commaParserMock)).to.equal(true);
            expect(laFunc.call(identParserMock)).to.equal(false);
        });
        it("can compute the lookahead function for lots of ORs sample", function () {
            var keyParserMock = new KeyParserMock();
            var entityParserMock = new EntityParserMock();
            var colonParserMock = new ColonParserMock();
            var commaParserMock = new CommaParserMock();
            var laFunc = lookahead_1.buildLookaheadFuncForOr(1, lotsOfOrs, 1, false, false, lookahead_1.buildAlternativesLookAheadFunc);
            expect(laFunc.call(commaParserMock)).to.equal(0);
            expect(laFunc.call(keyParserMock)).to.equal(0);
            expect(laFunc.call(entityParserMock)).to.equal(1);
            expect(laFunc.call(colonParserMock)).to.equal(undefined);
        });
        it("can compute the lookahead function for OR using categories", function () {
            var A = tokens_public_1.createToken({ name: "A" });
            var B = tokens_public_1.createToken({ name: "B" });
            var C = tokens_public_1.createToken({ name: "C", categories: [B] });
            var orRule = new gast_public_1.Rule({
                name: "orRule",
                definition: [
                    new gast_public_1.Alternation({
                        definition: [
                            new gast_public_1.Flat({
                                definition: [
                                    new gast_public_1.Terminal({
                                        terminalType: A,
                                        idx: 1
                                    })
                                ]
                            }),
                            new gast_public_1.Flat({
                                definition: [
                                    new gast_public_1.Terminal({
                                        terminalType: B,
                                        idx: 1
                                    })
                                ]
                            })
                        ]
                    })
                ]
            });
            var laFunc = lookahead_1.buildLookaheadFuncForOr(1, orRule, 1, false, false, lookahead_1.buildAlternativesLookAheadFunc);
            var laMock = {
                LA: function () {
                    return matchers_1.createRegularToken(C, "c");
                }
            };
            // C can match B (2nd alternative) due to its categories definition
            expect(laFunc.call(laMock)).to.equal(1);
        });
        it("can compute the lookahead function for EMPTY OR sample", function () {
            var commaParserMock = new CommaParserMock();
            var keyParserMock = new KeyParserMock();
            var entityParserMock = new EntityParserMock();
            var laFunc = lookahead_1.buildLookaheadFuncForOr(1, emptyAltOr, 1, false, false, lookahead_1.buildAlternativesLookAheadFunc);
            expect(laFunc.call(keyParserMock)).to.equal(0);
            expect(laFunc.call(entityParserMock)).to.equal(1);
            // none matches so the last empty alternative should be taken (idx 2)
            expect(laFunc.call(commaParserMock)).to.equal(2);
        });
    });
    describe("The chevrotain grammar lookahead capabilities", function () {
        var Alpha = tokens_public_1.createToken({ name: "Alpha" });
        var ExtendsAlpha = tokens_public_1.createToken({
            name: "ExtendsAlpha",
            categories: Alpha
        });
        var ExtendsAlphaAlpha = tokens_public_1.createToken({
            name: "ExtendsAlphaAlpha",
            categories: ExtendsAlpha
        });
        var Beta = tokens_public_1.createToken({ name: "Beta" });
        var Charlie = tokens_public_1.createToken({ name: "Charlie" });
        var Delta = tokens_public_1.createToken({ name: "Delta" });
        var Gamma = tokens_public_1.createToken({ name: "Gamma" });
        tokens_1.augmentTokenTypes([
            Alpha,
            Beta,
            Delta,
            Gamma,
            Charlie,
            ExtendsAlphaAlpha
        ]);
        context("computing lookahead sequences for", function () {
            it("two simple one token alternatives", function () {
                var alt1 = new gast_public_1.Alternation({
                    definition: [
                        new gast_public_1.Flat({
                            definition: [new gast_public_1.Terminal({ terminalType: Alpha })]
                        }),
                        new gast_public_1.Flat({
                            definition: [new gast_public_1.Terminal({ terminalType: Beta })]
                        }),
                        new gast_public_1.Flat({
                            definition: [new gast_public_1.Terminal({ terminalType: Beta })]
                        })
                    ]
                });
                var alt2 = new gast_public_1.Terminal({ terminalType: Gamma });
                var actual = lookahead_1.lookAheadSequenceFromAlternatives([alt1, alt2], 5);
                expect(actual).to.deep.equal([[[Alpha], [Beta]], [[Gamma]]]);
            });
            it("three simple one token alternatives", function () {
                var alt1 = new gast_public_1.Alternation({
                    definition: [
                        new gast_public_1.Flat({
                            definition: [new gast_public_1.Terminal({ terminalType: Alpha })]
                        }),
                        new gast_public_1.Flat({
                            definition: [new gast_public_1.Terminal({ terminalType: Beta })]
                        }),
                        new gast_public_1.Flat({
                            definition: [new gast_public_1.Terminal({ terminalType: Beta })]
                        })
                    ]
                });
                var alt2 = new gast_public_1.Terminal({ terminalType: Gamma });
                var alt3 = new gast_public_1.Flat({
                    definition: [
                        new gast_public_1.Terminal({ terminalType: Delta }),
                        new gast_public_1.Terminal({ terminalType: Charlie })
                    ]
                });
                var actual = lookahead_1.lookAheadSequenceFromAlternatives([alt1, alt2, alt3], 5);
                expect(actual).to.deep.equal([
                    [[Alpha], [Beta]],
                    [[Gamma]],
                    [[Delta]]
                ]);
            });
            it("two complex multi token alternatives", function () {
                var alt1 = new gast_public_1.Alternation({
                    definition: [
                        new gast_public_1.Flat({
                            definition: [
                                new gast_public_1.Terminal({ terminalType: Alpha }),
                                new gast_public_1.Terminal({ terminalType: Beta })
                            ]
                        }),
                        new gast_public_1.Flat({
                            definition: [new gast_public_1.Terminal({ terminalType: Beta })]
                        }),
                        new gast_public_1.Flat({
                            definition: [
                                new gast_public_1.Terminal({ terminalType: Alpha }),
                                new gast_public_1.Terminal({ terminalType: Gamma }),
                                new gast_public_1.Terminal({ terminalType: Delta })
                            ]
                        })
                    ]
                });
                var alt2 = new gast_public_1.Alternation({
                    definition: [
                        new gast_public_1.Flat({
                            definition: [
                                new gast_public_1.Terminal({ terminalType: Alpha }),
                                new gast_public_1.Terminal({ terminalType: Delta })
                            ]
                        }),
                        new gast_public_1.Flat({
                            definition: [
                                new gast_public_1.Terminal({ terminalType: Charlie })
                            ]
                        })
                    ]
                });
                var actual = lookahead_1.lookAheadSequenceFromAlternatives([alt1, alt2], 5);
                expect(actual).to.deep.equal([
                    [[Beta], [Alpha, Beta], [Alpha, Gamma]],
                    [[Charlie], [Alpha, Delta]]
                ]);
            });
            it("three complex multi token alternatives", function () {
                var alt1 = new gast_public_1.Alternation({
                    definition: [
                        new gast_public_1.Flat({
                            definition: [
                                new gast_public_1.Terminal({ terminalType: Alpha }),
                                new gast_public_1.Terminal({ terminalType: Beta }),
                                new gast_public_1.Terminal({ terminalType: Gamma })
                            ]
                        }),
                        new gast_public_1.Flat({
                            definition: [new gast_public_1.Terminal({ terminalType: Beta })]
                        })
                    ]
                });
                var alt2 = new gast_public_1.Alternation({
                    definition: [
                        new gast_public_1.Flat({
                            definition: [
                                new gast_public_1.Terminal({ terminalType: Alpha }),
                                new gast_public_1.Terminal({ terminalType: Delta })
                            ]
                        }),
                        new gast_public_1.Flat({
                            definition: [
                                new gast_public_1.Terminal({ terminalType: Charlie })
                            ]
                        }),
                        new gast_public_1.Flat({
                            definition: [
                                new gast_public_1.Terminal({ terminalType: Gamma }),
                                new gast_public_1.Terminal({ terminalType: Gamma })
                            ]
                        })
                    ]
                });
                var alt3 = new gast_public_1.Alternation({
                    definition: [
                        new gast_public_1.Flat({
                            definition: [
                                new gast_public_1.Terminal({ terminalType: Alpha }),
                                new gast_public_1.Terminal({ terminalType: Beta }),
                                new gast_public_1.Terminal({ terminalType: Delta })
                            ]
                        }),
                        new gast_public_1.Flat({
                            definition: [
                                new gast_public_1.Terminal({ terminalType: Charlie }),
                                new gast_public_1.Terminal({ terminalType: Beta })
                            ]
                        })
                    ]
                });
                var actual = lookahead_1.lookAheadSequenceFromAlternatives([alt1, alt2, alt3], 5);
                expect(actual).to.deep.equal([
                    [[Beta], [Alpha, Beta, Gamma]],
                    [[Charlie], [Gamma], [Alpha, Delta]],
                    [[Charlie, Beta], [Alpha, Beta, Delta]]
                ]);
            });
            it("two complex multi token alternatives with shared prefix", function () {
                var alt1 = new gast_public_1.Flat({
                    definition: [
                        new gast_public_1.Terminal({ terminalType: Alpha }),
                        new gast_public_1.Terminal({ terminalType: Beta }),
                        new gast_public_1.Terminal({ terminalType: Charlie }),
                        new gast_public_1.Terminal({ terminalType: Delta })
                    ]
                });
                var alt2 = new gast_public_1.Flat({
                    definition: [
                        new gast_public_1.Terminal({ terminalType: Alpha }),
                        new gast_public_1.Terminal({ terminalType: Beta }),
                        new gast_public_1.Terminal({ terminalType: Charlie }),
                        new gast_public_1.Terminal({ terminalType: Delta }),
                        new gast_public_1.Terminal({ terminalType: Gamma }),
                        new gast_public_1.Terminal({ terminalType: Alpha })
                    ]
                });
                var actual = lookahead_1.lookAheadSequenceFromAlternatives([alt1, alt2], 5);
                expect(actual).to.deep.equal([
                    [[Alpha, Beta, Charlie, Delta]],
                    [[Alpha, Beta, Charlie, Delta, Gamma]]
                ]);
            });
            it("simple ambiguous alternatives", function () {
                var alt1 = new gast_public_1.Flat({
                    definition: [new gast_public_1.Terminal({ terminalType: Alpha })]
                });
                var alt2 = new gast_public_1.Flat({
                    definition: [new gast_public_1.Terminal({ terminalType: Alpha })]
                });
                var actual = lookahead_1.lookAheadSequenceFromAlternatives([alt1, alt2], 5);
                expect(actual).to.deep.equal([[[Alpha]], [[Alpha]]]);
            });
            it("complex(multi-token) ambiguous alternatives", function () {
                var alt1 = new gast_public_1.Flat({
                    definition: [
                        new gast_public_1.Terminal({ terminalType: Alpha }),
                        new gast_public_1.Terminal({ terminalType: Beta }),
                        new gast_public_1.Terminal({ terminalType: Charlie })
                    ]
                });
                var alt2 = new gast_public_1.Flat({
                    definition: [
                        new gast_public_1.Terminal({ terminalType: Alpha }),
                        new gast_public_1.Terminal({ terminalType: Beta }),
                        new gast_public_1.Terminal({ terminalType: Charlie })
                    ]
                });
                var actual = lookahead_1.lookAheadSequenceFromAlternatives([alt1, alt2], 5);
                expect(actual).to.deep.equal([
                    [[Alpha, Beta, Charlie]],
                    [[Alpha, Beta, Charlie]]
                ]);
            });
        });
        context("computing lookahead functions for", function () {
            var MockParser = /** @class */ (function () {
                function MockParser(inputConstructors) {
                    this.inputConstructors = inputConstructors;
                    this.input = utils_1.map(inputConstructors, function (currConst) {
                        return matchers_1.createRegularToken(currConst);
                    });
                }
                MockParser.prototype.LA = function (howMuch) {
                    if (this.input.length <= howMuch - 1) {
                        return parser_1.END_OF_FILE;
                    }
                    else {
                        return this.input[howMuch - 1];
                    }
                };
                return MockParser;
            }());
            it("inheritance Alternative alternatives - positive", function () {
                var alternatives = [
                    [[ExtendsAlphaAlpha]],
                    [[ExtendsAlpha]],
                    [[Alpha]] // 2
                ];
                var laFunc = lookahead_1.buildAlternativesLookAheadFunc(alternatives, false, tokens_1.tokenStructuredMatcher, false);
                expect(laFunc.call(new MockParser([Alpha]))).to.equal(2);
                expect(laFunc.call(new MockParser([ExtendsAlpha]))).to.equal(1);
                expect(laFunc.call(new MockParser([ExtendsAlphaAlpha]))).to.equal(0);
            });
            it("simple alternatives - positive", function () {
                var alternatives = [
                    [[Alpha], [Beta]],
                    [[Delta], [Gamma]],
                    [[Charlie]] // 2
                ];
                var laFunc = lookahead_1.buildAlternativesLookAheadFunc(alternatives, false, tokens_1.tokenStructuredMatcher, false);
                expect(laFunc.call(new MockParser([Alpha]))).to.equal(0);
                expect(laFunc.call(new MockParser([Beta]))).to.equal(0);
                expect(laFunc.call(new MockParser([Delta]))).to.equal(1);
                expect(laFunc.call(new MockParser([Gamma]))).to.equal(1);
                expect(laFunc.call(new MockParser([Charlie]))).to.equal(2);
            });
            it("simple alternatives - negative", function () {
                var alternatives = [
                    [[Alpha], [Beta]],
                    [[Delta], [Gamma]] // 1
                ];
                var laFunc = lookahead_1.buildAlternativesLookAheadFunc(alternatives, false, tokens_1.tokenStructuredMatcher, false);
                expect(laFunc.call(new MockParser([]))).to.be.undefined;
                expect(laFunc.call(new MockParser([Charlie]))).to.be.undefined;
            });
            it("complex alternatives - positive", function () {
                var alternatives = [
                    [[Alpha, Beta, Gamma], [Alpha, Beta, Delta]],
                    [[Alpha, Beta, Beta]],
                    [[Alpha, Beta]] // 2 - Prefix of '1' alternative
                ];
                var laFunc = lookahead_1.buildAlternativesLookAheadFunc(alternatives, false, tokens_1.tokenStructuredMatcher, false);
                expect(laFunc.call(new MockParser([Alpha, Beta, Gamma]))).to.equal(0);
                expect(laFunc.call(new MockParser([Alpha, Beta, Gamma, Delta]))).to.equal(0);
                expect(laFunc.call(new MockParser([Alpha, Beta, Delta]))).to.equal(0);
                expect(laFunc.call(new MockParser([Alpha, Beta, Beta]))).to.equal(1);
                expect(laFunc.call(new MockParser([Alpha, Beta, Charlie]))).to.equal(2);
            });
            it("complex alternatives - negative", function () {
                var alternatives = [
                    [[Alpha, Beta, Gamma], [Alpha, Beta, Delta]],
                    [[Alpha, Beta, Beta]],
                    [[Alpha, Beta], [Gamma]] // 2
                ];
                var laFunc = lookahead_1.buildAlternativesLookAheadFunc(alternatives, false, tokens_1.tokenStructuredMatcher, false);
                expect(laFunc.call(new MockParser([]))).to.be.undefined;
                expect(laFunc.call(new MockParser([Alpha, Gamma, Gamma]))).to.be
                    .undefined;
                expect(laFunc.call(new MockParser([Charlie]))).to.be.undefined;
                expect(laFunc.call(new MockParser([Beta, Alpha, Beta, Gamma])))
                    .to.be.undefined;
            });
            it("complex alternatives with inheritance - positive", function () {
                var alternatives = [
                    [[ExtendsAlpha, Beta]],
                    [[Alpha, Beta]] // 1
                ];
                var laFunc = lookahead_1.buildAlternativesLookAheadFunc(alternatives, false, tokens_1.tokenStructuredMatcher, false);
                expect(laFunc.call(new MockParser([Alpha, Beta]))).to.equal(1);
                expect(laFunc.call(new MockParser([ExtendsAlphaAlpha, Beta]))).to.equal(0);
                // expect(
                //     laFunc.call(new MockParser([ExtendsAlpha, Beta]))
                // ).to.equal(0)
            });
            it("complex alternatives with inheritance - negative", function () {
                var alternatives = [
                    [[ExtendsAlpha, Beta]],
                    [[Alpha, Gamma]] // 1
                ];
                var laFunc = lookahead_1.buildAlternativesLookAheadFunc(alternatives, false, tokens_1.tokenStructuredMatcher, false);
                expect(laFunc.call(new MockParser([Alpha, Beta]))).to.be
                    .undefined;
                expect(laFunc.call(new MockParser([ExtendsAlphaAlpha, Delta])))
                    .to.be.undefined;
            });
            it("Empty alternatives", function () {
                var alternatives = [
                    [[Alpha]],
                    [[]] // 1
                ];
                var laFunc = lookahead_1.buildAlternativesLookAheadFunc(alternatives, false, tokens_1.tokenStructuredMatcher, false);
                expect(laFunc.call(new MockParser([Alpha]))).to.equal(0);
                expect(laFunc.call(new MockParser([]))).to.equal(1); // empty alternative always matches
                expect(laFunc.call(new MockParser([Delta]))).to.equal(1); // empty alternative always matches
            });
            it("simple optional - positive", function () {
                var alternative = [[Alpha], [Beta], [Charlie]];
                var laFunc = lookahead_1.buildSingleAlternativeLookaheadFunction(alternative, tokens_1.tokenStructuredMatcher, false);
                expect(laFunc.call(new MockParser([Alpha]))).to.be.true;
                expect(laFunc.call(new MockParser([Beta]))).to.be.true;
                expect(laFunc.call(new MockParser([Charlie]))).to.be.true;
            });
            it("simple optional - negative", function () {
                var alternative = [[Alpha], [Beta], [Charlie]];
                var laFunc = lookahead_1.buildSingleAlternativeLookaheadFunction(alternative, tokens_1.tokenStructuredMatcher, false);
                expect(laFunc.call(new MockParser([Delta]))).to.be.false;
                expect(laFunc.call(new MockParser([Gamma]))).to.be.false;
            });
            it("complex optional - positive", function () {
                var alternative = [
                    [Alpha, Beta, Gamma],
                    [Beta],
                    [Charlie, Delta]
                ];
                var laFunc = lookahead_1.buildSingleAlternativeLookaheadFunction(alternative, tokens_1.tokenStructuredMatcher, false);
                expect(laFunc.call(new MockParser([Alpha, Beta, Gamma]))).to.be
                    .true;
                expect(laFunc.call(new MockParser([Beta]))).to.be.true;
                expect(laFunc.call(new MockParser([Charlie, Delta]))).to.be.true;
            });
            it("complex optional - Negative", function () {
                var alternative = [
                    [Alpha, Beta, Gamma],
                    [Beta],
                    [Charlie, Delta]
                ];
                var laFunc = lookahead_1.buildSingleAlternativeLookaheadFunction(alternative, tokens_1.tokenStructuredMatcher, false);
                expect(laFunc.call(new MockParser([Alpha, Charlie, Gamma]))).to
                    .be.false;
                expect(laFunc.call(new MockParser([Charlie]))).to.be.false;
                expect(laFunc.call(new MockParser([Charlie, Beta]))).to.be.false;
            });
            it("complex optional with inheritance - positive", function () {
                var alternative = [[Alpha, ExtendsAlpha, ExtendsAlphaAlpha]];
                var laFunc = lookahead_1.buildSingleAlternativeLookaheadFunction(alternative, tokens_1.tokenStructuredMatcher, false);
                expect(laFunc.call(new MockParser([Alpha, ExtendsAlpha, ExtendsAlphaAlpha]))).to.be.true;
                expect(laFunc.call(new MockParser([
                    ExtendsAlpha,
                    ExtendsAlpha,
                    ExtendsAlphaAlpha
                ]))).to.be.true;
                expect(laFunc.call(new MockParser([
                    ExtendsAlphaAlpha,
                    ExtendsAlpha,
                    ExtendsAlphaAlpha
                ]))).to.be.true;
                expect(laFunc.call(new MockParser([
                    ExtendsAlphaAlpha,
                    ExtendsAlphaAlpha,
                    ExtendsAlphaAlpha
                ]))).to.be.true;
            });
            it("complex optional with inheritance - negative", function () {
                var alternative = [[Alpha, ExtendsAlpha, ExtendsAlphaAlpha]];
                var laFunc = lookahead_1.buildSingleAlternativeLookaheadFunction(alternative, tokens_1.tokenStructuredMatcher, false);
                expect(laFunc.call(new MockParser([Gamma, ExtendsAlpha, ExtendsAlphaAlpha]))).to.be.false;
                expect(laFunc.call(new MockParser([ExtendsAlpha, Alpha, ExtendsAlphaAlpha]))).to.be.false;
                expect(laFunc.call(new MockParser([
                    ExtendsAlphaAlpha,
                    ExtendsAlpha,
                    ExtendsAlpha
                ]))).to.be.false;
            });
        });
    });
});
//# sourceMappingURL=lookahead_spec.js.map

/***/ }),
/* 77 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var lang_extensions_1 = __webpack_require__(7);
var resolver_1 = __webpack_require__(35);
var parser_1 = __webpack_require__(4);
var gast_public_1 = __webpack_require__(2);
var errors_public_1 = __webpack_require__(12);
var gast_resolver_public_1 = __webpack_require__(25);
var tokens_public_1 = __webpack_require__(1);
var gast_1 = __webpack_require__(10);
var utils_1 = __webpack_require__(0);
describe("The RefResolverVisitor", function () {
    it("will fail when trying to resolve a ref to a grammar rule that does not exist", function () {
        var ref = new gast_public_1.NonTerminal({ nonTerminalName: "missingRule" });
        var topLevel = new gast_public_1.Rule({ name: "TOP", definition: [ref] });
        var topLevelRules = new lang_extensions_1.HashTable();
        topLevelRules.put("TOP", topLevel);
        var resolver = new resolver_1.GastRefResolverVisitor(topLevelRules, errors_public_1.defaultGrammarResolverErrorProvider);
        resolver.resolveRefs();
        expect(resolver.errors).to.have.lengthOf(1);
        expect(resolver.errors[0].message).to.contain("Invalid grammar, reference to a rule which is not defined: ->missingRule<-");
        expect(resolver.errors[0].message).to.contain("inside top level rule: ->TOP<-");
        expect(resolver.errors[0].type).to.equal(parser_1.ParserDefinitionErrorType.UNRESOLVED_SUBRULE_REF);
        expect(resolver.errors[0].ruleName).to.equal("TOP");
    });
});
describe("The assignOccurrenceIndices utility", function () {
    it("will correctly add indices for DSL methods", function () {
        var A = tokens_public_1.createToken({ name: "A" });
        var B = tokens_public_1.createToken({ name: "B" });
        var rule = new gast_public_1.Rule({
            name: "rule",
            definition: [
                new gast_public_1.Terminal({ terminalType: A }),
                new gast_public_1.NonTerminal({
                    nonTerminalName: "otherRule"
                }),
                new gast_public_1.Option({
                    definition: [new gast_public_1.Terminal({ terminalType: B })]
                }),
                new gast_public_1.Alternation({
                    definition: [
                        new gast_public_1.Flat({
                            definition: [new gast_public_1.Terminal({ terminalType: B })]
                        })
                    ]
                }),
                new gast_public_1.Repetition({
                    definition: [new gast_public_1.Terminal({ terminalType: B })]
                }),
                new gast_public_1.RepetitionMandatory({
                    definition: [new gast_public_1.Terminal({ terminalType: B })]
                }),
                new gast_public_1.RepetitionWithSeparator({
                    definition: [new gast_public_1.Terminal({ terminalType: B })],
                    separator: A
                }),
                new gast_public_1.RepetitionMandatoryWithSeparator({
                    definition: [
                        new gast_public_1.NonTerminal({
                            nonTerminalName: "otherRule"
                        })
                    ],
                    separator: A
                }),
                new gast_public_1.Option({
                    definition: [new gast_public_1.Terminal({ terminalType: B })]
                }),
                new gast_public_1.Alternation({
                    definition: [
                        new gast_public_1.Flat({
                            definition: [new gast_public_1.Terminal({ terminalType: B })]
                        })
                    ]
                }),
                new gast_public_1.Repetition({
                    definition: [new gast_public_1.Terminal({ terminalType: B })]
                }),
                new gast_public_1.RepetitionMandatory({
                    definition: [new gast_public_1.Terminal({ terminalType: B })]
                }),
                new gast_public_1.RepetitionWithSeparator({
                    definition: [new gast_public_1.Terminal({ terminalType: B })],
                    separator: A
                }),
                new gast_public_1.RepetitionMandatoryWithSeparator({
                    definition: [
                        new gast_public_1.NonTerminal({
                            nonTerminalName: "otherRule"
                        })
                    ],
                    separator: A
                })
            ]
        });
        gast_resolver_public_1.assignOccurrenceIndices({ rules: [rule] });
        var methodsCollector = new gast_1.DslMethodsCollectorVisitor();
        rule.accept(methodsCollector);
        utils_1.forEach(methodsCollector.dslMethods, function (currMethodArr) {
            var indices = utils_1.map(currMethodArr, function (currMethod) { return currMethod.idx; });
            expect(indices.length).to.equal(utils_1.uniq(indices).length);
        });
    });
});
//# sourceMappingURL=resolver_spec.js.map

/***/ }),
/* 78 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var parser_traits_1 = __webpack_require__(5);
var exceptions_public_1 = __webpack_require__(8);
var tokens_1 = __webpack_require__(6);
var matchers_1 = __webpack_require__(3);
describe("The chevrotain support for custom gates/predicates on DSL production:", function () {
    var A = /** @class */ (function () {
        function A() {
        }
        A.PATTERN = /a/;
        return A;
    }());
    var B = /** @class */ (function () {
        function B() {
        }
        B.PATTERN = /a/;
        return B;
    }());
    var C = /** @class */ (function () {
        function C() {
        }
        C.PATTERN = /a/;
        return C;
    }());
    var ALL_TOKENS = [A, B, C];
    tokens_1.augmentTokenTypes(ALL_TOKENS);
    it("OPTION", function () {
        function gateFunc() {
            return this.gate;
        }
        var PredicateOptionParser = /** @class */ (function (_super) {
            __extends(PredicateOptionParser, _super);
            function PredicateOptionParser(input, gate) {
                if (input === void 0) { input = []; }
                var _this = _super.call(this, ALL_TOKENS, { outputCst: false }) || this;
                _this.gate = gate;
                _this.optionRule = _this.RULE("optionRule", function () {
                    var result = "not entered!";
                    _this.OPTION({
                        GATE: gateFunc,
                        DEF: function () {
                            _this.CONSUME(A);
                            result = "entered!";
                        }
                    });
                    return result;
                });
                _this.input = input;
                _this.performSelfAnalysis();
                return _this;
            }
            return PredicateOptionParser;
        }(parser_traits_1.Parser));
        var gateOpenInputGood = new PredicateOptionParser([matchers_1.createRegularToken(A)], true).optionRule();
        expect(gateOpenInputGood).to.equal("entered!");
        var gateOpenInputBad = new PredicateOptionParser([matchers_1.createRegularToken(B)], true).optionRule();
        expect(gateOpenInputBad).to.equal("not entered!");
        var gateClosedInputGood = new PredicateOptionParser([matchers_1.createRegularToken(A)], false).optionRule();
        expect(gateClosedInputGood).to.equal("not entered!");
        var gateClosedInputBad = new PredicateOptionParser([matchers_1.createRegularToken(B)], false).optionRule();
        expect(gateClosedInputBad).to.equal("not entered!");
    });
    it("MANY", function () {
        function gateFunc() {
            return this.gate;
        }
        var PredicateManyParser = /** @class */ (function (_super) {
            __extends(PredicateManyParser, _super);
            function PredicateManyParser(input, gate) {
                if (input === void 0) { input = []; }
                var _this = _super.call(this, ALL_TOKENS, { outputCst: false }) || this;
                _this.gate = gate;
                _this.manyRule = _this.RULE("manyRule", function () {
                    var result = "not entered!";
                    _this.MANY({
                        GATE: gateFunc,
                        DEF: function () {
                            _this.CONSUME(A);
                            result = "entered!";
                        }
                    });
                    return result;
                });
                _this.input = input;
                _this.performSelfAnalysis();
                return _this;
            }
            return PredicateManyParser;
        }(parser_traits_1.Parser));
        var gateOpenInputGood = new PredicateManyParser([matchers_1.createRegularToken(A), matchers_1.createRegularToken(A)], true).manyRule();
        expect(gateOpenInputGood).to.equal("entered!");
        var gateOpenInputBad = new PredicateManyParser([matchers_1.createRegularToken(B)], true).manyRule();
        expect(gateOpenInputBad).to.equal("not entered!");
        var gateClosedInputGood = new PredicateManyParser([matchers_1.createRegularToken(A), matchers_1.createRegularToken(A)], false).manyRule();
        expect(gateClosedInputGood).to.equal("not entered!");
        var gateClosedInputBad = new PredicateManyParser([matchers_1.createRegularToken(B)], false).manyRule();
        expect(gateClosedInputBad).to.equal("not entered!");
    });
    it("AT_LEAST_ONE", function () {
        function gateFunc() {
            return this.gate;
        }
        var PredicateAtLeastOneParser = /** @class */ (function (_super) {
            __extends(PredicateAtLeastOneParser, _super);
            function PredicateAtLeastOneParser(input, gate) {
                if (input === void 0) { input = []; }
                var _this = _super.call(this, ALL_TOKENS, { outputCst: false }) || this;
                _this.gate = gate;
                _this.atLeastOneRule = _this.RULE("atLeastOneRule", function () {
                    var result = "not entered!";
                    _this.AT_LEAST_ONE({
                        GATE: gateFunc,
                        DEF: function () {
                            _this.CONSUME(A);
                            result = "entered!";
                        }
                    });
                    return result;
                });
                _this.input = input;
                _this.performSelfAnalysis();
                return _this;
            }
            return PredicateAtLeastOneParser;
        }(parser_traits_1.Parser));
        var gateOpenInputGood = new PredicateAtLeastOneParser([matchers_1.createRegularToken(A), matchers_1.createRegularToken(A)], true).atLeastOneRule();
        expect(gateOpenInputGood).to.equal("entered!");
        var gateOpenInputBadParser = new PredicateAtLeastOneParser([matchers_1.createRegularToken(B)], true);
        gateOpenInputBadParser.atLeastOneRule();
        expect(gateOpenInputBadParser.errors).to.have.lengthOf(1);
        expect(gateOpenInputBadParser.errors[0]).to.be.an.instanceOf(exceptions_public_1.EarlyExitException);
        var gateClosedInputGood = new PredicateAtLeastOneParser([matchers_1.createRegularToken(A), matchers_1.createRegularToken(A)], false);
        gateClosedInputGood.atLeastOneRule();
        expect(gateClosedInputGood.errors).to.have.lengthOf(1);
        expect(gateClosedInputGood.errors[0]).to.be.an.instanceOf(exceptions_public_1.EarlyExitException);
        var gateClosedInputBad = new PredicateAtLeastOneParser([matchers_1.createRegularToken(B)], false);
        gateClosedInputBad.atLeastOneRule();
        expect(gateClosedInputBad.errors).to.have.lengthOf(1);
        expect(gateClosedInputBad.errors[0]).to.be.an.instanceOf(exceptions_public_1.EarlyExitException);
    });
    it("OR", function () {
        function gateFunc() {
            return this.gate;
        }
        var PredicateOrParser = /** @class */ (function (_super) {
            __extends(PredicateOrParser, _super);
            function PredicateOrParser(input, gate) {
                if (input === void 0) { input = []; }
                var _this = _super.call(this, ALL_TOKENS, { outputCst: false }) || this;
                _this.gate = gate;
                _this.orRule = _this.RULE("orRule", function () {
                    return _this.OR7([
                        // no predicate
                        {
                            ALT: function () {
                                _this.CONSUME1(A);
                                return "A";
                            }
                        },
                        {
                            GATE: gateFunc,
                            ALT: function () {
                                _this.CONSUME1(B);
                                return "B";
                            }
                        },
                        // No predicate
                        {
                            ALT: function () {
                                _this.CONSUME1(C);
                                return "C";
                            }
                        }
                    ]);
                });
                _this.input = input;
                _this.performSelfAnalysis();
                return _this;
            }
            return PredicateOrParser;
        }(parser_traits_1.Parser));
        var gateOpenInputA = new PredicateOrParser([matchers_1.createRegularToken(A)], true).orRule();
        expect(gateOpenInputA).to.equal("A");
        var gateOpenInputB = new PredicateOrParser([matchers_1.createRegularToken(B)], true).orRule();
        expect(gateOpenInputB).to.equal("B");
        var gateOpenInputC = new PredicateOrParser([matchers_1.createRegularToken(C)], true).orRule();
        expect(gateOpenInputC).to.equal("C");
        var gateClosedInputA = new PredicateOrParser([matchers_1.createRegularToken(A)], false).orRule();
        expect(gateClosedInputA).to.equal("A");
        var gateClosedInputBad = new PredicateOrParser([matchers_1.createRegularToken(B)], false);
        gateClosedInputBad.orRule();
        expect(gateClosedInputBad.errors).to.have.lengthOf(1);
        expect(gateClosedInputBad.errors[0]).to.be.an.instanceOf(exceptions_public_1.NoViableAltException);
        var gateClosedInputC = new PredicateOrParser([matchers_1.createRegularToken(C)], false).orRule();
        expect(gateClosedInputC).to.equal("C");
    });
    describe("Predicates shall work with parametrized rules (issue #221)", function () {
        it("predicates in OR", function () {
            var PredicateWithRuleOrParser = /** @class */ (function (_super) {
                __extends(PredicateWithRuleOrParser, _super);
                function PredicateWithRuleOrParser(input) {
                    if (input === void 0) { input = []; }
                    var _this = _super.call(this, ALL_TOKENS, { outputCst: false }) || this;
                    _this.topRule = _this.RULE("topRule", function (param) {
                        return _this.OR1([
                            {
                                GATE: function () { return param; },
                                ALT: function () { return _this.CONSUME1(A).image; }
                            },
                            {
                                GATE: function () { return !param; },
                                ALT: function () { return _this.CONSUME1(B).image; }
                            }
                        ]);
                    });
                    _this.input = input;
                    _this.performSelfAnalysis();
                    return _this;
                }
                return PredicateWithRuleOrParser;
            }(parser_traits_1.Parser));
            var gateOpenInputA = new PredicateWithRuleOrParser([
                matchers_1.createRegularToken(A, "a")
            ]).topRule(1, [true]);
            expect(gateOpenInputA).to.equal("a");
            // if the predicate function still kept a reference via a closure to the original param this will not work.
            var gateOpenInputB = new PredicateWithRuleOrParser([
                matchers_1.createRegularToken(B, "b")
            ]).topRule(1, [false]);
            expect(gateOpenInputB).to.equal("b");
        });
        it("predicates in OPTION", function () {
            var PredicateWithRuleOptionParser = /** @class */ (function (_super) {
                __extends(PredicateWithRuleOptionParser, _super);
                function PredicateWithRuleOptionParser(input) {
                    if (input === void 0) { input = []; }
                    var _this = _super.call(this, ALL_TOKENS, { outputCst: false }) || this;
                    _this.topRule = _this.RULE("topRule", function (param) {
                        var result = "";
                        result += _this.CONSUME1(B).image;
                        return result;
                    });
                    _this.input = input;
                    _this.performSelfAnalysis();
                    return _this;
                }
                return PredicateWithRuleOptionParser;
            }(parser_traits_1.Parser));
            var parser = new PredicateWithRuleOptionParser([
                matchers_1.createRegularToken(B, "b")
            ]);
            var gateOpenInputB = parser.topRule(1, [false]);
            expect(gateOpenInputB).to.equal("b");
            // // if the predicate function still kept a reference via a closure to the original param this will not work.
            // // because the <() => param> in the OPTION will ALWAYS return false (the original param)
            // let gateOpenInputA = new PredicateWithRuleOptionParser([
            //     createRegularToken(A, "a"),
            //     createRegularToken(B, "b")
            // ]).topRule(1, [true])
            // expect(gateOpenInputA).to.equal("ab")
        });
        it("predicates in MANY", function () {
            var PredicateWithRuleManyParser = /** @class */ (function (_super) {
                __extends(PredicateWithRuleManyParser, _super);
                function PredicateWithRuleManyParser(input) {
                    if (input === void 0) { input = []; }
                    var _this = _super.call(this, ALL_TOKENS, { outputCst: false }) || this;
                    _this.topRule = _this.RULE("topRule", function (param) {
                        var result = "";
                        _this.MANY({
                            GATE: function () { return param; },
                            DEF: function () {
                                result += _this.CONSUME1(A).image;
                            }
                        });
                        result += _this.CONSUME1(B).image;
                        return result;
                    });
                    _this.input = input;
                    _this.performSelfAnalysis();
                    return _this;
                }
                return PredicateWithRuleManyParser;
            }(parser_traits_1.Parser));
            var gateOpenInputB = new PredicateWithRuleManyParser([
                matchers_1.createRegularToken(B, "b")
            ]).topRule(1, [false]);
            expect(gateOpenInputB).to.equal("b");
            // if the predicate function still kept a reference via a closure to the original param this will not work.
            // because the <() => param> in the MANY will ALWAYS return false (the original param)
            var gateOpenInputA = new PredicateWithRuleManyParser([
                matchers_1.createRegularToken(A, "a"),
                matchers_1.createRegularToken(A, "a"),
                matchers_1.createRegularToken(A, "a"),
                matchers_1.createRegularToken(B, "b")
            ]).topRule(1, [true]);
            expect(gateOpenInputA).to.equal("aaab");
        });
        it("predicates in AT_LEAST_ONE", function () {
            var PredicateWithRuleAtLeastOneParser = /** @class */ (function (_super) {
                __extends(PredicateWithRuleAtLeastOneParser, _super);
                function PredicateWithRuleAtLeastOneParser(input) {
                    if (input === void 0) { input = []; }
                    var _this = _super.call(this, ALL_TOKENS, { outputCst: false }) || this;
                    _this.topRule = _this.RULE("topRule", function (param) {
                        var times = 0;
                        function gateFunc() {
                            // got to enter at least once...
                            if (times === 0) {
                                times++;
                                return true;
                            }
                            else {
                                return param;
                            }
                        }
                        var result = "";
                        _this.AT_LEAST_ONE({
                            GATE: gateFunc,
                            DEF: function () {
                                result += _this.CONSUME1(A).image;
                            }
                        });
                        result += _this.CONSUME1(B).image;
                        return result;
                    });
                    _this.input = input;
                    _this.performSelfAnalysis();
                    return _this;
                }
                return PredicateWithRuleAtLeastOneParser;
            }(parser_traits_1.Parser));
            var gateOpenInputB = new PredicateWithRuleAtLeastOneParser([
                matchers_1.createRegularToken(A, "a"),
                matchers_1.createRegularToken(B, "b")
            ]).topRule(1, [false]);
            expect(gateOpenInputB).to.equal("ab");
            // if the predicate function still kept a reference via a closure to the original param this will not work.
            // because the <() => param> in the AT_LEAST_ONE will ALWAYS return false (the original param)
            var gateOpenInputA = new PredicateWithRuleAtLeastOneParser([
                matchers_1.createRegularToken(A, "a"),
                matchers_1.createRegularToken(A, "a"),
                matchers_1.createRegularToken(A, "a"),
                matchers_1.createRegularToken(B, "b")
            ]).topRule(1, [true]);
            expect(gateOpenInputA).to.equal("aaab");
        });
    });
});
//# sourceMappingURL=predicate_spec.js.map

/***/ }),
/* 79 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var parser_traits_1 = __webpack_require__(5);
var matchers_1 = __webpack_require__(3);
var tokens_1 = __webpack_require__(6);
describe("The Recognizer's capabilities for detecting infinite loops", function () {
    var PlusTok = /** @class */ (function () {
        function PlusTok() {
        }
        PlusTok.PATTERN = /\+/;
        return PlusTok;
    }());
    tokens_1.augmentTokenTypes([PlusTok]);
    it("Will detect an infinite loop with an early return", function () {
        var InifiniteLoopParser = /** @class */ (function (_super) {
            __extends(InifiniteLoopParser, _super);
            function InifiniteLoopParser(input) {
                if (input === void 0) { input = []; }
                var _this = _super.call(this, [PlusTok]) || this;
                _this.loop = _this.RULE("loop", function () {
                    _this.MANY(function () {
                        return;
                        // noinspection UnreachableCodeJS
                        _this.CONSUME(PlusTok);
                    });
                });
                _this.input = input;
                _this.performSelfAnalysis();
                return _this;
            }
            return InifiniteLoopParser;
        }(parser_traits_1.Parser));
        var parser = new InifiniteLoopParser();
        parser.input = [matchers_1.createRegularToken(PlusTok)];
        expect(function () { return parser.loop(); }).to.throw("Infinite loop detected");
    });
});
//# sourceMappingURL=infinite_loop_spec.js.map

/***/ }),
/* 80 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var parser_traits_1 = __webpack_require__(5);
var tokens_public_1 = __webpack_require__(1);
describe("The Recognizer's Configuration", function () {
    it("default config values - empty config", function () {
        var A = tokens_public_1.createToken({ name: "A" });
        var EmptyConfigParser = /** @class */ (function (_super) {
            __extends(EmptyConfigParser, _super);
            function EmptyConfigParser() {
                return _super.call(this, [A], {}) || this;
            }
            return EmptyConfigParser;
        }(parser_traits_1.Parser));
        var parser = new EmptyConfigParser();
        expect(parser.recoveryEnabled).to.be.false;
        expect(parser.maxLookahead).to.equal(4);
    });
    it("default config values - no config", function () {
        var A = tokens_public_1.createToken({ name: "A" });
        var NoConfigParser = /** @class */ (function (_super) {
            __extends(NoConfigParser, _super);
            function NoConfigParser() {
                return _super.call(this, [A]) || this;
            }
            return NoConfigParser;
        }(parser_traits_1.Parser));
        var parser = new NoConfigParser();
        expect(parser.recoveryEnabled).to.be.false;
        expect(parser.maxLookahead).to.equal(4);
    });
});
//# sourceMappingURL=recognizer_config_spec.js.map

/***/ }),
/* 81 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var parser_traits_1 = __webpack_require__(5);
var matchers_1 = __webpack_require__(3);
var tokens_1 = __webpack_require__(6);
describe("The Recognizer's capabilities for overriding grammar productions", function () {
    var PlusTok = /** @class */ (function () {
        function PlusTok() {
        }
        PlusTok.PATTERN = /\+/;
        return PlusTok;
    }());
    var MinusTok = /** @class */ (function () {
        function MinusTok() {
        }
        MinusTok.PATTERN = /-/;
        return MinusTok;
    }());
    tokens_1.augmentTokenTypes([PlusTok, MinusTok]);
    it("Can override an existing rule", function () {
        var SuperOverrideParser = /** @class */ (function (_super) {
            __extends(SuperOverrideParser, _super);
            function SuperOverrideParser(input, isInvokedByChildConstructor) {
                if (input === void 0) { input = []; }
                if (isInvokedByChildConstructor === void 0) { isInvokedByChildConstructor = false; }
                var _this = _super.call(this, [PlusTok, MinusTok], { outputCst: false }) || this;
                _this.topRule = _this.RULE("topRule", function () {
                    var result;
                    _this.OPTION(function () {
                        result = _this.SUBRULE(_this.nestedRule);
                    });
                    return result;
                });
                _this.nestedRule = _this.RULE("nestedRule", function () {
                    _this.CONSUME(PlusTok);
                    return "yey";
                });
                _this.input = input;
                // performSelfAnalysis should only be invoked once.
                if (!isInvokedByChildConstructor) {
                    _this.performSelfAnalysis();
                }
                return _this;
            }
            return SuperOverrideParser;
        }(parser_traits_1.Parser));
        var ChildOverrideParser = /** @class */ (function (_super) {
            __extends(ChildOverrideParser, _super);
            function ChildOverrideParser(input) {
                if (input === void 0) { input = []; }
                var _this = _super.call(this, input, true) || this;
                // nestedRule is overridden with a new implementation
                _this.nestedRule = _this.OVERRIDE_RULE("nestedRule", function () {
                    _this.AT_LEAST_ONE(function () {
                        _this.CONSUME(MinusTok);
                    });
                    return "ney";
                });
                _this.performSelfAnalysis();
                return _this;
            }
            return ChildOverrideParser;
        }(SuperOverrideParser));
        var superParser = new SuperOverrideParser([matchers_1.createRegularToken(PlusTok)]);
        var superResult = superParser.topRule();
        expect(superResult).to.equal("yey");
        expect(superParser.errors).to.be.empty;
        var childParser = new ChildOverrideParser([
            matchers_1.createRegularToken(MinusTok),
            matchers_1.createRegularToken(MinusTok),
            matchers_1.createRegularToken(MinusTok)
        ]);
        var childResult = childParser.topRule();
        expect(childResult).to.equal("ney");
        expect(superParser.errors).to.be.empty;
    });
    it("Can not override a rule which does not exist", function () {
        var InvalidOverrideParser = /** @class */ (function (_super) {
            __extends(InvalidOverrideParser, _super);
            function InvalidOverrideParser(input) {
                if (input === void 0) { input = []; }
                var _this = _super.call(this, [PlusTok, MinusTok]) || this;
                // nothing to override, oops does not exist in any of the super grammars
                _this.oops = _this.OVERRIDE_RULE("oops", function () {
                    _this.CONSUME(PlusTok);
                    return "poof";
                }, { recoveryValueFunc: function () { return "boom"; } });
                _this.performSelfAnalysis();
                return _this;
            }
            return InvalidOverrideParser;
        }(parser_traits_1.Parser));
        expect(function () { return new InvalidOverrideParser([]); }).to.throw("Parser Definition Errors detected");
        expect(function () { return new InvalidOverrideParser([]); }).to.throw("Invalid rule override");
        expect(function () { return new InvalidOverrideParser([]); }).to.throw("->oops<-");
    });
});
//# sourceMappingURL=rules_override_spec.js.map

/***/ }),
/* 82 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var tokens_public_1 = __webpack_require__(1);
var parser_traits_1 = __webpack_require__(5);
var matchers_1 = __webpack_require__(3);
var utils_1 = __webpack_require__(0);
describe("lookahead Regular Tokens Mode", function () {
    var OneTok = tokens_public_1.createToken({ name: "OneTok" });
    var TwoTok = tokens_public_1.createToken({ name: "TwoTok" });
    var ThreeTok = tokens_public_1.createToken({ name: "ThreeTok" });
    var FourTok = tokens_public_1.createToken({ name: "FourTok" });
    var FiveTok = tokens_public_1.createToken({ name: "FiveTok" });
    var SixTok = tokens_public_1.createToken({ name: "SixTok" });
    var SevenTok = tokens_public_1.createToken({ name: "SevenTok" });
    var EightTok = tokens_public_1.createToken({ name: "EightTok" });
    var NineTok = tokens_public_1.createToken({ name: "NineTok" });
    var Comma = tokens_public_1.createToken({ name: "Comma" });
    var ALL_TOKENS = [
        OneTok,
        TwoTok,
        ThreeTok,
        FourTok,
        FiveTok,
        SixTok,
        SevenTok,
        EightTok,
        NineTok,
        Comma
    ];
    describe("The implicit lookahead calculation functionality of the Recognizer For OPTION", function () {
        var OptionsImplicitLookAheadParser = /** @class */ (function (_super) {
            __extends(OptionsImplicitLookAheadParser, _super);
            function OptionsImplicitLookAheadParser(input) {
                if (input === void 0) { input = []; }
                var _this = _super.call(this, ALL_TOKENS, { outputCst: false }) || this;
                _this.manyOptionsRule = _this.RULE("manyOptionsRule", _this.parseManyOptionsRule);
                _this.input = input;
                _this.performSelfAnalysis();
                return _this;
            }
            OptionsImplicitLookAheadParser.prototype.getLookAheadCacheSize = function () {
                if (utils_1.isES2015MapSupported()) {
                    // @ts-ignore
                    return this.lookAheadFuncsCache.size;
                }
                else {
                    // @ts-ignore
                    return Object.keys(this.lookAheadFuncsCache).length;
                }
            };
            OptionsImplicitLookAheadParser.prototype.parseManyOptionsRule = function () {
                var _this = this;
                var total = "";
                this.OPTION8(function () {
                    _this.CONSUME1(OneTok);
                    total += "1";
                });
                this.OPTION9(function () {
                    _this.CONSUME1(TwoTok);
                    total += "2";
                });
                this.OPTION3(function () {
                    _this.CONSUME1(ThreeTok);
                    total += "3";
                });
                this.OPTION4(function () {
                    _this.CONSUME1(FourTok);
                    total += "4";
                });
                this.OPTION5(function () {
                    _this.CONSUME1(FiveTok);
                    total += "5";
                });
                return total;
            };
            return OptionsImplicitLookAheadParser;
        }(parser_traits_1.Parser));
        it("will cache the generatedLookAhead functions BEFORE (check cache is clean)", function () {
            var parser = new OptionsImplicitLookAheadParser([]);
            expect(parser.getLookAheadCacheSize()).to.equal(0);
        });
        it("can automatically compute lookahead for OPTION1", function () {
            var input = [matchers_1.createRegularToken(OneTok)];
            var parser = new OptionsImplicitLookAheadParser(input);
            expect(parser.manyOptionsRule()).to.equal("1");
        });
        it("can automatically compute lookahead for OPTION2", function () {
            var input = [matchers_1.createRegularToken(TwoTok)];
            var parser = new OptionsImplicitLookAheadParser(input);
            expect(parser.manyOptionsRule()).to.equal("2");
        });
        it("can automatically compute lookahead for OPTION3", function () {
            var input = [matchers_1.createRegularToken(ThreeTok)];
            var parser = new OptionsImplicitLookAheadParser(input);
            expect(parser.manyOptionsRule()).to.equal("3");
        });
        it("can automatically compute lookahead for OPTION4", function () {
            var input = [matchers_1.createRegularToken(FourTok)];
            var parser = new OptionsImplicitLookAheadParser(input);
            expect(parser.manyOptionsRule()).to.equal("4");
        });
        it("can automatically compute lookahead for OPTION5", function () {
            var input = [matchers_1.createRegularToken(FiveTok)];
            var parser = new OptionsImplicitLookAheadParser(input);
            expect(parser.manyOptionsRule()).to.equal("5");
        });
    });
    describe("The implicit lookahead calculation functionality of the Recognizer For MANY", function () {
        var ManyImplicitLookAheadParser = /** @class */ (function (_super) {
            __extends(ManyImplicitLookAheadParser, _super);
            function ManyImplicitLookAheadParser(input) {
                if (input === void 0) { input = []; }
                var _this = _super.call(this, ALL_TOKENS, { outputCst: false }) || this;
                _this.manyRule = _this.RULE("manyRule", _this.parseManyRule);
                _this.input = input;
                _this.performSelfAnalysis();
                return _this;
            }
            ManyImplicitLookAheadParser.prototype.getLookAheadCacheSize = function () {
                if (utils_1.isES2015MapSupported()) {
                    // @ts-ignore
                    return this.lookAheadFuncsCache.size;
                }
                else {
                    // @ts-ignore
                    return Object.keys(this.lookAheadFuncsCache).length;
                }
            };
            ManyImplicitLookAheadParser.prototype.parseManyRule = function () {
                var _this = this;
                var total = "";
                this.MANY1(function () {
                    _this.CONSUME1(OneTok);
                    total += "1";
                });
                this.MANY2(function () {
                    _this.CONSUME1(TwoTok);
                    total += "2";
                });
                this.MANY3(function () {
                    _this.CONSUME1(ThreeTok);
                    total += "3";
                });
                this.MANY4(function () {
                    _this.CONSUME1(FourTok);
                    total += "4";
                });
                this.MANY5(function () {
                    _this.CONSUME1(FiveTok);
                    total += "5";
                });
                this.MANY6(function () {
                    _this.CONSUME1(SixTok);
                    total += "6";
                });
                this.MANY7(function () {
                    _this.CONSUME1(SevenTok);
                    total += "7";
                });
                this.MANY8(function () {
                    _this.CONSUME1(EightTok);
                    total += "8";
                });
                this.MANY9(function () {
                    _this.CONSUME1(NineTok);
                    total += "9";
                });
                return total;
            };
            return ManyImplicitLookAheadParser;
        }(parser_traits_1.Parser));
        it("will cache the generatedLookAhead functions BEFORE (check cache is clean)", function () {
            var parser = new ManyImplicitLookAheadParser();
            expect(parser.getLookAheadCacheSize()).to.equal(0);
        });
        it("can automatically compute lookahead for MANY1", function () {
            var input = [matchers_1.createRegularToken(OneTok)];
            var parser = new ManyImplicitLookAheadParser(input);
            expect(parser.manyRule()).to.equal("1");
        });
        it("can automatically compute lookahead for MANY2", function () {
            var input = [matchers_1.createRegularToken(TwoTok)];
            var parser = new ManyImplicitLookAheadParser(input);
            expect(parser.manyRule()).to.equal("2");
        });
        it("can automatically compute lookahead for MANY3", function () {
            var input = [matchers_1.createRegularToken(ThreeTok)];
            var parser = new ManyImplicitLookAheadParser(input);
            expect(parser.manyRule()).to.equal("3");
        });
        it("can automatically compute lookahead for MANY4", function () {
            var input = [matchers_1.createRegularToken(FourTok)];
            var parser = new ManyImplicitLookAheadParser(input);
            expect(parser.manyRule()).to.equal("4");
        });
        it("can automatically compute lookahead for MANY5", function () {
            var input = [matchers_1.createRegularToken(FiveTok)];
            var parser = new ManyImplicitLookAheadParser(input);
            expect(parser.manyRule()).to.equal("5");
        });
        it("can automatically compute lookahead for MANY6", function () {
            var input = [matchers_1.createRegularToken(SixTok)];
            var parser = new ManyImplicitLookAheadParser(input);
            expect(parser.manyRule()).to.equal("6");
        });
        it("can automatically compute lookahead for MANY7", function () {
            var input = [matchers_1.createRegularToken(SevenTok)];
            var parser = new ManyImplicitLookAheadParser(input);
            expect(parser.manyRule()).to.equal("7");
        });
        it("can automatically compute lookahead for MANY8", function () {
            var input = [matchers_1.createRegularToken(EightTok)];
            var parser = new ManyImplicitLookAheadParser(input);
            expect(parser.manyRule()).to.equal("8");
        });
        it("can automatically compute lookahead for MANY9", function () {
            var input = [matchers_1.createRegularToken(NineTok)];
            var parser = new ManyImplicitLookAheadParser(input);
            expect(parser.manyRule()).to.equal("9");
        });
        it("can accept lookahead function param for flow mixing several MANYs", function () {
            var input = [
                matchers_1.createRegularToken(OneTok),
                matchers_1.createRegularToken(OneTok),
                matchers_1.createRegularToken(ThreeTok),
                matchers_1.createRegularToken(ThreeTok),
                matchers_1.createRegularToken(ThreeTok),
                matchers_1.createRegularToken(FiveTok)
            ];
            var parser = new ManyImplicitLookAheadParser(input);
            expect(parser.manyRule()).to.equal("113335");
        });
    });
    describe("The implicit lookahead calculation functionality of the Recognizer For MANY_SEP", function () {
        var ManySepImplicitLookAheadParser = /** @class */ (function (_super) {
            __extends(ManySepImplicitLookAheadParser, _super);
            function ManySepImplicitLookAheadParser(input) {
                if (input === void 0) { input = []; }
                var _this = _super.call(this, ALL_TOKENS, { outputCst: false }) || this;
                _this.manySepRule = _this.RULE("manySepRule", _this.parseManyRule);
                _this.input = input;
                _this.performSelfAnalysis();
                return _this;
            }
            ManySepImplicitLookAheadParser.prototype.getLookAheadCacheSize = function () {
                if (utils_1.isES2015MapSupported()) {
                    // @ts-ignore
                    return this.lookAheadFuncsCache.size;
                }
                else {
                    // @ts-ignore
                    return Object.keys(this.lookAheadFuncsCache).length;
                }
            };
            ManySepImplicitLookAheadParser.prototype.parseManyRule = function () {
                var _this = this;
                var total = "";
                var separators = [];
                this.MANY_SEP1({
                    SEP: Comma,
                    DEF: function () {
                        _this.CONSUME1(OneTok);
                        total += "1";
                    }
                });
                this.MANY_SEP2({
                    SEP: Comma,
                    DEF: function () {
                        _this.CONSUME1(TwoTok);
                        total += "2";
                    }
                });
                this.MANY_SEP3({
                    SEP: Comma,
                    DEF: function () {
                        _this.CONSUME1(ThreeTok);
                        total += "3";
                    }
                });
                this.MANY_SEP4({
                    SEP: Comma,
                    DEF: function () {
                        _this.CONSUME1(FourTok);
                        total += "4";
                    }
                });
                this.MANY_SEP5({
                    SEP: Comma,
                    DEF: function () {
                        _this.CONSUME1(FiveTok);
                        total += "5";
                    }
                });
                this.MANY_SEP6({
                    SEP: Comma,
                    DEF: function () {
                        _this.CONSUME1(SixTok);
                        total += "6";
                    }
                });
                this.MANY_SEP7({
                    SEP: Comma,
                    DEF: function () {
                        _this.CONSUME1(SevenTok);
                        total += "7";
                    }
                });
                this.MANY_SEP8({
                    SEP: Comma,
                    DEF: function () {
                        _this.CONSUME1(EightTok);
                        total += "8";
                    }
                });
                this.MANY_SEP9({
                    SEP: Comma,
                    DEF: function () {
                        _this.CONSUME1(NineTok);
                        total += "9";
                    }
                });
                return {
                    total: total,
                    separators: separators
                };
            };
            return ManySepImplicitLookAheadParser;
        }(parser_traits_1.Parser));
        it("will cache the generatedLookAhead functions BEFORE (check cache is clean)", function () {
            var parser = new ManySepImplicitLookAheadParser();
            expect(parser.getLookAheadCacheSize()).to.equal(0);
        });
        it("can automatically compute lookahead for MANY_SEP1", function () {
            var input = [matchers_1.createRegularToken(OneTok)];
            var parser = new ManySepImplicitLookAheadParser(input);
            expect(parser.manySepRule().total).to.equal("1");
        });
        it("can automatically compute lookahead for MANY_SEP2", function () {
            var input = [matchers_1.createRegularToken(TwoTok)];
            var parser = new ManySepImplicitLookAheadParser(input);
            expect(parser.manySepRule().total).to.equal("2");
        });
        it("can automatically compute lookahead for MANY_SEP3", function () {
            var input = [matchers_1.createRegularToken(ThreeTok)];
            var parser = new ManySepImplicitLookAheadParser(input);
            expect(parser.manySepRule().total).to.equal("3");
        });
        it("can automatically compute lookahead for MANY_SEP4", function () {
            var input = [matchers_1.createRegularToken(FourTok)];
            var parser = new ManySepImplicitLookAheadParser(input);
            expect(parser.manySepRule().total).to.equal("4");
        });
        it("can automatically compute lookahead for MANY_SEP5", function () {
            var input = [matchers_1.createRegularToken(FiveTok)];
            var parser = new ManySepImplicitLookAheadParser(input);
            expect(parser.manySepRule().total).to.equal("5");
        });
        it("can automatically compute lookahead for MANY_SEP6", function () {
            var input = [matchers_1.createRegularToken(SixTok)];
            var parser = new ManySepImplicitLookAheadParser(input);
            expect(parser.manySepRule().total).to.equal("6");
        });
        it("can automatically compute lookahead for MANY_SEP7", function () {
            var input = [matchers_1.createRegularToken(SevenTok)];
            var parser = new ManySepImplicitLookAheadParser(input);
            expect(parser.manySepRule().total).to.equal("7");
        });
        it("can automatically compute lookahead for MANY_SEP8", function () {
            var input = [matchers_1.createRegularToken(EightTok)];
            var parser = new ManySepImplicitLookAheadParser(input);
            expect(parser.manySepRule().total).to.equal("8");
        });
        it("can automatically compute lookahead for MANY_SEP9", function () {
            var input = [matchers_1.createRegularToken(NineTok)];
            var parser = new ManySepImplicitLookAheadParser(input);
            expect(parser.manySepRule().total).to.equal("9");
        });
        it("can accept lookahead function param for flow mixing several MANY_SEPs", function () {
            var input = [
                matchers_1.createRegularToken(OneTok),
                matchers_1.createRegularToken(Comma),
                matchers_1.createRegularToken(OneTok),
                matchers_1.createRegularToken(ThreeTok),
                matchers_1.createRegularToken(Comma),
                matchers_1.createRegularToken(ThreeTok),
                matchers_1.createRegularToken(Comma),
                matchers_1.createRegularToken(ThreeTok),
                matchers_1.createRegularToken(FiveTok)
            ];
            var parser = new ManySepImplicitLookAheadParser(input);
            var result = parser.manySepRule();
            expect(result.total).to.equal("113335");
        });
    });
    describe("The implicit lookahead calculation functionality of the Recognizer For AT_LEAST_ONE", function () {
        var AtLeastOneImplicitLookAheadParser = /** @class */ (function (_super) {
            __extends(AtLeastOneImplicitLookAheadParser, _super);
            function AtLeastOneImplicitLookAheadParser(input) {
                if (input === void 0) { input = []; }
                var _this = _super.call(this, ALL_TOKENS, { outputCst: false }) || this;
                _this.atLeastOneRule = _this.RULE("atLeastOneRule", _this.parseAtLeastOneRule, {
                    recoveryValueFunc: function () {
                        return "-666";
                    }
                });
                _this.input = input;
                _this.performSelfAnalysis();
                return _this;
            }
            AtLeastOneImplicitLookAheadParser.prototype.getLookAheadCacheSize = function () {
                if (utils_1.isES2015MapSupported()) {
                    // @ts-ignore
                    return this.lookAheadFuncsCache.size;
                }
                else {
                    // @ts-ignore
                    return Object.keys(this.lookAheadFuncsCache).length;
                }
            };
            AtLeastOneImplicitLookAheadParser.prototype.parseAtLeastOneRule = function () {
                var _this = this;
                var total = "";
                this.AT_LEAST_ONE1(function () {
                    _this.CONSUME1(OneTok);
                    total += "1";
                });
                this.AT_LEAST_ONE2(function () {
                    _this.CONSUME1(TwoTok);
                    total += "2";
                });
                this.AT_LEAST_ONE3(function () {
                    _this.CONSUME1(ThreeTok);
                    total += "3";
                });
                this.AT_LEAST_ONE4(function () {
                    _this.CONSUME1(FourTok);
                    total += "4";
                });
                this.AT_LEAST_ONE5(function () {
                    _this.CONSUME1(FiveTok);
                    total += "5";
                });
                this.AT_LEAST_ONE6(function () {
                    _this.CONSUME1(SixTok);
                    total += "6";
                });
                this.AT_LEAST_ONE7(function () {
                    _this.CONSUME1(SevenTok);
                    total += "7";
                });
                this.AT_LEAST_ONE8(function () {
                    _this.CONSUME1(EightTok);
                    total += "8";
                });
                this.AT_LEAST_ONE9(function () {
                    _this.CONSUME1(NineTok);
                    total += "9";
                });
                return total;
            };
            return AtLeastOneImplicitLookAheadParser;
        }(parser_traits_1.Parser));
        it("will cache the generatedLookAhead functions BEFORE (check cache is clean)", function () {
            var parser = new AtLeastOneImplicitLookAheadParser();
            expect(parser.getLookAheadCacheSize()).to.equal(0);
        });
        it("can accept lookahead function param for AT_LEAST_ONE", function () {
            var input = [
                matchers_1.createRegularToken(OneTok),
                matchers_1.createRegularToken(TwoTok),
                matchers_1.createRegularToken(TwoTok),
                matchers_1.createRegularToken(ThreeTok),
                matchers_1.createRegularToken(FourTok),
                matchers_1.createRegularToken(FourTok),
                matchers_1.createRegularToken(FiveTok),
                matchers_1.createRegularToken(SixTok),
                matchers_1.createRegularToken(SevenTok),
                matchers_1.createRegularToken(EightTok),
                matchers_1.createRegularToken(EightTok),
                matchers_1.createRegularToken(EightTok),
                matchers_1.createRegularToken(NineTok)
            ];
            var parser = new AtLeastOneImplicitLookAheadParser(input);
            expect(parser.atLeastOneRule()).to.equal("1223445678889");
        });
        it("will fail when zero occurrences of AT_LEAST_ONE in input", function () {
            var input = [
                matchers_1.createRegularToken(OneTok),
                matchers_1.createRegularToken(TwoTok) /*createToken(ThreeTok),*/,
                matchers_1.createRegularToken(FourTok),
                matchers_1.createRegularToken(FiveTok)
            ];
            var parser = new AtLeastOneImplicitLookAheadParser(input);
            expect(parser.atLeastOneRule()).to.equal("-666");
        });
    });
    describe("The implicit lookahead calculation functionality of the Recognizer For AT_LEAST_ONE_SEP", function () {
        var AtLeastOneSepImplicitLookAheadParser = /** @class */ (function (_super) {
            __extends(AtLeastOneSepImplicitLookAheadParser, _super);
            function AtLeastOneSepImplicitLookAheadParser(input) {
                if (input === void 0) { input = []; }
                var _this = _super.call(this, ALL_TOKENS, { outputCst: false }) || this;
                _this.atLeastOneSepRule = _this.RULE("atLeastOneSepRule", _this.parseAtLeastOneRule, {
                    recoveryValueFunc: function () {
                        return {
                            total: "-666",
                            separators: []
                        };
                    }
                });
                _this.input = input;
                _this.performSelfAnalysis();
                return _this;
            }
            AtLeastOneSepImplicitLookAheadParser.prototype.getLookAheadCacheSize = function () {
                if (utils_1.isES2015MapSupported()) {
                    // @ts-ignore
                    return this.lookAheadFuncsCache.size;
                }
                else {
                    // @ts-ignore
                    return Object.keys(this.lookAheadFuncsCache).length;
                }
            };
            AtLeastOneSepImplicitLookAheadParser.prototype.parseAtLeastOneRule = function () {
                var _this = this;
                var total = "";
                var separators = [];
                this.AT_LEAST_ONE_SEP1({
                    SEP: Comma,
                    DEF: function () {
                        _this.CONSUME1(OneTok);
                        total += "1";
                    }
                });
                this.AT_LEAST_ONE_SEP2({
                    SEP: Comma,
                    DEF: function () {
                        _this.CONSUME1(TwoTok);
                        total += "2";
                    }
                });
                this.AT_LEAST_ONE_SEP3({
                    SEP: Comma,
                    DEF: function () {
                        _this.CONSUME1(ThreeTok);
                        total += "3";
                    }
                });
                this.AT_LEAST_ONE_SEP4({
                    SEP: Comma,
                    DEF: function () {
                        _this.CONSUME1(FourTok);
                        total += "4";
                    }
                });
                this.AT_LEAST_ONE_SEP5({
                    SEP: Comma,
                    DEF: function () {
                        _this.CONSUME1(FiveTok);
                        total += "5";
                    }
                });
                this.AT_LEAST_ONE_SEP6({
                    SEP: Comma,
                    DEF: function () {
                        _this.CONSUME1(SixTok);
                        total += "6";
                    }
                });
                this.AT_LEAST_ONE_SEP7({
                    SEP: Comma,
                    DEF: function () {
                        _this.CONSUME1(SevenTok);
                        total += "7";
                    }
                });
                this.AT_LEAST_ONE_SEP8({
                    SEP: Comma,
                    DEF: function () {
                        _this.CONSUME1(EightTok);
                        total += "8";
                    }
                });
                this.AT_LEAST_ONE_SEP9({
                    SEP: Comma,
                    DEF: function () {
                        _this.CONSUME1(NineTok);
                        total += "9";
                    }
                });
                return {
                    total: total,
                    separators: separators
                };
            };
            return AtLeastOneSepImplicitLookAheadParser;
        }(parser_traits_1.Parser));
        it("will cache the generatedLookAhead functions BEFORE (check cache is clean)", function () {
            var parser = new AtLeastOneSepImplicitLookAheadParser();
            expect(parser.getLookAheadCacheSize()).to.equal(0);
        });
        it("can accept lookahead function param for AT_LEAST_ONE_SEP", function () {
            var input = [
                matchers_1.createRegularToken(OneTok),
                matchers_1.createRegularToken(TwoTok),
                matchers_1.createRegularToken(Comma),
                matchers_1.createRegularToken(TwoTok),
                matchers_1.createRegularToken(ThreeTok),
                matchers_1.createRegularToken(FourTok),
                matchers_1.createRegularToken(Comma),
                matchers_1.createRegularToken(FourTok),
                matchers_1.createRegularToken(FiveTok),
                matchers_1.createRegularToken(SixTok),
                matchers_1.createRegularToken(SevenTok),
                matchers_1.createRegularToken(Comma),
                matchers_1.createRegularToken(SevenTok),
                matchers_1.createRegularToken(Comma),
                matchers_1.createRegularToken(SevenTok),
                matchers_1.createRegularToken(EightTok),
                matchers_1.createRegularToken(NineTok)
            ];
            var parser = new AtLeastOneSepImplicitLookAheadParser(input);
            var parseResult = parser.atLeastOneSepRule();
            expect(parseResult.total).to.equal("1223445677789");
        });
        it("will fail when zero occurrences of AT_LEAST_ONE_SEP in input", function () {
            var input = [
                matchers_1.createRegularToken(OneTok),
                matchers_1.createRegularToken(TwoTok),
                /*createToken(ThreeTok),*/ matchers_1.createRegularToken(FourTok),
                matchers_1.createRegularToken(FiveTok)
            ];
            var parser = new AtLeastOneSepImplicitLookAheadParser(input);
            expect(parser.atLeastOneSepRule().total).to.equal("-666");
        });
    });
    describe("The implicit lookahead calculation functionality of the Recognizer For OR", function () {
        var OrImplicitLookAheadParser = /** @class */ (function (_super) {
            __extends(OrImplicitLookAheadParser, _super);
            function OrImplicitLookAheadParser(input) {
                if (input === void 0) { input = []; }
                var _this = _super.call(this, ALL_TOKENS, { outputCst: false }) || this;
                _this.orRule = _this.RULE("orRule", _this.parseOrRule, {
                    recoveryValueFunc: function () { return "-666"; }
                });
                _this.input = input;
                _this.performSelfAnalysis();
                return _this;
            }
            OrImplicitLookAheadParser.prototype.getLookAheadCacheSize = function () {
                if (utils_1.isES2015MapSupported()) {
                    // @ts-ignore
                    return this.lookAheadFuncsCache.size;
                }
                else {
                    // @ts-ignore
                    return Object.keys(this.lookAheadFuncsCache).length;
                }
            };
            OrImplicitLookAheadParser.prototype.parseOrRule = function () {
                var _this = this;
                var total = "";
                this.OR8([
                    {
                        ALT: function () {
                            _this.CONSUME1(OneTok);
                            total += "A1";
                        }
                    },
                    {
                        ALT: function () {
                            _this.CONSUME1(TwoTok);
                            total += "A2";
                        }
                    },
                    {
                        ALT: function () {
                            _this.CONSUME1(ThreeTok);
                            total += "A3";
                        }
                    },
                    {
                        ALT: function () {
                            _this.CONSUME1(FourTok);
                            total += "A4";
                        }
                    },
                    {
                        ALT: function () {
                            _this.CONSUME1(FiveTok);
                            total += "A5";
                        }
                    }
                ]);
                this.OR2([
                    {
                        ALT: function () {
                            _this.CONSUME2(OneTok);
                            total += "B1";
                        }
                    },
                    {
                        ALT: function () {
                            _this.CONSUME2(FourTok);
                            total += "B4";
                        }
                    },
                    {
                        ALT: function () {
                            _this.CONSUME2(ThreeTok);
                            total += "B3";
                        }
                    },
                    {
                        ALT: function () {
                            _this.CONSUME2(TwoTok);
                            total += "B2";
                        }
                    },
                    {
                        ALT: function () {
                            _this.CONSUME2(FiveTok);
                            total += "B5";
                        }
                    }
                ]);
                this.OR3([
                    {
                        ALT: function () {
                            _this.CONSUME3(TwoTok);
                            total += "C2";
                        }
                    },
                    {
                        ALT: function () {
                            _this.CONSUME3(FourTok);
                            total += "C4";
                        }
                    },
                    {
                        ALT: function () {
                            _this.CONSUME3(ThreeTok);
                            total += "C3";
                        }
                    },
                    {
                        ALT: function () {
                            _this.CONSUME3(FiveTok);
                            total += "C5";
                        }
                    },
                    {
                        ALT: function () {
                            _this.CONSUME3(OneTok);
                            total += "C1";
                        }
                    }
                ]);
                this.OR4([
                    {
                        ALT: function () {
                            _this.CONSUME4(OneTok);
                            total += "D1";
                        }
                    },
                    {
                        ALT: function () {
                            _this.CONSUME4(ThreeTok);
                            total += "D3";
                        }
                    },
                    {
                        ALT: function () {
                            _this.CONSUME4(FourTok);
                            total += "D4";
                        }
                    },
                    {
                        ALT: function () {
                            _this.CONSUME4(TwoTok);
                            total += "D2";
                        }
                    },
                    {
                        ALT: function () {
                            _this.CONSUME4(FiveTok);
                            total += "D5";
                        }
                    }
                ]);
                this.OR5([
                    {
                        ALT: function () {
                            _this.CONSUME5(TwoTok);
                            total += "E2";
                        }
                    },
                    {
                        ALT: function () {
                            _this.CONSUME5(OneTok);
                            total += "E1";
                        }
                    },
                    {
                        ALT: function () {
                            _this.CONSUME5(FourTok);
                            total += "E4";
                        }
                    },
                    {
                        ALT: function () {
                            _this.CONSUME5(ThreeTok);
                            total += "E3";
                        }
                    },
                    {
                        ALT: function () {
                            _this.CONSUME5(FiveTok);
                            total += "E5";
                        }
                    }
                ]);
                return total;
            };
            return OrImplicitLookAheadParser;
        }(parser_traits_1.Parser));
        it("will cache the generatedLookAhead functions BEFORE (check cache is clean)", function () {
            var parser = new OrImplicitLookAheadParser();
            expect(parser.getLookAheadCacheSize()).to.equal(0);
        });
        it("can compute the lookahead automatically for OR", function () {
            var input = [
                matchers_1.createRegularToken(OneTok),
                matchers_1.createRegularToken(TwoTok),
                matchers_1.createRegularToken(ThreeTok),
                matchers_1.createRegularToken(FourTok),
                matchers_1.createRegularToken(FiveTok)
            ];
            var parser = new OrImplicitLookAheadParser(input);
            expect(parser.orRule()).to.equal("A1B2C3D4E5");
        });
        it("will fail when none of the alternatives match", function () {
            var input = [matchers_1.createRegularToken(SixTok)];
            var parser = new OrImplicitLookAheadParser(input);
            expect(parser.orRule()).to.equal("-666");
        });
    });
    describe("OR production ambiguity detection when using implicit lookahead calculation", function () {
        it("will throw an error when two alternatives have the same single token (lookahead 1) prefix", function () {
            var OrAmbiguityLookAheadParser = /** @class */ (function (_super) {
                __extends(OrAmbiguityLookAheadParser, _super);
                function OrAmbiguityLookAheadParser(input) {
                    if (input === void 0) { input = []; }
                    var _this = _super.call(this, ALL_TOKENS, { outputCst: false }) || this;
                    _this.ambiguityRule = _this.RULE("ambiguityRule", _this.parseAmbiguityRule);
                    _this.input = input;
                    _this.performSelfAnalysis();
                    return _this;
                }
                OrAmbiguityLookAheadParser.prototype.parseAmbiguityRule = function () {
                    var _this = this;
                    this.OR1([
                        {
                            ALT: function () {
                                _this.CONSUME1(OneTok);
                            }
                        },
                        // <-- this alternative starts with the same token as the previous one, ambiguity!
                        {
                            ALT: function () {
                                _this.CONSUME2(OneTok);
                            }
                        },
                        {
                            ALT: function () {
                                _this.CONSUME2(TwoTok);
                            }
                        },
                        {
                            ALT: function () {
                                _this.CONSUME2(ThreeTok);
                            }
                        }
                    ]);
                };
                return OrAmbiguityLookAheadParser;
            }(parser_traits_1.Parser));
            expect(function () { return new OrAmbiguityLookAheadParser(); }).to.throw("Ambiguous alternatives");
            expect(function () { return new OrAmbiguityLookAheadParser(); }).to.throw("OneTok");
        });
        it("will throw an error when two alternatives have the same multi token (lookahead > 1) prefix", function () {
            var OrAmbiguityMultiTokenLookAheadParser = /** @class */ (function (_super) {
                __extends(OrAmbiguityMultiTokenLookAheadParser, _super);
                function OrAmbiguityMultiTokenLookAheadParser(input) {
                    if (input === void 0) { input = []; }
                    var _this = _super.call(this, ALL_TOKENS, { outputCst: false }) || this;
                    _this.ambiguityRule = _this.RULE("ambiguityRule", _this.parseAmbiguityRule);
                    _this.input = input;
                    _this.performSelfAnalysis();
                    return _this;
                }
                OrAmbiguityMultiTokenLookAheadParser.prototype.parseAmbiguityRule = function () {
                    var _this = this;
                    this.OR1([
                        {
                            ALT: function () {
                                _this.CONSUME1(OneTok);
                            }
                        },
                        {
                            ALT: function () {
                                _this.CONSUME1(TwoTok);
                                _this.CONSUME1(ThreeTok);
                                _this.CONSUME1(FourTok);
                            }
                        },
                        {
                            ALT: function () {
                                _this.CONSUME2(TwoTok);
                                _this.CONSUME2(ThreeTok);
                                _this.CONSUME2(FourTok);
                            }
                        }
                    ]);
                };
                return OrAmbiguityMultiTokenLookAheadParser;
            }(parser_traits_1.Parser));
            expect(function () { return new OrAmbiguityMultiTokenLookAheadParser(); }).to.throw("Ambiguous alternatives");
            expect(function () { return new OrAmbiguityMultiTokenLookAheadParser(); }).to.throw("TwoTok, ThreeTok, FourTok");
        });
    });
    describe("The implicit lookahead calculation functionality of the Recognizer For OR (with IGNORE_AMBIGUITIES)", function () {
        var OrImplicitLookAheadParserIgnoreAmbiguities = /** @class */ (function (_super) {
            __extends(OrImplicitLookAheadParserIgnoreAmbiguities, _super);
            function OrImplicitLookAheadParserIgnoreAmbiguities(input) {
                if (input === void 0) { input = []; }
                var _this = _super.call(this, ALL_TOKENS, {
                    outputCst: false,
                    ignoredIssues: {
                        orRule: {
                            OR: true,
                            OR2: true,
                            OR3: true,
                            OR4: true,
                            OR5: true
                        }
                    }
                }) || this;
                _this.orRule = _this.RULE("orRule", _this.parseOrRule, {
                    recoveryValueFunc: function () { return "-666"; }
                });
                _this.input = input;
                _this.performSelfAnalysis();
                return _this;
            }
            OrImplicitLookAheadParserIgnoreAmbiguities.prototype.getLookAheadCacheSize = function () {
                if (utils_1.isES2015MapSupported()) {
                    // @ts-ignore
                    return this.lookAheadFuncsCache.size;
                }
                else {
                    // @ts-ignore
                    return Object.keys(this.lookAheadFuncsCache).length;
                }
            };
            OrImplicitLookAheadParserIgnoreAmbiguities.prototype.parseOrRule = function () {
                var _this = this;
                var total = "";
                this.OR([
                    {
                        ALT: function () {
                            _this.CONSUME1(OneTok);
                            total += "A1";
                        }
                    },
                    {
                        ALT: function () {
                            _this.CONSUME2(OneTok);
                            total += "OOPS!";
                        }
                    },
                    {
                        ALT: function () {
                            _this.CONSUME1(ThreeTok);
                            total += "A3";
                        }
                    },
                    {
                        ALT: function () {
                            _this.CONSUME1(FourTok);
                            total += "A4";
                        }
                    },
                    {
                        ALT: function () {
                            _this.CONSUME1(FiveTok);
                            total += "A5";
                        }
                    }
                ]);
                this.OR2([
                    {
                        ALT: function () {
                            _this.CONSUME2(FourTok);
                            total += "B4";
                        }
                    },
                    {
                        ALT: function () {
                            _this.CONSUME2(ThreeTok);
                            total += "B3";
                        }
                    },
                    {
                        ALT: function () {
                            _this.CONSUME2(TwoTok);
                            total += "B2";
                        }
                    },
                    {
                        ALT: function () {
                            _this.CONSUME3(TwoTok);
                            total += "OOPS!";
                        }
                    },
                    {
                        ALT: function () {
                            _this.CONSUME2(FiveTok);
                            total += "B5";
                        }
                    }
                ]);
                this.OR3([
                    {
                        ALT: function () {
                            _this.CONSUME3(FourTok);
                            total += "C4";
                        }
                    },
                    {
                        ALT: function () {
                            _this.CONSUME3(ThreeTok);
                            total += "C3";
                        }
                    },
                    {
                        ALT: function () {
                            _this.CONSUME4(ThreeTok);
                            total += "OOPS!";
                        }
                    },
                    {
                        ALT: function () {
                            _this.CONSUME3(FiveTok);
                            total += "C5";
                        }
                    },
                    {
                        ALT: function () {
                            _this.CONSUME3(OneTok);
                            total += "C1";
                        }
                    }
                ]);
                this.OR4([
                    {
                        ALT: function () {
                            _this.CONSUME4(OneTok);
                            total += "D1";
                        }
                    },
                    {
                        ALT: function () {
                            _this.CONSUME4(FourTok);
                            total += "D4";
                        }
                    },
                    {
                        ALT: function () {
                            _this.CONSUME5(FourTok);
                            total += "OOPS!";
                        }
                    },
                    {
                        ALT: function () {
                            _this.CONSUME4(TwoTok);
                            total += "D2";
                        }
                    }
                ]);
                this.OR5([
                    {
                        ALT: function () {
                            _this.CONSUME5(TwoTok);
                            total += "E2";
                        }
                    },
                    {
                        ALT: function () {
                            _this.CONSUME5(OneTok);
                            total += "E1";
                        }
                    },
                    {
                        ALT: function () {
                            _this.CONSUME4(FiveTok);
                            total += "E5";
                        }
                    },
                    {
                        ALT: function () {
                            _this.CONSUME5(ThreeTok);
                            total += "E3";
                        }
                    },
                    {
                        ALT: function () {
                            _this.CONSUME5(FiveTok);
                            total += "OOPS!";
                        }
                    }
                ]);
                return total;
            };
            return OrImplicitLookAheadParserIgnoreAmbiguities;
        }(parser_traits_1.Parser));
        it("will cache the generatedLookAhead functions BEFORE (check cache is clean)", function () {
            var parser = new OrImplicitLookAheadParserIgnoreAmbiguities();
            expect(parser.getLookAheadCacheSize()).to.equal(0);
        });
        it("can compute the lookahead automatically for OR", function () {
            var input = [
                matchers_1.createRegularToken(OneTok),
                matchers_1.createRegularToken(TwoTok),
                matchers_1.createRegularToken(ThreeTok),
                matchers_1.createRegularToken(FourTok),
                matchers_1.createRegularToken(FiveTok)
            ];
            var parser = new OrImplicitLookAheadParserIgnoreAmbiguities(input);
            expect(parser.orRule()).to.equal("A1B2C3D4E5");
        });
        it("will fail when none of the alternatives match", function () {
            var input = [matchers_1.createRegularToken(SixTok)];
            var parser = new OrImplicitLookAheadParserIgnoreAmbiguities(input);
            expect(parser.orRule()).to.equal("-666");
        });
    });
    describe("The support for MultiToken (K>1) implicit lookahead capabilities in DSL Production:", function () {
        it("OPTION", function () {
            var MultiTokenLookAheadForOptionParser = /** @class */ (function (_super) {
                __extends(MultiTokenLookAheadForOptionParser, _super);
                function MultiTokenLookAheadForOptionParser(input) {
                    if (input === void 0) { input = []; }
                    var _this = _super.call(this, ALL_TOKENS, { outputCst: false }) || this;
                    _this.rule = _this.RULE("rule", function () {
                        var result = "OPTION Not Taken";
                        _this.OPTION2(function () {
                            _this.CONSUME1(OneTok);
                            _this.CONSUME1(TwoTok);
                            _this.CONSUME1(ThreeTok);
                            result = "OPTION Taken";
                        });
                        _this.CONSUME2(OneTok);
                        _this.CONSUME2(TwoTok);
                        return result;
                    });
                    _this.input = input;
                    _this.performSelfAnalysis();
                    return _this;
                }
                return MultiTokenLookAheadForOptionParser;
            }(parser_traits_1.Parser));
            var parser = new MultiTokenLookAheadForOptionParser([
                matchers_1.createRegularToken(OneTok),
                matchers_1.createRegularToken(TwoTok)
            ]);
            expect(parser.rule()).to.equal("OPTION Not Taken");
            var parser2 = new MultiTokenLookAheadForOptionParser([
                matchers_1.createRegularToken(OneTok),
                matchers_1.createRegularToken(TwoTok),
                matchers_1.createRegularToken(ThreeTok),
                matchers_1.createRegularToken(OneTok),
                matchers_1.createRegularToken(TwoTok)
            ]);
            expect(parser2.rule()).to.equal("OPTION Taken");
        });
        it("MANY", function () {
            var MultiTokenLookAheadForManyParser = /** @class */ (function (_super) {
                __extends(MultiTokenLookAheadForManyParser, _super);
                function MultiTokenLookAheadForManyParser(input) {
                    if (input === void 0) { input = []; }
                    var _this = _super.call(this, ALL_TOKENS, { outputCst: false }) || this;
                    _this.rule = _this.RULE("orRule", function () {
                        var numOfIterations = 0;
                        _this.MANY(function () {
                            _this.CONSUME1(OneTok);
                            _this.CONSUME1(TwoTok);
                            _this.CONSUME1(ThreeTok);
                            numOfIterations++;
                        });
                        _this.CONSUME2(OneTok);
                        _this.CONSUME2(TwoTok);
                        return numOfIterations;
                    });
                    _this.input = input;
                    _this.performSelfAnalysis();
                    return _this;
                }
                return MultiTokenLookAheadForManyParser;
            }(parser_traits_1.Parser));
            var parser = new MultiTokenLookAheadForManyParser([
                matchers_1.createRegularToken(OneTok),
                matchers_1.createRegularToken(TwoTok)
            ]);
            expect(parser.rule()).to.equal(0);
            var oneIterationParser = new MultiTokenLookAheadForManyParser([
                matchers_1.createRegularToken(OneTok),
                matchers_1.createRegularToken(TwoTok),
                matchers_1.createRegularToken(ThreeTok),
                matchers_1.createRegularToken(OneTok),
                matchers_1.createRegularToken(TwoTok)
            ]);
            expect(oneIterationParser.rule()).to.equal(1);
            var twoIterationsParser = new MultiTokenLookAheadForManyParser([
                matchers_1.createRegularToken(OneTok),
                matchers_1.createRegularToken(TwoTok),
                matchers_1.createRegularToken(ThreeTok),
                matchers_1.createRegularToken(OneTok),
                matchers_1.createRegularToken(TwoTok),
                matchers_1.createRegularToken(ThreeTok),
                matchers_1.createRegularToken(OneTok),
                matchers_1.createRegularToken(TwoTok)
            ]);
            expect(twoIterationsParser.rule()).to.equal(2);
        });
        it("MANY_SEP", function () {
            var MultiTokenLookAheadForManySepParser = /** @class */ (function (_super) {
                __extends(MultiTokenLookAheadForManySepParser, _super);
                function MultiTokenLookAheadForManySepParser(input) {
                    if (input === void 0) { input = []; }
                    var _this = _super.call(this, ALL_TOKENS, { outputCst: false }) || this;
                    _this.rule = _this.RULE("orRule", function () {
                        var numOfIterations = 0;
                        _this.MANY_SEP({
                            SEP: Comma,
                            DEF: function () {
                                _this.CONSUME1(OneTok);
                                _this.CONSUME1(TwoTok);
                                _this.CONSUME1(ThreeTok);
                                numOfIterations++;
                            }
                        });
                        _this.CONSUME2(OneTok);
                        _this.CONSUME2(TwoTok);
                        return numOfIterations;
                    });
                    _this.input = input;
                    _this.performSelfAnalysis();
                    return _this;
                }
                return MultiTokenLookAheadForManySepParser;
            }(parser_traits_1.Parser));
            var parser = new MultiTokenLookAheadForManySepParser([
                matchers_1.createRegularToken(OneTok),
                matchers_1.createRegularToken(TwoTok)
            ]);
            expect(parser.rule()).to.equal(0);
            var oneIterationParser = new MultiTokenLookAheadForManySepParser([
                matchers_1.createRegularToken(OneTok),
                matchers_1.createRegularToken(TwoTok),
                matchers_1.createRegularToken(ThreeTok),
                matchers_1.createRegularToken(OneTok),
                matchers_1.createRegularToken(TwoTok)
            ]);
            expect(oneIterationParser.rule()).to.equal(1);
            var twoIterationsParser = new MultiTokenLookAheadForManySepParser([
                matchers_1.createRegularToken(OneTok),
                matchers_1.createRegularToken(TwoTok),
                matchers_1.createRegularToken(ThreeTok),
                matchers_1.createRegularToken(Comma),
                matchers_1.createRegularToken(OneTok),
                matchers_1.createRegularToken(TwoTok),
                matchers_1.createRegularToken(ThreeTok),
                matchers_1.createRegularToken(OneTok),
                matchers_1.createRegularToken(TwoTok)
            ]);
            expect(twoIterationsParser.rule()).to.equal(2);
        });
        it("OR", function () {
            var MultiTokenLookAheadForOrParser = /** @class */ (function (_super) {
                __extends(MultiTokenLookAheadForOrParser, _super);
                function MultiTokenLookAheadForOrParser(input) {
                    if (input === void 0) { input = []; }
                    var _this = _super.call(this, ALL_TOKENS, { outputCst: false }) || this;
                    _this.orRule = _this.RULE("orRule", function () {
                        return _this.OR([
                            {
                                ALT: function () {
                                    _this.CONSUME1(OneTok);
                                    _this.CONSUME2(OneTok);
                                    return "alt1 Taken";
                                }
                            },
                            {
                                ALT: function () {
                                    _this.CONSUME3(OneTok);
                                    _this.CONSUME1(TwoTok);
                                    _this.CONSUME1(ThreeTok);
                                    return "alt2 Taken";
                                }
                            },
                            {
                                ALT: function () {
                                    _this.CONSUME4(OneTok);
                                    _this.CONSUME2(TwoTok);
                                    return "alt3 Taken";
                                }
                            },
                            {
                                ALT: function () {
                                    _this.CONSUME1(FourTok);
                                    return "alt4 Taken";
                                }
                            }
                        ]);
                    });
                    _this.input = input;
                    _this.performSelfAnalysis();
                    return _this;
                }
                return MultiTokenLookAheadForOrParser;
            }(parser_traits_1.Parser));
            var alt1Parser = new MultiTokenLookAheadForOrParser([
                matchers_1.createRegularToken(OneTok),
                matchers_1.createRegularToken(OneTok)
            ]);
            expect(alt1Parser.orRule()).to.equal("alt1 Taken");
            var alt2Parser = new MultiTokenLookAheadForOrParser([
                matchers_1.createRegularToken(OneTok),
                matchers_1.createRegularToken(TwoTok),
                matchers_1.createRegularToken(ThreeTok)
            ]);
            expect(alt2Parser.orRule()).to.equal("alt2 Taken");
            var alt3Parser = new MultiTokenLookAheadForOrParser([
                matchers_1.createRegularToken(OneTok),
                matchers_1.createRegularToken(TwoTok)
            ]);
            expect(alt3Parser.orRule()).to.equal("alt3 Taken");
            var alt4Parser = new MultiTokenLookAheadForOrParser([
                matchers_1.createRegularToken(FourTok)
            ]);
            expect(alt4Parser.orRule()).to.equal("alt4 Taken");
        });
        it("AT_LEAST_ONE", function () {
            var MultiTokenLookAheadForAtLeastOneParser = /** @class */ (function (_super) {
                __extends(MultiTokenLookAheadForAtLeastOneParser, _super);
                function MultiTokenLookAheadForAtLeastOneParser(input) {
                    if (input === void 0) { input = []; }
                    var _this = _super.call(this, ALL_TOKENS, { outputCst: false }) || this;
                    _this.rule = _this.RULE("orRule", function () {
                        var numOfIterations = 0;
                        _this.AT_LEAST_ONE(function () {
                            _this.CONSUME1(OneTok);
                            _this.CONSUME1(TwoTok);
                            _this.CONSUME1(ThreeTok);
                            numOfIterations++;
                        });
                        _this.CONSUME2(OneTok);
                        _this.CONSUME2(TwoTok);
                        return numOfIterations;
                    });
                    _this.input = input;
                    _this.performSelfAnalysis();
                    return _this;
                }
                return MultiTokenLookAheadForAtLeastOneParser;
            }(parser_traits_1.Parser));
            var oneIterationParser = new MultiTokenLookAheadForAtLeastOneParser([
                matchers_1.createRegularToken(OneTok),
                matchers_1.createRegularToken(TwoTok),
                matchers_1.createRegularToken(ThreeTok),
                matchers_1.createRegularToken(OneTok),
                matchers_1.createRegularToken(TwoTok)
            ]);
            expect(oneIterationParser.rule()).to.equal(1);
            var twoIterationsParser = new MultiTokenLookAheadForAtLeastOneParser([
                matchers_1.createRegularToken(OneTok),
                matchers_1.createRegularToken(TwoTok),
                matchers_1.createRegularToken(ThreeTok),
                matchers_1.createRegularToken(OneTok),
                matchers_1.createRegularToken(TwoTok),
                matchers_1.createRegularToken(ThreeTok),
                matchers_1.createRegularToken(OneTok),
                matchers_1.createRegularToken(TwoTok)
            ]);
            expect(twoIterationsParser.rule()).to.equal(2);
            var threeIterationsParser = new MultiTokenLookAheadForAtLeastOneParser([
                matchers_1.createRegularToken(OneTok),
                matchers_1.createRegularToken(TwoTok),
                matchers_1.createRegularToken(ThreeTok),
                matchers_1.createRegularToken(OneTok),
                matchers_1.createRegularToken(TwoTok),
                matchers_1.createRegularToken(ThreeTok),
                matchers_1.createRegularToken(OneTok),
                matchers_1.createRegularToken(TwoTok),
                matchers_1.createRegularToken(ThreeTok),
                matchers_1.createRegularToken(OneTok),
                matchers_1.createRegularToken(TwoTok)
            ]);
            expect(threeIterationsParser.rule()).to.equal(3);
        });
        it("AT_LEAST_ONE_SEP", function () {
            var MultiTokenLookAheadForAtLeastOneSepParser = /** @class */ (function (_super) {
                __extends(MultiTokenLookAheadForAtLeastOneSepParser, _super);
                function MultiTokenLookAheadForAtLeastOneSepParser(input) {
                    if (input === void 0) { input = []; }
                    var _this = _super.call(this, ALL_TOKENS, { outputCst: false }) || this;
                    _this.rule = _this.RULE("orRule", function () {
                        var numOfIterations = 0;
                        _this.AT_LEAST_ONE_SEP({
                            SEP: Comma,
                            DEF: function () {
                                _this.CONSUME1(OneTok);
                                _this.CONSUME1(TwoTok);
                                _this.CONSUME1(ThreeTok);
                                numOfIterations++;
                            }
                        });
                        _this.CONSUME2(OneTok);
                        _this.CONSUME2(TwoTok);
                        return numOfIterations;
                    });
                    _this.input = input;
                    _this.performSelfAnalysis();
                    return _this;
                }
                return MultiTokenLookAheadForAtLeastOneSepParser;
            }(parser_traits_1.Parser));
            var oneIterationParser = new MultiTokenLookAheadForAtLeastOneSepParser([
                matchers_1.createRegularToken(OneTok),
                matchers_1.createRegularToken(TwoTok),
                matchers_1.createRegularToken(ThreeTok),
                matchers_1.createRegularToken(OneTok),
                matchers_1.createRegularToken(TwoTok)
            ]);
            expect(oneIterationParser.rule()).to.equal(1);
            var twoIterationsParser = new MultiTokenLookAheadForAtLeastOneSepParser([
                matchers_1.createRegularToken(OneTok),
                matchers_1.createRegularToken(TwoTok),
                matchers_1.createRegularToken(ThreeTok),
                matchers_1.createRegularToken(Comma),
                matchers_1.createRegularToken(OneTok),
                matchers_1.createRegularToken(TwoTok),
                matchers_1.createRegularToken(ThreeTok),
                matchers_1.createRegularToken(OneTok),
                matchers_1.createRegularToken(TwoTok)
            ]);
            expect(twoIterationsParser.rule()).to.equal(2);
            var threeIterationsParser = new MultiTokenLookAheadForAtLeastOneSepParser([
                matchers_1.createRegularToken(OneTok),
                matchers_1.createRegularToken(TwoTok),
                matchers_1.createRegularToken(ThreeTok),
                matchers_1.createRegularToken(Comma),
                matchers_1.createRegularToken(OneTok),
                matchers_1.createRegularToken(TwoTok),
                matchers_1.createRegularToken(ThreeTok),
                matchers_1.createRegularToken(Comma),
                matchers_1.createRegularToken(OneTok),
                matchers_1.createRegularToken(TwoTok),
                matchers_1.createRegularToken(ThreeTok),
                matchers_1.createRegularToken(OneTok),
                matchers_1.createRegularToken(TwoTok)
            ]);
            expect(threeIterationsParser.rule()).to.equal(3);
        });
    });
    describe("Lookahead bug: MANY in OR", function () {
        var ManyInOrBugParser = /** @class */ (function (_super) {
            __extends(ManyInOrBugParser, _super);
            function ManyInOrBugParser() {
                var _this = _super.call(this, ALL_TOKENS, {
                    outputCst: false,
                    ignoredIssues: {
                        main: {
                            OR: true
                        }
                    }
                }) || this;
                _this.main = _this.RULE("main", function () {
                    _this.OR([
                        { ALT: function () { return _this.SUBRULE(_this.alt1); } },
                        { ALT: function () { return _this.SUBRULE(_this.alt2); } }
                    ]);
                });
                _this.alt1 = _this.RULE("alt1", function () {
                    _this.MANY(function () {
                        _this.CONSUME(Comma);
                    });
                    _this.CONSUME(OneTok);
                });
                _this.alt2 = _this.RULE("alt2", function () {
                    _this.MANY(function () {
                        _this.CONSUME(Comma);
                    });
                    _this.CONSUME(TwoTok);
                });
                _this.performSelfAnalysis();
                return _this;
            }
            return ManyInOrBugParser;
        }(parser_traits_1.Parser));
        var manyInOrBugParser;
        before(function () {
            manyInOrBugParser = new ManyInOrBugParser();
        });
        it("Won't throw NoViableAltException when the repetition appears twice", function () {
            var input = [
                matchers_1.createRegularToken(Comma),
                matchers_1.createRegularToken(Comma),
                matchers_1.createRegularToken(TwoTok)
            ];
            manyInOrBugParser.input = input;
            manyInOrBugParser.main();
            expect(manyInOrBugParser.errors).to.be.empty;
        });
    });
});
//# sourceMappingURL=recognizer_lookahead_spec.js.map

/***/ }),
/* 83 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var tokens_public_1 = __webpack_require__(1);
var lexer_public_1 = __webpack_require__(9);
var parser_traits_1 = __webpack_require__(5);
var parser_1 = __webpack_require__(4);
var exceptions_public_1 = __webpack_require__(8);
var tokens_1 = __webpack_require__(6);
var matchers_1 = __webpack_require__(3);
function defineRecognizerSpecs(contextName, createToken, createTokenInstance, tokenMatcher) {
    context("Recognizer  " + contextName, function () {
        var PlusTok = createToken({ name: "PlusTok" });
        PlusTok.LABEL = "+";
        var MinusTok = createToken({ name: "MinusTok" });
        var IntTok = createToken({ name: "IntTok" });
        var DotTok = createToken({ name: "DotTok" });
        var IdentTok = createToken({ name: "IdentTok" });
        var ALL_TOKENS = [PlusTok, MinusTok, IntTok, IdentTok, DotTok];
        tokens_1.augmentTokenTypes(ALL_TOKENS);
        describe("The Parsing DSL", function () {
            it("provides a production SUBRULE1-5 that invokes another rule", function () {
                var SubRuleTestParser = /** @class */ (function (_super) {
                    __extends(SubRuleTestParser, _super);
                    function SubRuleTestParser(input) {
                        if (input === void 0) { input = []; }
                        var _this = _super.call(this, ALL_TOKENS, { outputCst: false }) || this;
                        _this.result = "";
                        _this.index = 1;
                        _this.topRule = _this.RULE("topRule", function () {
                            _this.SUBRULE1(_this.subRule);
                            _this.SUBRULE2(_this.subRule);
                            _this.SUBRULE3(_this.subRule);
                            _this.SUBRULE4(_this.subRule);
                            _this.SUBRULE5(_this.subRule);
                            return _this.result;
                        });
                        _this.subRule = _this.RULE("subRule", function () {
                            _this.CONSUME(PlusTok);
                            _this.result += _this.index++;
                        });
                        _this.input = input;
                        _this.performSelfAnalysis();
                        return _this;
                    }
                    return SubRuleTestParser;
                }(parser_traits_1.Parser));
                var input = [
                    createTokenInstance(PlusTok),
                    createTokenInstance(PlusTok),
                    createTokenInstance(PlusTok),
                    createTokenInstance(PlusTok),
                    createTokenInstance(PlusTok)
                ];
                var parser = new SubRuleTestParser(input);
                var result = parser.topRule();
                expect(result).to.equal("12345");
            });
            it("provides a production SUBRULE1-5 that can accept arguments from its caller", function () {
                var SubRuleArgsParser = /** @class */ (function (_super) {
                    __extends(SubRuleArgsParser, _super);
                    function SubRuleArgsParser(input) {
                        if (input === void 0) { input = []; }
                        var _this = _super.call(this, ALL_TOKENS, { outputCst: false }) || this;
                        _this.numbers = "";
                        _this.letters = "";
                        _this.topRule = _this.RULE("topRule", function () {
                            _this.SUBRULE(_this.subRule, { ARGS: [6, "a"] });
                            _this.SUBRULE1(_this.subRule2, { ARGS: [5, "b"] });
                            _this.SUBRULE2(_this.subRule, { ARGS: [4, "c"] });
                            _this.SUBRULE3(_this.subRule, { ARGS: [3, "d"] });
                            _this.SUBRULE4(_this.subRule, { ARGS: [2, "e"] });
                            _this.SUBRULE5(_this.subRule, { ARGS: [1, "f"] });
                            return {
                                numbers: _this.numbers,
                                letters: _this.letters
                            };
                        });
                        _this.subRule = _this.RULE("subRule", function (numFromCaller, charFromCaller) {
                            _this.CONSUME(PlusTok);
                            _this.numbers += numFromCaller;
                            _this.letters += charFromCaller;
                        });
                        _this.subRule2 = _this.RULE("subRule2", function (numFromCaller, charFromCaller) {
                            _this.CONSUME(PlusTok);
                            _this.numbers += numFromCaller;
                            _this.letters += charFromCaller;
                        });
                        _this.input = input;
                        _this.performSelfAnalysis();
                        return _this;
                    }
                    return SubRuleArgsParser;
                }(parser_traits_1.Parser));
                var input = [
                    createTokenInstance(PlusTok),
                    createTokenInstance(PlusTok),
                    createTokenInstance(PlusTok),
                    createTokenInstance(PlusTok),
                    createTokenInstance(PlusTok),
                    createTokenInstance(PlusTok)
                ];
                var parser = new SubRuleArgsParser(input);
                var result = parser.topRule();
                expect(result.letters).to.equal("abcdef");
                expect(result.numbers).to.equal("654321");
            });
            describe("supports EMPTY(...) alternative convenience function", function () {
                var EmptyAltParser = /** @class */ (function (_super) {
                    __extends(EmptyAltParser, _super);
                    function EmptyAltParser(input) {
                        if (input === void 0) { input = []; }
                        var _this = _super.call(this, ALL_TOKENS, { outputCst: false }) || this;
                        _this.orRule = _this.RULE("orRule", _this.parseOrRule);
                        _this.input = input;
                        _this.performSelfAnalysis();
                        return _this;
                    }
                    EmptyAltParser.prototype.parseOrRule = function () {
                        var _this = this;
                        return this.OR7([
                            {
                                ALT: function () {
                                    _this.CONSUME1(PlusTok);
                                    return "+";
                                }
                            },
                            {
                                ALT: function () {
                                    _this.CONSUME1(MinusTok);
                                    return "-";
                                }
                            },
                            {
                                ALT: parser_1.EMPTY_ALT("EMPTY_ALT")
                            }
                        ]);
                    };
                    return EmptyAltParser;
                }(parser_traits_1.Parser));
                it("can match an non-empty alternative in an OR with an empty alternative", function () {
                    var input = [createTokenInstance(PlusTok)];
                    var parser = new EmptyAltParser(input);
                    expect(parser.orRule()).to.equal("+");
                });
                it("can match an empty alternative", function () {
                    var input = [];
                    var parser = new EmptyAltParser(input);
                    expect(parser.orRule()).to.equal("EMPTY_ALT");
                });
                it("has a utility function for defining EMPTY ALTERNATIVES", function () {
                    var noArgsEmptyAlt = parser_1.EMPTY_ALT();
                    expect(noArgsEmptyAlt()).to.be.undefined;
                    var valueEmptyAlt = parser_1.EMPTY_ALT(666);
                    expect(valueEmptyAlt()).to.equal(666);
                });
            });
        });
        describe("Token categories support", function () {
            it("Can consume a Token that belongs to multiple categories", function () {
                var Keyword = createToken({ name: "Keyword" });
                var Literal = createToken({ name: "Literal" });
                var TrueLiteral = createToken({
                    name: "TrueLiteral",
                    categories: [Keyword, Literal]
                });
                var CategoriesParser = /** @class */ (function (_super) {
                    __extends(CategoriesParser, _super);
                    function CategoriesParser(input) {
                        if (input === void 0) { input = []; }
                        var _this = _super.call(this, [Keyword, Literal], {}) || this;
                        _this.keyRule = _this.RULE("keyRule", function () {
                            _this.CONSUME(Keyword);
                        });
                        _this.litRule = _this.RULE("litRule", function () {
                            _this.CONSUME(Literal);
                        });
                        _this.input = input;
                        _this.performSelfAnalysis();
                        return _this;
                    }
                    return CategoriesParser;
                }(parser_traits_1.Parser));
                var parser = new CategoriesParser([]);
                parser.input = [createTokenInstance(TrueLiteral)];
                parser.keyRule();
                expect(parser.errors).to.be.empty;
                parser.input = [createTokenInstance(TrueLiteral)];
                parser.litRule();
                expect(parser.errors).to.be.empty;
            });
        });
        describe("The Error Recovery functionality of the Chevrotain Parser", function () {
            var ManyRepetitionRecovery = /** @class */ (function (_super) {
                __extends(ManyRepetitionRecovery, _super);
                function ManyRepetitionRecovery(input, isErrorRecoveryEnabled) {
                    if (input === void 0) { input = []; }
                    if (isErrorRecoveryEnabled === void 0) { isErrorRecoveryEnabled = true; }
                    var _this = _super.call(this, ALL_TOKENS, {
                        outputCst: false,
                        recoveryEnabled: isErrorRecoveryEnabled
                    }) || this;
                    _this.qualifiedName = _this.RULE("qualifiedName", _this.parseQualifiedName, {
                        recoveryValueFunc: function () { return ["666"]; }
                    });
                    _this.input = input;
                    _this.performSelfAnalysis();
                    return _this;
                }
                ManyRepetitionRecovery.prototype.parseQualifiedName = function () {
                    var _this = this;
                    var idents = [];
                    idents.push(this.CONSUME1(IdentTok).image);
                    this.MANY({
                        DEF: function () {
                            _this.CONSUME1(DotTok);
                            idents.push(_this.CONSUME2(IdentTok).image);
                        }
                    });
                    this.CONSUME1(tokens_public_1.EOF);
                    return idents;
                };
                return ManyRepetitionRecovery;
            }(parser_traits_1.Parser));
            var ManySepRepetitionRecovery = /** @class */ (function (_super) {
                __extends(ManySepRepetitionRecovery, _super);
                function ManySepRepetitionRecovery(input, isErrorRecoveryEnabled) {
                    if (input === void 0) { input = []; }
                    if (isErrorRecoveryEnabled === void 0) { isErrorRecoveryEnabled = true; }
                    var _this = _super.call(this, ALL_TOKENS, {
                        outputCst: false,
                        recoveryEnabled: isErrorRecoveryEnabled
                    }) || this;
                    _this.qualifiedName = _this.RULE("qualifiedName", _this.parseQualifiedName, {
                        recoveryValueFunc: function () { return ["333"]; }
                    });
                    _this.input = input;
                    _this.performSelfAnalysis();
                    return _this;
                }
                ManySepRepetitionRecovery.prototype.parseQualifiedName = function () {
                    var _this = this;
                    var idents = [];
                    idents.push(this.CONSUME1(IdentTok).image);
                    this.CONSUME1(DotTok);
                    this.MANY_SEP({
                        SEP: DotTok,
                        DEF: function () {
                            idents.push(_this.CONSUME2(IdentTok).image);
                        }
                    });
                    this.CONSUME1(tokens_public_1.EOF);
                    return idents;
                };
                return ManySepRepetitionRecovery;
            }(parser_traits_1.Parser));
            var ManySepSubRuleRepetitionRecovery = /** @class */ (function (_super) {
                __extends(ManySepSubRuleRepetitionRecovery, _super);
                function ManySepSubRuleRepetitionRecovery(input) {
                    if (input === void 0) { input = []; }
                    var _this = _super.call(this, ALL_TOKENS, {
                        outputCst: false,
                        recoveryEnabled: true
                    }) || this;
                    _this.qualifiedName = _this.RULE("qualifiedName", _this.parseQualifiedName);
                    _this.identifier = _this.RULE("identifier", _this.parseIdentifier);
                    _this.idents = [];
                    _this.input = input;
                    _this.performSelfAnalysis();
                    return _this;
                }
                ManySepSubRuleRepetitionRecovery.prototype.parseQualifiedName = function () {
                    var _this = this;
                    this.idents = [];
                    this.MANY_SEP({
                        SEP: DotTok,
                        DEF: function () {
                            _this.SUBRULE(_this.identifier);
                        }
                    });
                    this.CONSUME1(tokens_public_1.EOF);
                    return this.idents;
                };
                ManySepSubRuleRepetitionRecovery.prototype.parseIdentifier = function () {
                    this.idents.push(this.CONSUME1(IdentTok).image);
                };
                ManySepSubRuleRepetitionRecovery.prototype.canTokenTypeBeInsertedInRecovery = function (tokClass) {
                    // this parser is meant to test a scenario with re-sync recovery and MANY_SEP --> disable TokenInsertion
                    return false;
                };
                return ManySepSubRuleRepetitionRecovery;
            }(parser_traits_1.Parser));
            var AtLeastOneRepetitionRecovery = /** @class */ (function (_super) {
                __extends(AtLeastOneRepetitionRecovery, _super);
                function AtLeastOneRepetitionRecovery(input, isErrorRecoveryEnabled) {
                    if (input === void 0) { input = []; }
                    if (isErrorRecoveryEnabled === void 0) { isErrorRecoveryEnabled = true; }
                    var _this = _super.call(this, ALL_TOKENS, {
                        outputCst: false,
                        recoveryEnabled: isErrorRecoveryEnabled
                    }) || this;
                    _this.qualifiedName = _this.RULE("qualifiedName", _this.parseQualifiedName, {
                        recoveryValueFunc: function () { return ["777"]; }
                    });
                    _this.input = input;
                    _this.performSelfAnalysis();
                    return _this;
                }
                AtLeastOneRepetitionRecovery.prototype.parseQualifiedName = function () {
                    var _this = this;
                    var idents = [];
                    idents.push(this.CONSUME1(IdentTok).image);
                    this.AT_LEAST_ONE({
                        DEF: function () {
                            _this.CONSUME1(DotTok);
                            idents.push(_this.CONSUME2(IdentTok).image);
                        },
                        ERR_MSG: "bamba"
                    });
                    this.CONSUME1(tokens_public_1.EOF);
                    return idents;
                };
                return AtLeastOneRepetitionRecovery;
            }(parser_traits_1.Parser));
            var AtLeastOneSepRepetitionRecovery = /** @class */ (function (_super) {
                __extends(AtLeastOneSepRepetitionRecovery, _super);
                function AtLeastOneSepRepetitionRecovery(input, isErrorRecoveryEnabled) {
                    if (input === void 0) { input = []; }
                    if (isErrorRecoveryEnabled === void 0) { isErrorRecoveryEnabled = true; }
                    var _this = _super.call(this, ALL_TOKENS, {
                        outputCst: false,
                        recoveryEnabled: isErrorRecoveryEnabled
                    }) || this;
                    _this.qualifiedName = _this.RULE("qualifiedName", _this.parseQualifiedName, {
                        recoveryValueFunc: function () { return ["999"]; }
                    });
                    _this.input = input;
                    _this.performSelfAnalysis();
                    return _this;
                }
                AtLeastOneSepRepetitionRecovery.prototype.parseQualifiedName = function () {
                    var _this = this;
                    var idents = [];
                    this.AT_LEAST_ONE_SEP({
                        SEP: DotTok,
                        DEF: function () {
                            idents.push(_this.CONSUME1(IdentTok).image);
                        }
                    });
                    this.CONSUME1(tokens_public_1.EOF);
                    return idents;
                };
                return AtLeastOneSepRepetitionRecovery;
            }(parser_traits_1.Parser));
            it("can CONSUME tokens with an index specifying the occurrence for the specific token in the current rule", function () {
                var parser = new parser_traits_1.Parser(ALL_TOKENS, {
                    outputCst: false,
                    recoveryEnabled: true
                });
                parser.reset();
                var testInput = [
                    createTokenInstance(IntTok, "1"),
                    createTokenInstance(PlusTok),
                    createTokenInstance(IntTok, "2"),
                    createTokenInstance(PlusTok),
                    createTokenInstance(IntTok, "3")
                ];
                parser.input = testInput;
                expect(parser.CONSUME4(IntTok)).to.equal(testInput[0]);
                expect(parser.CONSUME2(PlusTok)).to.equal(testInput[1]);
                expect(parser.CONSUME1(IntTok)).to.equal(testInput[2]);
                expect(parser.CONSUME3(PlusTok)).to.equal(testInput[3]);
                expect(parser.CONSUME1(IntTok)).to.equal(testInput[4]);
                expect(tokenMatcher(parser.LA(1), tokens_public_1.EOF));
            });
            it("will not perform inRepetition recovery while in backtracking mode", function () {
                var parser = new parser_traits_1.Parser([PlusTok], {});
                parser.isBackTrackingStack.push(1);
                expect(parser.shouldInRepetitionRecoveryBeTried(MinusTok, 1)).to.equal(false);
            });
            it("can perform in-repetition recovery for MANY grammar rule", function () {
                // a.b+.c
                var input = [
                    createTokenInstance(IdentTok, "a"),
                    createTokenInstance(DotTok),
                    createTokenInstance(IdentTok, "b"),
                    createTokenInstance(PlusTok),
                    createTokenInstance(DotTok),
                    createTokenInstance(IdentTok, "c")
                ];
                var parser = new ManyRepetitionRecovery(input);
                expect(parser.qualifiedName()).to.deep.equal(["a", "b", "c"]);
                expect(parser.errors.length).to.equal(1);
            });
            it("can disable in-repetition recovery for MANY grammar rule", function () {
                // a.b+.c
                var input = [
                    createTokenInstance(IdentTok, "a"),
                    createTokenInstance(DotTok),
                    createTokenInstance(IdentTok, "b"),
                    createTokenInstance(PlusTok),
                    createTokenInstance(DotTok),
                    createTokenInstance(IdentTok, "c")
                ];
                var parser = new ManyRepetitionRecovery(input, false);
                expect(parser.qualifiedName()).to.deep.equal(["666"]);
                expect(parser.errors.length).to.equal(1);
            });
            it("can perform in-repetition recovery for MANY_SEP grammar rule", function () {
                // a.b+.c
                var input = [
                    createTokenInstance(IdentTok, "a"),
                    createTokenInstance(DotTok),
                    createTokenInstance(IdentTok, "b"),
                    createTokenInstance(PlusTok),
                    createTokenInstance(DotTok),
                    createTokenInstance(IdentTok, "c")
                ];
                var parser = new ManySepRepetitionRecovery(input);
                expect(parser.qualifiedName()).to.deep.equal(["a", "b", "c"]);
                expect(parser.errors.length).to.equal(1);
            });
            it("can disable in-repetition recovery for MANY_SEP grammar rule", function () {
                // a.b+.c
                var input = [
                    createTokenInstance(IdentTok, "a"),
                    createTokenInstance(DotTok),
                    createTokenInstance(IdentTok, "b"),
                    createTokenInstance(PlusTok),
                    createTokenInstance(DotTok),
                    createTokenInstance(IdentTok, "c")
                ];
                var parser = new ManySepRepetitionRecovery(input, false);
                expect(parser.qualifiedName()).to.deep.equal(["333"]);
                expect(parser.errors.length).to.equal(1);
            });
            it("can perform in-repetition recovery for MANY_SEP grammar rule #2", function () {
                // a.b..c...d
                var input = [
                    createTokenInstance(IdentTok, "a"),
                    createTokenInstance(DotTok),
                    createTokenInstance(DotTok),
                    createTokenInstance(DotTok),
                    createTokenInstance(IdentTok, "b")
                ];
                var parser = new ManySepSubRuleRepetitionRecovery(input);
                expect(parser.qualifiedName()).to.deep.equal(["a", "b"]);
                expect(parser.errors.length).to.equal(2);
            });
            it("can perform in-repetition recovery for AT_LEAST_ONE grammar rule", function () {
                // a.b+.c
                var input = [
                    createTokenInstance(IdentTok, "a"),
                    createTokenInstance(DotTok),
                    createTokenInstance(IdentTok, "b"),
                    createTokenInstance(PlusTok),
                    createTokenInstance(DotTok),
                    createTokenInstance(IdentTok, "c")
                ];
                var parser = new AtLeastOneRepetitionRecovery(input);
                expect(parser.qualifiedName()).to.deep.equal(["a", "b", "c"]);
                expect(parser.errors.length).to.equal(1);
            });
            it("can disable in-repetition recovery for AT_LEAST_ONE grammar rule", function () {
                // a.b+.c
                var input = [
                    createTokenInstance(IdentTok, "a"),
                    createTokenInstance(DotTok),
                    createTokenInstance(IdentTok, "b"),
                    createTokenInstance(PlusTok),
                    createTokenInstance(DotTok),
                    createTokenInstance(IdentTok, "c")
                ];
                var parser = new AtLeastOneRepetitionRecovery(input, false);
                expect(parser.qualifiedName()).to.deep.equal(["777"]);
                expect(parser.errors.length).to.equal(1);
            });
            it("can perform in-repetition recovery for AT_LEAST_ONE_SEP grammar rule", function () {
                // a.b+.c
                var input = [
                    createTokenInstance(IdentTok, "a"),
                    createTokenInstance(DotTok),
                    createTokenInstance(IdentTok, "b"),
                    createTokenInstance(PlusTok),
                    createTokenInstance(DotTok),
                    createTokenInstance(IdentTok, "c")
                ];
                var parser = new AtLeastOneSepRepetitionRecovery(input);
                expect(parser.qualifiedName()).to.deep.equal(["a", "b", "c"]);
                expect(parser.errors.length).to.equal(1);
            });
            it("can disable in-repetition recovery for AT_LEAST_ONE_SEP grammar rule", function () {
                // a.b+.c
                var input = [
                    createTokenInstance(IdentTok, "a"),
                    createTokenInstance(DotTok),
                    createTokenInstance(IdentTok, "b"),
                    createTokenInstance(PlusTok),
                    createTokenInstance(DotTok),
                    createTokenInstance(IdentTok, "c")
                ];
                var parser = new AtLeastOneSepRepetitionRecovery(input, false);
                expect(parser.qualifiedName()).to.deep.equal(["999"]);
                expect(parser.errors.length).to.equal(1);
            });
            it("can perform single Token insertion", function () {
                var A = createToken({ name: "A", pattern: /A/ });
                var B = createToken({ name: "B", pattern: /B/ });
                var C = createToken({ name: "C", pattern: /C/ });
                var allTokens = [A, B, C];
                var lexer = new lexer_public_1.Lexer(allTokens, {
                    positionTracking: "onlyOffset"
                });
                var SingleTokenInsertRegular = /** @class */ (function (_super) {
                    __extends(SingleTokenInsertRegular, _super);
                    function SingleTokenInsertRegular(input) {
                        if (input === void 0) { input = []; }
                        var _this = _super.call(this, allTokens, {
                            outputCst: false,
                            recoveryEnabled: true
                        }) || this;
                        _this.topRule = _this.RULE("topRule", function () {
                            _this.CONSUME(A);
                            var insertedToken = _this.CONSUME(B);
                            _this.CONSUME(C);
                            return insertedToken;
                        });
                        _this.input = input;
                        _this.performSelfAnalysis();
                        return _this;
                    }
                    return SingleTokenInsertRegular;
                }(parser_traits_1.Parser));
                var lexResult = lexer.tokenize("AC");
                var parser = new SingleTokenInsertRegular(lexResult.tokens);
                var insertedToken = parser.topRule();
                expect(insertedToken.isInsertedInRecovery).to.be.true;
                expect(insertedToken.image).to.equal("");
                expect(insertedToken.startOffset).to.be.NaN;
                expect(insertedToken.endOffset).to.be.NaN;
                expect(insertedToken.startLine).to.be.NaN;
                expect(insertedToken.endLine).to.be.NaN;
                expect(insertedToken.startColumn).to.be.NaN;
                expect(insertedToken.endColumn).to.be.NaN;
            });
        });
        describe("The Parsing DSL methods are expressions", function () {
            it("OR will return the chosen alternative's grammar action's returned value", function () {
                var OrExpressionParser = /** @class */ (function (_super) {
                    __extends(OrExpressionParser, _super);
                    function OrExpressionParser(input) {
                        if (input === void 0) { input = []; }
                        var _this = _super.call(this, ALL_TOKENS, { outputCst: false }) || this;
                        _this.or = _this.RULE("or", function () {
                            return _this.OR([
                                {
                                    ALT: function () {
                                        _this.CONSUME1(MinusTok);
                                        return 666;
                                    }
                                },
                                {
                                    ALT: function () {
                                        _this.CONSUME1(PlusTok);
                                        return "bamba";
                                    }
                                }
                            ]);
                        });
                        _this.input = input;
                        _this.performSelfAnalysis();
                        return _this;
                    }
                    return OrExpressionParser;
                }(parser_traits_1.Parser));
                var parser = new OrExpressionParser([]);
                parser.input = [createTokenInstance(MinusTok)];
                expect(parser.or()).to.equal(666);
                parser.input = [createTokenInstance(PlusTok)];
                expect(parser.or()).to.equal("bamba");
            });
            it("OPTION will return the grammar action value or undefined if the option was not taken", function () {
                var OptionExpressionParser = /** @class */ (function (_super) {
                    __extends(OptionExpressionParser, _super);
                    function OptionExpressionParser(input) {
                        if (input === void 0) { input = []; }
                        var _this = _super.call(this, ALL_TOKENS, { outputCst: false }) || this;
                        _this.option = _this.RULE("option", function () {
                            return _this.OPTION(function () {
                                _this.CONSUME(IdentTok);
                                return "bamba";
                            });
                        });
                        _this.input = input;
                        _this.performSelfAnalysis();
                        return _this;
                    }
                    return OptionExpressionParser;
                }(parser_traits_1.Parser));
                var parser = new OptionExpressionParser([]);
                parser.input = [createTokenInstance(IdentTok)];
                expect(parser.option()).to.equal("bamba");
                parser.input = [createTokenInstance(IntTok)];
                expect(parser.option()).to.be.undefined;
            });
        });
        describe("The BaseRecognizer", function () {
            it("Cannot be initialized with a token vector (pre v4.0 API) ", function () {
                expect(function () { return new parser_traits_1.Parser([createTokenInstance(PlusTok)]); }).to.throw("The Parser constructor no longer accepts a token vector as the first argument");
            });
            it("Cannot be initialized with an empty Token vocabulary", function () {
                expect(function () { return new parser_traits_1.Parser([]); }).to.throw("A Token Vocabulary cannot be empty");
            });
            it("can only SAVE_ERROR for recognition exceptions", function () {
                var parser = new parser_traits_1.Parser([IntTok]);
                expect(function () {
                    return parser.SAVE_ERROR(new Error("I am some random Error"));
                }).to.throw("Trying to save an Error which is not a RecognitionException");
                expect(parser.input).to.be.an.instanceof(Array);
            });
            it("when it runs out of input EOF will be returned", function () {
                var parser = new parser_traits_1.Parser([IntTok, PlusTok], {
                    outputCst: false
                });
                parser.input = [
                    createTokenInstance(IntTok, "1"),
                    createTokenInstance(PlusTok)
                ];
                parser.CONSUME(IntTok);
                parser.CONSUME(PlusTok);
                expect(tokenMatcher(parser.LA(1), tokens_public_1.EOF));
                expect(tokenMatcher(parser.LA(1), tokens_public_1.EOF));
                expect(tokenMatcher(parser.SKIP_TOKEN(), tokens_public_1.EOF));
                expect(tokenMatcher(parser.SKIP_TOKEN(), tokens_public_1.EOF));
                // and we can go on and on and on... this avoid returning null/undefined
                // see: https://en.wikipedia.org/wiki/Tony_Hoare#Apologies_and_retractions
            });
            it("invoking an OPTION will return the inner grammar action's value or undefined", function () {
                var OptionsReturnValueParser = /** @class */ (function (_super) {
                    __extends(OptionsReturnValueParser, _super);
                    function OptionsReturnValueParser(input) {
                        if (input === void 0) { input = [createTokenInstance(IntTok, "666")]; }
                        var _this = _super.call(this, ALL_TOKENS, { outputCst: false }) || this;
                        _this.trueOptionRule = _this.RULE("trueOptionRule", function () {
                            return _this.OPTION({
                                GATE: function () { return true; },
                                DEF: function () {
                                    _this.CONSUME(IntTok);
                                    return true;
                                }
                            });
                        });
                        _this.falseOptionRule = _this.RULE("falseOptionRule", function () {
                            return _this.OPTION({
                                GATE: function () { return false; },
                                DEF: function () {
                                    _this.CONSUME(IntTok);
                                    return false;
                                }
                            });
                        });
                        _this.input = input;
                        _this.performSelfAnalysis();
                        return _this;
                    }
                    return OptionsReturnValueParser;
                }(parser_traits_1.Parser));
                var successfulOption = new OptionsReturnValueParser().trueOptionRule();
                expect(successfulOption).to.equal(true);
                var failedOption = new OptionsReturnValueParser().falseOptionRule();
                expect(failedOption).to.equal(undefined);
            });
            it("will return false if a RecognitionException is thrown during backtracking and rethrow any other kind of Exception", function () {
                var parser = new parser_traits_1.Parser([IntTok]);
                var backTrackingThrows = parser.BACKTRACK(function () {
                    throw new Error("division by zero, boom");
                }, function () {
                    return true;
                });
                expect(function () { return backTrackingThrows.call(parser); }).to.throw("division by zero, boom");
                var throwsRecogError = function () {
                    throw new exceptions_public_1.NotAllInputParsedException("sad sad panda", createTokenInstance(PlusTok));
                };
                var backTrackingFalse = parser.BACKTRACK(throwsRecogError, function () {
                    return true;
                });
                expect(backTrackingFalse.call(parser)).to.equal(false);
            });
        });
        describe("The BaseRecognizer", function () {
            it("Will throw an error is performSelfAnalysis is called before all the rules have been defined", function () {
                var WrongOrderOfSelfAnalysisParser = /** @class */ (function (_super) {
                    __extends(WrongOrderOfSelfAnalysisParser, _super);
                    function WrongOrderOfSelfAnalysisParser(input) {
                        if (input === void 0) { input = []; }
                        var _this = _super.call(this, ALL_TOKENS) || this;
                        _this.input = input;
                        _this.RULE("goodRule", function () {
                            _this.CONSUME(IntTok);
                        });
                        _this.performSelfAnalysis();
                        _this.RULE("badRule", function () {
                            _this.CONSUME(IntTok);
                        });
                        return _this;
                    }
                    return WrongOrderOfSelfAnalysisParser;
                }(parser_traits_1.Parser));
                expect(function () { return new WrongOrderOfSelfAnalysisParser(); }).to.throw("Grammar rule <badRule> may not be defined after the 'performSelfAnalysis' method has been called");
            });
            it("Will throw an error is performSelfAnalysis is called before all the rules have been defined - static invocation", function () {
                var WrongOrderOfSelfAnalysisParser = /** @class */ (function (_super) {
                    __extends(WrongOrderOfSelfAnalysisParser, _super);
                    function WrongOrderOfSelfAnalysisParser(input) {
                        if (input === void 0) { input = []; }
                        var _this = _super.call(this, ALL_TOKENS) || this;
                        _this.input = input;
                        _this.RULE("goodRule", function () {
                            _this.CONSUME(IntTok);
                        });
                        parser_traits_1.Parser.performSelfAnalysis(_this);
                        _this.RULE("badRule", function () {
                            _this.CONSUME(IntTok);
                        });
                        return _this;
                    }
                    return WrongOrderOfSelfAnalysisParser;
                }(parser_traits_1.Parser));
                expect(function () { return new WrongOrderOfSelfAnalysisParser(); }).to.throw("Grammar rule <badRule> may not be defined after the 'performSelfAnalysis' method has been called");
            });
            describe("Parser Level Validations", function () {
                before(function () {
                    var MyNoneUniqueSpecialParser = /** @class */ (function (_super) {
                        __extends(MyNoneUniqueSpecialParser, _super);
                        function MyNoneUniqueSpecialParser(input) {
                            if (input === void 0) { input = []; }
                            var _this = _super.call(this, ALL_TOKENS) || this;
                            _this.input = input;
                            _this.performSelfAnalysis();
                            return _this;
                        }
                        return MyNoneUniqueSpecialParser;
                    }(parser_traits_1.Parser));
                    // init the first parser
                    new MyNoneUniqueSpecialParser([]);
                });
            });
            it("can be initialized with a vector of Tokens", function () {
                var parser = new parser_traits_1.Parser([PlusTok, MinusTok, IntTok]);
                var tokensMap = parser.tokensMap;
                expect(tokensMap.PlusTok).to.equal(PlusTok);
                expect(tokensMap.MinusTok).to.equal(MinusTok);
                expect(tokensMap.IntTok).to.equal(IntTok);
            });
            it("can be initialized with a Dictionary of Tokens", function () {
                var initTokenDictionary = {
                    PlusTok: PlusTok,
                    MinusTok: MinusTok,
                    IntToken: IntTok
                };
                var parser = new parser_traits_1.Parser({
                    PlusTok: PlusTok,
                    MinusTok: MinusTok,
                    IntToken: IntTok
                });
                var tokensMap = parser.tokensMap;
                // the implementation should clone the dictionary to avoid bugs caused by mutability
                expect(tokensMap).not.to.equal(initTokenDictionary);
                expect(tokensMap.PlusTok).to.equal(PlusTok);
                expect(tokensMap.MinusTok).to.equal(MinusTok);
                expect(tokensMap.IntToken).to.equal(IntTok);
            });
            it("can be initialized with a IMultiModeLexerDefinition of Tokens", function () {
                var multiModeLexerDef = {
                    modes: {
                        bamba: [PlusTok],
                        bisli: [MinusTok, IntTok]
                    },
                    defaultMode: "bisli"
                };
                var parser = new parser_traits_1.Parser(multiModeLexerDef);
                var tokensMap = parser.tokensMap;
                // the implementation should clone the dictionary to avoid bugs caused by mutability
                expect(tokensMap).not.to.equal(multiModeLexerDef);
                expect(tokensMap.PlusTok).to.equal(PlusTok);
                expect(tokensMap.MinusTok).to.equal(MinusTok);
                expect(tokensMap.IntTok).to.equal(IntTok);
            });
            it("cannot be initialized with other parameters", function () {
                expect(function () {
                    return new parser_traits_1.Parser(null);
                }).to.throw();
                expect(function () {
                    return new parser_traits_1.Parser(666);
                }).to.throw();
                expect(function () {
                    return new parser_traits_1.Parser("woof woof");
                }).to.throw();
            });
            it("will not swallow none Recognizer errors when attempting 'in rule error recovery'", function () {
                var NotSwallowInRuleParser = /** @class */ (function (_super) {
                    __extends(NotSwallowInRuleParser, _super);
                    function NotSwallowInRuleParser(input) {
                        if (input === void 0) { input = []; }
                        var _this = _super.call(this, ALL_TOKENS, {
                            recoveryEnabled: true
                        }) || this;
                        _this.someRule = _this.RULE("someRule", function () {
                            _this.CONSUME1(DotTok);
                        });
                        _this.input = input;
                        _this.performSelfAnalysis();
                        return _this;
                    }
                    return NotSwallowInRuleParser;
                }(parser_traits_1.Parser));
                var parser = new NotSwallowInRuleParser([
                    createTokenInstance(IntTok, "1")
                ]);
                parser.tryInRuleRecovery = function () {
                    throw Error("oops");
                };
                expect(function () { return parser.someRule(); }).to.throw("oops");
            });
            it("will not swallow none Recognizer errors during Token consumption", function () {
                var NotSwallowInTokenConsumption = /** @class */ (function (_super) {
                    __extends(NotSwallowInTokenConsumption, _super);
                    function NotSwallowInTokenConsumption(input) {
                        if (input === void 0) { input = []; }
                        var _this = _super.call(this, ALL_TOKENS, {
                            recoveryEnabled: true
                        }) || this;
                        _this.someRule = _this.RULE("someRule", function () {
                            _this.CONSUME1(DotTok);
                        });
                        _this.input = input;
                        _this.performSelfAnalysis();
                        return _this;
                    }
                    return NotSwallowInTokenConsumption;
                }(parser_traits_1.Parser));
                var parser = new NotSwallowInTokenConsumption([
                    createTokenInstance(IntTok, "1")
                ]);
                parser.consumeInternal = function () {
                    throw Error("oops");
                };
                expect(function () { return parser.someRule(); }).to.throw("oops");
            });
            it("will rethrow none Recognizer errors during Token consumption - recovery disabled + nested rule", function () {
                var RethrowOtherErrors = /** @class */ (function (_super) {
                    __extends(RethrowOtherErrors, _super);
                    function RethrowOtherErrors(input) {
                        if (input === void 0) { input = []; }
                        var _this = _super.call(this, ALL_TOKENS, {
                            recoveryEnabled: true
                        }) || this;
                        _this.someRule = _this.RULE("someRule", function () {
                            expect(function () {
                                return _this.SUBRULE(_this.someNestedRule);
                            }).to.throw("Expecting token of type --> DotTok <--");
                        });
                        _this.someNestedRule = _this.RULE("someNestedRule", function () {
                            _this.CONSUME1(DotTok);
                            _this.CONSUME1(IdentTok);
                        }, {
                            resyncEnabled: false
                        });
                        _this.input = input;
                        _this.performSelfAnalysis();
                        return _this;
                    }
                    return RethrowOtherErrors;
                }(parser_traits_1.Parser));
                var parser = new RethrowOtherErrors([
                    createTokenInstance(IntTok, "1")
                ]);
                parser.someRule();
            });
            it("Will use Token LABELS for mismatch error messages when available", function () {
                var LabelTokParser = /** @class */ (function (_super) {
                    __extends(LabelTokParser, _super);
                    function LabelTokParser(input) {
                        if (input === void 0) { input = []; }
                        var _this = _super.call(this, [PlusTok, MinusTok]) || this;
                        _this.rule = _this.RULE("rule", function () {
                            _this.CONSUME1(PlusTok);
                        });
                        _this.input = input;
                        _this.performSelfAnalysis();
                        return _this;
                    }
                    return LabelTokParser;
                }(parser_traits_1.Parser));
                var parser = new LabelTokParser([createTokenInstance(MinusTok)]);
                parser.rule();
                expect(parser.errors[0]).to.be.an.instanceof(exceptions_public_1.MismatchedTokenException);
                expect(parser.errors[0].message).to.include("+");
                expect(parser.errors[0].message).to.not.include("token of type");
            });
            it("Will not use Token LABELS for mismatch error messages when unavailable", function () {
                var NoLabelTokParser = /** @class */ (function (_super) {
                    __extends(NoLabelTokParser, _super);
                    function NoLabelTokParser(input) {
                        if (input === void 0) { input = []; }
                        var _this = _super.call(this, [PlusTok, MinusTok]) || this;
                        _this.rule = _this.RULE("rule", function () {
                            _this.CONSUME1(MinusTok);
                        });
                        _this.input = input;
                        _this.performSelfAnalysis();
                        return _this;
                    }
                    return NoLabelTokParser;
                }(parser_traits_1.Parser));
                var parser = new NoLabelTokParser([
                    createTokenInstance(PlusTok)
                ]);
                parser.rule();
                expect(parser.errors[0]).to.be.an.instanceof(exceptions_public_1.MismatchedTokenException);
                expect(parser.errors[0].message).to.include("MinusTok");
                expect(parser.errors[0].message).to.include("token of type");
                expect(parser.errors[0].context.ruleStack).to.deep.equal([
                    "rule"
                ]);
            });
            it("Supports custom overriding of the mismatch token error message", function () {
                var SemiColon = createToken({ name: "SemiColon" });
                var CustomConsumeErrorParser = /** @class */ (function (_super) {
                    __extends(CustomConsumeErrorParser, _super);
                    function CustomConsumeErrorParser(input) {
                        if (input === void 0) { input = []; }
                        var _this = _super.call(this, [SemiColon]) || this;
                        _this.myStatement = _this.RULE("myStatement", function () {
                            _this.CONSUME1(SemiColon, {
                                ERR_MSG: "expecting semiColon at end of myStatement"
                            });
                        });
                        _this.input = input;
                        _this.performSelfAnalysis();
                        return _this;
                    }
                    return CustomConsumeErrorParser;
                }(parser_traits_1.Parser));
                var parser = new CustomConsumeErrorParser([
                    createTokenInstance(PlusTok)
                ]);
                parser.myStatement();
                expect(parser.errors[0]).to.be.an.instanceof(exceptions_public_1.MismatchedTokenException);
                expect(parser.errors[0].message).to.equal("expecting semiColon at end of myStatement");
                expect(parser.errors[0].context.ruleStack).to.deep.equal([
                    "myStatement"
                ]);
            });
            it("Will use Token LABELS for noViableAlt error messages when unavailable", function () {
                var LabelAltParser = /** @class */ (function (_super) {
                    __extends(LabelAltParser, _super);
                    function LabelAltParser(input) {
                        if (input === void 0) { input = []; }
                        var _this = _super.call(this, [PlusTok, MinusTok]) || this;
                        _this.rule = _this.RULE("rule", function () {
                            _this.OR([
                                {
                                    ALT: function () {
                                        _this.CONSUME1(PlusTok);
                                    }
                                },
                                {
                                    ALT: function () {
                                        _this.CONSUME1(MinusTok);
                                    }
                                }
                            ]);
                        });
                        _this.input = input;
                        _this.performSelfAnalysis();
                        return _this;
                    }
                    return LabelAltParser;
                }(parser_traits_1.Parser));
                var parser = new LabelAltParser([]);
                parser.rule();
                expect(parser.errors[0]).to.be.an.instanceof(exceptions_public_1.NoViableAltException);
                expect(parser.errors[0].context.ruleStack).to.deep.equal([
                    "rule"
                ]);
                expect(parser.errors[0].message).to.include("MinusTok");
                expect(parser.errors[0].message).to.include("+");
                expect(parser.errors[0].message).to.not.include("PlusTok");
            });
            it("Will use Token LABELS for noViableAlt error messages when unavailable - nestedRuleNames", function () {
                var LabelAltParserNested = /** @class */ (function (_super) {
                    __extends(LabelAltParserNested, _super);
                    function LabelAltParserNested(input) {
                        if (input === void 0) { input = []; }
                        var _this = _super.call(this, [PlusTok, MinusTok], {
                            outputCst: true
                        }) || this;
                        _this.rule = _this.RULE("rule", function () {
                            _this.OR({
                                NAME: "$bamba",
                                DEF: [
                                    {
                                        ALT: function () {
                                            _this.CONSUME1(PlusTok);
                                        }
                                    },
                                    {
                                        ALT: function () {
                                            _this.CONSUME1(MinusTok);
                                        }
                                    }
                                ]
                            });
                        });
                        _this.input = input;
                        _this.performSelfAnalysis();
                        return _this;
                    }
                    return LabelAltParserNested;
                }(parser_traits_1.Parser));
                var parser = new LabelAltParserNested([]);
                parser.rule();
                expect(parser.errors[0]).to.be.an.instanceof(exceptions_public_1.NoViableAltException);
                expect(parser.errors[0].context.ruleStack).to.deep.equal([
                    "rule"
                ]);
                expect(parser.errors[0].message).to.include("MinusTok");
                expect(parser.errors[0].message).to.include("+");
                expect(parser.errors[0].message).to.not.include("PlusTok");
            });
            it("Will not throw a JS runtime exception on noViableAlt - issue #887", function () {
                var MaxlookaheadOneAlt = /** @class */ (function (_super) {
                    __extends(MaxlookaheadOneAlt, _super);
                    function MaxlookaheadOneAlt(input) {
                        if (input === void 0) { input = []; }
                        var _this = _super.call(this, [PlusTok, MinusTok], { maxLookahead: 1 }) || this;
                        _this.rule = _this.RULE("rule", function () {
                            _this.OR([
                                {
                                    ALT: function () {
                                        _this.CONSUME1(PlusTok);
                                    }
                                },
                                {
                                    ALT: function () {
                                        _this.CONSUME1(MinusTok);
                                    }
                                }
                            ]);
                        });
                        _this.input = input;
                        _this.performSelfAnalysis();
                        return _this;
                    }
                    return MaxlookaheadOneAlt;
                }(parser_traits_1.Parser));
                var parser = new MaxlookaheadOneAlt([]);
                parser.rule();
                expect(parser.errors[0]).to.be.an.instanceof(exceptions_public_1.NoViableAltException);
                expect(parser.errors[0].context.ruleStack).to.deep.equal([
                    "rule"
                ]);
                expect(parser.errors[0].message).to.include("MinusTok");
                expect(parser.errors[0].message).to.include("+");
                expect(parser.errors[0].message).to.not.include("PlusTok");
            });
            it("Supports custom error messages for OR", function () {
                var LabelAltParser2 = /** @class */ (function (_super) {
                    __extends(LabelAltParser2, _super);
                    function LabelAltParser2(input) {
                        if (input === void 0) { input = []; }
                        var _this = _super.call(this, [PlusTok, MinusTok], { outputCst: false }) || this;
                        _this.rule = _this.RULE("rule", function () {
                            _this.OR({
                                DEF: [
                                    {
                                        ALT: function () {
                                            _this.CONSUME1(PlusTok);
                                        }
                                    },
                                    {
                                        ALT: function () {
                                            _this.CONSUME1(MinusTok);
                                        }
                                    }
                                ],
                                ERR_MSG: "bisli"
                            });
                        });
                        _this.input = input;
                        _this.performSelfAnalysis();
                        return _this;
                    }
                    return LabelAltParser2;
                }(parser_traits_1.Parser));
                var parser = new LabelAltParser2([]);
                parser.rule();
                expect(parser.errors[0]).to.be.an.instanceof(exceptions_public_1.NoViableAltException);
                expect(parser.errors[0].context.ruleStack).to.deep.equal([
                    "rule"
                ]);
                expect(parser.errors[0].message).to.include("bisli");
            });
            it("Will include the ruleStack in a recognition Exception", function () {
                var NestedRulesParser = /** @class */ (function (_super) {
                    __extends(NestedRulesParser, _super);
                    function NestedRulesParser(input) {
                        if (input === void 0) { input = []; }
                        var _this = _super.call(this, [PlusTok, MinusTok]) || this;
                        _this.rule = _this.RULE("rule", function () {
                            _this.OPTION({
                                DEF: function () {
                                    _this.SUBRULE1(_this.rule2);
                                }
                            });
                        });
                        _this.rule2 = _this.RULE("rule2", function () {
                            _this.OPTION(function () {
                                _this.SUBRULE5(_this.rule3);
                            });
                        });
                        _this.rule3 = _this.RULE("rule3", function () {
                            _this.CONSUME1(MinusTok);
                            _this.CONSUME1(PlusTok);
                        });
                        _this.input = input;
                        _this.performSelfAnalysis();
                        return _this;
                    }
                    return NestedRulesParser;
                }(parser_traits_1.Parser));
                var parser = new NestedRulesParser([
                    createTokenInstance(MinusTok),
                    createTokenInstance(MinusTok)
                ]);
                parser.rule();
                expect(parser.errors[0]).to.be.an.instanceof(exceptions_public_1.MismatchedTokenException);
                expect(parser.errors[0].context.ruleStack).to.deep.equal([
                    "rule",
                    "rule2",
                    "rule3"
                ]);
                expect(parser.errors[0].context.ruleOccurrenceStack).to.deep.equal([0, 1, 5]);
            });
            it("Will build an error message for AT_LEAST_ONE automatically", function () {
                var ImplicitAtLeastOneErrParser = /** @class */ (function (_super) {
                    __extends(ImplicitAtLeastOneErrParser, _super);
                    function ImplicitAtLeastOneErrParser(input) {
                        if (input === void 0) { input = []; }
                        var _this = _super.call(this, [PlusTok, MinusTok]) || this;
                        _this.rule = _this.RULE("rule", function () {
                            _this.AT_LEAST_ONE(function () {
                                _this.SUBRULE(_this.rule2);
                            });
                        });
                        _this.rule2 = _this.RULE("rule2", function () {
                            _this.OR([
                                {
                                    ALT: function () {
                                        _this.CONSUME1(MinusTok);
                                    }
                                },
                                {
                                    ALT: function () {
                                        _this.CONSUME1(PlusTok);
                                    }
                                }
                            ]);
                        });
                        _this.input = input;
                        _this.performSelfAnalysis();
                        return _this;
                    }
                    return ImplicitAtLeastOneErrParser;
                }(parser_traits_1.Parser));
                var parser = new ImplicitAtLeastOneErrParser([
                    createTokenInstance(IntTok, "666"),
                    createTokenInstance(MinusTok),
                    createTokenInstance(MinusTok)
                ]);
                parser.rule();
                expect(parser.errors[0]).to.be.an.instanceof(exceptions_public_1.EarlyExitException);
                expect(parser.errors[0].message).to.contain("expecting at least one iteration");
                expect(parser.errors[0].message).to.contain("MinusTok");
                expect(parser.errors[0].message).to.contain("+");
                expect(parser.errors[0].message).to.contain("but found: '666'");
                expect(parser.errors[0].context.ruleStack).to.deep.equal([
                    "rule"
                ]);
            });
            it("supports custom error messages for AT_LEAST_ONE", function () {
                var ExplicitAtLeastOneErrParser = /** @class */ (function (_super) {
                    __extends(ExplicitAtLeastOneErrParser, _super);
                    function ExplicitAtLeastOneErrParser(input) {
                        if (input === void 0) { input = []; }
                        var _this = _super.call(this, [PlusTok, MinusTok]) || this;
                        _this.rule = _this.RULE("rule", function () {
                            _this.AT_LEAST_ONE({
                                DEF: function () {
                                    _this.SUBRULE(_this.rule2);
                                },
                                ERR_MSG: "bamba"
                            });
                        });
                        _this.rule2 = _this.RULE("rule2", function () {
                            _this.OR([
                                {
                                    ALT: function () {
                                        _this.CONSUME1(MinusTok);
                                    }
                                },
                                {
                                    ALT: function () {
                                        _this.CONSUME1(PlusTok);
                                    }
                                }
                            ]);
                        });
                        _this.input = input;
                        _this.performSelfAnalysis();
                        return _this;
                    }
                    return ExplicitAtLeastOneErrParser;
                }(parser_traits_1.Parser));
                var parser = new ExplicitAtLeastOneErrParser([
                    createTokenInstance(IntTok, "666"),
                    createTokenInstance(MinusTok),
                    createTokenInstance(MinusTok)
                ]);
                parser.rule();
                expect(parser.errors[0]).to.be.an.instanceof(exceptions_public_1.EarlyExitException);
                expect(parser.errors[0].message).to.contain("bamba");
                expect(parser.errors[0].context.ruleStack).to.deep.equal([
                    "rule"
                ]);
            });
            it("Will build an error message for AT_LEAST_ONE_SEP automatically", function () {
                var ImplicitAtLeastOneSepErrParser = /** @class */ (function (_super) {
                    __extends(ImplicitAtLeastOneSepErrParser, _super);
                    function ImplicitAtLeastOneSepErrParser(input) {
                        if (input === void 0) { input = []; }
                        var _this = _super.call(this, [PlusTok, MinusTok, IdentTok]) || this;
                        _this.rule = _this.RULE("rule", function () {
                            _this.AT_LEAST_ONE_SEP({
                                SEP: IdentTok,
                                DEF: function () {
                                    _this.SUBRULE(_this.rule2);
                                }
                            });
                        });
                        _this.rule2 = _this.RULE("rule2", function () {
                            _this.OR([
                                {
                                    ALT: function () {
                                        _this.CONSUME1(MinusTok);
                                    }
                                },
                                {
                                    ALT: function () {
                                        _this.CONSUME1(PlusTok);
                                    }
                                }
                            ]);
                        });
                        _this.input = input;
                        _this.performSelfAnalysis();
                        return _this;
                    }
                    return ImplicitAtLeastOneSepErrParser;
                }(parser_traits_1.Parser));
                var parser = new ImplicitAtLeastOneSepErrParser([
                    createTokenInstance(IntTok, "666"),
                    createTokenInstance(MinusTok),
                    createTokenInstance(MinusTok)
                ]);
                parser.rule();
                expect(parser.errors[0]).to.be.an.instanceof(exceptions_public_1.EarlyExitException);
                expect(parser.errors[0].message).to.contain("expecting at least one iteration");
                expect(parser.errors[0].message).to.contain("MinusTok");
                expect(parser.errors[0].message).to.contain("+");
                expect(parser.errors[0].message).to.contain("but found: '666'");
                expect(parser.errors[0].context.ruleStack).to.deep.equal([
                    "rule"
                ]);
                expect(parser.errors[0].context.ruleOccurrenceStack).to.deep.equal([0]);
            });
            it("can serialize a Grammar's Structure", function () {
                var SomeParser = /** @class */ (function (_super) {
                    __extends(SomeParser, _super);
                    function SomeParser(input) {
                        if (input === void 0) { input = []; }
                        var _this = _super.call(this, [PlusTok, MinusTok, IdentTok]) || this;
                        _this.rule = _this.RULE("rule", function () {
                            _this.AT_LEAST_ONE_SEP({
                                SEP: IdentTok,
                                DEF: function () {
                                    _this.SUBRULE(_this.rule2);
                                }
                            });
                        });
                        _this.rule2 = _this.RULE("rule2", function () {
                            _this.OR([
                                {
                                    ALT: function () {
                                        _this.CONSUME1(MinusTok);
                                    }
                                },
                                {
                                    ALT: function () {
                                        _this.CONSUME1(PlusTok);
                                    }
                                }
                            ]);
                        });
                        _this.input = input;
                        _this.performSelfAnalysis();
                        return _this;
                    }
                    return SomeParser;
                }(parser_traits_1.Parser));
                var parser = new SomeParser([]);
                var serializedGrammar = parser.getSerializedGastProductions();
                // not bothering with more in-depth checks as those unit tests exist elsewhere
                expect(serializedGrammar).to.have.lengthOf(2);
                expect(serializedGrammar[0].type).to.equal("Rule");
                expect(serializedGrammar[1].type).to.equal("Rule");
            });
            it("can use serialized grammar in performSelfAnalysis", function () {
                var serializedGrammar = null;
                var SerializingParser = /** @class */ (function (_super) {
                    __extends(SerializingParser, _super);
                    function SerializingParser(input) {
                        if (input === void 0) { input = []; }
                        var _this = _super.call(this, [PlusTok, MinusTok, IdentTok], {
                            serializedGrammar: serializedGrammar
                        }) || this;
                        _this.rule = _this.RULE("rule", function () {
                            _this.AT_LEAST_ONE_SEP({
                                SEP: IdentTok,
                                DEF: function () {
                                    _this.SUBRULE(_this.rule2);
                                }
                            });
                        });
                        _this.rule2 = _this.RULE("rule2", function () {
                            _this.OR([
                                {
                                    ALT: function () {
                                        _this.CONSUME1(MinusTok);
                                    }
                                },
                                {
                                    ALT: function () {
                                        _this.CONSUME1(PlusTok);
                                    }
                                }
                            ]);
                        });
                        // @ts-ignore - To check serialization with overrides
                        _this.rule2 = _this.OVERRIDE_RULE("rule2", function () {
                            _this.OR([
                                {
                                    ALT: function () {
                                        _this.CONSUME1(MinusTok);
                                    }
                                },
                                {
                                    ALT: function () {
                                        _this.CONSUME1(PlusTok);
                                    }
                                }
                            ]);
                        });
                        // a rule to exercise certain cases in deserializeGrammar
                        _this.rule3 = _this.RULE("rule3", function () {
                            _this.AT_LEAST_ONE(function () {
                                _this.CONSUME1(IdentTok);
                            });
                            _this.MANY_SEP({
                                SEP: PlusTok,
                                DEF: function () {
                                    _this.CONSUME2(IdentTok);
                                }
                            });
                        });
                        _this.input = input;
                        _this.performSelfAnalysis();
                        return _this;
                    }
                    return SerializingParser;
                }(parser_traits_1.Parser));
                var parser = new SerializingParser([]);
                var expected = parser.getGAstProductions();
                serializedGrammar = parser.getSerializedGastProductions();
                var parser1 = new SerializingParser([]);
                var actual = parser1.getGAstProductions();
                expect(expected).to.deep.equal(actual);
            });
            it("can provide syntactic content assist suggestions", function () {
                var ContentAssistParser = /** @class */ (function (_super) {
                    __extends(ContentAssistParser, _super);
                    function ContentAssistParser(input) {
                        if (input === void 0) { input = []; }
                        var _this = _super.call(this, [PlusTok, MinusTok, IdentTok]) || this;
                        _this.topRule = _this.RULE("topRule", function () {
                            _this.MANY(function () {
                                _this.SUBRULE4(_this.rule2);
                            });
                        });
                        _this.rule2 = _this.RULE("rule2", function () {
                            _this.OR([
                                {
                                    ALT: function () {
                                        _this.CONSUME1(MinusTok);
                                    }
                                },
                                {
                                    ALT: function () {
                                        _this.CONSUME3(PlusTok);
                                    }
                                }
                            ]);
                        });
                        _this.input = input;
                        _this.performSelfAnalysis();
                        return _this;
                    }
                    return ContentAssistParser;
                }(parser_traits_1.Parser));
                var parser = new ContentAssistParser([]);
                matchers_1.setEquality(parser.computeContentAssist("topRule", []), [
                    {
                        nextTokenType: MinusTok,
                        nextTokenOccurrence: 1,
                        ruleStack: ["topRule", "rule2"],
                        occurrenceStack: [1, 4]
                    },
                    {
                        nextTokenType: PlusTok,
                        nextTokenOccurrence: 3,
                        ruleStack: ["topRule", "rule2"],
                        occurrenceStack: [1, 4]
                    }
                ]);
                matchers_1.setEquality(parser.computeContentAssist("topRule", [
                    createTokenInstance(MinusTok)
                ]), [
                    {
                        nextTokenType: MinusTok,
                        nextTokenOccurrence: 1,
                        ruleStack: ["topRule", "rule2"],
                        occurrenceStack: [1, 4]
                    },
                    {
                        nextTokenType: PlusTok,
                        nextTokenOccurrence: 3,
                        ruleStack: ["topRule", "rule2"],
                        occurrenceStack: [1, 4]
                    }
                ]);
                expect(function () {
                    return parser.computeContentAssist("invalid_rule_name", []);
                }).to.throw("does not exist in this grammar");
            });
        });
    });
}
defineRecognizerSpecs("Regular Tokens Mode", tokens_public_1.createToken, matchers_1.createRegularToken, tokens_1.tokenStructuredMatcher);
//# sourceMappingURL=recognizer_spec.js.map

/***/ }),
/* 84 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var lexer_errors_public_1 = __webpack_require__(21);
describe("The Chevrotain default lexer error message provider", function () {
    it("Will build unexpected character message", function () {
        var input = "1 LETTERS EXIT_LETTERS +";
        var msg = lexer_errors_public_1.defaultLexerErrorProvider.buildUnexpectedCharactersMessage(input, 23, 1, 0, 23);
        expect(msg).to.equal("unexpected character: ->+<- at offset: 23, skipped 1 characters.");
    });
    it("Will build an unable to pop lexer mode error message ", function () {
        var popToken = {
            image: "EXIT_NUMBERS",
            startOffset: 3
        };
        var msg = lexer_errors_public_1.defaultLexerErrorProvider.buildUnableToPopLexerModeMessage(popToken);
        expect(msg).to.equal("Unable to pop Lexer Mode after encountering Token ->EXIT_NUMBERS<- The Mode Stack is empty");
    });
});
//# sourceMappingURL=lexer_errors_public_spec.js.map

/***/ }),
/* 85 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var utils_1 = __webpack_require__(0);
var tokens_public_1 = __webpack_require__(1);
var lexer_public_1 = __webpack_require__(9);
var lexer_1 = __webpack_require__(31);
var matchers_1 = __webpack_require__(3);
var tokens_1 = __webpack_require__(6);
var ORG_SUPPORT_STICKY = lexer_1.SUPPORT_STICKY;
function defineLexerSpecs(contextName, createToken, tokenMatcher, skipValidationChecks, lexerConfig) {
    if (skipValidationChecks === void 0) { skipValidationChecks = false; }
    var testFull = lexerConfig.positionTracking === "full";
    var testStart = lexerConfig.positionTracking === "onlyStart" || testFull;
    function lexerSpecs() {
        var IntegerTok = createToken({
            name: "IntegerTok",
            pattern: /[1-9]\d*/
        });
        var IdentifierTok = createToken({
            name: "IdentifierTok",
            pattern: /[A-Za-z_]\w*/
        });
        var BambaTok = createToken({ name: "BambaTok", pattern: /bamba/ });
        BambaTok.LONGER_ALT = IdentifierTok;
        var testLexer = new lexer_public_1.Lexer([BambaTok, IntegerTok, IdentifierTok], {
            positionTracking: "onlyOffset"
        });
        describe("The Chevrotain Lexers", function () {
            it("can create a token from a string with priority to the First Token Type with the longest match #1", function () {
                // this can match either IdentifierTok or BambaTok but should match BambaTok has its pattern is defined before IdentifierTok
                var input = "bamba";
                var result = testLexer.tokenize(input);
                expect(tokenMatcher(result.tokens[0], BambaTok)).to.be.true;
                expect(result.tokens[0].image).to.equal("bamba");
                expect(result.tokens[0].startOffset).to.equal(0);
            });
            it("can create a token from a string with priority to the First Token Type with the longest match #2", function () {
                var input = "bambaMIA";
                var result = testLexer.tokenize(input);
                expect(tokenMatcher(result.tokens[0], IdentifierTok)).to.be.true;
                expect(result.tokens[0].image).to.equal("bambaMIA");
                expect(result.tokens[0].startOffset).to.equal(0);
            });
            it("can create a token from a string with priority to the First Token Type with the longest match - negative", function () {
                var IntegerTok = createToken({
                    name: "IntegerTok",
                    pattern: /[1-9]\d*/
                });
                var IdentTok = createToken({
                    name: "IdentifierTok",
                    pattern: /[A-Za-z]+/
                });
                // a bit contrived to test all code branches, the BambaTok is not actually prefix of Identifier tok due to the "_"
                var BambaTok = createToken({
                    name: "BambaTok",
                    pattern: /_bamba/
                });
                BambaTok.LONGER_ALT = IdentTok;
                var myLexer = new lexer_public_1.Lexer([BambaTok, IntegerTok, IdentTok], {
                    positionTracking: "onlyOffset"
                });
                var input = "_bamba123";
                var result = myLexer.tokenize(input);
                expect(tokenMatcher(result.tokens[0], BambaTok)).to.be.true;
                expect(result.tokens[0].image).to.equal("_bamba");
                expect(tokenMatcher(result.tokens[1], IntegerTok)).to.be.true;
                expect(result.tokens[1].image).to.equal("123");
            });
            it("can create a token from a string", function () {
                var input = "6666543221231";
                var result = testLexer.tokenize(input);
                expect(tokenMatcher(result.tokens[0], IntegerTok)).to.be.true;
                expect(result.tokens[0].image).to.equal("6666543221231");
                expect(result.tokens[0].startOffset).to.equal(0);
            });
        });
        var ValidNaPattern = createToken({
            name: "ValidNaPattern",
            pattern: lexer_public_1.Lexer.NA
        });
        var ValidNaPattern2 = createToken({
            name: "ValidNaPattern2",
            pattern: lexer_public_1.Lexer.NA
        });
        // TODO: not sure this API allows invalid stuff
        var InvalidPattern = createToken({
            name: "InvalidPattern",
            pattern: 666
        });
        var MissingPattern = createToken({
            name: "MissingPattern",
            pattern: undefined
        });
        var MultiLinePattern = createToken({
            name: "MultiLinePattern",
            pattern: /bamba/m
        });
        var GlobalPattern = createToken({
            name: "GlobalPattern",
            pattern: /bamba/g
        });
        var CaseInsensitivePattern = createToken({
            name: "CaseInsensitivePattern",
            pattern: /bamba/i
        });
        var IntegerValid = createToken({
            name: "IntegerValid",
            pattern: /0\d*/
        });
        // oops we did copy paste and forgot to change the pattern (same as Integer)
        var DecimalInvalid = createToken({
            name: "DecimalInvalid",
            pattern: /0\d*/
        });
        var Skipped = createToken({ name: "Skipped" });
        Skipped.GROUP = lexer_public_1.Lexer.SKIPPED;
        var Special = createToken({ name: "Special" });
        Special.GROUP = "Strange";
        var InvalidGroupNumber = createToken({
            name: "InvalidGroupNumber",
            pattern: /\d\d\d/
        });
        InvalidGroupNumber.GROUP = 666;
        if (!skipValidationChecks) {
            describe("The Simple Lexer Validations", function () {
                it("won't detect valid patterns as missing", function () {
                    var result = lexer_1.findMissingPatterns([
                        BambaTok,
                        IntegerTok,
                        IdentifierTok
                    ]);
                    expect(result.errors).to.be.empty;
                    expect(result.valid).to.deep.equal([
                        BambaTok,
                        IntegerTok,
                        IdentifierTok
                    ]);
                });
                it("will detect missing patterns", function () {
                    var tokenClasses = [ValidNaPattern, MissingPattern];
                    var result = lexer_1.findMissingPatterns(tokenClasses);
                    expect(result.errors.length).to.equal(1);
                    expect(result.errors[0].tokenTypes).to.deep.equal([
                        MissingPattern
                    ]);
                    expect(result.errors[0].type).to.equal(lexer_public_1.LexerDefinitionErrorType.MISSING_PATTERN);
                    expect(result.errors[0].message).to.contain("MissingPattern");
                    expect(result.valid).to.deep.equal([ValidNaPattern]);
                });
                it("won't detect valid patterns as invalid", function () {
                    var result = lexer_1.findInvalidPatterns([
                        BambaTok,
                        IntegerTok,
                        IdentifierTok,
                        ValidNaPattern
                    ]);
                    expect(result.errors).to.be.empty;
                    expect(result.valid).to.deep.equal([
                        BambaTok,
                        IntegerTok,
                        IdentifierTok,
                        ValidNaPattern
                    ]);
                });
                it("will detect invalid patterns as invalid", function () {
                    var tokenClasses = [ValidNaPattern, InvalidPattern];
                    var result = lexer_1.findInvalidPatterns(tokenClasses);
                    expect(result.errors.length).to.equal(1);
                    expect(result.errors[0].tokenTypes).to.deep.equal([
                        InvalidPattern
                    ]);
                    expect(result.errors[0].type).to.equal(lexer_public_1.LexerDefinitionErrorType.INVALID_PATTERN);
                    expect(result.errors[0].message).to.contain("InvalidPattern");
                    expect(result.valid).to.deep.equal([ValidNaPattern]);
                });
                it("won't detect valid patterns as using unsupported flags", function () {
                    var errors = lexer_1.findUnsupportedFlags([
                        BambaTok,
                        IntegerTok,
                        IdentifierTok,
                        CaseInsensitivePattern
                    ]);
                    expect(errors).to.be.empty;
                });
                it("will detect patterns using unsupported multiline flag", function () {
                    var tokenClasses = [ValidNaPattern, MultiLinePattern];
                    var errors = lexer_1.findUnsupportedFlags(tokenClasses);
                    expect(errors.length).to.equal(1);
                    expect(errors[0].tokenTypes).to.deep.equal([
                        MultiLinePattern
                    ]);
                    expect(errors[0].type).to.equal(lexer_public_1.LexerDefinitionErrorType.UNSUPPORTED_FLAGS_FOUND);
                    expect(errors[0].message).to.contain("MultiLinePattern");
                });
                it("will detect patterns using unsupported global flag", function () {
                    var tokenClasses = [ValidNaPattern, GlobalPattern];
                    var errors = lexer_1.findUnsupportedFlags(tokenClasses);
                    expect(errors.length).to.equal(1);
                    expect(errors[0].tokenTypes).to.deep.equal([GlobalPattern]);
                    expect(errors[0].type).to.equal(lexer_public_1.LexerDefinitionErrorType.UNSUPPORTED_FLAGS_FOUND);
                    expect(errors[0].message).to.contain("GlobalPattern");
                });
                it("won't detect valid patterns as duplicates", function () {
                    var errors = lexer_1.findDuplicatePatterns([
                        MultiLinePattern,
                        IntegerValid
                    ]);
                    expect(errors).to.be.empty;
                });
                it("won't detect NA patterns as duplicates", function () {
                    var errors = lexer_1.findDuplicatePatterns([
                        ValidNaPattern,
                        ValidNaPattern2
                    ]);
                    expect(errors).to.be.empty;
                });
                it("will detect patterns using unsupported end of input anchor", function () {
                    var InvalidToken = createToken({
                        name: "InvalidToken",
                        pattern: /BAMBA$/
                    });
                    var tokenClasses = [ValidNaPattern, InvalidToken];
                    var errors = lexer_1.findEndOfInputAnchor(tokenClasses);
                    expect(errors.length).to.equal(1);
                    expect(errors[0].tokenTypes).to.deep.equal([InvalidToken]);
                    expect(errors[0].type).to.equal(lexer_public_1.LexerDefinitionErrorType.EOI_ANCHOR_FOUND);
                    expect(errors[0].message).to.contain("InvalidToken");
                });
                it("won't detect valid patterns as using unsupported end of input anchor", function () {
                    var errors = lexer_1.findEndOfInputAnchor([
                        IntegerTok,
                        IntegerValid
                    ]);
                    expect(errors).to.be.empty;
                });
                it("will detect patterns using unsupported start of input anchor", function () {
                    var InvalidToken = createToken({
                        name: "InvalidToken",
                        pattern: /^BAMBA/
                    });
                    var tokenClasses = [ValidNaPattern, InvalidToken];
                    var errors = lexer_1.findStartOfInputAnchor(tokenClasses);
                    expect(errors.length).to.equal(1);
                    expect(errors[0].tokenTypes).to.deep.equal([InvalidToken]);
                    expect(errors[0].type).to.equal(lexer_public_1.LexerDefinitionErrorType.SOI_ANCHOR_FOUND);
                    expect(errors[0].message).to.contain("InvalidToken");
                });
                it("will detect unreachable patterns", function () {
                    var ClassKeyword = createToken({
                        name: "ClassKeyword",
                        pattern: /class/
                    });
                    var Identifier = createToken({
                        name: "Identifier",
                        pattern: /\w+/
                    });
                    var tokenClasses = [Identifier, ClassKeyword];
                    var errors = lexer_1.findUnreachablePatterns(tokenClasses);
                    expect(errors.length).to.equal(1);
                    expect(errors[0].tokenTypes).to.deep.equal([
                        Identifier,
                        ClassKeyword
                    ]);
                    expect(errors[0].type).to.equal(lexer_public_1.LexerDefinitionErrorType.UNREACHABLE_PATTERN);
                    expect(errors[0].message).to.contain("can never be matched");
                });
                it("won't detect negation as using unsupported start of input anchor", function () {
                    var negationPattern = createToken({
                        name: "negationPattern",
                        pattern: /[^\\]/
                    });
                    var errors = lexer_1.findStartOfInputAnchor([negationPattern]);
                    expect(errors).to.be.empty;
                });
                it("won't detect valid patterns as using unsupported start of input anchor", function () {
                    var errors = lexer_1.findStartOfInputAnchor([
                        IntegerTok,
                        IntegerValid
                    ]);
                    expect(errors).to.be.empty;
                });
                it("will detect identical patterns for different Token Types", function () {
                    var tokenClasses = [DecimalInvalid, IntegerValid];
                    var errors = lexer_1.findDuplicatePatterns(tokenClasses);
                    expect(errors.length).to.equal(1);
                    expect(errors[0].tokenTypes).to.deep.equal([
                        DecimalInvalid,
                        IntegerValid
                    ]);
                    expect(errors[0].type).to.equal(lexer_public_1.LexerDefinitionErrorType.DUPLICATE_PATTERNS_FOUND);
                    expect(errors[0].message).to.contain("IntegerValid");
                    expect(errors[0].message).to.contain("DecimalInvalid");
                });
                it("will detect patterns that can match an empty string", function () {
                    // should use \d+ as * allows zero repetitions
                    var emptyMatch = createToken({
                        name: "emptyMatch",
                        pattern: /\d*/
                    });
                    var tokenClasses = [emptyMatch];
                    var errors = lexer_1.findEmptyMatchRegExps(tokenClasses);
                    expect(errors.length).to.equal(1);
                    expect(errors[0].tokenTypes).to.deep.equal([emptyMatch]);
                    expect(errors[0].type).to.equal(lexer_public_1.LexerDefinitionErrorType.EMPTY_MATCH_PATTERN);
                    expect(errors[0].message).to.contain("emptyMatch");
                    expect(errors[0].message).to.contain("must not match an empty string");
                });
                it("won't detect valid groups as unsupported", function () {
                    var errors = lexer_1.findInvalidGroupType([
                        IntegerTok,
                        Skipped,
                        Special
                    ]);
                    //noinspection BadExpressionStatementJS
                    expect(errors).to.be.empty;
                });
                it("will detect unsupported group types", function () {
                    var tokenClasses = [InvalidGroupNumber];
                    var errors = lexer_1.findInvalidGroupType(tokenClasses);
                    expect(errors.length).to.equal(1);
                    expect(errors[0].tokenTypes).to.deep.equal([
                        InvalidGroupNumber
                    ]);
                    expect(errors[0].type).to.equal(lexer_public_1.LexerDefinitionErrorType.INVALID_GROUP_TYPE_FOUND);
                    expect(errors[0].message).to.contain("InvalidGroupNumber");
                });
            });
        }
        var PatternNoStart = createToken({
            name: "PatternNoStart",
            pattern: /bamba/i
        });
        var Keyword = createToken({ name: "Keyword", pattern: lexer_public_1.Lexer.NA });
        var If = createToken({
            name: "If",
            pattern: /if/,
            categories: Keyword
        });
        var Else = createToken({
            name: "Else",
            pattern: "else",
            categories: Keyword
        });
        var Return = createToken({
            name: "Return",
            pattern: /return/i,
            categories: Keyword
        });
        var Integer = createToken({ name: "Integer", pattern: /[1-9]\d*/ });
        var Punctuation = createToken({
            name: "Punctuation",
            pattern: lexer_public_1.Lexer.NA
        });
        var LParen = createToken({
            name: "Return",
            pattern: /\(/,
            categories: Punctuation
        });
        var RParen = createToken({
            name: "Return",
            pattern: /\)/,
            categories: Punctuation
        });
        var Whitespace = createToken({
            name: "Whitespace",
            pattern: /(\t| )/
        });
        Whitespace.GROUP = lexer_public_1.Lexer.SKIPPED;
        var NewLine = createToken({
            name: "NewLine",
            pattern: /(\n|\r|\r\n)/
        });
        NewLine.GROUP = lexer_public_1.Lexer.SKIPPED;
        NewLine.LINE_BREAKS = true;
        var WhitespaceNotSkipped = createToken({
            name: "WhitespaceNotSkipped",
            pattern: /\s+/
        });
        WhitespaceNotSkipped.LINE_BREAKS = true;
        var Comment = createToken({ name: "Comment", pattern: /\/\/.+/ });
        Comment.GROUP = "comments";
        var WhitespaceOrAmp = createToken({
            name: "WhitespaceOrAmp",
            pattern: /\s+|&/
        });
        WhitespaceOrAmp.LINE_BREAKS = true;
        var PileOfPoo = createToken({ name: "PileOfPoo", pattern: /💩/ });
        describe("The Simple Lexer transformations", function () {
            it("can transform a pattern to one with startOfInput mark ('^') #1 (NO OP)", function () {
                var orgSource = BambaTok.PATTERN.source;
                var transPattern = lexer_1.addStartOfInput(BambaTok.PATTERN);
                expect(transPattern.source).to.equal("^(?:" + orgSource + ")");
                expect(/^\^/.test(transPattern.source)).to.equal(true);
            });
            it("can transform a pattern to one with startOfInput mark ('^') #2", function () {
                var orgSource = PatternNoStart.PATTERN.source;
                var transPattern = lexer_1.addStartOfInput(PatternNoStart.PATTERN);
                expect(transPattern.source).to.equal("^(?:" + orgSource + ")");
                expect(/^\^/.test(transPattern.source)).to.equal(true);
            });
            if (!skipValidationChecks) {
                it("can transform/analyze an array of Token Typees into matched/ignored/patternToClass", function () {
                    var tokenClasses = [
                        Keyword,
                        If,
                        Else,
                        Return,
                        Integer,
                        Punctuation,
                        LParen,
                        RParen,
                        Whitespace,
                        NewLine
                    ];
                    var analyzeResult = lexer_1.analyzeTokenTypes(tokenClasses, {
                        useSticky: false
                    });
                    var allPatterns = utils_1.map(analyzeResult.patternIdxToConfig, function (currConfig) { return currConfig.pattern; });
                    expect(allPatterns.length).to.equal(8);
                    var allPatternsString = utils_1.map(allPatterns, function (pattern) {
                        return utils_1.isString(pattern) ? pattern : pattern.source;
                    });
                    matchers_1.setEquality(allPatternsString, [
                        "^(?:(\\t| ))",
                        "^(?:(\\n|\\r|\\r\\n))",
                        "^(?:[1-9]\\d*)",
                        "(",
                        ")",
                        "^(?:if)",
                        "^(?:else)",
                        "^(?:return)"
                    ]);
                    var patternIdxToClass = utils_1.map(analyzeResult.patternIdxToConfig, function (currConfig) { return currConfig.tokenType; });
                    expect(utils_1.keys(patternIdxToClass).length).to.equal(8);
                    expect(patternIdxToClass[0]).to.equal(If);
                    expect(patternIdxToClass[1]).to.equal(Else);
                    expect(patternIdxToClass[2]).to.equal(Return);
                    expect(patternIdxToClass[3]).to.equal(Integer);
                    expect(patternIdxToClass[4]).to.equal(LParen);
                    expect(patternIdxToClass[5]).to.equal(RParen);
                    expect(patternIdxToClass[6]).to.equal(Whitespace);
                    expect(patternIdxToClass[7]).to.equal(NewLine);
                });
            }
            if (!skipValidationChecks && ORG_SUPPORT_STICKY) {
                it("can transform/analyze an array of Token Typees into matched/ignored/patternToClass - sticky", function () {
                    var tokenClasses = [
                        Keyword,
                        If,
                        Else,
                        Return,
                        Integer,
                        Punctuation,
                        LParen,
                        RParen,
                        Whitespace,
                        NewLine
                    ];
                    // on newer node.js this will run with the 2nd argument as true.
                    var analyzeResult = lexer_1.analyzeTokenTypes(tokenClasses, {
                        useSticky: true
                    });
                    var allPatterns = utils_1.map(analyzeResult.patternIdxToConfig, function (currConfig) { return currConfig.pattern; });
                    expect(allPatterns.length).to.equal(8);
                    var allPatternsString = utils_1.map(allPatterns, function (pattern) {
                        return utils_1.isString(pattern) ? pattern : pattern.source;
                    });
                    matchers_1.setEquality(allPatternsString, [
                        "(\\t| )",
                        "(\\n|\\r|\\r\\n)",
                        "(",
                        ")",
                        "[1-9]\\d*",
                        "if",
                        "else",
                        "return"
                    ]);
                    utils_1.forEach(allPatterns, function (currPattern) {
                        if (utils_1.isRegExp(currPattern)) {
                            expect(currPattern.sticky).to.be.true;
                        }
                    });
                    var patternIdxToClass = utils_1.map(analyzeResult.patternIdxToConfig, function (currConfig) { return currConfig.tokenType; });
                    expect(utils_1.keys(patternIdxToClass).length).to.equal(8);
                    expect(patternIdxToClass[0]).to.equal(If);
                    expect(patternIdxToClass[1]).to.equal(Else);
                    expect(patternIdxToClass[2]).to.equal(Return);
                    expect(patternIdxToClass[3]).to.equal(Integer);
                    expect(patternIdxToClass[4]).to.equal(LParen);
                    expect(patternIdxToClass[5]).to.equal(RParen);
                    expect(patternIdxToClass[6]).to.equal(Whitespace);
                    expect(patternIdxToClass[7]).to.equal(NewLine);
                });
            }
            it("can count the number of line terminators in a string", function () {
                var ltCounter = new lexer_public_1.Lexer([
                    createToken({
                        name: "lt",
                        pattern: /\s+/
                    }),
                    createToken({
                        name: "num",
                        pattern: /\d+/
                    })
                ]);
                var lastToken = utils_1.last(ltCounter.tokenize("1\r\n1\r1").tokens);
                expect(lastToken.startLine).to.equal(3);
                var lastToken2 = utils_1.last(ltCounter.tokenize("\r\r\r1234\r\n1").tokens);
                expect(lastToken2.startLine).to.equal(5);
                expect(lastToken2.startColumn).to.equal(1);
                var lastToken3 = utils_1.last(ltCounter.tokenize("2\r3\n\r4\n5").tokens);
                expect(lastToken3.startLine).to.equal(5);
            });
            it("can count the number of line terminators in a string - with lookahead", function () {
                var ltCounter = new lexer_public_1.Lexer([
                    createToken({
                        name: "lt",
                        pattern: /\s+/
                    }),
                    createToken({
                        name: "num",
                        // meaningless lookahead for coverage
                        pattern: /\d+(?=|\n)/
                    })
                ]);
                var lastToken = utils_1.last(ltCounter.tokenize("1\r\n1\r1").tokens);
                expect(lastToken.startLine).to.equal(3);
                var lastToken2 = utils_1.last(ltCounter.tokenize("\r\r\r1234\r\n1").tokens);
                expect(lastToken2.startLine).to.equal(5);
                expect(lastToken2.startColumn).to.equal(1);
                var lastToken3 = utils_1.last(ltCounter.tokenize("2\r3\n\r4\n5").tokens);
                expect(lastToken3.startLine).to.equal(5);
            });
            it("can count the number of line terminators in a string - with negative lookahead", function () {
                var ltCounter = new lexer_public_1.Lexer([
                    createToken({
                        name: "lt",
                        pattern: /\s+/
                    }),
                    createToken({
                        name: "num",
                        // including the newline lookahead to assure it is being ignored
                        // while figuring out if this pattern can include a line terminator.
                        pattern: /\d+(?!a\n)/
                    })
                ]);
                var lastToken = utils_1.last(ltCounter.tokenize("1\r\n1\r1").tokens);
                expect(lastToken.startLine).to.equal(3);
                var lastToken2 = utils_1.last(ltCounter.tokenize("\r\r\r1234\r\n1").tokens);
                expect(lastToken2.startLine).to.equal(5);
                expect(lastToken2.startColumn).to.equal(1);
                var lastToken3 = utils_1.last(ltCounter.tokenize("2\r3\n\r4\n5").tokens);
                expect(lastToken3.startLine).to.equal(5);
            });
            it("can count the number of line terminators in a string - string literal patterns", function () {
                var ltCounter = new lexer_public_1.Lexer([
                    createToken({
                        name: "lt",
                        pattern: "\n",
                        line_breaks: true
                    }),
                    createToken({
                        name: "num",
                        pattern: /\d+/
                    })
                ]);
                var lastToken = utils_1.last(ltCounter.tokenize("1\n1\n1").tokens);
                expect(lastToken.startLine).to.equal(3);
            });
            it("can count the number of line terminators in a string - string literal patterns - implicit <line_breaks> prop", function () {
                var ltCounter = new lexer_public_1.Lexer([
                    createToken({
                        name: "lt",
                        pattern: "\n"
                    }),
                    createToken({
                        name: "num",
                        pattern: /\d+/
                    })
                ]);
                var lastToken = utils_1.last(ltCounter.tokenize("1\n1\n1").tokens);
                expect(lastToken.startLine).to.equal(3);
            });
            it("Supports custom Line Terminators", function () {
                var WS = createToken({
                    name: "WS",
                    pattern: /\u2028/,
                    line_breaks: true,
                    group: lexer_public_1.Lexer.SKIPPED
                });
                var ifElseLexer = new lexer_public_1.Lexer([WS, If, Else], {
                    lineTerminatorsPattern: /\u2028/g,
                    lineTerminatorCharacters: ["\u2028"]
                });
                var input = "if\u2028elseif";
                var lexResult = ifElseLexer.tokenize(input);
                var tokens = lexResult.tokens;
                expect(tokens[0].image).to.equal("if");
                expect(tokens[0].startLine).to.equal(1);
                expect(tokens[0].startColumn).to.equal(1);
                expect(tokens[1].image).to.equal("else");
                expect(tokens[1].startLine).to.equal(2);
                expect(tokens[1].startColumn).to.equal(1);
                expect(tokens[2].image).to.equal("if");
                expect(tokens[2].startLine).to.equal(2);
                expect(tokens[2].startColumn).to.equal(5);
            });
            it("Supports custom Line Terminators with numerical lineTerminatorCharacters", function () {
                var WS = createToken({
                    name: "WS",
                    pattern: /\u2028/,
                    line_breaks: true,
                    group: lexer_public_1.Lexer.SKIPPED
                });
                var ifElseLexer = new lexer_public_1.Lexer([WS, If, Else], {
                    lineTerminatorsPattern: /\u2028/g,
                    // "\u2028".charCodeAt(0) === 8232
                    lineTerminatorCharacters: [8232]
                });
                var input = "if\u2028elseif";
                var lexResult = ifElseLexer.tokenize(input);
                var tokens = lexResult.tokens;
                expect(tokens[0].image).to.equal("if");
                expect(tokens[0].startLine).to.equal(1);
                expect(tokens[0].startColumn).to.equal(1);
                expect(tokens[1].image).to.equal("else");
                expect(tokens[1].startLine).to.equal(2);
                expect(tokens[1].startColumn).to.equal(1);
                expect(tokens[2].image).to.equal("if");
                expect(tokens[2].startLine).to.equal(2);
                expect(tokens[2].startColumn).to.equal(5);
            });
        });
        describe("The Simple Lexer Full flow", function () {
            it("Can lex case insensitive patterns", function () {
                var workflow = createToken({
                    name: "workflow",
                    pattern: /WORKFLOW/i
                });
                var input = "worKFloW";
                var lexer = new lexer_public_1.Lexer([workflow], {
                    positionTracking: "onlyOffset"
                });
                var lexResult = lexer.tokenize(input);
                var tokens = lexResult.tokens;
                expect(tokens[0].image).to.equal("worKFloW");
                expect(tokens[0].tokenType).to.equal(workflow);
            });
            it("can run a simpleLexer without optimizing meta chars", function () {
                var Tab = createToken({
                    name: "Tab",
                    pattern: /\t/,
                    group: "spaces"
                });
                var ifElseLexer = new lexer_public_1.Lexer([Tab, If, Else], {
                    positionTracking: "onlyOffset"
                });
                var input = "if\telse";
                var lexResult = ifElseLexer.tokenize(input);
                var tokens = lexResult.tokens;
                expect(tokens[0].image).to.equal("if");
                expect(tokens[1].image).to.equal("else");
                var spacesGroups = lexResult.groups.spaces;
                expect(spacesGroups[0].image).to.equal("\t");
            });
            it("can accept start char code hints from the user", function () {
                var IfOrElse = createToken({
                    name: "IfOrElse",
                    pattern: /if|else/,
                    start_chars_hint: ["i", "e".charCodeAt(0)]
                });
                var ifElseLexer = new lexer_public_1.Lexer([IfOrElse], {
                    positionTracking: "onlyOffset"
                });
                var input = "ifelse";
                var lexResult = ifElseLexer.tokenize(input);
                var tokens = lexResult.tokens;
                expect(tokens[0].image).to.equal("if");
                expect(tokens[1].image).to.equal("else");
            });
            var EndOfInputAnchor = createToken({
                name: "EndOfInputAnchor",
                pattern: /BAMBA$/
            });
            it("can create a simple Lexer from a List of Token Typees", function () {
                var ifElseLexer = new lexer_public_1.Lexer([
                    Keyword,
                    If,
                    Else,
                    Return,
                    Integer,
                    Punctuation,
                    LParen,
                    RParen,
                    Whitespace,
                    NewLine
                ], lexerConfig);
                //noinspection BadExpressionStatementJS
                expect(ifElseLexer.lexerDefinitionErrors).to.be.empty;
                var input = "if (666) reTurn 1\n" + "\telse return 2";
                var lexResult = ifElseLexer.tokenize(input);
                expect(lexResult.groups).to.be.empty;
                expect(lexResult.tokens[0].image).to.equal("if");
                expect(lexResult.tokens[0].startOffset).to.equal(0);
                if (testStart) {
                    expect(lexResult.tokens[0].startLine).to.equal(1);
                    expect(lexResult.tokens[0].startColumn).to.equal(1);
                }
                if (testFull) {
                    expect(lexResult.tokens[0].endOffset).to.equal(1);
                }
                expect(tokenMatcher(lexResult.tokens[0], If)).to.be.true;
                expect(lexResult.tokens[1].image).to.equal("(");
                expect(lexResult.tokens[1].startOffset).to.equal(3);
                if (testStart) {
                    expect(lexResult.tokens[1].startLine).to.equal(1);
                    expect(lexResult.tokens[1].startColumn).to.equal(4);
                }
                if (testFull) {
                    expect(lexResult.tokens[1].endOffset).to.equal(3);
                }
                expect(tokenMatcher(lexResult.tokens[1], LParen)).to.be.true;
                expect(lexResult.tokens[2].image).to.equal("666");
                expect(lexResult.tokens[2].startOffset).to.equal(4);
                if (testStart) {
                    expect(lexResult.tokens[2].startLine).to.equal(1);
                    expect(lexResult.tokens[2].startColumn).to.equal(5);
                }
                if (testFull) {
                    expect(lexResult.tokens[2].endOffset).to.equal(6);
                }
                expect(tokenMatcher(lexResult.tokens[2], Integer)).to.be.true;
                expect(lexResult.tokens[3].image).to.equal(")");
                expect(lexResult.tokens[3].startOffset).to.equal(7);
                if (testStart) {
                    if (testStart) {
                        expect(lexResult.tokens[3].startLine).to.equal(1);
                        expect(lexResult.tokens[3].startColumn).to.equal(8);
                    }
                }
                if (testFull) {
                    expect(lexResult.tokens[3].endOffset).to.equal(7);
                }
                expect(tokenMatcher(lexResult.tokens[3], RParen)).to.be.true;
                expect(lexResult.tokens[4].image).to.equal("reTurn");
                expect(lexResult.tokens[4].startOffset).to.equal(9);
                if (testStart) {
                    expect(lexResult.tokens[4].startLine).to.equal(1);
                    expect(lexResult.tokens[4].startColumn).to.equal(10);
                }
                if (testFull) {
                    expect(lexResult.tokens[4].endOffset).to.equal(14);
                }
                expect(tokenMatcher(lexResult.tokens[4], Return)).to.be.true;
                expect(lexResult.tokens[5].image).to.equal("1");
                expect(lexResult.tokens[5].startOffset).to.equal(16);
                if (testStart) {
                    expect(lexResult.tokens[5].startLine).to.equal(1);
                    expect(lexResult.tokens[5].startColumn).to.equal(17);
                }
                if (testFull) {
                    expect(lexResult.tokens[5].endOffset).to.equal(16);
                }
                expect(tokenMatcher(lexResult.tokens[5], Integer)).to.be.true;
                expect(lexResult.tokens[6].image).to.equal("else");
                expect(lexResult.tokens[6].startOffset).to.equal(19);
                if (testStart) {
                    expect(lexResult.tokens[6].startLine).to.equal(2);
                    expect(lexResult.tokens[6].startColumn).to.equal(2);
                }
                if (testFull) {
                    expect(lexResult.tokens[6].endOffset).to.equal(22);
                }
                expect(tokenMatcher(lexResult.tokens[6], Else)).to.be.true;
                expect(lexResult.tokens[7].image).to.equal("return");
                expect(lexResult.tokens[7].startOffset).to.equal(24);
                if (testStart) {
                    expect(lexResult.tokens[7].startLine).to.equal(2);
                    expect(lexResult.tokens[7].startColumn).to.equal(7);
                }
                if (testFull) {
                    expect(lexResult.tokens[7].endOffset).to.equal(29);
                }
                expect(tokenMatcher(lexResult.tokens[7], Return)).to.be.true;
                expect(lexResult.tokens[8].image).to.equal("2");
                expect(lexResult.tokens[8].startOffset).to.equal(31);
                if (testStart) {
                    expect(lexResult.tokens[8].startLine).to.equal(2);
                    expect(lexResult.tokens[8].startColumn).to.equal(14);
                }
                if (testFull) {
                    expect(lexResult.tokens[8].endOffset).to.equal(31);
                }
                expect(tokenMatcher(lexResult.tokens[8], Integer)).to.be.true;
            });
            // when testing custom patterns the EOI anchor will not exist and thus no error will be thrown
            if (!skipValidationChecks) {
                // This test must not be performed in custom mode
                it("can count the number of line terminators in a string - complement <line_breaks> prop", function () {
                    var ltCounter = new lexer_public_1.Lexer([
                        createToken({
                            name: "lt",
                            pattern: /[^\d]+/
                        }),
                        createToken({
                            name: "num",
                            pattern: /\d+/
                        })
                    ]);
                    var lastToken = utils_1.last(ltCounter.tokenize("1\n1\n1").tokens);
                    expect(lastToken.startLine).to.equal(3);
                });
                it("can build error message for failing to identify potential line_breaks", function () {
                    var One = createToken({ name: "One", pattern: "1" });
                    var actualMsg = lexer_1.buildLineBreakIssueMessage(One, {
                        issue: lexer_public_1.LexerDefinitionErrorType.IDENTIFY_TERMINATOR,
                        errMsg: "oops"
                    });
                    expect(actualMsg).to.contain("oops");
                });
                it("Will throw an error during the creation of a Lexer if the lexer config argument is a boolean", function () {
                    expect(function () {
                        return new lexer_public_1.Lexer([], {
                            positionTracking: "oops"
                        });
                    }).to.throw("Invalid <positionTracking> config option:" + ' "oops"');
                });
                it("Will throw an error during the creation of a Lexer if the lexer config argument is a boolean", function () {
                    expect(function () { return new lexer_public_1.Lexer([], false); }).to.throw("The second argument to the Lexer constructor is now an ILexerConfig");
                });
                it("Will throw an error during the creation of a Lexer if the is using custom " +
                    "line terminators without specifying the lineTerminatorCharacters", function () {
                    expect(function () {
                        return new lexer_public_1.Lexer([], { lineTerminatorsPattern: /\n/g });
                    }).to.throw("Error: Missing <lineTerminatorCharacters> property on the Lexer config.");
                });
                it("Will throw an error during the creation of a Lexer if the Lexer's definition is invalid", function () {
                    expect(function () { return new lexer_public_1.Lexer([EndOfInputAnchor, If, Else]); }, lexerConfig).to.throw(/Errors detected in definition of Lexer/);
                    expect(function () { return new lexer_public_1.Lexer([EndOfInputAnchor, If, Else]); }, lexerConfig).to.throw(/EndOfInputAnchor/);
                });
                it("can defer the throwing of errors during the creation of a Lexer if the Lexer's definition is invalid", function () {
                    expect(function () {
                        return new lexer_public_1.Lexer([EndOfInputAnchor, If, Else], {
                            positionTracking: "onlyOffset",
                            deferDefinitionErrorsHandling: true
                        });
                    }).to.not.throw(/Errors detected in definition of Lexer/);
                    expect(function () {
                        return new lexer_public_1.Lexer([EndOfInputAnchor, If, Else], {
                            positionTracking: "onlyOffset",
                            deferDefinitionErrorsHandling: true
                        });
                    }).to.not.throw(/EndOfInputAnchor/);
                    var lexerWithErrs = new lexer_public_1.Lexer([EndOfInputAnchor, If, Else], {
                        positionTracking: "onlyOffset",
                        deferDefinitionErrorsHandling: true
                    });
                    //noinspection BadExpressionStatementJS
                    expect(lexerWithErrs.lexerDefinitionErrors).to.not.be.empty;
                    // even when the Error handling is deferred, actual usage of an invalid lexer is not permitted!
                    expect(function () { return lexerWithErrs.tokenize("else"); }).to.throw(/Unable to Tokenize because Errors detected in definition of Lexer/);
                    expect(function () { return lexerWithErrs.tokenize("else"); }).to.throw(/EndOfInputAnchor/);
                });
            }
            it("can skip invalid character inputs and only report one error per sequence of characters skipped", function () {
                var ifElseLexer = new lexer_public_1.Lexer([
                    Keyword,
                    If,
                    Else,
                    Return,
                    Integer,
                    Punctuation,
                    LParen,
                    RParen,
                    Whitespace,
                    NewLine
                ], lexerConfig);
                var input = "if (666) return 1@#$@#$\n" + "\telse return 2";
                var lexResult = ifElseLexer.tokenize(input);
                expect(lexResult.errors.length).to.equal(1);
                expect(lexResult.errors[0].message).to.contain("@");
                expect(lexResult.errors[0].length).to.equal(6);
                if (testStart) {
                    expect(lexResult.errors[0].line).to.equal(1);
                    expect(lexResult.errors[0].column).to.equal(18);
                }
                else {
                    expect(lexResult.errors[0].line).to.be.undefined;
                    expect(lexResult.errors[0].column).to.be.undefined;
                }
                expect(lexResult.tokens[0].image).to.equal("if");
                expect(lexResult.tokens[0].startOffset).to.equal(0);
                if (testStart) {
                    expect(lexResult.tokens[0].startLine).to.equal(1);
                    expect(lexResult.tokens[0].startColumn).to.equal(1);
                }
                expect(tokenMatcher(lexResult.tokens[0], If)).to.be.true;
                expect(lexResult.tokens[1].image).to.equal("(");
                expect(lexResult.tokens[1].startOffset).to.equal(3);
                if (testStart) {
                    expect(lexResult.tokens[1].startLine).to.equal(1);
                    expect(lexResult.tokens[1].startColumn).to.equal(4);
                }
                expect(tokenMatcher(lexResult.tokens[1], LParen)).to.be.true;
                expect(lexResult.tokens[2].image).to.equal("666");
                expect(lexResult.tokens[2].startOffset).to.equal(4);
                if (testStart) {
                    expect(lexResult.tokens[2].startLine).to.equal(1);
                    expect(lexResult.tokens[2].startColumn).to.equal(5);
                }
                expect(tokenMatcher(lexResult.tokens[2], Integer)).to.be.true;
                expect(lexResult.tokens[3].image).to.equal(")");
                expect(lexResult.tokens[3].startOffset).to.equal(7);
                if (testStart) {
                    expect(lexResult.tokens[3].startLine).to.equal(1);
                    expect(lexResult.tokens[3].startColumn).to.equal(8);
                }
                expect(tokenMatcher(lexResult.tokens[3], RParen)).to.be.true;
                expect(lexResult.tokens[4].image).to.equal("return");
                expect(lexResult.tokens[4].startOffset).to.equal(9);
                if (testStart) {
                    expect(lexResult.tokens[4].startLine).to.equal(1);
                    expect(lexResult.tokens[4].startColumn).to.equal(10);
                }
                expect(tokenMatcher(lexResult.tokens[4], Return)).to.be.true;
                expect(lexResult.tokens[5].image).to.equal("1");
                expect(lexResult.tokens[5].startOffset).to.equal(16);
                if (testStart) {
                    expect(lexResult.tokens[5].startLine).to.equal(1);
                    expect(lexResult.tokens[5].startColumn).to.equal(17);
                }
                expect(tokenMatcher(lexResult.tokens[5], Integer)).to.be.true;
                expect(lexResult.tokens[6].image).to.equal("else");
                expect(lexResult.tokens[6].startOffset).to.equal(25);
                if (testStart) {
                    expect(lexResult.tokens[6].startLine).to.equal(2);
                    expect(lexResult.tokens[6].startColumn).to.equal(2);
                }
                expect(tokenMatcher(lexResult.tokens[6], Else)).to.be.true;
                expect(lexResult.tokens[7].image).to.equal("return");
                expect(lexResult.tokens[7].startOffset).to.equal(30);
                if (testStart) {
                    expect(lexResult.tokens[7].startLine).to.equal(2);
                    expect(lexResult.tokens[7].startColumn).to.equal(7);
                }
                expect(tokenMatcher(lexResult.tokens[7], Return)).to.be.true;
                expect(lexResult.tokens[8].image).to.equal("2");
                expect(lexResult.tokens[8].startOffset).to.equal(37);
                if (testStart) {
                    expect(lexResult.tokens[8].startLine).to.equal(2);
                    expect(lexResult.tokens[8].startColumn).to.equal(14);
                }
                expect(tokenMatcher(lexResult.tokens[8], Integer)).to.be.true;
            });
            it("won't go into infinite loops when skipping at end of input", function () {
                var ifElseLexer = new lexer_public_1.Lexer([
                    Keyword,
                    If,
                    Else,
                    Return,
                    Integer,
                    Punctuation,
                    LParen,
                    RParen,
                    Whitespace,
                    NewLine
                ], lexerConfig);
                var input = "if&&&&&&&&&&&&&&&&&&&&&&&&&&&&";
                var lexResult = ifElseLexer.tokenize(input);
                expect(lexResult.errors.length).to.equal(1);
                expect(lexResult.errors[0].message).to.contain("&");
                if (testStart) {
                    expect(lexResult.errors[0].line).to.equal(1);
                    expect(lexResult.errors[0].column).to.equal(3);
                }
                else {
                    expect(lexResult.errors[0].line).to.be.undefined;
                    expect(lexResult.errors[0].column).to.be.undefined;
                }
                expect(lexResult.errors[0].length).to.equal(28);
                expect(lexResult.tokens[0].image).to.equal("if");
                expect(lexResult.tokens[0].startOffset).to.equal(0);
                if (testStart) {
                    expect(lexResult.tokens[0].startLine).to.equal(1);
                    expect(lexResult.tokens[0].startColumn).to.equal(1);
                }
                expect(tokenMatcher(lexResult.tokens[0], If)).to.be.true;
            });
            it("can deal with line terminators inside multi-line Tokens", function () {
                var ifElseLexer = new lexer_public_1.Lexer([If, Else, WhitespaceNotSkipped], lexerConfig);
                var input = "if\r\r\telse\rif\n";
                var lexResult = ifElseLexer.tokenize(input);
                expect(lexResult.tokens[0].image).to.equal("if");
                expect(lexResult.tokens[0].startOffset).to.equal(0);
                if (testStart) {
                    expect(lexResult.tokens[0].startLine).to.equal(1);
                    expect(lexResult.tokens[0].startColumn).to.equal(1);
                }
                if (testFull) {
                    expect(lexResult.tokens[0].endLine).to.equal(1);
                    expect(lexResult.tokens[0].endColumn).to.equal(2);
                }
                expect(tokenMatcher(lexResult.tokens[0], If)).to.be.true;
                expect(lexResult.tokens[1].image).to.equal("\r\r\t");
                expect(lexResult.tokens[1].startOffset).to.equal(2);
                if (testStart) {
                    expect(lexResult.tokens[1].startLine).to.equal(1);
                    expect(lexResult.tokens[1].startColumn).to.equal(3);
                }
                if (testFull) {
                    expect(lexResult.tokens[1].endLine).to.equal(3);
                    expect(lexResult.tokens[1].endColumn).to.equal(1);
                }
                expect(tokenMatcher(lexResult.tokens[1], WhitespaceNotSkipped))
                    .to.be.true;
                expect(lexResult.tokens[2].image).to.equal("else");
                expect(lexResult.tokens[2].startOffset).to.equal(5);
                if (testStart) {
                    expect(lexResult.tokens[2].startLine).to.equal(3);
                    expect(lexResult.tokens[2].startColumn).to.equal(2);
                }
                if (testFull) {
                    expect(lexResult.tokens[2].endLine).to.equal(3);
                    expect(lexResult.tokens[2].endColumn).to.equal(5);
                }
                expect(tokenMatcher(lexResult.tokens[2], Else)).to.be.true;
                expect(lexResult.tokens[3].image).to.equal("\r");
                expect(lexResult.tokens[3].startOffset).to.equal(9);
                if (testStart) {
                    expect(lexResult.tokens[3].startLine).to.equal(3);
                    expect(lexResult.tokens[3].startColumn).to.equal(6);
                }
                if (testFull) {
                    expect(lexResult.tokens[3].endLine).to.equal(3);
                    expect(lexResult.tokens[3].endColumn).to.equal(6);
                }
                expect(tokenMatcher(lexResult.tokens[3], WhitespaceNotSkipped))
                    .to.be.true;
                expect(lexResult.tokens[4].image).to.equal("if");
                expect(lexResult.tokens[4].startOffset).to.equal(10);
                if (testStart) {
                    expect(lexResult.tokens[4].startLine).to.equal(4);
                    expect(lexResult.tokens[4].startColumn).to.equal(1);
                }
                if (testFull) {
                    expect(lexResult.tokens[4].endLine).to.equal(4);
                    expect(lexResult.tokens[4].endColumn).to.equal(2);
                }
                expect(tokenMatcher(lexResult.tokens[4], If)).to.be.true;
                expect(lexResult.tokens[5].image).to.equal("\n");
                expect(lexResult.tokens[5].startOffset).to.equal(12);
                if (testStart) {
                    expect(lexResult.tokens[5].startLine).to.equal(4);
                    expect(lexResult.tokens[5].startColumn).to.equal(3);
                }
                if (testFull) {
                    expect(lexResult.tokens[5].endLine).to.equal(4);
                    expect(lexResult.tokens[5].endColumn).to.equal(3);
                }
                expect(tokenMatcher(lexResult.tokens[5], WhitespaceNotSkipped))
                    .to.be.true;
            });
            it("can deal with Tokens which may or may not be a lineTerminator", function () {
                var ifElseLexer = new lexer_public_1.Lexer([If, Else, WhitespaceOrAmp], lexerConfig);
                var input = "if\r\r\telse&if";
                var lexResult = ifElseLexer.tokenize(input);
                expect(lexResult.tokens[0].image).to.equal("if");
                expect(lexResult.tokens[0].startOffset).to.equal(0);
                if (testStart) {
                    expect(lexResult.tokens[0].startLine).to.equal(1);
                    expect(lexResult.tokens[0].startColumn).to.equal(1);
                }
                if (testFull) {
                    expect(lexResult.tokens[0].endLine).to.equal(1);
                    expect(lexResult.tokens[0].endColumn).to.equal(2);
                }
                expect(tokenMatcher(lexResult.tokens[0], If)).to.be.true;
                expect(lexResult.tokens[1].image).to.equal("\r\r\t");
                expect(lexResult.tokens[1].startOffset).to.equal(2);
                if (testStart) {
                    expect(lexResult.tokens[1].startLine).to.equal(1);
                    expect(lexResult.tokens[1].startColumn).to.equal(3);
                }
                if (testFull) {
                    expect(lexResult.tokens[1].endLine).to.equal(3);
                    expect(lexResult.tokens[1].endColumn).to.equal(1);
                }
                expect(tokenMatcher(lexResult.tokens[1], WhitespaceOrAmp)).to.be
                    .true;
                expect(lexResult.tokens[2].image).to.equal("else");
                expect(lexResult.tokens[2].startOffset).to.equal(5);
                if (testStart) {
                    expect(lexResult.tokens[2].startLine).to.equal(3);
                    expect(lexResult.tokens[2].startColumn).to.equal(2);
                }
                if (testFull) {
                    expect(lexResult.tokens[2].endLine).to.equal(3);
                    expect(lexResult.tokens[2].endColumn).to.equal(5);
                }
                expect(tokenMatcher(lexResult.tokens[2], Else)).to.be.true;
                expect(lexResult.tokens[3].image).to.equal("&");
                expect(lexResult.tokens[3].startOffset).to.equal(9);
                if (testStart) {
                    expect(lexResult.tokens[3].startLine).to.equal(3);
                    expect(lexResult.tokens[3].startColumn).to.equal(6);
                }
                if (testFull) {
                    expect(lexResult.tokens[3].endLine).to.equal(3);
                    expect(lexResult.tokens[3].endColumn).to.equal(6);
                }
                expect(tokenMatcher(lexResult.tokens[3], WhitespaceOrAmp)).to.be
                    .true;
                expect(lexResult.tokens[4].image).to.equal("if");
                expect(lexResult.tokens[4].startOffset).to.equal(10);
                if (testStart) {
                    expect(lexResult.tokens[4].startLine).to.equal(3);
                    expect(lexResult.tokens[4].startColumn).to.equal(7);
                }
                if (testFull) {
                    expect(lexResult.tokens[4].endLine).to.equal(3);
                    expect(lexResult.tokens[4].endColumn).to.equal(8);
                }
                expect(tokenMatcher(lexResult.tokens[4], If)).to.be.true;
            });
            it("supports Token groups", function () {
                var ifElseLexer = new lexer_public_1.Lexer([If, Else, Comment, NewLine], lexerConfig);
                var input = "if//else";
                var lexResult = ifElseLexer.tokenize(input);
                expect(lexResult.tokens[0].image).to.equal("if");
                expect(lexResult.tokens[0].startOffset).to.equal(0);
                if (testStart) {
                    expect(lexResult.tokens[0].startLine).to.equal(1);
                    expect(lexResult.tokens[0].startColumn).to.equal(1);
                }
                if (testFull) {
                    expect(lexResult.tokens[0].endLine).to.equal(1);
                    expect(lexResult.tokens[0].endColumn).to.equal(2);
                }
                expect(tokenMatcher(lexResult.tokens[0], If)).to.be.true;
                expect(lexResult.groups).to.have.property("comments");
                // tslint:disable
                expect(lexResult.groups["comments"]).to.have.length(1);
                var comment = lexResult.groups["comments"][0];
                // tslint:enable
                expect(comment.image).to.equal("//else");
                expect(comment.startOffset).to.equal(2);
                if (testStart) {
                    expect(comment.startLine).to.equal(1);
                    expect(comment.startColumn).to.equal(3);
                }
                if (testFull) {
                    expect(comment.endLine).to.equal(1);
                    expect(comment.endColumn).to.equal(8);
                }
                expect(tokenMatcher(comment, Comment)).to.be.true;
            });
            it("won't have leftover state when using token groups", function () {
                var ifElseLexer = new lexer_public_1.Lexer([If, Else, Comment, NewLine], lexerConfig);
                var input = "if//else";
                var lexResult = ifElseLexer.tokenize(input);
                expect(lexResult.groups).to.have.property("comments");
                // tslint:disable
                expect(lexResult.groups["comments"]).to.have.length(1);
                // tslint:enable
                // 2th time
                lexResult = ifElseLexer.tokenize(input);
                expect(lexResult.groups).to.have.property("comments");
                // tslint:disable
                expect(lexResult.groups["comments"]).to.have.length(1);
                // tslint:enable
            });
            it("can lex a pile of poo", function () {
                var ifElseLexer = new lexer_public_1.Lexer([If, PileOfPoo, NewLine], lexerConfig);
                var input = "if💩";
                var lexResult = ifElseLexer.tokenize(input);
                expect(lexResult.tokens[0].image).to.equal("if");
                expect(lexResult.tokens[0].tokenType).to.equal(If);
                expect(lexResult.tokens[1].image).to.equal("💩");
                expect(lexResult.tokens[1].tokenType).to.equal(PileOfPoo);
            });
            context("lexer modes", function () {
                var One = createToken({ name: "One", pattern: "1" });
                var Two = createToken({ name: "Two", pattern: /2/ });
                var Three = createToken({ name: "Three", pattern: /3/ });
                var Alpha = createToken({ name: "Alpha", pattern: "A" });
                var Beta = createToken({ name: "Beta", pattern: /B/ });
                var Gamma = createToken({ name: "Gamma", pattern: /G/ });
                var Hash = createToken({ name: "Hash", pattern: /#/ });
                var Caret = createToken({ name: "Caret", pattern: /\^/ });
                var Amp = createToken({ name: "Amp", pattern: /&/ });
                var NUMBERS = createToken({
                    name: "NUMBERS",
                    pattern: /NUMBERS/
                });
                NUMBERS.PUSH_MODE = "numbers";
                var LETTERS = createToken({
                    name: "LETTERS",
                    pattern: /LETTERS/
                });
                LETTERS.PUSH_MODE = "letters";
                var SIGNS = createToken({ name: "SIGNS", pattern: /SIGNS/ });
                SIGNS.PUSH_MODE = "signs";
                var SIGNS_AND_EXIT_LETTERS = createToken({
                    name: "SIGNS_AND_EXIT_LETTERS",
                    pattern: /SIGNS_AND_EXIT_LETTERS/
                });
                SIGNS_AND_EXIT_LETTERS.PUSH_MODE = "signs";
                SIGNS_AND_EXIT_LETTERS.POP_MODE = true;
                var ExitNumbers = createToken({
                    name: "ExitNumbers",
                    pattern: /EXIT_NUMBERS/
                });
                ExitNumbers.POP_MODE = true;
                var ExitLetters = createToken({
                    name: "ExitLetters",
                    pattern: /EXIT_LETTERS/
                });
                ExitLetters.POP_MODE = true;
                var ExitSigns = createToken({
                    name: "ExitSigns",
                    pattern: /EXIT_SIGNS/
                });
                ExitSigns.POP_MODE = true;
                var Whitespace = createToken({
                    name: "Whitespace",
                    pattern: /(\t| )/
                });
                Whitespace.GROUP = lexer_public_1.Lexer.SKIPPED;
                var modeLexerDefinition = {
                    modes: {
                        numbers: [
                            One,
                            Two,
                            Three,
                            ExitNumbers,
                            LETTERS,
                            Whitespace
                        ],
                        letters: [
                            Alpha,
                            Beta,
                            Gamma,
                            ExitLetters,
                            SIGNS_AND_EXIT_LETTERS,
                            SIGNS,
                            Whitespace
                        ],
                        signs: [
                            Hash,
                            Caret,
                            Amp,
                            ExitSigns,
                            NUMBERS,
                            Whitespace,
                            NewLine
                        ]
                    },
                    defaultMode: "numbers"
                };
                var ModeLexer = new lexer_public_1.Lexer(modeLexerDefinition, lexerConfig);
                it("supports 'context' lexer modes full flow", function () {
                    var input = "1 LETTERS G A G SIGNS & EXIT_SIGNS B EXIT_LETTERS 3";
                    var lexResult = ModeLexer.tokenize(input);
                    expect(lexResult.errors).to.be.empty;
                    var images = utils_1.map(lexResult.tokens, function (currTok) { return currTok.image; });
                    expect(images).to.deep.equal([
                        "1",
                        "LETTERS",
                        "G",
                        "A",
                        "G",
                        "SIGNS",
                        "&",
                        "EXIT_SIGNS",
                        "B",
                        "EXIT_LETTERS",
                        "3" // back in numbers mode
                    ]);
                });
                it("supports lexer error reporting with modes", function () {
                    var input = "1 LETTERS EXIT_LETTERS +";
                    var lexResult = ModeLexer.tokenize(input);
                    expect(lexResult.errors).to.have.lengthOf(1);
                    expect(lexResult.errors[0].message).to.equal("unexpected character: ->+<- at offset: 23, skipped 1 characters.");
                });
                it("allows choosing the initial Mode", function () {
                    var input = "A G SIGNS ^";
                    var lexResult = ModeLexer.tokenize(input, "letters");
                    expect(lexResult.errors).to.be.empty;
                    var images = utils_1.map(lexResult.tokens, function (currTok) { return currTok.image; });
                    expect(images).to.deep.equal(["A", "G", "SIGNS", "^"]);
                });
                it("won't allow lexing tokens that are not in the current mode's set", function () {
                    var input = "1 LETTERS 1A";
                    var lexResult = ModeLexer.tokenize(input);
                    expect(lexResult.errors).to.have.lengthOf(1);
                    expect(lexResult.errors[0].message).to.include("skipped 1");
                    expect(lexResult.errors[0].message).to.include(">1<");
                    var images = utils_1.map(lexResult.tokens, function (currTok) { return currTok.image; });
                    expect(images).to.deep.equal([
                        "1",
                        "LETTERS",
                        "A" // the second "1" is missing because its not allowed in the "letters" mode
                    ]);
                });
                it("Will create a lexer error and skip the mode popping when there is no lexer mode to pop", function () {
                    var input = "1 EXIT_NUMBERS 2";
                    var lexResult = ModeLexer.tokenize(input);
                    expect(lexResult.errors).to.have.lengthOf(1);
                    expect(lexResult.errors[0].message).to.include(">EXIT_NUMBERS<");
                    expect(lexResult.errors[0].message).to.include("Unable to pop");
                    if (testStart) {
                        expect(lexResult.errors[0].line).to.equal(1);
                        expect(lexResult.errors[0].column).to.equal(3);
                    }
                    else {
                        expect(lexResult.errors[0].line).to.equal(undefined);
                        expect(lexResult.errors[0].column).to.equal(undefined);
                    }
                    expect(lexResult.errors[0].length).to.equal(12);
                    var images = utils_1.map(lexResult.tokens, function (currTok) { return currTok.image; });
                    expect(images).to.deep.equal(["1", "EXIT_NUMBERS", "2"]);
                });
                it("Will pop the lexer mode and push a new one if both are defined on the token", function () {
                    var input = "LETTERS SIGNS_AND_EXIT_LETTERS &";
                    var lexResult = ModeLexer.tokenize(input);
                    expect(lexResult.errors).to.be.empty;
                    var images = utils_1.map(lexResult.tokens, function (currTok) { return currTok.image; });
                    expect(images).to.deep.equal([
                        "LETTERS",
                        "SIGNS_AND_EXIT_LETTERS",
                        "&"
                    ]);
                });
                it("Will detect Token definitions with push modes values that does not exist", function () {
                    var One = createToken({ name: "One", pattern: /1/ });
                    var Two = createToken({ name: "Two", pattern: /2/ });
                    var Alpha = createToken({ name: "Alpha", pattern: /A/ });
                    var Beta = createToken({ name: "Beta", pattern: /B/ });
                    var Gamma = createToken({ name: "Gamma", pattern: /G/ });
                    var EnterNumbers = createToken({
                        name: "EnterNumbers",
                        pattern: /NUMBERS/
                    });
                    EnterNumbers.PUSH_MODE = "numbers";
                    var lexerDef = {
                        modes: {
                            letters: [
                                Alpha,
                                Beta,
                                Gamma,
                                Whitespace,
                                EnterNumbers
                            ],
                            // the numbers mode has a typo! so the PUSH_MODE in the 'EnterNumbers' is invalid
                            nuMbers_TYPO: [One, Two, Whitespace, NewLine]
                        },
                        defaultMode: "letters"
                    };
                    var badLexer = new lexer_public_1.Lexer(lexerDef, {
                        deferDefinitionErrorsHandling: true
                    });
                    expect(badLexer.lexerDefinitionErrors).to.have.lengthOf(1);
                    expect(badLexer.lexerDefinitionErrors[0].tokenTypes).to.deep.equal([EnterNumbers]);
                    expect(badLexer.lexerDefinitionErrors[0].type).to.equal(lexer_public_1.LexerDefinitionErrorType.PUSH_MODE_DOES_NOT_EXIST);
                    expect(badLexer.lexerDefinitionErrors[0].message).to.include("PUSH_MODE");
                    expect(badLexer.lexerDefinitionErrors[0].message).to.include("EnterNumbers");
                    expect(badLexer.lexerDefinitionErrors[0].message).to.include("which does not exist");
                });
                it("Will detect a multiMode Lexer definition which is missing the <modes> property", function () {
                    var lexerDef = {
                        modes___: {
                        //  typo in 'modes' property name
                        },
                        defaultMode: ""
                    };
                    var badLexer = new lexer_public_1.Lexer(lexerDef, {
                        deferDefinitionErrorsHandling: true,
                        positionTracking: "onlyOffset"
                    });
                    expect(badLexer.lexerDefinitionErrors).to.have.lengthOf(1);
                    expect(badLexer.lexerDefinitionErrors[0].type).to.equal(lexer_public_1.LexerDefinitionErrorType.MULTI_MODE_LEXER_WITHOUT_MODES_PROPERTY);
                    expect(badLexer.lexerDefinitionErrors[0].message).to.include("MultiMode Lexer cannot be initialized");
                    expect(badLexer.lexerDefinitionErrors[0].message).to.include("without a <modes> property");
                });
                it("Will detect a multiMode Lexer definition which is missing the <defaultMode> property", function () {
                    var lexerDef = {
                        modes: {},
                        defaultMode___: "" //  typo in 'defaultMode' property name
                    };
                    var badLexer = new lexer_public_1.Lexer(lexerDef, {
                        deferDefinitionErrorsHandling: true,
                        positionTracking: "onlyOffset"
                    });
                    expect(badLexer.lexerDefinitionErrors).to.have.lengthOf(1);
                    expect(badLexer.lexerDefinitionErrors[0].type).to.equal(lexer_public_1.LexerDefinitionErrorType.MULTI_MODE_LEXER_WITHOUT_DEFAULT_MODE);
                    expect(badLexer.lexerDefinitionErrors[0].message).to.include("MultiMode Lexer cannot be initialized");
                    expect(badLexer.lexerDefinitionErrors[0].message).to.include("without a <defaultMode> property");
                });
                it("Will detect a multiMode Lexer definition " +
                    "which has an invalid (missing the value) of the <defaultMode> property", function () {
                    var lexerDef = {
                        modes: {
                            bamba: []
                        },
                        defaultMode: "bisli"
                    };
                    var badLexer = new lexer_public_1.Lexer(lexerDef, {
                        deferDefinitionErrorsHandling: true,
                        positionTracking: "onlyOffset"
                    });
                    expect(badLexer.lexerDefinitionErrors).to.have.lengthOf(1);
                    expect(badLexer.lexerDefinitionErrors[0].type).to.equal(lexer_public_1.LexerDefinitionErrorType.MULTI_MODE_LEXER_DEFAULT_MODE_VALUE_DOES_NOT_EXIST);
                    expect(badLexer.lexerDefinitionErrors[0].message).to.include("MultiMode Lexer cannot be initialized");
                    expect(badLexer.lexerDefinitionErrors[0].message).to.include("which does not exist");
                    expect(badLexer.lexerDefinitionErrors[0].message).to.include("bisli");
                });
                it("Will detect a Lexer definition which has undefined Token Typees", function () {
                    var lexerDef = [
                        Alpha,
                        Beta /* this is undefined */,
                        ,
                        Gamma
                    ];
                    var badLexer = new lexer_public_1.Lexer(lexerDef, {
                        deferDefinitionErrorsHandling: true,
                        positionTracking: "onlyOffset"
                    });
                    expect(badLexer.lexerDefinitionErrors).to.have.lengthOf(1);
                    expect(badLexer.lexerDefinitionErrors[0].type).to.equal(lexer_public_1.LexerDefinitionErrorType.LEXER_DEFINITION_CANNOT_CONTAIN_UNDEFINED);
                    expect(badLexer.lexerDefinitionErrors[0].message).to.include("A Lexer cannot be initialized using an undefined Token Type");
                    expect(badLexer.lexerDefinitionErrors[0].message).to.include("2");
                });
                describe("custom lexer error provider", function () {
                    var customErrorProvider = {
                        buildUnableToPopLexerModeMessage: function (token) {
                            return "No pop for you " + token.image;
                        },
                        buildUnexpectedCharactersMessage: function (fullText, startOffset, length, line, column) {
                            return "[" + line + ", " + column + "] Unknown character " + fullText.charAt(startOffset) + " at position " + startOffset + " skipped " + length;
                        }
                    };
                    var ModeLexerWithCustomErrors = new lexer_public_1.Lexer(modeLexerDefinition, {
                        errorMessageProvider: customErrorProvider
                    });
                    it("supports custom unexpected characters lexer error message", function () {
                        var input = "1 LETTERS EXIT_LETTERS +";
                        var lexResult = ModeLexerWithCustomErrors.tokenize(input);
                        expect(lexResult.errors).to.have.lengthOf(1);
                        expect(lexResult.errors[0].message).to.equal("[1, 24] Unknown character + at position 23 skipped 1");
                    });
                    it("supports custom unable to pop lexer mode error message", function () {
                        var input = "1 EXIT_NUMBERS 2";
                        var lexResult = ModeLexerWithCustomErrors.tokenize(input);
                        expect(lexResult.errors).to.have.lengthOf(1);
                        expect(lexResult.errors[0].message).to.equal("No pop for you EXIT_NUMBERS");
                    });
                });
                context("custom pattern", function () {
                    function defineCustomPatternSpec(variant, customPattern) {
                        it(variant, function () {
                            var time = 1;
                            function extraContextValidator(text, offset, tokens, groups) {
                                var result = utils_1.isFunction(customPattern)
                                    ? customPattern(text, offset)
                                    : customPattern.exec(text, offset);
                                if (result !== null) {
                                    if (time === 1) {
                                        expect(tokens).to.be.empty;
                                        time++;
                                    }
                                    else if (time === 2) {
                                        expect(tokens).to.have.lengthOf(2);
                                        expect(groups.whitespace).to.have.lengthOf(2);
                                        time++;
                                    }
                                    else {
                                        throw Error("Issue with Custom Token pattern context");
                                    }
                                }
                                return result;
                            }
                            var A = createToken({
                                name: "A",
                                pattern: "A"
                            });
                            var B = createToken({
                                name: "B",
                                pattern: extraContextValidator,
                                line_breaks: false
                            });
                            var WS = createToken({
                                name: "WS",
                                pattern: {
                                    exec: function (text, offset) {
                                        return /^\s+/.exec(text.substring(offset));
                                    }
                                },
                                group: "whitespace",
                                line_breaks: true
                            });
                            var lexerDef = [WS, A, B];
                            var myLexer = new lexer_public_1.Lexer(lexerDef, lexerConfig);
                            var lexResult = myLexer.tokenize("B A\n B ");
                            expect(lexResult.tokens).to.have.length(3);
                            expect(tokenMatcher(lexResult.tokens[0], B)).to.be
                                .true;
                            expect(tokenMatcher(lexResult.tokens[1], A)).to.be
                                .true;
                            expect(tokenMatcher(lexResult.tokens[2], B)).to.be
                                .true;
                            var lastToken = lexResult.tokens[2];
                            expect(lastToken.startOffset).to.equal(5);
                            if (testStart) {
                                expect(lastToken.startLine).to.equal(2);
                                expect(lastToken.startColumn).to.equal(2);
                            }
                            if (testFull) {
                                expect(lastToken.endLine).to.equal(2);
                                expect(lastToken.endColumn).to.equal(2);
                                expect(lastToken.endOffset).to.equal(5);
                            }
                        });
                    }
                    defineCustomPatternSpec("With short function syntax", function (text, offset) { return /^B/.exec(text.substring(offset)); });
                    defineCustomPatternSpec("verbose syntax", {
                        exec: function (text, offset) {
                            return /^B/.exec(text.substring(offset));
                        }
                    });
                });
            });
        });
    }
    context(contextName, lexerSpecs);
    if (lexer_1.SUPPORT_STICKY === true) {
        context(contextName + " NO STICKY", function () {
            before(lexer_1.disableSticky);
            lexerSpecs();
            after(lexer_1.enableSticky);
        });
    }
}
var skipOnBrowser = describe;
if (typeof window !== "undefined") {
    skipOnBrowser = describe.skip;
}
skipOnBrowser("debugging and messages and optimizations", function () {
    var consoleErrorSpy, consoleWarnSpy;
    beforeEach(function () {
        // @ts-ignore
        consoleErrorSpy = sinon.spy(console, "error");
        // @ts-ignore
        consoleWarnSpy = sinon.spy(console, "warn");
    });
    afterEach(function () {
        // @ts-ignore
        console.error.restore();
        // @ts-ignore
        console.warn.restore();
    });
    it("not report unicode flag", function () {
        // using new RegExp() to avoid IE 11 syntax errors
        var One = tokens_public_1.createToken({ name: "One", pattern: new RegExp("1", "u") });
        new lexer_public_1.Lexer([One], { positionTracking: "onlyOffset" });
        expect(console.error).to.have.not.been.called;
    });
    it("report unicode flag with ensureOptimizations enabled", function () {
        // using new RegExp() to avoid IE 11 syntax errors
        var One = tokens_public_1.createToken({ name: "One", pattern: new RegExp("1", "u") });
        expect(function () {
            return new lexer_public_1.Lexer([One], {
                ensureOptimizations: true,
                positionTracking: "onlyOffset"
            });
        }).to.throw("Lexer Modes: < defaultMode > cannot be optimized.");
        expect(console.error).to.have.been.called;
        expect(consoleErrorSpy.args[0][0]).to.include("The regexp unicode flag is not currently supported by the regexp-to-ast library");
    });
    it("report warning for not specifying line_breaks with custom tokens", function () {
        var NewLine = tokens_public_1.createToken({
            name: "NewLine",
            pattern: /(\n|\r|\r\n)/
        });
        var Five = tokens_public_1.createToken({
            name: "Five",
            pattern: function (text, offset) {
                return /5/.exec(text);
            }
        });
        expect(function () { return new lexer_public_1.Lexer([Five, NewLine]); }).to.not.throw();
        expect(console.warn).to.have.been.called;
        expect(consoleWarnSpy.args[0][0]).to.include("Warning: A Custom Token Pattern should specify the <line_breaks> option");
    });
    it("report custom patterns without 'start_chars_hint'", function () {
        var One = tokens_public_1.createToken({
            name: "One",
            pattern: function (text, offset) {
                return /1/.exec(text);
            }
        });
        expect(function () {
            return new lexer_public_1.Lexer([One], {
                ensureOptimizations: true,
                positionTracking: "onlyOffset"
            });
        }).to.throw("Lexer Modes: < defaultMode > cannot be optimized.");
        expect(console.error).to.have.been.called;
        expect(consoleErrorSpy.args[0][0]).to.include("TokenType: <One> is using a custom token pattern without providing <start_chars_hint>");
    });
    it("Will report mutually exclusive safeMode and ensureOptimizations flags", function () {
        // using new RegExp() to avoid IE 11 syntax errors
        var One = tokens_public_1.createToken({ name: "One", pattern: new RegExp("1", "u") });
        expect(function () {
            return new lexer_public_1.Lexer([One], {
                safeMode: true,
                ensureOptimizations: true,
                positionTracking: "onlyOffset"
            });
        }).to.throw('"safeMode" and "ensureOptimizations" flags are mutually exclusive.');
    });
    it("won't pack first char optimizations array for too large arrays", function () {
        // without hints we expect the lexer
        var PileOfPooNoHints = tokens_public_1.createToken({
            name: "PileOfPoo",
            pattern: /💩/
        });
        var pooLexerNoHints = new lexer_public_1.Lexer([PileOfPooNoHints], {
            positionTracking: "onlyOffset"
        });
        expect(utils_1.keys(pooLexerNoHints.charCodeToPatternIdxToConfig.defaultMode).length).to.equal("💩".charCodeAt(0) + 1);
        var PileOfPoo = tokens_public_1.createToken({
            name: "PileOfPoo",
            pattern: /💩/,
            start_chars_hint: [100000]
        });
        var pooLexer = new lexer_public_1.Lexer([PileOfPoo], {
            positionTracking: "onlyOffset"
        });
        expect(utils_1.keys(pooLexer.charCodeToPatternIdxToConfig.defaultMode)
            .length).to.equal(1);
    });
    it("won't optimize with safe mode enabled", function () {
        var Alpha = tokens_public_1.createToken({
            name: "A",
            pattern: /a/
        });
        var alphaLexerSafeMode = new lexer_public_1.Lexer([Alpha], {
            positionTracking: "onlyOffset",
            safeMode: true
        });
        expect(alphaLexerSafeMode.charCodeToPatternIdxToConfig.defaultMode).to.be.empty;
        // compare to safeMode disabled
        var alphaLexerNoSafeMode = new lexer_public_1.Lexer([Alpha], {
            positionTracking: "onlyOffset"
        });
        expect(alphaLexerNoSafeMode.charCodeToPatternIdxToConfig
            .defaultMode[97][0].tokenType).to.equal(Alpha);
    });
});
function wrapWithCustom(baseExtendToken) {
    return function () {
        var newToken = baseExtendToken.apply(null, arguments);
        var pattern = newToken.PATTERN;
        if (utils_1.isRegExp(pattern) &&
            !/\\n|\\r|\\s/g.test(pattern.source) &&
            pattern !== lexer_public_1.Lexer.NA) {
            newToken.PATTERN = function (text, offset) {
                // can't use sticky here because tests on node.js version 4 won't pass.
                var withStart = lexer_1.addStartOfInput(pattern);
                var execResult = withStart.exec(text.substring(offset));
                return execResult;
            };
            newToken.LINE_BREAKS = newToken.LINE_BREAKS === true;
        }
        return newToken;
    };
}
defineLexerSpecs("Regular Tokens Mode", tokens_public_1.createToken, tokens_1.tokenStructuredMatcher, false, { positionTracking: "full" });
defineLexerSpecs("Regular Tokens Mode (custom mode)", wrapWithCustom(tokens_public_1.createToken), tokens_1.tokenStructuredMatcher, true, { positionTracking: "full" });
defineLexerSpecs("Regular Tokens Mode - only start", tokens_public_1.createToken, tokens_1.tokenStructuredMatcher, false, { positionTracking: "onlyStart" });
defineLexerSpecs("Regular Tokens Mode (custom mode) - only start", wrapWithCustom(tokens_public_1.createToken), tokens_1.tokenStructuredMatcher, true, { positionTracking: "onlyStart" });
defineLexerSpecs("Regular Tokens Mode - onlyOffset", tokens_public_1.createToken, tokens_1.tokenStructuredMatcher, false, { positionTracking: "onlyOffset" });
defineLexerSpecs("Regular Tokens Mode (custom mode)", wrapWithCustom(tokens_public_1.createToken), tokens_1.tokenStructuredMatcher, true, { positionTracking: "onlyOffset" });
//# sourceMappingURL=lexer_spec.js.map

/***/ }),
/* 86 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var tokens_public_1 = __webpack_require__(1);
var lexer_public_1 = __webpack_require__(9);
var reg_exp_1 = __webpack_require__(33);
describe("The Chevrotain regexp analysis", function () {
    it("Will re-attempt none 'optimized' patterns if the optimization failed", function () {
        // won't be automatically optimized due to the '|' meta characters
        var Boolean = tokens_public_1.createToken({
            name: "Boolean",
            pattern: /true|false/,
            // But we provide the hints so it can be optimized
            start_chars_hint: ["t", "f"]
        });
        // simple string can perform optimization
        var Function = tokens_public_1.createToken({ name: "Function", pattern: "function" });
        // won't be optimized due to the '\w' and '+'
        var Name = tokens_public_1.createToken({ name: "False", pattern: /\w+/ });
        var WhiteSpace = tokens_public_1.createToken({
            name: "WhiteSpace",
            pattern: /\s+/,
            group: lexer_public_1.Lexer.SKIPPED,
            line_breaks: true
        });
        var allTokens = [WhiteSpace, Boolean, Function, Name];
        var JsonLexer = new lexer_public_1.Lexer(allTokens);
        var lexResult = JsonLexer.tokenize("fool");
        expect(lexResult.tokens).to.have.lengthOf(1);
        expect(lexResult.tokens[0].tokenType).to.equal(Name);
    });
});
describe("the regExp analysis", function () {
    context("first codes", function () {
        it("can compute for string literal", function () {
            expect(reg_exp_1.getStartCodes(/"(?:[^\\"]|\\(?:[bfnrtv"\\/]|u[0-9a-fA-F]{4}))*"/)).to.deep.equal([34]);
        });
        it("can compute with assertions", function () {
            expect(reg_exp_1.getStartCodes(/^$\b\Ba/)).to.deep.equal([97]);
        });
        it("can compute ranges", function () {
            expect(reg_exp_1.getStartCodes(/[\n-\r]/)).to.deep.equal([10, 11, 12, 13]);
        });
        it("can compute with optional quantifiers", function () {
            expect(reg_exp_1.getStartCodes(/b*a/)).to.deep.equal([98, 97]);
        });
        it("will not compute when using complements", function () {
            expect(reg_exp_1.getStartCodes(/\D/)).to.be.empty;
        });
        it("Can compute for ignore case", function () {
            expect(reg_exp_1.getStartCodes(/w|A/i)).to.deep.equal([119, 87, 65, 97]);
        });
        it("will not compute when using complements #2", function () {
            expect(reg_exp_1.getStartCodes(/[^a-z]/, true)).to.be.empty;
        });
    });
    context("can match charCode", function () {
        it("with simple character valid", function () {
            expect(reg_exp_1.canMatchCharCode([10, 13], /\n/)).to.be.true;
        });
        it("with simple character invalid", function () {
            expect(reg_exp_1.canMatchCharCode([10, 13], /a/)).to.be.false;
        });
        it("with range valid", function () {
            expect(reg_exp_1.canMatchCharCode([13], /[\n-a]/)).to.be.true;
        });
        it("with range invalid", function () {
            expect(reg_exp_1.canMatchCharCode([10, 13], /a-z/)).to.be.false;
        });
        it("with range complement valid", function () {
            expect(reg_exp_1.canMatchCharCode([13], /[^a]/)).to.be.true;
        });
        it("with range complement invalid", function () {
            expect(reg_exp_1.canMatchCharCode([13], /[^\r]/)).to.be.false;
        });
    });
});
//# sourceMappingURL=regexp_spec.js.map

/***/ }),
/* 87 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var tokens_public_1 = __webpack_require__(1);
var lexer_public_1 = __webpack_require__(9);
var tokens_public_2 = __webpack_require__(1);
var tokens_1 = __webpack_require__(6);
describe("The Chevrotain Tokens namespace", function () {
    context("createToken", function () {
        var TrueLiteral = tokens_public_1.createToken({ name: "TrueLiteral" });
        var FalseLiteral = /** @class */ (function () {
            function FalseLiteral() {
            }
            return FalseLiteral;
        }());
        it("exports a utility function that returns a token's name", function () {
            // FalseLiteral was created with an anonymous function as its constructor yet tokenName(...)
            // should still work correctly on it if the 'tokenName' property has been set on its constructor.
            expect(tokens_public_1.tokenName(FalseLiteral)).to.equal("FalseLiteral");
            expect(tokens_public_1.tokenName(TrueLiteral)).to.equal("TrueLiteral");
        });
        var A = tokens_public_1.createToken({ name: "A" });
        var B = tokens_public_1.createToken({ name: "B", categories: A });
        B.GROUP = "Special";
        var C = tokens_public_1.createToken({
            name: "C",
            pattern: /\d+/,
            categories: B
        });
        var D = tokens_public_1.createToken({
            name: "D",
            pattern: /\w+/,
            categories: B
        });
        var Plus = tokens_public_1.createToken({ name: "Plus", pattern: /\+/ });
        Plus.LABEL = "+";
        it("provides an createTokenInstance utility - creating an instance", function () {
            var aInstance = tokens_public_2.createTokenInstance(A, "Hello", 0, 4, 1, 1, 1, 5);
            expect(aInstance.image).to.equal("Hello");
            expect(aInstance.startOffset).to.equal(0);
            expect(aInstance.endOffset).to.equal(4);
            expect(aInstance.startLine).to.equal(1);
            expect(aInstance.endLine).to.equal(1);
            expect(aInstance.startColumn).to.equal(1);
            expect(aInstance.endColumn).to.equal(5);
        });
        it("provides an extendToken utility - creating a subclass instance", function () {
            var aInstance = tokens_public_2.createTokenInstance(A, "World", 0, 4, 1, 1, 1, 5);
            expect(aInstance.image).to.equal("World");
            expect(aInstance.startOffset).to.equal(0);
            expect(aInstance.endOffset).to.equal(4);
            expect(aInstance.startLine).to.equal(1);
            expect(aInstance.endLine).to.equal(1);
            expect(aInstance.startColumn).to.equal(1);
            expect(aInstance.endColumn).to.equal(5);
        });
        it("Allows customization of the label", function () {
            // Default to class name
            expect(tokens_public_1.tokenLabel(B)).to.equal("B");
            // Unless there's a LABEL property
            expect(tokens_public_1.tokenLabel(Plus)).to.equal("+");
        });
        it("provides a utility to verify if a token instance matches a Token Type", function () {
            var ATokRegular = tokens_public_1.createToken({
                name: "ATokRegular"
            });
            var BTokRegular = tokens_public_1.createToken({
                name: "BTokRegular"
            });
            var AInstanceRegular = tokens_public_2.createTokenInstance(ATokRegular, "a", -1, -1, -1, -1, -1, -1);
            var BInstanceRegular = tokens_public_2.createTokenInstance(BTokRegular, "b", -1, -1, -1, -1, -1, -1);
            expect(tokens_public_1.tokenMatcher(AInstanceRegular, ATokRegular)).to.be.true;
            expect(tokens_public_1.tokenMatcher(AInstanceRegular, BTokRegular)).to.be.false;
            expect(tokens_public_1.tokenMatcher(BInstanceRegular, BTokRegular)).to.be.true;
            expect(tokens_public_1.tokenMatcher(BInstanceRegular, ATokRegular)).to.be.false;
        });
        it("Will augment Token Constructors with additional metadata basic", function () {
            var A = tokens_public_1.createToken({ name: "A" });
            var B = tokens_public_1.createToken({ name: "B" });
            expect(A.tokenTypeIdx).to.be.greaterThan(0);
            expect(B.tokenTypeIdx).to.be.greaterThan(A.tokenTypeIdx);
            expect(A.categoryMatches).to.be.an.instanceOf(Array);
            expect(A.categoryMatches).to.be.empty;
            expect(B.categoryMatches).to.be.an.instanceOf(Array);
            expect(B.categoryMatches).to.be.empty;
        });
        it("can define a token Label via the createToken utilities", function () {
            var A = tokens_public_1.createToken({
                name: "A",
                label: "bamba"
            });
            expect(tokens_public_1.tokenLabel(A)).to.equal("bamba");
        });
        it("can define a POP_MODE via the createToken utilities", function () {
            var A = tokens_public_1.createToken({
                name: "A",
                pop_mode: true
            });
            expect(A).to.haveOwnProperty("POP_MODE");
            expect(A.POP_MODE).to.be.true;
        });
        it("can define a PUSH_MODE via the createToken utilities", function () {
            var A = tokens_public_1.createToken({
                name: "A",
                push_mode: "attribute"
            });
            expect(A).to.haveOwnProperty("PUSH_MODE");
            expect(A.PUSH_MODE).to.equal("attribute");
        });
        it("can define a LONGER_ALT via the createToken utilities", function () {
            var A = tokens_public_1.createToken({ name: "A" });
            var B = tokens_public_1.createToken({ name: "B", longer_alt: A });
            expect(B).to.haveOwnProperty("LONGER_ALT");
            expect(B.LONGER_ALT).to.equal(A);
        });
        it("can define a token group via the createToken utilities", function () {
            var A = tokens_public_1.createToken({
                name: "A",
                group: lexer_public_1.Lexer.SKIPPED
            });
            expect(A).to.haveOwnProperty("GROUP");
            expect(A.GROUP).to.equal(lexer_public_1.Lexer.SKIPPED);
        });
        it("Will throw when using the deprecated parent flag", function () {
            expect(function () {
                return tokens_public_1.createToken({
                    name: "A",
                    parent: "oops"
                });
            }).to.throw("The parent property is no longer supported");
        });
        it("will not go into infinite loop due to cyclic categories", function () {
            var A = tokens_public_1.createToken({ name: "A" });
            var B = tokens_public_1.createToken({ name: "B", categories: [A] });
            tokens_1.singleAssignCategoriesToksMap([A], B);
        });
    });
});
//# sourceMappingURL=token_spec.js.map

/***/ }),
/* 88 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var range_1 = __webpack_require__(23);
describe("The Chevrotain Range namespace", function () {
    it("an invalid range can not be created", function () {
        expect(function () {
            return new range_1.Range(5, 1);
        }).to.throw("INVALID RANGE");
        expect(function () {
            return new range_1.Range(-1, 2);
        }).to.throw("INVALID RANGE");
    });
    it("can check if a number is contained in a give range", function () {
        var r = new range_1.Range(90, 110);
        expect(r.contains(-4)).to.equal(false);
        expect(r.contains(30)).to.equal(false);
        expect(r.contains(89)).to.equal(false);
        expect(r.contains(90)).to.equal(true);
        expect(r.contains(99)).to.equal(true);
        expect(r.contains(105)).to.equal(true);
        expect(r.contains(110)).to.equal(true);
        expect(r.contains(111)).to.equal(false);
        expect(r.contains(999)).to.equal(false);
    });
    it("can check if it is contained in another range", function () {
        var _10_50 = new range_1.Range(10, 50);
        var _1_6 = new range_1.Range(1, 6);
        var _5_15 = new range_1.Range(5, 15);
        var _20_35 = new range_1.Range(20, 35);
        var _45_55 = new range_1.Range(45, 55);
        var _51_100 = new range_1.Range(51, 100);
        expect(_1_6.isContainedInRange(_10_50)).to.equal(false);
        expect(_5_15.isContainedInRange(_10_50)).to.equal(false);
        expect(_20_35.isContainedInRange(_10_50)).to.equal(true);
        expect(_10_50.isContainedInRange(_10_50)).to.equal(true);
        expect(_45_55.isContainedInRange(_10_50)).to.equal(false);
        expect(_51_100.isContainedInRange(_10_50)).to.equal(false);
    });
    it("can check if it is strictly contained in another range", function () {
        var _10_50 = new range_1.Range(10, 50);
        var _1_6 = new range_1.Range(1, 6);
        var _10_11 = new range_1.Range(10, 11);
        var _5_15 = new range_1.Range(5, 15);
        var _20_35 = new range_1.Range(20, 35);
        var _45_55 = new range_1.Range(45, 55);
        var _49_50 = new range_1.Range(49, 50);
        var _51_100 = new range_1.Range(51, 100);
        expect(_1_6.isStrictlyContainedInRange(_10_50)).to.equal(false);
        expect(_10_11.isStrictlyContainedInRange(_10_50)).to.equal(false);
        expect(_5_15.isStrictlyContainedInRange(_10_50)).to.equal(false);
        expect(_20_35.isStrictlyContainedInRange(_10_50)).to.equal(true);
        expect(_10_50.isStrictlyContainedInRange(_10_50)).to.equal(false);
        expect(_45_55.isStrictlyContainedInRange(_10_50)).to.equal(false);
        expect(_49_50.isStrictlyContainedInRange(_10_50)).to.equal(false);
        expect(_51_100.isStrictlyContainedInRange(_10_50)).to.equal(false);
    });
});
//# sourceMappingURL=range_spec.js.map

/***/ }),
/* 89 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var utils_1 = __webpack_require__(0);
describe("The Utils functions namespace", function () {
    it("exports a last utility", function () {
        expect(utils_1.last([1, 2, 3])).to.equal(3);
        expect(utils_1.last([])).to.equal(undefined);
        expect(utils_1.last(null)).to.equal(undefined);
    });
    it("exports a forEach utility", function () {
        utils_1.forEach([1, 2, 3], function (item, idx) {
            expect(item).to.equal(idx + 1);
        });
        expect(function () { return utils_1.forEach(null, function (item) { }); }).to.throw("non exhaustive match");
        utils_1.forEach([], function (item) {
            throw Error("call back should not be invoked for empty array");
        });
    });
    it("exports a isString utility", function () {
        expect(utils_1.isString("")).to.be.true;
        expect(utils_1.isString("bamba")).to.be.true;
        expect(utils_1.isString(66)).to.be.false;
        expect(utils_1.isString(null)).to.be.false;
    });
    it("exports a drop utility", function () {
        expect(utils_1.drop([])).to.deep.equal([]);
        expect(utils_1.drop([1, 2, 3])).to.deep.equal([2, 3]);
        expect(utils_1.drop([1, 2, 3], 2)).to.deep.equal([3]);
        expect(utils_1.drop([1, 2, 3], 3)).to.deep.equal([]);
    });
    it("exports a dropRight utility", function () {
        expect(utils_1.dropRight([])).to.deep.equal([]);
        expect(utils_1.dropRight([1, 2, 3])).to.deep.equal([1, 2]);
        expect(utils_1.dropRight([1, 2, 3], 2)).to.deep.equal([1]);
        expect(utils_1.dropRight([1, 2, 3], 3)).to.deep.equal([]);
    });
    it("exports a filter utility", function () {
        expect(utils_1.filter([], function (item) {
            return true;
        })).to.deep.equal([]);
        expect(utils_1.filter([1, 2, 3], function (item) {
            return true;
        })).to.deep.equal([1, 2, 3]);
        expect(utils_1.filter([1, 2, 3], function (item) {
            return false;
        })).to.deep.equal([]);
        expect(utils_1.filter([1, 2, 3], function (item) {
            return item % 2 === 0;
        })).to.deep.equal([2]);
        expect(utils_1.filter([1, 2, 3], function (item) {
            return item % 2 === 1;
        })).to.deep.equal([1, 3]);
        expect(utils_1.filter(null, function (item) {
            return item % 2 === 1;
        })).to.deep.equal([]);
    });
    it("exports a reject utility", function () {
        expect(utils_1.reject([], function (item) {
            return true;
        })).to.deep.equal([]);
        expect(utils_1.reject([1, 2, 3], function (item) {
            return false;
        })).to.deep.equal([1, 2, 3]);
        expect(utils_1.reject([1, 2, 3], function (item) {
            return true;
        })).to.deep.equal([]);
        expect(utils_1.reject([1, 2, 3], function (item) {
            return item % 2 === 0;
        })).to.deep.equal([1, 3]);
        expect(utils_1.reject([1, 2, 3], function (item) {
            return item % 2 === 1;
        })).to.deep.equal([2]);
        expect(utils_1.reject(null, function (item) {
            return item % 2 === 1;
        })).to.deep.equal([]);
    });
    it("exports a has utility", function () {
        expect(utils_1.has([1, 2, 3], "0")).to.be.true;
        expect(utils_1.has([1, 2, 3], "5")).to.be.false;
        expect(utils_1.has({}, "bamba")).to.be.false;
        expect(utils_1.has({ bamba: 666 }, "bamba")).to.be.true;
    });
    it("exports a contains utility", function () {
        expect(utils_1.contains([1, 2, 3], 4)).to.be.false;
        expect(utils_1.contains([1, 2, 3], 2)).to.be.true;
        expect(utils_1.contains([], 2)).to.be.false;
        expect(utils_1.contains([0], 0)).to.be.true;
    });
    it("exports a cloneArr utility", function () {
        expect(utils_1.cloneArr([1, 2, 3])).to.deep.equal([1, 2, 3]);
        expect(utils_1.cloneArr([])).to.deep.equal([]);
        var arr = [];
        expect(utils_1.cloneArr(arr)).to.not.equal(arr);
    });
    it("exports a cloneObj utility", function () {
        expect(utils_1.cloneObj({ bamba: 666, bisli: 777 })).to.deep.equal({
            bamba: 666,
            bisli: 777
        });
        var obj = { bamba: 666, bisli: 777 };
        expect(utils_1.cloneObj(obj)).to.not.equal(obj);
        expect(utils_1.cloneObj(["bamba"])).to.not.have.property("length");
        expect(utils_1.cloneObj(["bamba"])).to.deep.equal({ "0": "bamba" });
    });
    it("exports a find utility", function () {
        expect(utils_1.find([1, 2, 3], function (item) { return item === 2; })).to.equal(2);
        expect(utils_1.find([], function (item) { return item === 2; })).to.be.undefined;
        var a = {};
        var b = {};
        expect(utils_1.find([a, b], function (item) { return item === b; })).to.equal(b);
    });
    it("exports a reduce utility", function () {
        expect(utils_1.reduce([1, 2, 3], function (result, item) {
            return result.concat([item * 2]);
        }, [])).to.deep.equal([2, 4, 6]);
        expect(utils_1.reduce({ one: 1, two: 2, three: 3 }, function (result, item) {
            return result.concat([item * 2]);
        }, [])).to.deep.equal([2, 4, 6]);
    });
    it("exports a compact utility", function () {
        expect(utils_1.compact([1, 2, null, 3])).to.deep.equal([1, 2, 3]);
        expect(utils_1.compact([1, undefined, 2, 3])).to.deep.equal([1, 2, 3]);
        expect(utils_1.compact([])).to.deep.equal([]);
        expect(utils_1.compact([1, 2, 3])).to.deep.equal([1, 2, 3]);
    });
    it("exports a uniq utility", function () {
        expect(utils_1.uniq([1, 2, 3, 2])).to.contain.members([1, 2, 3]);
        expect(utils_1.uniq([2, 2, 4, 2], function (item) {
            return 666;
        })).to.have.length(1);
        expect(utils_1.uniq([])).to.deep.equal([]);
    });
    it("exports a pick utility", function () {
        expect(utils_1.pick({ bamba: true, bisli: false }, function (item) { return item; })).to.deep.equal({ bamba: true });
        expect(utils_1.pick({}, function (item) { return item; })).to.be.empty;
    });
    it("exports a partial utility", function () {
        var add = function (x, y) {
            return x + y;
        };
        expect(utils_1.partial(add)(2, 3)).to.equal(5);
        expect(utils_1.partial(add, 2)(3)).to.equal(5);
        expect(utils_1.partial(add, 2, 3)()).to.equal(5);
    });
    it("exports an every utility", function () {
        expect(utils_1.every([], function (item) {
            return true;
        })).to.be.true;
        // empty set always true...
        expect(utils_1.every([], function (item) {
            return false;
        })).to.be.true;
        expect(utils_1.every([1, 2, 3], function (item) {
            return item % 2 === 0;
        })).to.be.false;
        expect(utils_1.every([2, 4, 6], function (item) {
            return item % 2 === 0;
        })).to.be.true;
    });
    it("exports an difference utility", function () {
        expect(utils_1.difference([1, 2, 3], [2])).to.deep.equal([1, 3]);
        expect(utils_1.difference([1, 2, 3], [1, 3])).to.deep.equal([2]);
        expect(utils_1.difference([1, 2, 3], [])).to.deep.equal([1, 2, 3]);
        expect(utils_1.difference([], [1, 2])).to.deep.equal([]);
    });
    it("exports an some utility", function () {
        expect(utils_1.some([], function (item) {
            return true;
        })).to.be.false;
        expect(utils_1.some([], function (item) {
            return false;
        })).to.be.false;
        expect(utils_1.some([1, 2, 3], function (item) {
            return item % 2 === 0;
        })).to.be.true;
        expect(utils_1.some([1, 3, 5], function (item) {
            return item % 2 === 0;
        })).to.be.false;
    });
    it("exports an indexOf utility", function () {
        expect(utils_1.indexOf([1, 2, 3], 2)).to.equal(1);
        expect(utils_1.indexOf([1, 2, 3], 3)).to.equal(2);
        expect(utils_1.indexOf([1, 2, 3], 0)).to.equal(-1);
        expect(utils_1.indexOf([], -2)).to.equal(-1);
    });
    it("exports a sortBy utility", function () {
        expect(utils_1.sortBy([1, 2, 3], function (num) { return num; })).to.deep.equal([1, 2, 3]);
        expect(utils_1.sortBy([3, 2, 1], function (num) { return num; })).to.deep.equal([1, 2, 3]);
    });
    it("exports a zipObject utility", function () {
        expect(utils_1.zipObject(["ima", "aba", "bamba"], [1, 2, 3])).to.deep.equal({
            ima: 1,
            aba: 2,
            bamba: 3
        });
        expect(function () { return utils_1.zipObject(["ima", "aba"], [1, 2, 3]); }).to.throw("can't zipObject");
        expect(utils_1.zipObject([], [])).to.deep.equal({});
    });
    it("exports an assign utility", function () {
        expect(utils_1.assign(["ima", "aba", "bamba"], [1, 2, 3])).to.deep.equal([
            1,
            2,
            3
        ]);
        expect(utils_1.assign({}, { ima: 666 }, { aba: 333 })).to.deep.equal({
            ima: 666,
            aba: 333
        });
        expect(utils_1.assign({}, { ima: 666 }, { aba: 333 }, { ima: 999 })).to.deep.equal({ ima: 999, aba: 333 });
    });
    it("exports a groupBy utility", function () {
        expect(utils_1.groupBy([1, 2, 3, 4], function (num) { return "" + (num % 2); })).to.deep.equal({
            0: [2, 4],
            1: [1, 3]
        });
        expect(utils_1.groupBy([1, 2, 3, 4], function (num) { return "" + num; })).to.deep.equal({
            1: [1],
            2: [2],
            3: [3],
            4: [4]
        });
    });
    it("exports a groupBy utility", function () {
        expect(utils_1.groupBy([1, 2, 3, 4], function (num) { return "" + (num % 2); })).to.deep.equal({
            0: [2, 4],
            1: [1, 3]
        });
        expect(utils_1.groupBy([1, 2, 3, 4], function (num) { return "" + num; })).to.deep.equal({
            1: [1],
            2: [2],
            3: [3],
            4: [4]
        });
    });
    it("exports a mapValues utility", function () {
        expect(utils_1.mapValues({ key1: 1, key2: 2 }, function (val) { return val * 2; })).to.deep.equal([2, 4]);
    });
});
//# sourceMappingURL=utils_spec.js.map

/***/ })
/******/ ]);