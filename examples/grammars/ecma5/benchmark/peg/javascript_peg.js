/*
 * Generated by PEG.js 0.10.0.
 *
 * http://pegjs.org/
 */

"use strict"

function peg$subclass(child, parent) {
    function ctor() {
        this.constructor = child
    }
    ctor.prototype = parent.prototype
    child.prototype = new ctor()
}

function peg$SyntaxError(message, expected, found, location) {
    this.message = message
    this.expected = expected
    this.found = found
    this.location = location
    this.name = "SyntaxError"

    if (typeof Error.captureStackTrace === "function") {
        Error.captureStackTrace(this, peg$SyntaxError)
    }
}

peg$subclass(peg$SyntaxError, Error)

peg$SyntaxError.buildMessage = function(expected, found) {
    var DESCRIBE_EXPECTATION_FNS = {
        literal: function(expectation) {
            return '"' + literalEscape(expectation.text) + '"'
        },

        class: function(expectation) {
            var escapedParts = "",
                i

            for (i = 0; i < expectation.parts.length; i++) {
                escapedParts +=
                    expectation.parts[i] instanceof Array
                        ? classEscape(expectation.parts[i][0]) +
                          "-" +
                          classEscape(expectation.parts[i][1])
                        : classEscape(expectation.parts[i])
            }

            return "[" + (expectation.inverted ? "^" : "") + escapedParts + "]"
        },

        any: function(expectation) {
            return "any character"
        },

        end: function(expectation) {
            return "end of input"
        },

        other: function(expectation) {
            return expectation.description
        }
    }

    function hex(ch) {
        return ch
            .charCodeAt(0)
            .toString(16)
            .toUpperCase()
    }

    function literalEscape(s) {
        return s
            .replace(/\\/g, "\\\\")
            .replace(/"/g, '\\"')
            .replace(/\0/g, "\\0")
            .replace(/\t/g, "\\t")
            .replace(/\n/g, "\\n")
            .replace(/\r/g, "\\r")
            .replace(/[\x00-\x0F]/g, function(ch) {
                return "\\x0" + hex(ch)
            })
            .replace(/[\x10-\x1F\x7F-\x9F]/g, function(ch) {
                return "\\x" + hex(ch)
            })
    }

    function classEscape(s) {
        return s
            .replace(/\\/g, "\\\\")
            .replace(/\]/g, "\\]")
            .replace(/\^/g, "\\^")
            .replace(/-/g, "\\-")
            .replace(/\0/g, "\\0")
            .replace(/\t/g, "\\t")
            .replace(/\n/g, "\\n")
            .replace(/\r/g, "\\r")
            .replace(/[\x00-\x0F]/g, function(ch) {
                return "\\x0" + hex(ch)
            })
            .replace(/[\x10-\x1F\x7F-\x9F]/g, function(ch) {
                return "\\x" + hex(ch)
            })
    }

    function describeExpectation(expectation) {
        return DESCRIBE_EXPECTATION_FNS[expectation.type](expectation)
    }

    function describeExpected(expected) {
        var descriptions = new Array(expected.length),
            i,
            j

        for (i = 0; i < expected.length; i++) {
            descriptions[i] = describeExpectation(expected[i])
        }

        descriptions.sort()

        if (descriptions.length > 0) {
            for (i = 1, j = 1; i < descriptions.length; i++) {
                if (descriptions[i - 1] !== descriptions[i]) {
                    descriptions[j] = descriptions[i]
                    j++
                }
            }
            descriptions.length = j
        }

        switch (descriptions.length) {
            case 1:
                return descriptions[0]

            case 2:
                return descriptions[0] + " or " + descriptions[1]

            default:
                return (
                    descriptions.slice(0, -1).join(", ") +
                    ", or " +
                    descriptions[descriptions.length - 1]
                )
        }
    }

    function describeFound(found) {
        return found ? '"' + literalEscape(found) + '"' : "end of input"
    }

    return (
        "Expected " +
        describeExpected(expected) +
        " but " +
        describeFound(found) +
        " found."
    )
}

function peg$parse(input, options) {
    options = options !== void 0 ? options : {}

    var peg$FAILED = {},
        peg$startRuleFunctions = { Start: peg$parseStart },
        peg$startRuleFunction = peg$parseStart,
        peg$c0 = function(program) {
            return program
        },
        peg$c1 = peg$anyExpectation(),
        peg$c2 = peg$otherExpectation("whitespace"),
        peg$c3 = "\t",
        peg$c4 = peg$literalExpectation("\t", false),
        peg$c5 = "\x0B",
        peg$c6 = peg$literalExpectation("\x0B", false),
        peg$c7 = "\f",
        peg$c8 = peg$literalExpectation("\f", false),
        peg$c9 = " ",
        peg$c10 = peg$literalExpectation(" ", false),
        peg$c11 = "\xA0",
        peg$c12 = peg$literalExpectation("\xA0", false),
        peg$c13 = "\uFEFF",
        peg$c14 = peg$literalExpectation("\uFEFF", false),
        peg$c15 = /^[\n\r\u2028\u2029]/,
        peg$c16 = peg$classExpectation(
            ["\n", "\r", "\u2028", "\u2029"],
            false,
            false
        ),
        peg$c17 = peg$otherExpectation("end of line"),
        peg$c18 = "\n",
        peg$c19 = peg$literalExpectation("\n", false),
        peg$c20 = "\r\n",
        peg$c21 = peg$literalExpectation("\r\n", false),
        peg$c22 = "\r",
        peg$c23 = peg$literalExpectation("\r", false),
        peg$c24 = "\u2028",
        peg$c25 = peg$literalExpectation("\u2028", false),
        peg$c26 = "\u2029",
        peg$c27 = peg$literalExpectation("\u2029", false),
        peg$c28 = peg$otherExpectation("comment"),
        peg$c29 = "/*",
        peg$c30 = peg$literalExpectation("/*", false),
        peg$c31 = "*/",
        peg$c32 = peg$literalExpectation("*/", false),
        peg$c33 = "//",
        peg$c34 = peg$literalExpectation("//", false),
        peg$c35 = function(name) {
            return name
        },
        peg$c36 = peg$otherExpectation("identifier"),
        peg$c37 = function(head, tail) {
            return {
                type: "Identifier",
                name: head + tail.join("")
            }
        },
        peg$c38 = "$",
        peg$c39 = peg$literalExpectation("$", false),
        peg$c40 = "_",
        peg$c41 = peg$literalExpectation("_", false),
        peg$c42 = "\\",
        peg$c43 = peg$literalExpectation("\\", false),
        peg$c44 = function(sequence) {
            return sequence
        },
        peg$c45 = "\u200C",
        peg$c46 = peg$literalExpectation("\u200C", false),
        peg$c47 = "\u200D",
        peg$c48 = peg$literalExpectation("\u200D", false),
        peg$c49 = function() {
            return { type: "Literal", value: null }
        },
        peg$c50 = function() {
            return { type: "Literal", value: true }
        },
        peg$c51 = function() {
            return { type: "Literal", value: false }
        },
        peg$c52 = peg$otherExpectation("number"),
        peg$c53 = function(literal) {
            return literal
        },
        peg$c54 = ".",
        peg$c55 = peg$literalExpectation(".", false),
        peg$c56 = function() {
            return { type: "Literal", value: parseFloat(text()) }
        },
        peg$c57 = "0",
        peg$c58 = peg$literalExpectation("0", false),
        peg$c59 = /^[0-9]/,
        peg$c60 = peg$classExpectation([["0", "9"]], false, false),
        peg$c61 = /^[1-9]/,
        peg$c62 = peg$classExpectation([["1", "9"]], false, false),
        peg$c63 = "e",
        peg$c64 = peg$literalExpectation("e", true),
        peg$c65 = /^[+\-]/,
        peg$c66 = peg$classExpectation(["+", "-"], false, false),
        peg$c67 = "0x",
        peg$c68 = peg$literalExpectation("0x", true),
        peg$c69 = function(digits) {
            return { type: "Literal", value: parseInt(digits, 16) }
        },
        peg$c70 = /^[0-9a-f]/i,
        peg$c71 = peg$classExpectation([["0", "9"], ["a", "f"]], false, true),
        peg$c72 = peg$otherExpectation("string"),
        peg$c73 = '"',
        peg$c74 = peg$literalExpectation('"', false),
        peg$c75 = function(chars) {
            return { type: "Literal", value: chars.join("") }
        },
        peg$c76 = "'",
        peg$c77 = peg$literalExpectation("'", false),
        peg$c78 = function() {
            return text()
        },
        peg$c79 = function() {
            return ""
        },
        peg$c80 = function() {
            return "\0"
        },
        peg$c81 = "b",
        peg$c82 = peg$literalExpectation("b", false),
        peg$c83 = function() {
            return "\b"
        },
        peg$c84 = "f",
        peg$c85 = peg$literalExpectation("f", false),
        peg$c86 = function() {
            return "\f"
        },
        peg$c87 = "n",
        peg$c88 = peg$literalExpectation("n", false),
        peg$c89 = function() {
            return "\n"
        },
        peg$c90 = "r",
        peg$c91 = peg$literalExpectation("r", false),
        peg$c92 = function() {
            return "\r"
        },
        peg$c93 = "t",
        peg$c94 = peg$literalExpectation("t", false),
        peg$c95 = function() {
            return "\t"
        },
        peg$c96 = "v",
        peg$c97 = peg$literalExpectation("v", false),
        peg$c98 = function() {
            return "\v"
        },
        peg$c99 = "x",
        peg$c100 = peg$literalExpectation("x", false),
        peg$c101 = "u",
        peg$c102 = peg$literalExpectation("u", false),
        peg$c103 = function(digits) {
            return String.fromCharCode(parseInt(digits, 16))
        },
        peg$c104 = peg$otherExpectation("regular expression"),
        peg$c105 = "/",
        peg$c106 = peg$literalExpectation("/", false),
        peg$c107 = function(pattern, flags) {
            var value

            try {
                value = new RegExp(pattern, flags)
            } catch (e) {
                error(e.message)
            }

            return { type: "Literal", value: value }
        },
        peg$c108 = /^[*\\\/[]/,
        peg$c109 = peg$classExpectation(["*", "\\", "/", "["], false, false),
        peg$c110 = /^[\\\/[]/,
        peg$c111 = peg$classExpectation(["\\", "/", "["], false, false),
        peg$c112 = "[",
        peg$c113 = peg$literalExpectation("[", false),
        peg$c114 = "]",
        peg$c115 = peg$literalExpectation("]", false),
        peg$c116 = /^[\]\\]/,
        peg$c117 = peg$classExpectation(["]", "\\"], false, false),
        peg$c118 = /^[a-z\xB5\xDF-\xF6\xF8-\xFF\u0101\u0103\u0105\u0107\u0109\u010B\u010D\u010F\u0111\u0113\u0115\u0117\u0119\u011B\u011D\u011F\u0121\u0123\u0125\u0127\u0129\u012B\u012D\u012F\u0131\u0133\u0135\u0137-\u0138\u013A\u013C\u013E\u0140\u0142\u0144\u0146\u0148-\u0149\u014B\u014D\u014F\u0151\u0153\u0155\u0157\u0159\u015B\u015D\u015F\u0161\u0163\u0165\u0167\u0169\u016B\u016D\u016F\u0171\u0173\u0175\u0177\u017A\u017C\u017E-\u0180\u0183\u0185\u0188\u018C-\u018D\u0192\u0195\u0199-\u019B\u019E\u01A1\u01A3\u01A5\u01A8\u01AA-\u01AB\u01AD\u01B0\u01B4\u01B6\u01B9-\u01BA\u01BD-\u01BF\u01C6\u01C9\u01CC\u01CE\u01D0\u01D2\u01D4\u01D6\u01D8\u01DA\u01DC-\u01DD\u01DF\u01E1\u01E3\u01E5\u01E7\u01E9\u01EB\u01ED\u01EF-\u01F0\u01F3\u01F5\u01F9\u01FB\u01FD\u01FF\u0201\u0203\u0205\u0207\u0209\u020B\u020D\u020F\u0211\u0213\u0215\u0217\u0219\u021B\u021D\u021F\u0221\u0223\u0225\u0227\u0229\u022B\u022D\u022F\u0231\u0233-\u0239\u023C\u023F-\u0240\u0242\u0247\u0249\u024B\u024D\u024F-\u0293\u0295-\u02AF\u0371\u0373\u0377\u037B-\u037D\u0390\u03AC-\u03CE\u03D0-\u03D1\u03D5-\u03D7\u03D9\u03DB\u03DD\u03DF\u03E1\u03E3\u03E5\u03E7\u03E9\u03EB\u03ED\u03EF-\u03F3\u03F5\u03F8\u03FB-\u03FC\u0430-\u045F\u0461\u0463\u0465\u0467\u0469\u046B\u046D\u046F\u0471\u0473\u0475\u0477\u0479\u047B\u047D\u047F\u0481\u048B\u048D\u048F\u0491\u0493\u0495\u0497\u0499\u049B\u049D\u049F\u04A1\u04A3\u04A5\u04A7\u04A9\u04AB\u04AD\u04AF\u04B1\u04B3\u04B5\u04B7\u04B9\u04BB\u04BD\u04BF\u04C2\u04C4\u04C6\u04C8\u04CA\u04CC\u04CE-\u04CF\u04D1\u04D3\u04D5\u04D7\u04D9\u04DB\u04DD\u04DF\u04E1\u04E3\u04E5\u04E7\u04E9\u04EB\u04ED\u04EF\u04F1\u04F3\u04F5\u04F7\u04F9\u04FB\u04FD\u04FF\u0501\u0503\u0505\u0507\u0509\u050B\u050D\u050F\u0511\u0513\u0515\u0517\u0519\u051B\u051D\u051F\u0521\u0523\u0525\u0527\u0529\u052B\u052D\u052F\u0561-\u0587\u13F8-\u13FD\u1D00-\u1D2B\u1D6B-\u1D77\u1D79-\u1D9A\u1E01\u1E03\u1E05\u1E07\u1E09\u1E0B\u1E0D\u1E0F\u1E11\u1E13\u1E15\u1E17\u1E19\u1E1B\u1E1D\u1E1F\u1E21\u1E23\u1E25\u1E27\u1E29\u1E2B\u1E2D\u1E2F\u1E31\u1E33\u1E35\u1E37\u1E39\u1E3B\u1E3D\u1E3F\u1E41\u1E43\u1E45\u1E47\u1E49\u1E4B\u1E4D\u1E4F\u1E51\u1E53\u1E55\u1E57\u1E59\u1E5B\u1E5D\u1E5F\u1E61\u1E63\u1E65\u1E67\u1E69\u1E6B\u1E6D\u1E6F\u1E71\u1E73\u1E75\u1E77\u1E79\u1E7B\u1E7D\u1E7F\u1E81\u1E83\u1E85\u1E87\u1E89\u1E8B\u1E8D\u1E8F\u1E91\u1E93\u1E95-\u1E9D\u1E9F\u1EA1\u1EA3\u1EA5\u1EA7\u1EA9\u1EAB\u1EAD\u1EAF\u1EB1\u1EB3\u1EB5\u1EB7\u1EB9\u1EBB\u1EBD\u1EBF\u1EC1\u1EC3\u1EC5\u1EC7\u1EC9\u1ECB\u1ECD\u1ECF\u1ED1\u1ED3\u1ED5\u1ED7\u1ED9\u1EDB\u1EDD\u1EDF\u1EE1\u1EE3\u1EE5\u1EE7\u1EE9\u1EEB\u1EED\u1EEF\u1EF1\u1EF3\u1EF5\u1EF7\u1EF9\u1EFB\u1EFD\u1EFF-\u1F07\u1F10-\u1F15\u1F20-\u1F27\u1F30-\u1F37\u1F40-\u1F45\u1F50-\u1F57\u1F60-\u1F67\u1F70-\u1F7D\u1F80-\u1F87\u1F90-\u1F97\u1FA0-\u1FA7\u1FB0-\u1FB4\u1FB6-\u1FB7\u1FBE\u1FC2-\u1FC4\u1FC6-\u1FC7\u1FD0-\u1FD3\u1FD6-\u1FD7\u1FE0-\u1FE7\u1FF2-\u1FF4\u1FF6-\u1FF7\u210A\u210E-\u210F\u2113\u212F\u2134\u2139\u213C-\u213D\u2146-\u2149\u214E\u2184\u2C30-\u2C5E\u2C61\u2C65-\u2C66\u2C68\u2C6A\u2C6C\u2C71\u2C73-\u2C74\u2C76-\u2C7B\u2C81\u2C83\u2C85\u2C87\u2C89\u2C8B\u2C8D\u2C8F\u2C91\u2C93\u2C95\u2C97\u2C99\u2C9B\u2C9D\u2C9F\u2CA1\u2CA3\u2CA5\u2CA7\u2CA9\u2CAB\u2CAD\u2CAF\u2CB1\u2CB3\u2CB5\u2CB7\u2CB9\u2CBB\u2CBD\u2CBF\u2CC1\u2CC3\u2CC5\u2CC7\u2CC9\u2CCB\u2CCD\u2CCF\u2CD1\u2CD3\u2CD5\u2CD7\u2CD9\u2CDB\u2CDD\u2CDF\u2CE1\u2CE3-\u2CE4\u2CEC\u2CEE\u2CF3\u2D00-\u2D25\u2D27\u2D2D\uA641\uA643\uA645\uA647\uA649\uA64B\uA64D\uA64F\uA651\uA653\uA655\uA657\uA659\uA65B\uA65D\uA65F\uA661\uA663\uA665\uA667\uA669\uA66B\uA66D\uA681\uA683\uA685\uA687\uA689\uA68B\uA68D\uA68F\uA691\uA693\uA695\uA697\uA699\uA69B\uA723\uA725\uA727\uA729\uA72B\uA72D\uA72F-\uA731\uA733\uA735\uA737\uA739\uA73B\uA73D\uA73F\uA741\uA743\uA745\uA747\uA749\uA74B\uA74D\uA74F\uA751\uA753\uA755\uA757\uA759\uA75B\uA75D\uA75F\uA761\uA763\uA765\uA767\uA769\uA76B\uA76D\uA76F\uA771-\uA778\uA77A\uA77C\uA77F\uA781\uA783\uA785\uA787\uA78C\uA78E\uA791\uA793-\uA795\uA797\uA799\uA79B\uA79D\uA79F\uA7A1\uA7A3\uA7A5\uA7A7\uA7A9\uA7B5\uA7B7\uA7FA\uAB30-\uAB5A\uAB60-\uAB65\uAB70-\uABBF\uFB00-\uFB06\uFB13-\uFB17\uFF41-\uFF5A]/,
        peg$c119 = peg$classExpectation(
            [
                ["a", "z"],
                "\xB5",
                ["\xDF", "\xF6"],
                ["\xF8", "\xFF"],
                "\u0101",
                "\u0103",
                "\u0105",
                "\u0107",
                "\u0109",
                "\u010B",
                "\u010D",
                "\u010F",
                "\u0111",
                "\u0113",
                "\u0115",
                "\u0117",
                "\u0119",
                "\u011B",
                "\u011D",
                "\u011F",
                "\u0121",
                "\u0123",
                "\u0125",
                "\u0127",
                "\u0129",
                "\u012B",
                "\u012D",
                "\u012F",
                "\u0131",
                "\u0133",
                "\u0135",
                ["\u0137", "\u0138"],
                "\u013A",
                "\u013C",
                "\u013E",
                "\u0140",
                "\u0142",
                "\u0144",
                "\u0146",
                ["\u0148", "\u0149"],
                "\u014B",
                "\u014D",
                "\u014F",
                "\u0151",
                "\u0153",
                "\u0155",
                "\u0157",
                "\u0159",
                "\u015B",
                "\u015D",
                "\u015F",
                "\u0161",
                "\u0163",
                "\u0165",
                "\u0167",
                "\u0169",
                "\u016B",
                "\u016D",
                "\u016F",
                "\u0171",
                "\u0173",
                "\u0175",
                "\u0177",
                "\u017A",
                "\u017C",
                ["\u017E", "\u0180"],
                "\u0183",
                "\u0185",
                "\u0188",
                ["\u018C", "\u018D"],
                "\u0192",
                "\u0195",
                ["\u0199", "\u019B"],
                "\u019E",
                "\u01A1",
                "\u01A3",
                "\u01A5",
                "\u01A8",
                ["\u01AA", "\u01AB"],
                "\u01AD",
                "\u01B0",
                "\u01B4",
                "\u01B6",
                ["\u01B9", "\u01BA"],
                ["\u01BD", "\u01BF"],
                "\u01C6",
                "\u01C9",
                "\u01CC",
                "\u01CE",
                "\u01D0",
                "\u01D2",
                "\u01D4",
                "\u01D6",
                "\u01D8",
                "\u01DA",
                ["\u01DC", "\u01DD"],
                "\u01DF",
                "\u01E1",
                "\u01E3",
                "\u01E5",
                "\u01E7",
                "\u01E9",
                "\u01EB",
                "\u01ED",
                ["\u01EF", "\u01F0"],
                "\u01F3",
                "\u01F5",
                "\u01F9",
                "\u01FB",
                "\u01FD",
                "\u01FF",
                "\u0201",
                "\u0203",
                "\u0205",
                "\u0207",
                "\u0209",
                "\u020B",
                "\u020D",
                "\u020F",
                "\u0211",
                "\u0213",
                "\u0215",
                "\u0217",
                "\u0219",
                "\u021B",
                "\u021D",
                "\u021F",
                "\u0221",
                "\u0223",
                "\u0225",
                "\u0227",
                "\u0229",
                "\u022B",
                "\u022D",
                "\u022F",
                "\u0231",
                ["\u0233", "\u0239"],
                "\u023C",
                ["\u023F", "\u0240"],
                "\u0242",
                "\u0247",
                "\u0249",
                "\u024B",
                "\u024D",
                ["\u024F", "\u0293"],
                ["\u0295", "\u02AF"],
                "\u0371",
                "\u0373",
                "\u0377",
                ["\u037B", "\u037D"],
                "\u0390",
                ["\u03AC", "\u03CE"],
                ["\u03D0", "\u03D1"],
                ["\u03D5", "\u03D7"],
                "\u03D9",
                "\u03DB",
                "\u03DD",
                "\u03DF",
                "\u03E1",
                "\u03E3",
                "\u03E5",
                "\u03E7",
                "\u03E9",
                "\u03EB",
                "\u03ED",
                ["\u03EF", "\u03F3"],
                "\u03F5",
                "\u03F8",
                ["\u03FB", "\u03FC"],
                ["\u0430", "\u045F"],
                "\u0461",
                "\u0463",
                "\u0465",
                "\u0467",
                "\u0469",
                "\u046B",
                "\u046D",
                "\u046F",
                "\u0471",
                "\u0473",
                "\u0475",
                "\u0477",
                "\u0479",
                "\u047B",
                "\u047D",
                "\u047F",
                "\u0481",
                "\u048B",
                "\u048D",
                "\u048F",
                "\u0491",
                "\u0493",
                "\u0495",
                "\u0497",
                "\u0499",
                "\u049B",
                "\u049D",
                "\u049F",
                "\u04A1",
                "\u04A3",
                "\u04A5",
                "\u04A7",
                "\u04A9",
                "\u04AB",
                "\u04AD",
                "\u04AF",
                "\u04B1",
                "\u04B3",
                "\u04B5",
                "\u04B7",
                "\u04B9",
                "\u04BB",
                "\u04BD",
                "\u04BF",
                "\u04C2",
                "\u04C4",
                "\u04C6",
                "\u04C8",
                "\u04CA",
                "\u04CC",
                ["\u04CE", "\u04CF"],
                "\u04D1",
                "\u04D3",
                "\u04D5",
                "\u04D7",
                "\u04D9",
                "\u04DB",
                "\u04DD",
                "\u04DF",
                "\u04E1",
                "\u04E3",
                "\u04E5",
                "\u04E7",
                "\u04E9",
                "\u04EB",
                "\u04ED",
                "\u04EF",
                "\u04F1",
                "\u04F3",
                "\u04F5",
                "\u04F7",
                "\u04F9",
                "\u04FB",
                "\u04FD",
                "\u04FF",
                "\u0501",
                "\u0503",
                "\u0505",
                "\u0507",
                "\u0509",
                "\u050B",
                "\u050D",
                "\u050F",
                "\u0511",
                "\u0513",
                "\u0515",
                "\u0517",
                "\u0519",
                "\u051B",
                "\u051D",
                "\u051F",
                "\u0521",
                "\u0523",
                "\u0525",
                "\u0527",
                "\u0529",
                "\u052B",
                "\u052D",
                "\u052F",
                ["\u0561", "\u0587"],
                ["\u13F8", "\u13FD"],
                ["\u1D00", "\u1D2B"],
                ["\u1D6B", "\u1D77"],
                ["\u1D79", "\u1D9A"],
                "\u1E01",
                "\u1E03",
                "\u1E05",
                "\u1E07",
                "\u1E09",
                "\u1E0B",
                "\u1E0D",
                "\u1E0F",
                "\u1E11",
                "\u1E13",
                "\u1E15",
                "\u1E17",
                "\u1E19",
                "\u1E1B",
                "\u1E1D",
                "\u1E1F",
                "\u1E21",
                "\u1E23",
                "\u1E25",
                "\u1E27",
                "\u1E29",
                "\u1E2B",
                "\u1E2D",
                "\u1E2F",
                "\u1E31",
                "\u1E33",
                "\u1E35",
                "\u1E37",
                "\u1E39",
                "\u1E3B",
                "\u1E3D",
                "\u1E3F",
                "\u1E41",
                "\u1E43",
                "\u1E45",
                "\u1E47",
                "\u1E49",
                "\u1E4B",
                "\u1E4D",
                "\u1E4F",
                "\u1E51",
                "\u1E53",
                "\u1E55",
                "\u1E57",
                "\u1E59",
                "\u1E5B",
                "\u1E5D",
                "\u1E5F",
                "\u1E61",
                "\u1E63",
                "\u1E65",
                "\u1E67",
                "\u1E69",
                "\u1E6B",
                "\u1E6D",
                "\u1E6F",
                "\u1E71",
                "\u1E73",
                "\u1E75",
                "\u1E77",
                "\u1E79",
                "\u1E7B",
                "\u1E7D",
                "\u1E7F",
                "\u1E81",
                "\u1E83",
                "\u1E85",
                "\u1E87",
                "\u1E89",
                "\u1E8B",
                "\u1E8D",
                "\u1E8F",
                "\u1E91",
                "\u1E93",
                ["\u1E95", "\u1E9D"],
                "\u1E9F",
                "\u1EA1",
                "\u1EA3",
                "\u1EA5",
                "\u1EA7",
                "\u1EA9",
                "\u1EAB",
                "\u1EAD",
                "\u1EAF",
                "\u1EB1",
                "\u1EB3",
                "\u1EB5",
                "\u1EB7",
                "\u1EB9",
                "\u1EBB",
                "\u1EBD",
                "\u1EBF",
                "\u1EC1",
                "\u1EC3",
                "\u1EC5",
                "\u1EC7",
                "\u1EC9",
                "\u1ECB",
                "\u1ECD",
                "\u1ECF",
                "\u1ED1",
                "\u1ED3",
                "\u1ED5",
                "\u1ED7",
                "\u1ED9",
                "\u1EDB",
                "\u1EDD",
                "\u1EDF",
                "\u1EE1",
                "\u1EE3",
                "\u1EE5",
                "\u1EE7",
                "\u1EE9",
                "\u1EEB",
                "\u1EED",
                "\u1EEF",
                "\u1EF1",
                "\u1EF3",
                "\u1EF5",
                "\u1EF7",
                "\u1EF9",
                "\u1EFB",
                "\u1EFD",
                ["\u1EFF", "\u1F07"],
                ["\u1F10", "\u1F15"],
                ["\u1F20", "\u1F27"],
                ["\u1F30", "\u1F37"],
                ["\u1F40", "\u1F45"],
                ["\u1F50", "\u1F57"],
                ["\u1F60", "\u1F67"],
                ["\u1F70", "\u1F7D"],
                ["\u1F80", "\u1F87"],
                ["\u1F90", "\u1F97"],
                ["\u1FA0", "\u1FA7"],
                ["\u1FB0", "\u1FB4"],
                ["\u1FB6", "\u1FB7"],
                "\u1FBE",
                ["\u1FC2", "\u1FC4"],
                ["\u1FC6", "\u1FC7"],
                ["\u1FD0", "\u1FD3"],
                ["\u1FD6", "\u1FD7"],
                ["\u1FE0", "\u1FE7"],
                ["\u1FF2", "\u1FF4"],
                ["\u1FF6", "\u1FF7"],
                "\u210A",
                ["\u210E", "\u210F"],
                "\u2113",
                "\u212F",
                "\u2134",
                "\u2139",
                ["\u213C", "\u213D"],
                ["\u2146", "\u2149"],
                "\u214E",
                "\u2184",
                ["\u2C30", "\u2C5E"],
                "\u2C61",
                ["\u2C65", "\u2C66"],
                "\u2C68",
                "\u2C6A",
                "\u2C6C",
                "\u2C71",
                ["\u2C73", "\u2C74"],
                ["\u2C76", "\u2C7B"],
                "\u2C81",
                "\u2C83",
                "\u2C85",
                "\u2C87",
                "\u2C89",
                "\u2C8B",
                "\u2C8D",
                "\u2C8F",
                "\u2C91",
                "\u2C93",
                "\u2C95",
                "\u2C97",
                "\u2C99",
                "\u2C9B",
                "\u2C9D",
                "\u2C9F",
                "\u2CA1",
                "\u2CA3",
                "\u2CA5",
                "\u2CA7",
                "\u2CA9",
                "\u2CAB",
                "\u2CAD",
                "\u2CAF",
                "\u2CB1",
                "\u2CB3",
                "\u2CB5",
                "\u2CB7",
                "\u2CB9",
                "\u2CBB",
                "\u2CBD",
                "\u2CBF",
                "\u2CC1",
                "\u2CC3",
                "\u2CC5",
                "\u2CC7",
                "\u2CC9",
                "\u2CCB",
                "\u2CCD",
                "\u2CCF",
                "\u2CD1",
                "\u2CD3",
                "\u2CD5",
                "\u2CD7",
                "\u2CD9",
                "\u2CDB",
                "\u2CDD",
                "\u2CDF",
                "\u2CE1",
                ["\u2CE3", "\u2CE4"],
                "\u2CEC",
                "\u2CEE",
                "\u2CF3",
                ["\u2D00", "\u2D25"],
                "\u2D27",
                "\u2D2D",
                "\uA641",
                "\uA643",
                "\uA645",
                "\uA647",
                "\uA649",
                "\uA64B",
                "\uA64D",
                "\uA64F",
                "\uA651",
                "\uA653",
                "\uA655",
                "\uA657",
                "\uA659",
                "\uA65B",
                "\uA65D",
                "\uA65F",
                "\uA661",
                "\uA663",
                "\uA665",
                "\uA667",
                "\uA669",
                "\uA66B",
                "\uA66D",
                "\uA681",
                "\uA683",
                "\uA685",
                "\uA687",
                "\uA689",
                "\uA68B",
                "\uA68D",
                "\uA68F",
                "\uA691",
                "\uA693",
                "\uA695",
                "\uA697",
                "\uA699",
                "\uA69B",
                "\uA723",
                "\uA725",
                "\uA727",
                "\uA729",
                "\uA72B",
                "\uA72D",
                ["\uA72F", "\uA731"],
                "\uA733",
                "\uA735",
                "\uA737",
                "\uA739",
                "\uA73B",
                "\uA73D",
                "\uA73F",
                "\uA741",
                "\uA743",
                "\uA745",
                "\uA747",
                "\uA749",
                "\uA74B",
                "\uA74D",
                "\uA74F",
                "\uA751",
                "\uA753",
                "\uA755",
                "\uA757",
                "\uA759",
                "\uA75B",
                "\uA75D",
                "\uA75F",
                "\uA761",
                "\uA763",
                "\uA765",
                "\uA767",
                "\uA769",
                "\uA76B",
                "\uA76D",
                "\uA76F",
                ["\uA771", "\uA778"],
                "\uA77A",
                "\uA77C",
                "\uA77F",
                "\uA781",
                "\uA783",
                "\uA785",
                "\uA787",
                "\uA78C",
                "\uA78E",
                "\uA791",
                ["\uA793", "\uA795"],
                "\uA797",
                "\uA799",
                "\uA79B",
                "\uA79D",
                "\uA79F",
                "\uA7A1",
                "\uA7A3",
                "\uA7A5",
                "\uA7A7",
                "\uA7A9",
                "\uA7B5",
                "\uA7B7",
                "\uA7FA",
                ["\uAB30", "\uAB5A"],
                ["\uAB60", "\uAB65"],
                ["\uAB70", "\uABBF"],
                ["\uFB00", "\uFB06"],
                ["\uFB13", "\uFB17"],
                ["\uFF41", "\uFF5A"]
            ],
            false,
            false
        ),
        peg$c120 = /^[\u02B0-\u02C1\u02C6-\u02D1\u02E0-\u02E4\u02EC\u02EE\u0374\u037A\u0559\u0640\u06E5-\u06E6\u07F4-\u07F5\u07FA\u081A\u0824\u0828\u0971\u0E46\u0EC6\u10FC\u17D7\u1843\u1AA7\u1C78-\u1C7D\u1D2C-\u1D6A\u1D78\u1D9B-\u1DBF\u2071\u207F\u2090-\u209C\u2C7C-\u2C7D\u2D6F\u2E2F\u3005\u3031-\u3035\u303B\u309D-\u309E\u30FC-\u30FE\uA015\uA4F8-\uA4FD\uA60C\uA67F\uA69C-\uA69D\uA717-\uA71F\uA770\uA788\uA7F8-\uA7F9\uA9CF\uA9E6\uAA70\uAADD\uAAF3-\uAAF4\uAB5C-\uAB5F\uFF70\uFF9E-\uFF9F]/,
        peg$c121 = peg$classExpectation(
            [
                ["\u02B0", "\u02C1"],
                ["\u02C6", "\u02D1"],
                ["\u02E0", "\u02E4"],
                "\u02EC",
                "\u02EE",
                "\u0374",
                "\u037A",
                "\u0559",
                "\u0640",
                ["\u06E5", "\u06E6"],
                ["\u07F4", "\u07F5"],
                "\u07FA",
                "\u081A",
                "\u0824",
                "\u0828",
                "\u0971",
                "\u0E46",
                "\u0EC6",
                "\u10FC",
                "\u17D7",
                "\u1843",
                "\u1AA7",
                ["\u1C78", "\u1C7D"],
                ["\u1D2C", "\u1D6A"],
                "\u1D78",
                ["\u1D9B", "\u1DBF"],
                "\u2071",
                "\u207F",
                ["\u2090", "\u209C"],
                ["\u2C7C", "\u2C7D"],
                "\u2D6F",
                "\u2E2F",
                "\u3005",
                ["\u3031", "\u3035"],
                "\u303B",
                ["\u309D", "\u309E"],
                ["\u30FC", "\u30FE"],
                "\uA015",
                ["\uA4F8", "\uA4FD"],
                "\uA60C",
                "\uA67F",
                ["\uA69C", "\uA69D"],
                ["\uA717", "\uA71F"],
                "\uA770",
                "\uA788",
                ["\uA7F8", "\uA7F9"],
                "\uA9CF",
                "\uA9E6",
                "\uAA70",
                "\uAADD",
                ["\uAAF3", "\uAAF4"],
                ["\uAB5C", "\uAB5F"],
                "\uFF70",
                ["\uFF9E", "\uFF9F"]
            ],
            false,
            false
        ),
        peg$c122 = /^[\xAA\xBA\u01BB\u01C0-\u01C3\u0294\u05D0-\u05EA\u05F0-\u05F2\u0620-\u063F\u0641-\u064A\u066E-\u066F\u0671-\u06D3\u06D5\u06EE-\u06EF\u06FA-\u06FC\u06FF\u0710\u0712-\u072F\u074D-\u07A5\u07B1\u07CA-\u07EA\u0800-\u0815\u0840-\u0858\u08A0-\u08B4\u0904-\u0939\u093D\u0950\u0958-\u0961\u0972-\u0980\u0985-\u098C\u098F-\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BD\u09CE\u09DC-\u09DD\u09DF-\u09E1\u09F0-\u09F1\u0A05-\u0A0A\u0A0F-\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32-\u0A33\u0A35-\u0A36\u0A38-\u0A39\u0A59-\u0A5C\u0A5E\u0A72-\u0A74\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2-\u0AB3\u0AB5-\u0AB9\u0ABD\u0AD0\u0AE0-\u0AE1\u0AF9\u0B05-\u0B0C\u0B0F-\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32-\u0B33\u0B35-\u0B39\u0B3D\u0B5C-\u0B5D\u0B5F-\u0B61\u0B71\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99-\u0B9A\u0B9C\u0B9E-\u0B9F\u0BA3-\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BD0\u0C05-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C39\u0C3D\u0C58-\u0C5A\u0C60-\u0C61\u0C85-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBD\u0CDE\u0CE0-\u0CE1\u0CF1-\u0CF2\u0D05-\u0D0C\u0D0E-\u0D10\u0D12-\u0D3A\u0D3D\u0D4E\u0D5F-\u0D61\u0D7A-\u0D7F\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0E01-\u0E30\u0E32-\u0E33\u0E40-\u0E45\u0E81-\u0E82\u0E84\u0E87-\u0E88\u0E8A\u0E8D\u0E94-\u0E97\u0E99-\u0E9F\u0EA1-\u0EA3\u0EA5\u0EA7\u0EAA-\u0EAB\u0EAD-\u0EB0\u0EB2-\u0EB3\u0EBD\u0EC0-\u0EC4\u0EDC-\u0EDF\u0F00\u0F40-\u0F47\u0F49-\u0F6C\u0F88-\u0F8C\u1000-\u102A\u103F\u1050-\u1055\u105A-\u105D\u1061\u1065-\u1066\u106E-\u1070\u1075-\u1081\u108E\u10D0-\u10FA\u10FD-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u1380-\u138F\u1401-\u166C\u166F-\u167F\u1681-\u169A\u16A0-\u16EA\u16F1-\u16F8\u1700-\u170C\u170E-\u1711\u1720-\u1731\u1740-\u1751\u1760-\u176C\u176E-\u1770\u1780-\u17B3\u17DC\u1820-\u1842\u1844-\u1877\u1880-\u18A8\u18AA\u18B0-\u18F5\u1900-\u191E\u1950-\u196D\u1970-\u1974\u1980-\u19AB\u19B0-\u19C9\u1A00-\u1A16\u1A20-\u1A54\u1B05-\u1B33\u1B45-\u1B4B\u1B83-\u1BA0\u1BAE-\u1BAF\u1BBA-\u1BE5\u1C00-\u1C23\u1C4D-\u1C4F\u1C5A-\u1C77\u1CE9-\u1CEC\u1CEE-\u1CF1\u1CF5-\u1CF6\u2135-\u2138\u2D30-\u2D67\u2D80-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\u3006\u303C\u3041-\u3096\u309F\u30A1-\u30FA\u30FF\u3105-\u312D\u3131-\u318E\u31A0-\u31BA\u31F0-\u31FF\u3400-\u4DB5\u4E00-\u9FD5\uA000-\uA014\uA016-\uA48C\uA4D0-\uA4F7\uA500-\uA60B\uA610-\uA61F\uA62A-\uA62B\uA66E\uA6A0-\uA6E5\uA78F\uA7F7\uA7FB-\uA801\uA803-\uA805\uA807-\uA80A\uA80C-\uA822\uA840-\uA873\uA882-\uA8B3\uA8F2-\uA8F7\uA8FB\uA8FD\uA90A-\uA925\uA930-\uA946\uA960-\uA97C\uA984-\uA9B2\uA9E0-\uA9E4\uA9E7-\uA9EF\uA9FA-\uA9FE\uAA00-\uAA28\uAA40-\uAA42\uAA44-\uAA4B\uAA60-\uAA6F\uAA71-\uAA76\uAA7A\uAA7E-\uAAAF\uAAB1\uAAB5-\uAAB6\uAAB9-\uAABD\uAAC0\uAAC2\uAADB-\uAADC\uAAE0-\uAAEA\uAAF2\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E\uABC0-\uABE2\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uF900-\uFA6D\uFA70-\uFAD9\uFB1D\uFB1F-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40-\uFB41\uFB43-\uFB44\uFB46-\uFBB1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFB\uFE70-\uFE74\uFE76-\uFEFC\uFF66-\uFF6F\uFF71-\uFF9D\uFFA0-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC]/,
        peg$c123 = peg$classExpectation(
            [
                "\xAA",
                "\xBA",
                "\u01BB",
                ["\u01C0", "\u01C3"],
                "\u0294",
                ["\u05D0", "\u05EA"],
                ["\u05F0", "\u05F2"],
                ["\u0620", "\u063F"],
                ["\u0641", "\u064A"],
                ["\u066E", "\u066F"],
                ["\u0671", "\u06D3"],
                "\u06D5",
                ["\u06EE", "\u06EF"],
                ["\u06FA", "\u06FC"],
                "\u06FF",
                "\u0710",
                ["\u0712", "\u072F"],
                ["\u074D", "\u07A5"],
                "\u07B1",
                ["\u07CA", "\u07EA"],
                ["\u0800", "\u0815"],
                ["\u0840", "\u0858"],
                ["\u08A0", "\u08B4"],
                ["\u0904", "\u0939"],
                "\u093D",
                "\u0950",
                ["\u0958", "\u0961"],
                ["\u0972", "\u0980"],
                ["\u0985", "\u098C"],
                ["\u098F", "\u0990"],
                ["\u0993", "\u09A8"],
                ["\u09AA", "\u09B0"],
                "\u09B2",
                ["\u09B6", "\u09B9"],
                "\u09BD",
                "\u09CE",
                ["\u09DC", "\u09DD"],
                ["\u09DF", "\u09E1"],
                ["\u09F0", "\u09F1"],
                ["\u0A05", "\u0A0A"],
                ["\u0A0F", "\u0A10"],
                ["\u0A13", "\u0A28"],
                ["\u0A2A", "\u0A30"],
                ["\u0A32", "\u0A33"],
                ["\u0A35", "\u0A36"],
                ["\u0A38", "\u0A39"],
                ["\u0A59", "\u0A5C"],
                "\u0A5E",
                ["\u0A72", "\u0A74"],
                ["\u0A85", "\u0A8D"],
                ["\u0A8F", "\u0A91"],
                ["\u0A93", "\u0AA8"],
                ["\u0AAA", "\u0AB0"],
                ["\u0AB2", "\u0AB3"],
                ["\u0AB5", "\u0AB9"],
                "\u0ABD",
                "\u0AD0",
                ["\u0AE0", "\u0AE1"],
                "\u0AF9",
                ["\u0B05", "\u0B0C"],
                ["\u0B0F", "\u0B10"],
                ["\u0B13", "\u0B28"],
                ["\u0B2A", "\u0B30"],
                ["\u0B32", "\u0B33"],
                ["\u0B35", "\u0B39"],
                "\u0B3D",
                ["\u0B5C", "\u0B5D"],
                ["\u0B5F", "\u0B61"],
                "\u0B71",
                "\u0B83",
                ["\u0B85", "\u0B8A"],
                ["\u0B8E", "\u0B90"],
                ["\u0B92", "\u0B95"],
                ["\u0B99", "\u0B9A"],
                "\u0B9C",
                ["\u0B9E", "\u0B9F"],
                ["\u0BA3", "\u0BA4"],
                ["\u0BA8", "\u0BAA"],
                ["\u0BAE", "\u0BB9"],
                "\u0BD0",
                ["\u0C05", "\u0C0C"],
                ["\u0C0E", "\u0C10"],
                ["\u0C12", "\u0C28"],
                ["\u0C2A", "\u0C39"],
                "\u0C3D",
                ["\u0C58", "\u0C5A"],
                ["\u0C60", "\u0C61"],
                ["\u0C85", "\u0C8C"],
                ["\u0C8E", "\u0C90"],
                ["\u0C92", "\u0CA8"],
                ["\u0CAA", "\u0CB3"],
                ["\u0CB5", "\u0CB9"],
                "\u0CBD",
                "\u0CDE",
                ["\u0CE0", "\u0CE1"],
                ["\u0CF1", "\u0CF2"],
                ["\u0D05", "\u0D0C"],
                ["\u0D0E", "\u0D10"],
                ["\u0D12", "\u0D3A"],
                "\u0D3D",
                "\u0D4E",
                ["\u0D5F", "\u0D61"],
                ["\u0D7A", "\u0D7F"],
                ["\u0D85", "\u0D96"],
                ["\u0D9A", "\u0DB1"],
                ["\u0DB3", "\u0DBB"],
                "\u0DBD",
                ["\u0DC0", "\u0DC6"],
                ["\u0E01", "\u0E30"],
                ["\u0E32", "\u0E33"],
                ["\u0E40", "\u0E45"],
                ["\u0E81", "\u0E82"],
                "\u0E84",
                ["\u0E87", "\u0E88"],
                "\u0E8A",
                "\u0E8D",
                ["\u0E94", "\u0E97"],
                ["\u0E99", "\u0E9F"],
                ["\u0EA1", "\u0EA3"],
                "\u0EA5",
                "\u0EA7",
                ["\u0EAA", "\u0EAB"],
                ["\u0EAD", "\u0EB0"],
                ["\u0EB2", "\u0EB3"],
                "\u0EBD",
                ["\u0EC0", "\u0EC4"],
                ["\u0EDC", "\u0EDF"],
                "\u0F00",
                ["\u0F40", "\u0F47"],
                ["\u0F49", "\u0F6C"],
                ["\u0F88", "\u0F8C"],
                ["\u1000", "\u102A"],
                "\u103F",
                ["\u1050", "\u1055"],
                ["\u105A", "\u105D"],
                "\u1061",
                ["\u1065", "\u1066"],
                ["\u106E", "\u1070"],
                ["\u1075", "\u1081"],
                "\u108E",
                ["\u10D0", "\u10FA"],
                ["\u10FD", "\u1248"],
                ["\u124A", "\u124D"],
                ["\u1250", "\u1256"],
                "\u1258",
                ["\u125A", "\u125D"],
                ["\u1260", "\u1288"],
                ["\u128A", "\u128D"],
                ["\u1290", "\u12B0"],
                ["\u12B2", "\u12B5"],
                ["\u12B8", "\u12BE"],
                "\u12C0",
                ["\u12C2", "\u12C5"],
                ["\u12C8", "\u12D6"],
                ["\u12D8", "\u1310"],
                ["\u1312", "\u1315"],
                ["\u1318", "\u135A"],
                ["\u1380", "\u138F"],
                ["\u1401", "\u166C"],
                ["\u166F", "\u167F"],
                ["\u1681", "\u169A"],
                ["\u16A0", "\u16EA"],
                ["\u16F1", "\u16F8"],
                ["\u1700", "\u170C"],
                ["\u170E", "\u1711"],
                ["\u1720", "\u1731"],
                ["\u1740", "\u1751"],
                ["\u1760", "\u176C"],
                ["\u176E", "\u1770"],
                ["\u1780", "\u17B3"],
                "\u17DC",
                ["\u1820", "\u1842"],
                ["\u1844", "\u1877"],
                ["\u1880", "\u18A8"],
                "\u18AA",
                ["\u18B0", "\u18F5"],
                ["\u1900", "\u191E"],
                ["\u1950", "\u196D"],
                ["\u1970", "\u1974"],
                ["\u1980", "\u19AB"],
                ["\u19B0", "\u19C9"],
                ["\u1A00", "\u1A16"],
                ["\u1A20", "\u1A54"],
                ["\u1B05", "\u1B33"],
                ["\u1B45", "\u1B4B"],
                ["\u1B83", "\u1BA0"],
                ["\u1BAE", "\u1BAF"],
                ["\u1BBA", "\u1BE5"],
                ["\u1C00", "\u1C23"],
                ["\u1C4D", "\u1C4F"],
                ["\u1C5A", "\u1C77"],
                ["\u1CE9", "\u1CEC"],
                ["\u1CEE", "\u1CF1"],
                ["\u1CF5", "\u1CF6"],
                ["\u2135", "\u2138"],
                ["\u2D30", "\u2D67"],
                ["\u2D80", "\u2D96"],
                ["\u2DA0", "\u2DA6"],
                ["\u2DA8", "\u2DAE"],
                ["\u2DB0", "\u2DB6"],
                ["\u2DB8", "\u2DBE"],
                ["\u2DC0", "\u2DC6"],
                ["\u2DC8", "\u2DCE"],
                ["\u2DD0", "\u2DD6"],
                ["\u2DD8", "\u2DDE"],
                "\u3006",
                "\u303C",
                ["\u3041", "\u3096"],
                "\u309F",
                ["\u30A1", "\u30FA"],
                "\u30FF",
                ["\u3105", "\u312D"],
                ["\u3131", "\u318E"],
                ["\u31A0", "\u31BA"],
                ["\u31F0", "\u31FF"],
                ["\u3400", "\u4DB5"],
                ["\u4E00", "\u9FD5"],
                ["\uA000", "\uA014"],
                ["\uA016", "\uA48C"],
                ["\uA4D0", "\uA4F7"],
                ["\uA500", "\uA60B"],
                ["\uA610", "\uA61F"],
                ["\uA62A", "\uA62B"],
                "\uA66E",
                ["\uA6A0", "\uA6E5"],
                "\uA78F",
                "\uA7F7",
                ["\uA7FB", "\uA801"],
                ["\uA803", "\uA805"],
                ["\uA807", "\uA80A"],
                ["\uA80C", "\uA822"],
                ["\uA840", "\uA873"],
                ["\uA882", "\uA8B3"],
                ["\uA8F2", "\uA8F7"],
                "\uA8FB",
                "\uA8FD",
                ["\uA90A", "\uA925"],
                ["\uA930", "\uA946"],
                ["\uA960", "\uA97C"],
                ["\uA984", "\uA9B2"],
                ["\uA9E0", "\uA9E4"],
                ["\uA9E7", "\uA9EF"],
                ["\uA9FA", "\uA9FE"],
                ["\uAA00", "\uAA28"],
                ["\uAA40", "\uAA42"],
                ["\uAA44", "\uAA4B"],
                ["\uAA60", "\uAA6F"],
                ["\uAA71", "\uAA76"],
                "\uAA7A",
                ["\uAA7E", "\uAAAF"],
                "\uAAB1",
                ["\uAAB5", "\uAAB6"],
                ["\uAAB9", "\uAABD"],
                "\uAAC0",
                "\uAAC2",
                ["\uAADB", "\uAADC"],
                ["\uAAE0", "\uAAEA"],
                "\uAAF2",
                ["\uAB01", "\uAB06"],
                ["\uAB09", "\uAB0E"],
                ["\uAB11", "\uAB16"],
                ["\uAB20", "\uAB26"],
                ["\uAB28", "\uAB2E"],
                ["\uABC0", "\uABE2"],
                ["\uAC00", "\uD7A3"],
                ["\uD7B0", "\uD7C6"],
                ["\uD7CB", "\uD7FB"],
                ["\uF900", "\uFA6D"],
                ["\uFA70", "\uFAD9"],
                "\uFB1D",
                ["\uFB1F", "\uFB28"],
                ["\uFB2A", "\uFB36"],
                ["\uFB38", "\uFB3C"],
                "\uFB3E",
                ["\uFB40", "\uFB41"],
                ["\uFB43", "\uFB44"],
                ["\uFB46", "\uFBB1"],
                ["\uFBD3", "\uFD3D"],
                ["\uFD50", "\uFD8F"],
                ["\uFD92", "\uFDC7"],
                ["\uFDF0", "\uFDFB"],
                ["\uFE70", "\uFE74"],
                ["\uFE76", "\uFEFC"],
                ["\uFF66", "\uFF6F"],
                ["\uFF71", "\uFF9D"],
                ["\uFFA0", "\uFFBE"],
                ["\uFFC2", "\uFFC7"],
                ["\uFFCA", "\uFFCF"],
                ["\uFFD2", "\uFFD7"],
                ["\uFFDA", "\uFFDC"]
            ],
            false,
            false
        ),
        peg$c124 = /^[\u01C5\u01C8\u01CB\u01F2\u1F88-\u1F8F\u1F98-\u1F9F\u1FA8-\u1FAF\u1FBC\u1FCC\u1FFC]/,
        peg$c125 = peg$classExpectation(
            [
                "\u01C5",
                "\u01C8",
                "\u01CB",
                "\u01F2",
                ["\u1F88", "\u1F8F"],
                ["\u1F98", "\u1F9F"],
                ["\u1FA8", "\u1FAF"],
                "\u1FBC",
                "\u1FCC",
                "\u1FFC"
            ],
            false,
            false
        ),
        peg$c126 = /^[A-Z\xC0-\xD6\xD8-\xDE\u0100\u0102\u0104\u0106\u0108\u010A\u010C\u010E\u0110\u0112\u0114\u0116\u0118\u011A\u011C\u011E\u0120\u0122\u0124\u0126\u0128\u012A\u012C\u012E\u0130\u0132\u0134\u0136\u0139\u013B\u013D\u013F\u0141\u0143\u0145\u0147\u014A\u014C\u014E\u0150\u0152\u0154\u0156\u0158\u015A\u015C\u015E\u0160\u0162\u0164\u0166\u0168\u016A\u016C\u016E\u0170\u0172\u0174\u0176\u0178-\u0179\u017B\u017D\u0181-\u0182\u0184\u0186-\u0187\u0189-\u018B\u018E-\u0191\u0193-\u0194\u0196-\u0198\u019C-\u019D\u019F-\u01A0\u01A2\u01A4\u01A6-\u01A7\u01A9\u01AC\u01AE-\u01AF\u01B1-\u01B3\u01B5\u01B7-\u01B8\u01BC\u01C4\u01C7\u01CA\u01CD\u01CF\u01D1\u01D3\u01D5\u01D7\u01D9\u01DB\u01DE\u01E0\u01E2\u01E4\u01E6\u01E8\u01EA\u01EC\u01EE\u01F1\u01F4\u01F6-\u01F8\u01FA\u01FC\u01FE\u0200\u0202\u0204\u0206\u0208\u020A\u020C\u020E\u0210\u0212\u0214\u0216\u0218\u021A\u021C\u021E\u0220\u0222\u0224\u0226\u0228\u022A\u022C\u022E\u0230\u0232\u023A-\u023B\u023D-\u023E\u0241\u0243-\u0246\u0248\u024A\u024C\u024E\u0370\u0372\u0376\u037F\u0386\u0388-\u038A\u038C\u038E-\u038F\u0391-\u03A1\u03A3-\u03AB\u03CF\u03D2-\u03D4\u03D8\u03DA\u03DC\u03DE\u03E0\u03E2\u03E4\u03E6\u03E8\u03EA\u03EC\u03EE\u03F4\u03F7\u03F9-\u03FA\u03FD-\u042F\u0460\u0462\u0464\u0466\u0468\u046A\u046C\u046E\u0470\u0472\u0474\u0476\u0478\u047A\u047C\u047E\u0480\u048A\u048C\u048E\u0490\u0492\u0494\u0496\u0498\u049A\u049C\u049E\u04A0\u04A2\u04A4\u04A6\u04A8\u04AA\u04AC\u04AE\u04B0\u04B2\u04B4\u04B6\u04B8\u04BA\u04BC\u04BE\u04C0-\u04C1\u04C3\u04C5\u04C7\u04C9\u04CB\u04CD\u04D0\u04D2\u04D4\u04D6\u04D8\u04DA\u04DC\u04DE\u04E0\u04E2\u04E4\u04E6\u04E8\u04EA\u04EC\u04EE\u04F0\u04F2\u04F4\u04F6\u04F8\u04FA\u04FC\u04FE\u0500\u0502\u0504\u0506\u0508\u050A\u050C\u050E\u0510\u0512\u0514\u0516\u0518\u051A\u051C\u051E\u0520\u0522\u0524\u0526\u0528\u052A\u052C\u052E\u0531-\u0556\u10A0-\u10C5\u10C7\u10CD\u13A0-\u13F5\u1E00\u1E02\u1E04\u1E06\u1E08\u1E0A\u1E0C\u1E0E\u1E10\u1E12\u1E14\u1E16\u1E18\u1E1A\u1E1C\u1E1E\u1E20\u1E22\u1E24\u1E26\u1E28\u1E2A\u1E2C\u1E2E\u1E30\u1E32\u1E34\u1E36\u1E38\u1E3A\u1E3C\u1E3E\u1E40\u1E42\u1E44\u1E46\u1E48\u1E4A\u1E4C\u1E4E\u1E50\u1E52\u1E54\u1E56\u1E58\u1E5A\u1E5C\u1E5E\u1E60\u1E62\u1E64\u1E66\u1E68\u1E6A\u1E6C\u1E6E\u1E70\u1E72\u1E74\u1E76\u1E78\u1E7A\u1E7C\u1E7E\u1E80\u1E82\u1E84\u1E86\u1E88\u1E8A\u1E8C\u1E8E\u1E90\u1E92\u1E94\u1E9E\u1EA0\u1EA2\u1EA4\u1EA6\u1EA8\u1EAA\u1EAC\u1EAE\u1EB0\u1EB2\u1EB4\u1EB6\u1EB8\u1EBA\u1EBC\u1EBE\u1EC0\u1EC2\u1EC4\u1EC6\u1EC8\u1ECA\u1ECC\u1ECE\u1ED0\u1ED2\u1ED4\u1ED6\u1ED8\u1EDA\u1EDC\u1EDE\u1EE0\u1EE2\u1EE4\u1EE6\u1EE8\u1EEA\u1EEC\u1EEE\u1EF0\u1EF2\u1EF4\u1EF6\u1EF8\u1EFA\u1EFC\u1EFE\u1F08-\u1F0F\u1F18-\u1F1D\u1F28-\u1F2F\u1F38-\u1F3F\u1F48-\u1F4D\u1F59\u1F5B\u1F5D\u1F5F\u1F68-\u1F6F\u1FB8-\u1FBB\u1FC8-\u1FCB\u1FD8-\u1FDB\u1FE8-\u1FEC\u1FF8-\u1FFB\u2102\u2107\u210B-\u210D\u2110-\u2112\u2115\u2119-\u211D\u2124\u2126\u2128\u212A-\u212D\u2130-\u2133\u213E-\u213F\u2145\u2183\u2C00-\u2C2E\u2C60\u2C62-\u2C64\u2C67\u2C69\u2C6B\u2C6D-\u2C70\u2C72\u2C75\u2C7E-\u2C80\u2C82\u2C84\u2C86\u2C88\u2C8A\u2C8C\u2C8E\u2C90\u2C92\u2C94\u2C96\u2C98\u2C9A\u2C9C\u2C9E\u2CA0\u2CA2\u2CA4\u2CA6\u2CA8\u2CAA\u2CAC\u2CAE\u2CB0\u2CB2\u2CB4\u2CB6\u2CB8\u2CBA\u2CBC\u2CBE\u2CC0\u2CC2\u2CC4\u2CC6\u2CC8\u2CCA\u2CCC\u2CCE\u2CD0\u2CD2\u2CD4\u2CD6\u2CD8\u2CDA\u2CDC\u2CDE\u2CE0\u2CE2\u2CEB\u2CED\u2CF2\uA640\uA642\uA644\uA646\uA648\uA64A\uA64C\uA64E\uA650\uA652\uA654\uA656\uA658\uA65A\uA65C\uA65E\uA660\uA662\uA664\uA666\uA668\uA66A\uA66C\uA680\uA682\uA684\uA686\uA688\uA68A\uA68C\uA68E\uA690\uA692\uA694\uA696\uA698\uA69A\uA722\uA724\uA726\uA728\uA72A\uA72C\uA72E\uA732\uA734\uA736\uA738\uA73A\uA73C\uA73E\uA740\uA742\uA744\uA746\uA748\uA74A\uA74C\uA74E\uA750\uA752\uA754\uA756\uA758\uA75A\uA75C\uA75E\uA760\uA762\uA764\uA766\uA768\uA76A\uA76C\uA76E\uA779\uA77B\uA77D-\uA77E\uA780\uA782\uA784\uA786\uA78B\uA78D\uA790\uA792\uA796\uA798\uA79A\uA79C\uA79E\uA7A0\uA7A2\uA7A4\uA7A6\uA7A8\uA7AA-\uA7AD\uA7B0-\uA7B4\uA7B6\uFF21-\uFF3A]/,
        peg$c127 = peg$classExpectation(
            [
                ["A", "Z"],
                ["\xC0", "\xD6"],
                ["\xD8", "\xDE"],
                "\u0100",
                "\u0102",
                "\u0104",
                "\u0106",
                "\u0108",
                "\u010A",
                "\u010C",
                "\u010E",
                "\u0110",
                "\u0112",
                "\u0114",
                "\u0116",
                "\u0118",
                "\u011A",
                "\u011C",
                "\u011E",
                "\u0120",
                "\u0122",
                "\u0124",
                "\u0126",
                "\u0128",
                "\u012A",
                "\u012C",
                "\u012E",
                "\u0130",
                "\u0132",
                "\u0134",
                "\u0136",
                "\u0139",
                "\u013B",
                "\u013D",
                "\u013F",
                "\u0141",
                "\u0143",
                "\u0145",
                "\u0147",
                "\u014A",
                "\u014C",
                "\u014E",
                "\u0150",
                "\u0152",
                "\u0154",
                "\u0156",
                "\u0158",
                "\u015A",
                "\u015C",
                "\u015E",
                "\u0160",
                "\u0162",
                "\u0164",
                "\u0166",
                "\u0168",
                "\u016A",
                "\u016C",
                "\u016E",
                "\u0170",
                "\u0172",
                "\u0174",
                "\u0176",
                ["\u0178", "\u0179"],
                "\u017B",
                "\u017D",
                ["\u0181", "\u0182"],
                "\u0184",
                ["\u0186", "\u0187"],
                ["\u0189", "\u018B"],
                ["\u018E", "\u0191"],
                ["\u0193", "\u0194"],
                ["\u0196", "\u0198"],
                ["\u019C", "\u019D"],
                ["\u019F", "\u01A0"],
                "\u01A2",
                "\u01A4",
                ["\u01A6", "\u01A7"],
                "\u01A9",
                "\u01AC",
                ["\u01AE", "\u01AF"],
                ["\u01B1", "\u01B3"],
                "\u01B5",
                ["\u01B7", "\u01B8"],
                "\u01BC",
                "\u01C4",
                "\u01C7",
                "\u01CA",
                "\u01CD",
                "\u01CF",
                "\u01D1",
                "\u01D3",
                "\u01D5",
                "\u01D7",
                "\u01D9",
                "\u01DB",
                "\u01DE",
                "\u01E0",
                "\u01E2",
                "\u01E4",
                "\u01E6",
                "\u01E8",
                "\u01EA",
                "\u01EC",
                "\u01EE",
                "\u01F1",
                "\u01F4",
                ["\u01F6", "\u01F8"],
                "\u01FA",
                "\u01FC",
                "\u01FE",
                "\u0200",
                "\u0202",
                "\u0204",
                "\u0206",
                "\u0208",
                "\u020A",
                "\u020C",
                "\u020E",
                "\u0210",
                "\u0212",
                "\u0214",
                "\u0216",
                "\u0218",
                "\u021A",
                "\u021C",
                "\u021E",
                "\u0220",
                "\u0222",
                "\u0224",
                "\u0226",
                "\u0228",
                "\u022A",
                "\u022C",
                "\u022E",
                "\u0230",
                "\u0232",
                ["\u023A", "\u023B"],
                ["\u023D", "\u023E"],
                "\u0241",
                ["\u0243", "\u0246"],
                "\u0248",
                "\u024A",
                "\u024C",
                "\u024E",
                "\u0370",
                "\u0372",
                "\u0376",
                "\u037F",
                "\u0386",
                ["\u0388", "\u038A"],
                "\u038C",
                ["\u038E", "\u038F"],
                ["\u0391", "\u03A1"],
                ["\u03A3", "\u03AB"],
                "\u03CF",
                ["\u03D2", "\u03D4"],
                "\u03D8",
                "\u03DA",
                "\u03DC",
                "\u03DE",
                "\u03E0",
                "\u03E2",
                "\u03E4",
                "\u03E6",
                "\u03E8",
                "\u03EA",
                "\u03EC",
                "\u03EE",
                "\u03F4",
                "\u03F7",
                ["\u03F9", "\u03FA"],
                ["\u03FD", "\u042F"],
                "\u0460",
                "\u0462",
                "\u0464",
                "\u0466",
                "\u0468",
                "\u046A",
                "\u046C",
                "\u046E",
                "\u0470",
                "\u0472",
                "\u0474",
                "\u0476",
                "\u0478",
                "\u047A",
                "\u047C",
                "\u047E",
                "\u0480",
                "\u048A",
                "\u048C",
                "\u048E",
                "\u0490",
                "\u0492",
                "\u0494",
                "\u0496",
                "\u0498",
                "\u049A",
                "\u049C",
                "\u049E",
                "\u04A0",
                "\u04A2",
                "\u04A4",
                "\u04A6",
                "\u04A8",
                "\u04AA",
                "\u04AC",
                "\u04AE",
                "\u04B0",
                "\u04B2",
                "\u04B4",
                "\u04B6",
                "\u04B8",
                "\u04BA",
                "\u04BC",
                "\u04BE",
                ["\u04C0", "\u04C1"],
                "\u04C3",
                "\u04C5",
                "\u04C7",
                "\u04C9",
                "\u04CB",
                "\u04CD",
                "\u04D0",
                "\u04D2",
                "\u04D4",
                "\u04D6",
                "\u04D8",
                "\u04DA",
                "\u04DC",
                "\u04DE",
                "\u04E0",
                "\u04E2",
                "\u04E4",
                "\u04E6",
                "\u04E8",
                "\u04EA",
                "\u04EC",
                "\u04EE",
                "\u04F0",
                "\u04F2",
                "\u04F4",
                "\u04F6",
                "\u04F8",
                "\u04FA",
                "\u04FC",
                "\u04FE",
                "\u0500",
                "\u0502",
                "\u0504",
                "\u0506",
                "\u0508",
                "\u050A",
                "\u050C",
                "\u050E",
                "\u0510",
                "\u0512",
                "\u0514",
                "\u0516",
                "\u0518",
                "\u051A",
                "\u051C",
                "\u051E",
                "\u0520",
                "\u0522",
                "\u0524",
                "\u0526",
                "\u0528",
                "\u052A",
                "\u052C",
                "\u052E",
                ["\u0531", "\u0556"],
                ["\u10A0", "\u10C5"],
                "\u10C7",
                "\u10CD",
                ["\u13A0", "\u13F5"],
                "\u1E00",
                "\u1E02",
                "\u1E04",
                "\u1E06",
                "\u1E08",
                "\u1E0A",
                "\u1E0C",
                "\u1E0E",
                "\u1E10",
                "\u1E12",
                "\u1E14",
                "\u1E16",
                "\u1E18",
                "\u1E1A",
                "\u1E1C",
                "\u1E1E",
                "\u1E20",
                "\u1E22",
                "\u1E24",
                "\u1E26",
                "\u1E28",
                "\u1E2A",
                "\u1E2C",
                "\u1E2E",
                "\u1E30",
                "\u1E32",
                "\u1E34",
                "\u1E36",
                "\u1E38",
                "\u1E3A",
                "\u1E3C",
                "\u1E3E",
                "\u1E40",
                "\u1E42",
                "\u1E44",
                "\u1E46",
                "\u1E48",
                "\u1E4A",
                "\u1E4C",
                "\u1E4E",
                "\u1E50",
                "\u1E52",
                "\u1E54",
                "\u1E56",
                "\u1E58",
                "\u1E5A",
                "\u1E5C",
                "\u1E5E",
                "\u1E60",
                "\u1E62",
                "\u1E64",
                "\u1E66",
                "\u1E68",
                "\u1E6A",
                "\u1E6C",
                "\u1E6E",
                "\u1E70",
                "\u1E72",
                "\u1E74",
                "\u1E76",
                "\u1E78",
                "\u1E7A",
                "\u1E7C",
                "\u1E7E",
                "\u1E80",
                "\u1E82",
                "\u1E84",
                "\u1E86",
                "\u1E88",
                "\u1E8A",
                "\u1E8C",
                "\u1E8E",
                "\u1E90",
                "\u1E92",
                "\u1E94",
                "\u1E9E",
                "\u1EA0",
                "\u1EA2",
                "\u1EA4",
                "\u1EA6",
                "\u1EA8",
                "\u1EAA",
                "\u1EAC",
                "\u1EAE",
                "\u1EB0",
                "\u1EB2",
                "\u1EB4",
                "\u1EB6",
                "\u1EB8",
                "\u1EBA",
                "\u1EBC",
                "\u1EBE",
                "\u1EC0",
                "\u1EC2",
                "\u1EC4",
                "\u1EC6",
                "\u1EC8",
                "\u1ECA",
                "\u1ECC",
                "\u1ECE",
                "\u1ED0",
                "\u1ED2",
                "\u1ED4",
                "\u1ED6",
                "\u1ED8",
                "\u1EDA",
                "\u1EDC",
                "\u1EDE",
                "\u1EE0",
                "\u1EE2",
                "\u1EE4",
                "\u1EE6",
                "\u1EE8",
                "\u1EEA",
                "\u1EEC",
                "\u1EEE",
                "\u1EF0",
                "\u1EF2",
                "\u1EF4",
                "\u1EF6",
                "\u1EF8",
                "\u1EFA",
                "\u1EFC",
                "\u1EFE",
                ["\u1F08", "\u1F0F"],
                ["\u1F18", "\u1F1D"],
                ["\u1F28", "\u1F2F"],
                ["\u1F38", "\u1F3F"],
                ["\u1F48", "\u1F4D"],
                "\u1F59",
                "\u1F5B",
                "\u1F5D",
                "\u1F5F",
                ["\u1F68", "\u1F6F"],
                ["\u1FB8", "\u1FBB"],
                ["\u1FC8", "\u1FCB"],
                ["\u1FD8", "\u1FDB"],
                ["\u1FE8", "\u1FEC"],
                ["\u1FF8", "\u1FFB"],
                "\u2102",
                "\u2107",
                ["\u210B", "\u210D"],
                ["\u2110", "\u2112"],
                "\u2115",
                ["\u2119", "\u211D"],
                "\u2124",
                "\u2126",
                "\u2128",
                ["\u212A", "\u212D"],
                ["\u2130", "\u2133"],
                ["\u213E", "\u213F"],
                "\u2145",
                "\u2183",
                ["\u2C00", "\u2C2E"],
                "\u2C60",
                ["\u2C62", "\u2C64"],
                "\u2C67",
                "\u2C69",
                "\u2C6B",
                ["\u2C6D", "\u2C70"],
                "\u2C72",
                "\u2C75",
                ["\u2C7E", "\u2C80"],
                "\u2C82",
                "\u2C84",
                "\u2C86",
                "\u2C88",
                "\u2C8A",
                "\u2C8C",
                "\u2C8E",
                "\u2C90",
                "\u2C92",
                "\u2C94",
                "\u2C96",
                "\u2C98",
                "\u2C9A",
                "\u2C9C",
                "\u2C9E",
                "\u2CA0",
                "\u2CA2",
                "\u2CA4",
                "\u2CA6",
                "\u2CA8",
                "\u2CAA",
                "\u2CAC",
                "\u2CAE",
                "\u2CB0",
                "\u2CB2",
                "\u2CB4",
                "\u2CB6",
                "\u2CB8",
                "\u2CBA",
                "\u2CBC",
                "\u2CBE",
                "\u2CC0",
                "\u2CC2",
                "\u2CC4",
                "\u2CC6",
                "\u2CC8",
                "\u2CCA",
                "\u2CCC",
                "\u2CCE",
                "\u2CD0",
                "\u2CD2",
                "\u2CD4",
                "\u2CD6",
                "\u2CD8",
                "\u2CDA",
                "\u2CDC",
                "\u2CDE",
                "\u2CE0",
                "\u2CE2",
                "\u2CEB",
                "\u2CED",
                "\u2CF2",
                "\uA640",
                "\uA642",
                "\uA644",
                "\uA646",
                "\uA648",
                "\uA64A",
                "\uA64C",
                "\uA64E",
                "\uA650",
                "\uA652",
                "\uA654",
                "\uA656",
                "\uA658",
                "\uA65A",
                "\uA65C",
                "\uA65E",
                "\uA660",
                "\uA662",
                "\uA664",
                "\uA666",
                "\uA668",
                "\uA66A",
                "\uA66C",
                "\uA680",
                "\uA682",
                "\uA684",
                "\uA686",
                "\uA688",
                "\uA68A",
                "\uA68C",
                "\uA68E",
                "\uA690",
                "\uA692",
                "\uA694",
                "\uA696",
                "\uA698",
                "\uA69A",
                "\uA722",
                "\uA724",
                "\uA726",
                "\uA728",
                "\uA72A",
                "\uA72C",
                "\uA72E",
                "\uA732",
                "\uA734",
                "\uA736",
                "\uA738",
                "\uA73A",
                "\uA73C",
                "\uA73E",
                "\uA740",
                "\uA742",
                "\uA744",
                "\uA746",
                "\uA748",
                "\uA74A",
                "\uA74C",
                "\uA74E",
                "\uA750",
                "\uA752",
                "\uA754",
                "\uA756",
                "\uA758",
                "\uA75A",
                "\uA75C",
                "\uA75E",
                "\uA760",
                "\uA762",
                "\uA764",
                "\uA766",
                "\uA768",
                "\uA76A",
                "\uA76C",
                "\uA76E",
                "\uA779",
                "\uA77B",
                ["\uA77D", "\uA77E"],
                "\uA780",
                "\uA782",
                "\uA784",
                "\uA786",
                "\uA78B",
                "\uA78D",
                "\uA790",
                "\uA792",
                "\uA796",
                "\uA798",
                "\uA79A",
                "\uA79C",
                "\uA79E",
                "\uA7A0",
                "\uA7A2",
                "\uA7A4",
                "\uA7A6",
                "\uA7A8",
                ["\uA7AA", "\uA7AD"],
                ["\uA7B0", "\uA7B4"],
                "\uA7B6",
                ["\uFF21", "\uFF3A"]
            ],
            false,
            false
        ),
        peg$c128 = /^[\u0903\u093B\u093E-\u0940\u0949-\u094C\u094E-\u094F\u0982-\u0983\u09BE-\u09C0\u09C7-\u09C8\u09CB-\u09CC\u09D7\u0A03\u0A3E-\u0A40\u0A83\u0ABE-\u0AC0\u0AC9\u0ACB-\u0ACC\u0B02-\u0B03\u0B3E\u0B40\u0B47-\u0B48\u0B4B-\u0B4C\u0B57\u0BBE-\u0BBF\u0BC1-\u0BC2\u0BC6-\u0BC8\u0BCA-\u0BCC\u0BD7\u0C01-\u0C03\u0C41-\u0C44\u0C82-\u0C83\u0CBE\u0CC0-\u0CC4\u0CC7-\u0CC8\u0CCA-\u0CCB\u0CD5-\u0CD6\u0D02-\u0D03\u0D3E-\u0D40\u0D46-\u0D48\u0D4A-\u0D4C\u0D57\u0D82-\u0D83\u0DCF-\u0DD1\u0DD8-\u0DDF\u0DF2-\u0DF3\u0F3E-\u0F3F\u0F7F\u102B-\u102C\u1031\u1038\u103B-\u103C\u1056-\u1057\u1062-\u1064\u1067-\u106D\u1083-\u1084\u1087-\u108C\u108F\u109A-\u109C\u17B6\u17BE-\u17C5\u17C7-\u17C8\u1923-\u1926\u1929-\u192B\u1930-\u1931\u1933-\u1938\u1A19-\u1A1A\u1A55\u1A57\u1A61\u1A63-\u1A64\u1A6D-\u1A72\u1B04\u1B35\u1B3B\u1B3D-\u1B41\u1B43-\u1B44\u1B82\u1BA1\u1BA6-\u1BA7\u1BAA\u1BE7\u1BEA-\u1BEC\u1BEE\u1BF2-\u1BF3\u1C24-\u1C2B\u1C34-\u1C35\u1CE1\u1CF2-\u1CF3\u302E-\u302F\uA823-\uA824\uA827\uA880-\uA881\uA8B4-\uA8C3\uA952-\uA953\uA983\uA9B4-\uA9B5\uA9BA-\uA9BB\uA9BD-\uA9C0\uAA2F-\uAA30\uAA33-\uAA34\uAA4D\uAA7B\uAA7D\uAAEB\uAAEE-\uAAEF\uAAF5\uABE3-\uABE4\uABE6-\uABE7\uABE9-\uABEA\uABEC]/,
        peg$c129 = peg$classExpectation(
            [
                "\u0903",
                "\u093B",
                ["\u093E", "\u0940"],
                ["\u0949", "\u094C"],
                ["\u094E", "\u094F"],
                ["\u0982", "\u0983"],
                ["\u09BE", "\u09C0"],
                ["\u09C7", "\u09C8"],
                ["\u09CB", "\u09CC"],
                "\u09D7",
                "\u0A03",
                ["\u0A3E", "\u0A40"],
                "\u0A83",
                ["\u0ABE", "\u0AC0"],
                "\u0AC9",
                ["\u0ACB", "\u0ACC"],
                ["\u0B02", "\u0B03"],
                "\u0B3E",
                "\u0B40",
                ["\u0B47", "\u0B48"],
                ["\u0B4B", "\u0B4C"],
                "\u0B57",
                ["\u0BBE", "\u0BBF"],
                ["\u0BC1", "\u0BC2"],
                ["\u0BC6", "\u0BC8"],
                ["\u0BCA", "\u0BCC"],
                "\u0BD7",
                ["\u0C01", "\u0C03"],
                ["\u0C41", "\u0C44"],
                ["\u0C82", "\u0C83"],
                "\u0CBE",
                ["\u0CC0", "\u0CC4"],
                ["\u0CC7", "\u0CC8"],
                ["\u0CCA", "\u0CCB"],
                ["\u0CD5", "\u0CD6"],
                ["\u0D02", "\u0D03"],
                ["\u0D3E", "\u0D40"],
                ["\u0D46", "\u0D48"],
                ["\u0D4A", "\u0D4C"],
                "\u0D57",
                ["\u0D82", "\u0D83"],
                ["\u0DCF", "\u0DD1"],
                ["\u0DD8", "\u0DDF"],
                ["\u0DF2", "\u0DF3"],
                ["\u0F3E", "\u0F3F"],
                "\u0F7F",
                ["\u102B", "\u102C"],
                "\u1031",
                "\u1038",
                ["\u103B", "\u103C"],
                ["\u1056", "\u1057"],
                ["\u1062", "\u1064"],
                ["\u1067", "\u106D"],
                ["\u1083", "\u1084"],
                ["\u1087", "\u108C"],
                "\u108F",
                ["\u109A", "\u109C"],
                "\u17B6",
                ["\u17BE", "\u17C5"],
                ["\u17C7", "\u17C8"],
                ["\u1923", "\u1926"],
                ["\u1929", "\u192B"],
                ["\u1930", "\u1931"],
                ["\u1933", "\u1938"],
                ["\u1A19", "\u1A1A"],
                "\u1A55",
                "\u1A57",
                "\u1A61",
                ["\u1A63", "\u1A64"],
                ["\u1A6D", "\u1A72"],
                "\u1B04",
                "\u1B35",
                "\u1B3B",
                ["\u1B3D", "\u1B41"],
                ["\u1B43", "\u1B44"],
                "\u1B82",
                "\u1BA1",
                ["\u1BA6", "\u1BA7"],
                "\u1BAA",
                "\u1BE7",
                ["\u1BEA", "\u1BEC"],
                "\u1BEE",
                ["\u1BF2", "\u1BF3"],
                ["\u1C24", "\u1C2B"],
                ["\u1C34", "\u1C35"],
                "\u1CE1",
                ["\u1CF2", "\u1CF3"],
                ["\u302E", "\u302F"],
                ["\uA823", "\uA824"],
                "\uA827",
                ["\uA880", "\uA881"],
                ["\uA8B4", "\uA8C3"],
                ["\uA952", "\uA953"],
                "\uA983",
                ["\uA9B4", "\uA9B5"],
                ["\uA9BA", "\uA9BB"],
                ["\uA9BD", "\uA9C0"],
                ["\uAA2F", "\uAA30"],
                ["\uAA33", "\uAA34"],
                "\uAA4D",
                "\uAA7B",
                "\uAA7D",
                "\uAAEB",
                ["\uAAEE", "\uAAEF"],
                "\uAAF5",
                ["\uABE3", "\uABE4"],
                ["\uABE6", "\uABE7"],
                ["\uABE9", "\uABEA"],
                "\uABEC"
            ],
            false,
            false
        ),
        peg$c130 = /^[\u0300-\u036F\u0483-\u0487\u0591-\u05BD\u05BF\u05C1-\u05C2\u05C4-\u05C5\u05C7\u0610-\u061A\u064B-\u065F\u0670\u06D6-\u06DC\u06DF-\u06E4\u06E7-\u06E8\u06EA-\u06ED\u0711\u0730-\u074A\u07A6-\u07B0\u07EB-\u07F3\u0816-\u0819\u081B-\u0823\u0825-\u0827\u0829-\u082D\u0859-\u085B\u08E3-\u0902\u093A\u093C\u0941-\u0948\u094D\u0951-\u0957\u0962-\u0963\u0981\u09BC\u09C1-\u09C4\u09CD\u09E2-\u09E3\u0A01-\u0A02\u0A3C\u0A41-\u0A42\u0A47-\u0A48\u0A4B-\u0A4D\u0A51\u0A70-\u0A71\u0A75\u0A81-\u0A82\u0ABC\u0AC1-\u0AC5\u0AC7-\u0AC8\u0ACD\u0AE2-\u0AE3\u0B01\u0B3C\u0B3F\u0B41-\u0B44\u0B4D\u0B56\u0B62-\u0B63\u0B82\u0BC0\u0BCD\u0C00\u0C3E-\u0C40\u0C46-\u0C48\u0C4A-\u0C4D\u0C55-\u0C56\u0C62-\u0C63\u0C81\u0CBC\u0CBF\u0CC6\u0CCC-\u0CCD\u0CE2-\u0CE3\u0D01\u0D41-\u0D44\u0D4D\u0D62-\u0D63\u0DCA\u0DD2-\u0DD4\u0DD6\u0E31\u0E34-\u0E3A\u0E47-\u0E4E\u0EB1\u0EB4-\u0EB9\u0EBB-\u0EBC\u0EC8-\u0ECD\u0F18-\u0F19\u0F35\u0F37\u0F39\u0F71-\u0F7E\u0F80-\u0F84\u0F86-\u0F87\u0F8D-\u0F97\u0F99-\u0FBC\u0FC6\u102D-\u1030\u1032-\u1037\u1039-\u103A\u103D-\u103E\u1058-\u1059\u105E-\u1060\u1071-\u1074\u1082\u1085-\u1086\u108D\u109D\u135D-\u135F\u1712-\u1714\u1732-\u1734\u1752-\u1753\u1772-\u1773\u17B4-\u17B5\u17B7-\u17BD\u17C6\u17C9-\u17D3\u17DD\u180B-\u180D\u18A9\u1920-\u1922\u1927-\u1928\u1932\u1939-\u193B\u1A17-\u1A18\u1A1B\u1A56\u1A58-\u1A5E\u1A60\u1A62\u1A65-\u1A6C\u1A73-\u1A7C\u1A7F\u1AB0-\u1ABD\u1B00-\u1B03\u1B34\u1B36-\u1B3A\u1B3C\u1B42\u1B6B-\u1B73\u1B80-\u1B81\u1BA2-\u1BA5\u1BA8-\u1BA9\u1BAB-\u1BAD\u1BE6\u1BE8-\u1BE9\u1BED\u1BEF-\u1BF1\u1C2C-\u1C33\u1C36-\u1C37\u1CD0-\u1CD2\u1CD4-\u1CE0\u1CE2-\u1CE8\u1CED\u1CF4\u1CF8-\u1CF9\u1DC0-\u1DF5\u1DFC-\u1DFF\u20D0-\u20DC\u20E1\u20E5-\u20F0\u2CEF-\u2CF1\u2D7F\u2DE0-\u2DFF\u302A-\u302D\u3099-\u309A\uA66F\uA674-\uA67D\uA69E-\uA69F\uA6F0-\uA6F1\uA802\uA806\uA80B\uA825-\uA826\uA8C4\uA8E0-\uA8F1\uA926-\uA92D\uA947-\uA951\uA980-\uA982\uA9B3\uA9B6-\uA9B9\uA9BC\uA9E5\uAA29-\uAA2E\uAA31-\uAA32\uAA35-\uAA36\uAA43\uAA4C\uAA7C\uAAB0\uAAB2-\uAAB4\uAAB7-\uAAB8\uAABE-\uAABF\uAAC1\uAAEC-\uAAED\uAAF6\uABE5\uABE8\uABED\uFB1E\uFE00-\uFE0F\uFE20-\uFE2F]/,
        peg$c131 = peg$classExpectation(
            [
                ["\u0300", "\u036F"],
                ["\u0483", "\u0487"],
                ["\u0591", "\u05BD"],
                "\u05BF",
                ["\u05C1", "\u05C2"],
                ["\u05C4", "\u05C5"],
                "\u05C7",
                ["\u0610", "\u061A"],
                ["\u064B", "\u065F"],
                "\u0670",
                ["\u06D6", "\u06DC"],
                ["\u06DF", "\u06E4"],
                ["\u06E7", "\u06E8"],
                ["\u06EA", "\u06ED"],
                "\u0711",
                ["\u0730", "\u074A"],
                ["\u07A6", "\u07B0"],
                ["\u07EB", "\u07F3"],
                ["\u0816", "\u0819"],
                ["\u081B", "\u0823"],
                ["\u0825", "\u0827"],
                ["\u0829", "\u082D"],
                ["\u0859", "\u085B"],
                ["\u08E3", "\u0902"],
                "\u093A",
                "\u093C",
                ["\u0941", "\u0948"],
                "\u094D",
                ["\u0951", "\u0957"],
                ["\u0962", "\u0963"],
                "\u0981",
                "\u09BC",
                ["\u09C1", "\u09C4"],
                "\u09CD",
                ["\u09E2", "\u09E3"],
                ["\u0A01", "\u0A02"],
                "\u0A3C",
                ["\u0A41", "\u0A42"],
                ["\u0A47", "\u0A48"],
                ["\u0A4B", "\u0A4D"],
                "\u0A51",
                ["\u0A70", "\u0A71"],
                "\u0A75",
                ["\u0A81", "\u0A82"],
                "\u0ABC",
                ["\u0AC1", "\u0AC5"],
                ["\u0AC7", "\u0AC8"],
                "\u0ACD",
                ["\u0AE2", "\u0AE3"],
                "\u0B01",
                "\u0B3C",
                "\u0B3F",
                ["\u0B41", "\u0B44"],
                "\u0B4D",
                "\u0B56",
                ["\u0B62", "\u0B63"],
                "\u0B82",
                "\u0BC0",
                "\u0BCD",
                "\u0C00",
                ["\u0C3E", "\u0C40"],
                ["\u0C46", "\u0C48"],
                ["\u0C4A", "\u0C4D"],
                ["\u0C55", "\u0C56"],
                ["\u0C62", "\u0C63"],
                "\u0C81",
                "\u0CBC",
                "\u0CBF",
                "\u0CC6",
                ["\u0CCC", "\u0CCD"],
                ["\u0CE2", "\u0CE3"],
                "\u0D01",
                ["\u0D41", "\u0D44"],
                "\u0D4D",
                ["\u0D62", "\u0D63"],
                "\u0DCA",
                ["\u0DD2", "\u0DD4"],
                "\u0DD6",
                "\u0E31",
                ["\u0E34", "\u0E3A"],
                ["\u0E47", "\u0E4E"],
                "\u0EB1",
                ["\u0EB4", "\u0EB9"],
                ["\u0EBB", "\u0EBC"],
                ["\u0EC8", "\u0ECD"],
                ["\u0F18", "\u0F19"],
                "\u0F35",
                "\u0F37",
                "\u0F39",
                ["\u0F71", "\u0F7E"],
                ["\u0F80", "\u0F84"],
                ["\u0F86", "\u0F87"],
                ["\u0F8D", "\u0F97"],
                ["\u0F99", "\u0FBC"],
                "\u0FC6",
                ["\u102D", "\u1030"],
                ["\u1032", "\u1037"],
                ["\u1039", "\u103A"],
                ["\u103D", "\u103E"],
                ["\u1058", "\u1059"],
                ["\u105E", "\u1060"],
                ["\u1071", "\u1074"],
                "\u1082",
                ["\u1085", "\u1086"],
                "\u108D",
                "\u109D",
                ["\u135D", "\u135F"],
                ["\u1712", "\u1714"],
                ["\u1732", "\u1734"],
                ["\u1752", "\u1753"],
                ["\u1772", "\u1773"],
                ["\u17B4", "\u17B5"],
                ["\u17B7", "\u17BD"],
                "\u17C6",
                ["\u17C9", "\u17D3"],
                "\u17DD",
                ["\u180B", "\u180D"],
                "\u18A9",
                ["\u1920", "\u1922"],
                ["\u1927", "\u1928"],
                "\u1932",
                ["\u1939", "\u193B"],
                ["\u1A17", "\u1A18"],
                "\u1A1B",
                "\u1A56",
                ["\u1A58", "\u1A5E"],
                "\u1A60",
                "\u1A62",
                ["\u1A65", "\u1A6C"],
                ["\u1A73", "\u1A7C"],
                "\u1A7F",
                ["\u1AB0", "\u1ABD"],
                ["\u1B00", "\u1B03"],
                "\u1B34",
                ["\u1B36", "\u1B3A"],
                "\u1B3C",
                "\u1B42",
                ["\u1B6B", "\u1B73"],
                ["\u1B80", "\u1B81"],
                ["\u1BA2", "\u1BA5"],
                ["\u1BA8", "\u1BA9"],
                ["\u1BAB", "\u1BAD"],
                "\u1BE6",
                ["\u1BE8", "\u1BE9"],
                "\u1BED",
                ["\u1BEF", "\u1BF1"],
                ["\u1C2C", "\u1C33"],
                ["\u1C36", "\u1C37"],
                ["\u1CD0", "\u1CD2"],
                ["\u1CD4", "\u1CE0"],
                ["\u1CE2", "\u1CE8"],
                "\u1CED",
                "\u1CF4",
                ["\u1CF8", "\u1CF9"],
                ["\u1DC0", "\u1DF5"],
                ["\u1DFC", "\u1DFF"],
                ["\u20D0", "\u20DC"],
                "\u20E1",
                ["\u20E5", "\u20F0"],
                ["\u2CEF", "\u2CF1"],
                "\u2D7F",
                ["\u2DE0", "\u2DFF"],
                ["\u302A", "\u302D"],
                ["\u3099", "\u309A"],
                "\uA66F",
                ["\uA674", "\uA67D"],
                ["\uA69E", "\uA69F"],
                ["\uA6F0", "\uA6F1"],
                "\uA802",
                "\uA806",
                "\uA80B",
                ["\uA825", "\uA826"],
                "\uA8C4",
                ["\uA8E0", "\uA8F1"],
                ["\uA926", "\uA92D"],
                ["\uA947", "\uA951"],
                ["\uA980", "\uA982"],
                "\uA9B3",
                ["\uA9B6", "\uA9B9"],
                "\uA9BC",
                "\uA9E5",
                ["\uAA29", "\uAA2E"],
                ["\uAA31", "\uAA32"],
                ["\uAA35", "\uAA36"],
                "\uAA43",
                "\uAA4C",
                "\uAA7C",
                "\uAAB0",
                ["\uAAB2", "\uAAB4"],
                ["\uAAB7", "\uAAB8"],
                ["\uAABE", "\uAABF"],
                "\uAAC1",
                ["\uAAEC", "\uAAED"],
                "\uAAF6",
                "\uABE5",
                "\uABE8",
                "\uABED",
                "\uFB1E",
                ["\uFE00", "\uFE0F"],
                ["\uFE20", "\uFE2F"]
            ],
            false,
            false
        ),
        peg$c132 = /^[0-9\u0660-\u0669\u06F0-\u06F9\u07C0-\u07C9\u0966-\u096F\u09E6-\u09EF\u0A66-\u0A6F\u0AE6-\u0AEF\u0B66-\u0B6F\u0BE6-\u0BEF\u0C66-\u0C6F\u0CE6-\u0CEF\u0D66-\u0D6F\u0DE6-\u0DEF\u0E50-\u0E59\u0ED0-\u0ED9\u0F20-\u0F29\u1040-\u1049\u1090-\u1099\u17E0-\u17E9\u1810-\u1819\u1946-\u194F\u19D0-\u19D9\u1A80-\u1A89\u1A90-\u1A99\u1B50-\u1B59\u1BB0-\u1BB9\u1C40-\u1C49\u1C50-\u1C59\uA620-\uA629\uA8D0-\uA8D9\uA900-\uA909\uA9D0-\uA9D9\uA9F0-\uA9F9\uAA50-\uAA59\uABF0-\uABF9\uFF10-\uFF19]/,
        peg$c133 = peg$classExpectation(
            [
                ["0", "9"],
                ["\u0660", "\u0669"],
                ["\u06F0", "\u06F9"],
                ["\u07C0", "\u07C9"],
                ["\u0966", "\u096F"],
                ["\u09E6", "\u09EF"],
                ["\u0A66", "\u0A6F"],
                ["\u0AE6", "\u0AEF"],
                ["\u0B66", "\u0B6F"],
                ["\u0BE6", "\u0BEF"],
                ["\u0C66", "\u0C6F"],
                ["\u0CE6", "\u0CEF"],
                ["\u0D66", "\u0D6F"],
                ["\u0DE6", "\u0DEF"],
                ["\u0E50", "\u0E59"],
                ["\u0ED0", "\u0ED9"],
                ["\u0F20", "\u0F29"],
                ["\u1040", "\u1049"],
                ["\u1090", "\u1099"],
                ["\u17E0", "\u17E9"],
                ["\u1810", "\u1819"],
                ["\u1946", "\u194F"],
                ["\u19D0", "\u19D9"],
                ["\u1A80", "\u1A89"],
                ["\u1A90", "\u1A99"],
                ["\u1B50", "\u1B59"],
                ["\u1BB0", "\u1BB9"],
                ["\u1C40", "\u1C49"],
                ["\u1C50", "\u1C59"],
                ["\uA620", "\uA629"],
                ["\uA8D0", "\uA8D9"],
                ["\uA900", "\uA909"],
                ["\uA9D0", "\uA9D9"],
                ["\uA9F0", "\uA9F9"],
                ["\uAA50", "\uAA59"],
                ["\uABF0", "\uABF9"],
                ["\uFF10", "\uFF19"]
            ],
            false,
            false
        ),
        peg$c134 = /^[\u16EE-\u16F0\u2160-\u2182\u2185-\u2188\u3007\u3021-\u3029\u3038-\u303A\uA6E6-\uA6EF]/,
        peg$c135 = peg$classExpectation(
            [
                ["\u16EE", "\u16F0"],
                ["\u2160", "\u2182"],
                ["\u2185", "\u2188"],
                "\u3007",
                ["\u3021", "\u3029"],
                ["\u3038", "\u303A"],
                ["\uA6E6", "\uA6EF"]
            ],
            false,
            false
        ),
        peg$c136 = /^[_\u203F-\u2040\u2054\uFE33-\uFE34\uFE4D-\uFE4F\uFF3F]/,
        peg$c137 = peg$classExpectation(
            [
                "_",
                ["\u203F", "\u2040"],
                "\u2054",
                ["\uFE33", "\uFE34"],
                ["\uFE4D", "\uFE4F"],
                "\uFF3F"
            ],
            false,
            false
        ),
        peg$c138 = /^[ \xA0\u1680\u2000-\u200A\u202F\u205F\u3000]/,
        peg$c139 = peg$classExpectation(
            [
                " ",
                "\xA0",
                "\u1680",
                ["\u2000", "\u200A"],
                "\u202F",
                "\u205F",
                "\u3000"
            ],
            false,
            false
        ),
        peg$c140 = "break",
        peg$c141 = peg$literalExpectation("break", false),
        peg$c142 = "case",
        peg$c143 = peg$literalExpectation("case", false),
        peg$c144 = "catch",
        peg$c145 = peg$literalExpectation("catch", false),
        peg$c146 = "class",
        peg$c147 = peg$literalExpectation("class", false),
        peg$c148 = "const",
        peg$c149 = peg$literalExpectation("const", false),
        peg$c150 = "continue",
        peg$c151 = peg$literalExpectation("continue", false),
        peg$c152 = "debugger",
        peg$c153 = peg$literalExpectation("debugger", false),
        peg$c154 = "default",
        peg$c155 = peg$literalExpectation("default", false),
        peg$c156 = "delete",
        peg$c157 = peg$literalExpectation("delete", false),
        peg$c158 = "do",
        peg$c159 = peg$literalExpectation("do", false),
        peg$c160 = "else",
        peg$c161 = peg$literalExpectation("else", false),
        peg$c162 = "enum",
        peg$c163 = peg$literalExpectation("enum", false),
        peg$c164 = "export",
        peg$c165 = peg$literalExpectation("export", false),
        peg$c166 = "extends",
        peg$c167 = peg$literalExpectation("extends", false),
        peg$c168 = "false",
        peg$c169 = peg$literalExpectation("false", false),
        peg$c170 = "finally",
        peg$c171 = peg$literalExpectation("finally", false),
        peg$c172 = "for",
        peg$c173 = peg$literalExpectation("for", false),
        peg$c174 = "function",
        peg$c175 = peg$literalExpectation("function", false),
        peg$c176 = "get",
        peg$c177 = peg$literalExpectation("get", false),
        peg$c178 = "if",
        peg$c179 = peg$literalExpectation("if", false),
        peg$c180 = "import",
        peg$c181 = peg$literalExpectation("import", false),
        peg$c182 = "instanceof",
        peg$c183 = peg$literalExpectation("instanceof", false),
        peg$c184 = "in",
        peg$c185 = peg$literalExpectation("in", false),
        peg$c186 = "new",
        peg$c187 = peg$literalExpectation("new", false),
        peg$c188 = "null",
        peg$c189 = peg$literalExpectation("null", false),
        peg$c190 = "return",
        peg$c191 = peg$literalExpectation("return", false),
        peg$c192 = "set",
        peg$c193 = peg$literalExpectation("set", false),
        peg$c194 = "super",
        peg$c195 = peg$literalExpectation("super", false),
        peg$c196 = "switch",
        peg$c197 = peg$literalExpectation("switch", false),
        peg$c198 = "this",
        peg$c199 = peg$literalExpectation("this", false),
        peg$c200 = "throw",
        peg$c201 = peg$literalExpectation("throw", false),
        peg$c202 = "true",
        peg$c203 = peg$literalExpectation("true", false),
        peg$c204 = "try",
        peg$c205 = peg$literalExpectation("try", false),
        peg$c206 = "typeof",
        peg$c207 = peg$literalExpectation("typeof", false),
        peg$c208 = "var",
        peg$c209 = peg$literalExpectation("var", false),
        peg$c210 = "void",
        peg$c211 = peg$literalExpectation("void", false),
        peg$c212 = "while",
        peg$c213 = peg$literalExpectation("while", false),
        peg$c214 = "with",
        peg$c215 = peg$literalExpectation("with", false),
        peg$c216 = ";",
        peg$c217 = peg$literalExpectation(";", false),
        peg$c218 = "}",
        peg$c219 = peg$literalExpectation("}", false),
        peg$c220 = function() {
            return { type: "ThisExpression" }
        },
        peg$c221 = "(",
        peg$c222 = peg$literalExpectation("(", false),
        peg$c223 = ")",
        peg$c224 = peg$literalExpectation(")", false),
        peg$c225 = function(expression) {
            return expression
        },
        peg$c226 = function(elision) {
            return {
                type: "ArrayExpression",
                elements: optionalList(extractOptional(elision, 0))
            }
        },
        peg$c227 = function(elements) {
            return {
                type: "ArrayExpression",
                elements: elements
            }
        },
        peg$c228 = ",",
        peg$c229 = peg$literalExpectation(",", false),
        peg$c230 = function(elements, elision) {
            return {
                type: "ArrayExpression",
                elements: elements.concat(
                    optionalList(extractOptional(elision, 0))
                )
            }
        },
        peg$c231 = function(elision, element) {
            return optionalList(extractOptional(elision, 0)).concat(element)
        },
        peg$c232 = function(head, elision, element) {
            return optionalList(extractOptional(elision, 0)).concat(element)
        },
        peg$c233 = function(head, tail) {
            return Array.prototype.concat.apply(head, tail)
        },
        peg$c234 = function(commas) {
            return filledArray(commas.length + 1, null)
        },
        peg$c235 = "{",
        peg$c236 = peg$literalExpectation("{", false),
        peg$c237 = function() {
            return { type: "ObjectExpression", properties: [] }
        },
        peg$c238 = function(properties) {
            return { type: "ObjectExpression", properties: properties }
        },
        peg$c239 = function(head, tail) {
            return buildList(head, tail, 3)
        },
        peg$c240 = ":",
        peg$c241 = peg$literalExpectation(":", false),
        peg$c242 = function(key, value) {
            return { type: "Property", key: key, value: value, kind: "init" }
        },
        peg$c243 = function(key, body) {
            return {
                type: "Property",
                key: key,
                value: {
                    type: "FunctionExpression",
                    id: null,
                    params: [],
                    body: body
                },
                kind: "get"
            }
        },
        peg$c244 = function(key, params, body) {
            return {
                type: "Property",
                key: key,
                value: {
                    type: "FunctionExpression",
                    id: null,
                    params: params,
                    body: body
                },
                kind: "set"
            }
        },
        peg$c245 = function(id) {
            return [id]
        },
        peg$c246 = function(callee, args) {
            return { type: "NewExpression", callee: callee, arguments: args }
        },
        peg$c247 = function(head, property) {
            return { property: property, computed: true }
        },
        peg$c248 = function(head, property) {
            return { property: property, computed: false }
        },
        peg$c249 = function(head, tail) {
            return tail.reduce(function(result, element) {
                return {
                    type: "MemberExpression",
                    object: result,
                    property: element.property,
                    computed: element.computed
                }
            }, head)
        },
        peg$c250 = function(callee) {
            return { type: "NewExpression", callee: callee, arguments: [] }
        },
        peg$c251 = function(callee, args) {
            return { type: "CallExpression", callee: callee, arguments: args }
        },
        peg$c252 = function(head, args) {
            return { type: "CallExpression", arguments: args }
        },
        peg$c253 = function(head, property) {
            return {
                type: "MemberExpression",
                property: property,
                computed: true
            }
        },
        peg$c254 = function(head, property) {
            return {
                type: "MemberExpression",
                property: property,
                computed: false
            }
        },
        peg$c255 = function(head, tail) {
            return tail.reduce(function(result, element) {
                element[TYPES_TO_PROPERTY_NAMES[element.type]] = result

                return element
            }, head)
        },
        peg$c256 = function(args) {
            return optionalList(extractOptional(args, 0))
        },
        peg$c257 = function(argument, operator) {
            return {
                type: "UpdateExpression",
                operator: operator,
                argument: argument,
                prefix: false
            }
        },
        peg$c258 = "++",
        peg$c259 = peg$literalExpectation("++", false),
        peg$c260 = "--",
        peg$c261 = peg$literalExpectation("--", false),
        peg$c262 = function(operator, argument) {
            var type =
                operator === "++" || operator === "--"
                    ? "UpdateExpression"
                    : "UnaryExpression"

            return {
                type: type,
                operator: operator,
                argument: argument,
                prefix: true
            }
        },
        peg$c263 = "+",
        peg$c264 = peg$literalExpectation("+", false),
        peg$c265 = "=",
        peg$c266 = peg$literalExpectation("=", false),
        peg$c267 = "-",
        peg$c268 = peg$literalExpectation("-", false),
        peg$c269 = "~",
        peg$c270 = peg$literalExpectation("~", false),
        peg$c271 = "!",
        peg$c272 = peg$literalExpectation("!", false),
        peg$c273 = function(head, tail) {
            return buildBinaryExpression(head, tail)
        },
        peg$c274 = "*",
        peg$c275 = peg$literalExpectation("*", false),
        peg$c276 = "%",
        peg$c277 = peg$literalExpectation("%", false),
        peg$c278 = /^[+=]/,
        peg$c279 = peg$classExpectation(["+", "="], false, false),
        peg$c280 = /^[\-=]/,
        peg$c281 = peg$classExpectation(["-", "="], false, false),
        peg$c282 = "<<",
        peg$c283 = peg$literalExpectation("<<", false),
        peg$c284 = ">>>",
        peg$c285 = peg$literalExpectation(">>>", false),
        peg$c286 = ">>",
        peg$c287 = peg$literalExpectation(">>", false),
        peg$c288 = "<=",
        peg$c289 = peg$literalExpectation("<=", false),
        peg$c290 = ">=",
        peg$c291 = peg$literalExpectation(">=", false),
        peg$c292 = "<",
        peg$c293 = peg$literalExpectation("<", false),
        peg$c294 = ">",
        peg$c295 = peg$literalExpectation(">", false),
        peg$c296 = "===",
        peg$c297 = peg$literalExpectation("===", false),
        peg$c298 = "!==",
        peg$c299 = peg$literalExpectation("!==", false),
        peg$c300 = "==",
        peg$c301 = peg$literalExpectation("==", false),
        peg$c302 = "!=",
        peg$c303 = peg$literalExpectation("!=", false),
        peg$c304 = "&",
        peg$c305 = peg$literalExpectation("&", false),
        peg$c306 = /^[&=]/,
        peg$c307 = peg$classExpectation(["&", "="], false, false),
        peg$c308 = "^",
        peg$c309 = peg$literalExpectation("^", false),
        peg$c310 = "|",
        peg$c311 = peg$literalExpectation("|", false),
        peg$c312 = /^[|=]/,
        peg$c313 = peg$classExpectation(["|", "="], false, false),
        peg$c314 = function(head, tail) {
            return buildLogicalExpression(head, tail)
        },
        peg$c315 = "&&",
        peg$c316 = peg$literalExpectation("&&", false),
        peg$c317 = "||",
        peg$c318 = peg$literalExpectation("||", false),
        peg$c319 = "?",
        peg$c320 = peg$literalExpectation("?", false),
        peg$c321 = function(test, consequent, alternate) {
            return {
                type: "ConditionalExpression",
                test: test,
                consequent: consequent,
                alternate: alternate
            }
        },
        peg$c322 = function(left, right) {
            return {
                type: "AssignmentExpression",
                operator: "=",
                left: left,
                right: right
            }
        },
        peg$c323 = function(left, operator, right) {
            return {
                type: "AssignmentExpression",
                operator: operator,
                left: left,
                right: right
            }
        },
        peg$c324 = "*=",
        peg$c325 = peg$literalExpectation("*=", false),
        peg$c326 = "/=",
        peg$c327 = peg$literalExpectation("/=", false),
        peg$c328 = "%=",
        peg$c329 = peg$literalExpectation("%=", false),
        peg$c330 = "+=",
        peg$c331 = peg$literalExpectation("+=", false),
        peg$c332 = "-=",
        peg$c333 = peg$literalExpectation("-=", false),
        peg$c334 = "<<=",
        peg$c335 = peg$literalExpectation("<<=", false),
        peg$c336 = ">>=",
        peg$c337 = peg$literalExpectation(">>=", false),
        peg$c338 = ">>>=",
        peg$c339 = peg$literalExpectation(">>>=", false),
        peg$c340 = "&=",
        peg$c341 = peg$literalExpectation("&=", false),
        peg$c342 = "^=",
        peg$c343 = peg$literalExpectation("^=", false),
        peg$c344 = "|=",
        peg$c345 = peg$literalExpectation("|=", false),
        peg$c346 = function(head, tail) {
            return tail.length > 0
                ? {
                      type: "SequenceExpression",
                      expressions: buildList(head, tail, 3)
                  }
                : head
        },
        peg$c347 = function(body) {
            return {
                type: "BlockStatement",
                body: optionalList(extractOptional(body, 0))
            }
        },
        peg$c348 = function(head, tail) {
            return buildList(head, tail, 1)
        },
        peg$c349 = function(declarations) {
            return {
                type: "VariableDeclaration",
                declarations: declarations,
                kind: "var"
            }
        },
        peg$c350 = function(id, init) {
            return {
                type: "VariableDeclarator",
                id: id,
                init: extractOptional(init, 1)
            }
        },
        peg$c351 = function() {
            return { type: "EmptyStatement" }
        },
        peg$c352 = function(expression) {
            return {
                type: "ExpressionStatement",
                expression: expression
            }
        },
        peg$c353 = function(test, consequent, alternate) {
            return {
                type: "IfStatement",
                test: test,
                consequent: consequent,
                alternate: alternate
            }
        },
        peg$c354 = function(test, consequent) {
            return {
                type: "IfStatement",
                test: test,
                consequent: consequent,
                alternate: null
            }
        },
        peg$c355 = function(body, test) {
            return { type: "DoWhileStatement", body: body, test: test }
        },
        peg$c356 = function(test, body) {
            return { type: "WhileStatement", test: test, body: body }
        },
        peg$c357 = function(init, test, update, body) {
            return {
                type: "ForStatement",
                init: extractOptional(init, 0),
                test: extractOptional(test, 0),
                update: extractOptional(update, 0),
                body: body
            }
        },
        peg$c358 = function(declarations, test, update, body) {
            return {
                type: "ForStatement",
                init: {
                    type: "VariableDeclaration",
                    declarations: declarations,
                    kind: "var"
                },
                test: extractOptional(test, 0),
                update: extractOptional(update, 0),
                body: body
            }
        },
        peg$c359 = function(left, right, body) {
            return {
                type: "ForInStatement",
                left: left,
                right: right,
                body: body
            }
        },
        peg$c360 = function(declarations, right, body) {
            return {
                type: "ForInStatement",
                left: {
                    type: "VariableDeclaration",
                    declarations: declarations,
                    kind: "var"
                },
                right: right,
                body: body
            }
        },
        peg$c361 = function() {
            return { type: "ContinueStatement", label: null }
        },
        peg$c362 = function(label) {
            return { type: "ContinueStatement", label: label }
        },
        peg$c363 = function() {
            return { type: "BreakStatement", label: null }
        },
        peg$c364 = function(label) {
            return { type: "BreakStatement", label: label }
        },
        peg$c365 = function() {
            return { type: "ReturnStatement", argument: null }
        },
        peg$c366 = function(argument) {
            return { type: "ReturnStatement", argument: argument }
        },
        peg$c367 = function(object, body) {
            return { type: "WithStatement", object: object, body: body }
        },
        peg$c368 = function(discriminant, cases) {
            return {
                type: "SwitchStatement",
                discriminant: discriminant,
                cases: cases
            }
        },
        peg$c369 = function(clauses) {
            return optionalList(extractOptional(clauses, 0))
        },
        peg$c370 = function(before, default_, after) {
            return optionalList(extractOptional(before, 0))
                .concat(default_)
                .concat(optionalList(extractOptional(after, 0)))
        },
        peg$c371 = function(test, consequent) {
            return {
                type: "SwitchCase",
                test: test,
                consequent: optionalList(extractOptional(consequent, 1))
            }
        },
        peg$c372 = function(consequent) {
            return {
                type: "SwitchCase",
                test: null,
                consequent: optionalList(extractOptional(consequent, 1))
            }
        },
        peg$c373 = function(label, body) {
            return { type: "LabeledStatement", label: label, body: body }
        },
        peg$c374 = function(argument) {
            return { type: "ThrowStatement", argument: argument }
        },
        peg$c375 = function(block, handler, finalizer) {
            return {
                type: "TryStatement",
                block: block,
                handler: handler,
                finalizer: finalizer
            }
        },
        peg$c376 = function(block, handler) {
            return {
                type: "TryStatement",
                block: block,
                handler: handler,
                finalizer: null
            }
        },
        peg$c377 = function(block, finalizer) {
            return {
                type: "TryStatement",
                block: block,
                handler: null,
                finalizer: finalizer
            }
        },
        peg$c378 = function(param, body) {
            return {
                type: "CatchClause",
                param: param,
                body: body
            }
        },
        peg$c379 = function(block) {
            return block
        },
        peg$c380 = function() {
            return { type: "DebuggerStatement" }
        },
        peg$c381 = function(id, params, body) {
            return {
                type: "FunctionDeclaration",
                id: id,
                params: optionalList(extractOptional(params, 0)),
                body: body
            }
        },
        peg$c382 = function(id, params, body) {
            return {
                type: "FunctionExpression",
                id: extractOptional(id, 0),
                params: optionalList(extractOptional(params, 0)),
                body: body
            }
        },
        peg$c383 = function(body) {
            return {
                type: "BlockStatement",
                body: optionalList(body)
            }
        },
        peg$c384 = function(body) {
            return {
                type: "Program",
                body: optionalList(body)
            }
        },
        peg$c385 = function(head, tail) {
            return buildList(head, tail, 1)
        },
        peg$currPos = 0,
        peg$savedPos = 0,
        peg$posDetailsCache = [{ line: 1, column: 1 }],
        peg$maxFailPos = 0,
        peg$maxFailExpected = [],
        peg$silentFails = 0,
        peg$result

    if ("startRule" in options) {
        if (!(options.startRule in peg$startRuleFunctions)) {
            throw new Error(
                "Can't start parsing from rule \"" + options.startRule + '".'
            )
        }

        peg$startRuleFunction = peg$startRuleFunctions[options.startRule]
    }

    function text() {
        return input.substring(peg$savedPos, peg$currPos)
    }

    function location() {
        return peg$computeLocation(peg$savedPos, peg$currPos)
    }

    function expected(description, location) {
        location =
            location !== void 0
                ? location
                : peg$computeLocation(peg$savedPos, peg$currPos)

        throw peg$buildStructuredError(
            [peg$otherExpectation(description)],
            input.substring(peg$savedPos, peg$currPos),
            location
        )
    }

    function error(message, location) {
        location =
            location !== void 0
                ? location
                : peg$computeLocation(peg$savedPos, peg$currPos)

        throw peg$buildSimpleError(message, location)
    }

    function peg$literalExpectation(text, ignoreCase) {
        return { type: "literal", text: text, ignoreCase: ignoreCase }
    }

    function peg$classExpectation(parts, inverted, ignoreCase) {
        return {
            type: "class",
            parts: parts,
            inverted: inverted,
            ignoreCase: ignoreCase
        }
    }

    function peg$anyExpectation() {
        return { type: "any" }
    }

    function peg$endExpectation() {
        return { type: "end" }
    }

    function peg$otherExpectation(description) {
        return { type: "other", description: description }
    }

    function peg$computePosDetails(pos) {
        var details = peg$posDetailsCache[pos],
            p

        if (details) {
            return details
        } else {
            p = pos - 1
            while (!peg$posDetailsCache[p]) {
                p--
            }

            details = peg$posDetailsCache[p]
            details = {
                line: details.line,
                column: details.column
            }

            while (p < pos) {
                if (input.charCodeAt(p) === 10) {
                    details.line++
                    details.column = 1
                } else {
                    details.column++
                }

                p++
            }

            peg$posDetailsCache[pos] = details
            return details
        }
    }

    function peg$computeLocation(startPos, endPos) {
        var startPosDetails = peg$computePosDetails(startPos),
            endPosDetails = peg$computePosDetails(endPos)

        return {
            start: {
                offset: startPos,
                line: startPosDetails.line,
                column: startPosDetails.column
            },
            end: {
                offset: endPos,
                line: endPosDetails.line,
                column: endPosDetails.column
            }
        }
    }

    function peg$fail(expected) {
        if (peg$currPos < peg$maxFailPos) {
            return
        }

        if (peg$currPos > peg$maxFailPos) {
            peg$maxFailPos = peg$currPos
            peg$maxFailExpected = []
        }

        peg$maxFailExpected.push(expected)
    }

    function peg$buildSimpleError(message, location) {
        return new peg$SyntaxError(message, null, null, location)
    }

    function peg$buildStructuredError(expected, found, location) {
        return new peg$SyntaxError(
            peg$SyntaxError.buildMessage(expected, found),
            expected,
            found,
            location
        )
    }

    function peg$parseStart() {
        var s0, s1, s2, s3

        s0 = peg$currPos
        s1 = peg$parse__()
        if (s1 !== peg$FAILED) {
            s2 = peg$parseProgram()
            if (s2 !== peg$FAILED) {
                s3 = peg$parse__()
                if (s3 !== peg$FAILED) {
                    peg$savedPos = s0
                    s1 = peg$c0(s2)
                    s0 = s1
                } else {
                    peg$currPos = s0
                    s0 = peg$FAILED
                }
            } else {
                peg$currPos = s0
                s0 = peg$FAILED
            }
        } else {
            peg$currPos = s0
            s0 = peg$FAILED
        }

        return s0
    }

    function peg$parseSourceCharacter() {
        var s0

        if (input.length > peg$currPos) {
            s0 = input.charAt(peg$currPos)
            peg$currPos++
        } else {
            s0 = peg$FAILED
            if (peg$silentFails === 0) {
                peg$fail(peg$c1)
            }
        }

        return s0
    }

    function peg$parseWhiteSpace() {
        var s0, s1

        peg$silentFails++
        if (input.charCodeAt(peg$currPos) === 9) {
            s0 = peg$c3
            peg$currPos++
        } else {
            s0 = peg$FAILED
            if (peg$silentFails === 0) {
                peg$fail(peg$c4)
            }
        }
        if (s0 === peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 11) {
                s0 = peg$c5
                peg$currPos++
            } else {
                s0 = peg$FAILED
                if (peg$silentFails === 0) {
                    peg$fail(peg$c6)
                }
            }
            if (s0 === peg$FAILED) {
                if (input.charCodeAt(peg$currPos) === 12) {
                    s0 = peg$c7
                    peg$currPos++
                } else {
                    s0 = peg$FAILED
                    if (peg$silentFails === 0) {
                        peg$fail(peg$c8)
                    }
                }
                if (s0 === peg$FAILED) {
                    if (input.charCodeAt(peg$currPos) === 32) {
                        s0 = peg$c9
                        peg$currPos++
                    } else {
                        s0 = peg$FAILED
                        if (peg$silentFails === 0) {
                            peg$fail(peg$c10)
                        }
                    }
                    if (s0 === peg$FAILED) {
                        if (input.charCodeAt(peg$currPos) === 160) {
                            s0 = peg$c11
                            peg$currPos++
                        } else {
                            s0 = peg$FAILED
                            if (peg$silentFails === 0) {
                                peg$fail(peg$c12)
                            }
                        }
                        if (s0 === peg$FAILED) {
                            if (input.charCodeAt(peg$currPos) === 65279) {
                                s0 = peg$c13
                                peg$currPos++
                            } else {
                                s0 = peg$FAILED
                                if (peg$silentFails === 0) {
                                    peg$fail(peg$c14)
                                }
                            }
                            if (s0 === peg$FAILED) {
                                s0 = peg$parseZs()
                            }
                        }
                    }
                }
            }
        }
        peg$silentFails--
        if (s0 === peg$FAILED) {
            s1 = peg$FAILED
            if (peg$silentFails === 0) {
                peg$fail(peg$c2)
            }
        }

        return s0
    }

    function peg$parseLineTerminator() {
        var s0

        if (peg$c15.test(input.charAt(peg$currPos))) {
            s0 = input.charAt(peg$currPos)
            peg$currPos++
        } else {
            s0 = peg$FAILED
            if (peg$silentFails === 0) {
                peg$fail(peg$c16)
            }
        }

        return s0
    }

    function peg$parseLineTerminatorSequence() {
        var s0, s1

        peg$silentFails++
        if (input.charCodeAt(peg$currPos) === 10) {
            s0 = peg$c18
            peg$currPos++
        } else {
            s0 = peg$FAILED
            if (peg$silentFails === 0) {
                peg$fail(peg$c19)
            }
        }
        if (s0 === peg$FAILED) {
            if (input.substr(peg$currPos, 2) === peg$c20) {
                s0 = peg$c20
                peg$currPos += 2
            } else {
                s0 = peg$FAILED
                if (peg$silentFails === 0) {
                    peg$fail(peg$c21)
                }
            }
            if (s0 === peg$FAILED) {
                if (input.charCodeAt(peg$currPos) === 13) {
                    s0 = peg$c22
                    peg$currPos++
                } else {
                    s0 = peg$FAILED
                    if (peg$silentFails === 0) {
                        peg$fail(peg$c23)
                    }
                }
                if (s0 === peg$FAILED) {
                    if (input.charCodeAt(peg$currPos) === 8232) {
                        s0 = peg$c24
                        peg$currPos++
                    } else {
                        s0 = peg$FAILED
                        if (peg$silentFails === 0) {
                            peg$fail(peg$c25)
                        }
                    }
                    if (s0 === peg$FAILED) {
                        if (input.charCodeAt(peg$currPos) === 8233) {
                            s0 = peg$c26
                            peg$currPos++
                        } else {
                            s0 = peg$FAILED
                            if (peg$silentFails === 0) {
                                peg$fail(peg$c27)
                            }
                        }
                    }
                }
            }
        }
        peg$silentFails--
        if (s0 === peg$FAILED) {
            s1 = peg$FAILED
            if (peg$silentFails === 0) {
                peg$fail(peg$c17)
            }
        }

        return s0
    }

    function peg$parseComment() {
        var s0, s1

        peg$silentFails++
        s0 = peg$parseMultiLineComment()
        if (s0 === peg$FAILED) {
            s0 = peg$parseSingleLineComment()
        }
        peg$silentFails--
        if (s0 === peg$FAILED) {
            s1 = peg$FAILED
            if (peg$silentFails === 0) {
                peg$fail(peg$c28)
            }
        }

        return s0
    }

    function peg$parseMultiLineComment() {
        var s0, s1, s2, s3, s4, s5

        s0 = peg$currPos
        if (input.substr(peg$currPos, 2) === peg$c29) {
            s1 = peg$c29
            peg$currPos += 2
        } else {
            s1 = peg$FAILED
            if (peg$silentFails === 0) {
                peg$fail(peg$c30)
            }
        }
        if (s1 !== peg$FAILED) {
            s2 = []
            s3 = peg$currPos
            s4 = peg$currPos
            peg$silentFails++
            if (input.substr(peg$currPos, 2) === peg$c31) {
                s5 = peg$c31
                peg$currPos += 2
            } else {
                s5 = peg$FAILED
                if (peg$silentFails === 0) {
                    peg$fail(peg$c32)
                }
            }
            peg$silentFails--
            if (s5 === peg$FAILED) {
                s4 = void 0
            } else {
                peg$currPos = s4
                s4 = peg$FAILED
            }
            if (s4 !== peg$FAILED) {
                s5 = peg$parseSourceCharacter()
                if (s5 !== peg$FAILED) {
                    s4 = [s4, s5]
                    s3 = s4
                } else {
                    peg$currPos = s3
                    s3 = peg$FAILED
                }
            } else {
                peg$currPos = s3
                s3 = peg$FAILED
            }
            while (s3 !== peg$FAILED) {
                s2.push(s3)
                s3 = peg$currPos
                s4 = peg$currPos
                peg$silentFails++
                if (input.substr(peg$currPos, 2) === peg$c31) {
                    s5 = peg$c31
                    peg$currPos += 2
                } else {
                    s5 = peg$FAILED
                    if (peg$silentFails === 0) {
                        peg$fail(peg$c32)
                    }
                }
                peg$silentFails--
                if (s5 === peg$FAILED) {
                    s4 = void 0
                } else {
                    peg$currPos = s4
                    s4 = peg$FAILED
                }
                if (s4 !== peg$FAILED) {
                    s5 = peg$parseSourceCharacter()
                    if (s5 !== peg$FAILED) {
                        s4 = [s4, s5]
                        s3 = s4
                    } else {
                        peg$currPos = s3
                        s3 = peg$FAILED
                    }
                } else {
                    peg$currPos = s3
                    s3 = peg$FAILED
                }
            }
            if (s2 !== peg$FAILED) {
                if (input.substr(peg$currPos, 2) === peg$c31) {
                    s3 = peg$c31
                    peg$currPos += 2
                } else {
                    s3 = peg$FAILED
                    if (peg$silentFails === 0) {
                        peg$fail(peg$c32)
                    }
                }
                if (s3 !== peg$FAILED) {
                    s1 = [s1, s2, s3]
                    s0 = s1
                } else {
                    peg$currPos = s0
                    s0 = peg$FAILED
                }
            } else {
                peg$currPos = s0
                s0 = peg$FAILED
            }
        } else {
            peg$currPos = s0
            s0 = peg$FAILED
        }

        return s0
    }

    function peg$parseMultiLineCommentNoLineTerminator() {
        var s0, s1, s2, s3, s4, s5

        s0 = peg$currPos
        if (input.substr(peg$currPos, 2) === peg$c29) {
            s1 = peg$c29
            peg$currPos += 2
        } else {
            s1 = peg$FAILED
            if (peg$silentFails === 0) {
                peg$fail(peg$c30)
            }
        }
        if (s1 !== peg$FAILED) {
            s2 = []
            s3 = peg$currPos
            s4 = peg$currPos
            peg$silentFails++
            if (input.substr(peg$currPos, 2) === peg$c31) {
                s5 = peg$c31
                peg$currPos += 2
            } else {
                s5 = peg$FAILED
                if (peg$silentFails === 0) {
                    peg$fail(peg$c32)
                }
            }
            if (s5 === peg$FAILED) {
                s5 = peg$parseLineTerminator()
            }
            peg$silentFails--
            if (s5 === peg$FAILED) {
                s4 = void 0
            } else {
                peg$currPos = s4
                s4 = peg$FAILED
            }
            if (s4 !== peg$FAILED) {
                s5 = peg$parseSourceCharacter()
                if (s5 !== peg$FAILED) {
                    s4 = [s4, s5]
                    s3 = s4
                } else {
                    peg$currPos = s3
                    s3 = peg$FAILED
                }
            } else {
                peg$currPos = s3
                s3 = peg$FAILED
            }
            while (s3 !== peg$FAILED) {
                s2.push(s3)
                s3 = peg$currPos
                s4 = peg$currPos
                peg$silentFails++
                if (input.substr(peg$currPos, 2) === peg$c31) {
                    s5 = peg$c31
                    peg$currPos += 2
                } else {
                    s5 = peg$FAILED
                    if (peg$silentFails === 0) {
                        peg$fail(peg$c32)
                    }
                }
                if (s5 === peg$FAILED) {
                    s5 = peg$parseLineTerminator()
                }
                peg$silentFails--
                if (s5 === peg$FAILED) {
                    s4 = void 0
                } else {
                    peg$currPos = s4
                    s4 = peg$FAILED
                }
                if (s4 !== peg$FAILED) {
                    s5 = peg$parseSourceCharacter()
                    if (s5 !== peg$FAILED) {
                        s4 = [s4, s5]
                        s3 = s4
                    } else {
                        peg$currPos = s3
                        s3 = peg$FAILED
                    }
                } else {
                    peg$currPos = s3
                    s3 = peg$FAILED
                }
            }
            if (s2 !== peg$FAILED) {
                if (input.substr(peg$currPos, 2) === peg$c31) {
                    s3 = peg$c31
                    peg$currPos += 2
                } else {
                    s3 = peg$FAILED
                    if (peg$silentFails === 0) {
                        peg$fail(peg$c32)
                    }
                }
                if (s3 !== peg$FAILED) {
                    s1 = [s1, s2, s3]
                    s0 = s1
                } else {
                    peg$currPos = s0
                    s0 = peg$FAILED
                }
            } else {
                peg$currPos = s0
                s0 = peg$FAILED
            }
        } else {
            peg$currPos = s0
            s0 = peg$FAILED
        }

        return s0
    }

    function peg$parseSingleLineComment() {
        var s0, s1, s2, s3, s4, s5

        s0 = peg$currPos
        if (input.substr(peg$currPos, 2) === peg$c33) {
            s1 = peg$c33
            peg$currPos += 2
        } else {
            s1 = peg$FAILED
            if (peg$silentFails === 0) {
                peg$fail(peg$c34)
            }
        }
        if (s1 !== peg$FAILED) {
            s2 = []
            s3 = peg$currPos
            s4 = peg$currPos
            peg$silentFails++
            s5 = peg$parseLineTerminator()
            peg$silentFails--
            if (s5 === peg$FAILED) {
                s4 = void 0
            } else {
                peg$currPos = s4
                s4 = peg$FAILED
            }
            if (s4 !== peg$FAILED) {
                s5 = peg$parseSourceCharacter()
                if (s5 !== peg$FAILED) {
                    s4 = [s4, s5]
                    s3 = s4
                } else {
                    peg$currPos = s3
                    s3 = peg$FAILED
                }
            } else {
                peg$currPos = s3
                s3 = peg$FAILED
            }
            while (s3 !== peg$FAILED) {
                s2.push(s3)
                s3 = peg$currPos
                s4 = peg$currPos
                peg$silentFails++
                s5 = peg$parseLineTerminator()
                peg$silentFails--
                if (s5 === peg$FAILED) {
                    s4 = void 0
                } else {
                    peg$currPos = s4
                    s4 = peg$FAILED
                }
                if (s4 !== peg$FAILED) {
                    s5 = peg$parseSourceCharacter()
                    if (s5 !== peg$FAILED) {
                        s4 = [s4, s5]
                        s3 = s4
                    } else {
                        peg$currPos = s3
                        s3 = peg$FAILED
                    }
                } else {
                    peg$currPos = s3
                    s3 = peg$FAILED
                }
            }
            if (s2 !== peg$FAILED) {
                s1 = [s1, s2]
                s0 = s1
            } else {
                peg$currPos = s0
                s0 = peg$FAILED
            }
        } else {
            peg$currPos = s0
            s0 = peg$FAILED
        }

        return s0
    }

    function peg$parseIdentifier() {
        var s0, s1, s2

        s0 = peg$currPos
        s1 = peg$currPos
        peg$silentFails++
        s2 = peg$parseReservedWord()
        peg$silentFails--
        if (s2 === peg$FAILED) {
            s1 = void 0
        } else {
            peg$currPos = s1
            s1 = peg$FAILED
        }
        if (s1 !== peg$FAILED) {
            s2 = peg$parseIdentifierName()
            if (s2 !== peg$FAILED) {
                peg$savedPos = s0
                s1 = peg$c35(s2)
                s0 = s1
            } else {
                peg$currPos = s0
                s0 = peg$FAILED
            }
        } else {
            peg$currPos = s0
            s0 = peg$FAILED
        }

        return s0
    }

    function peg$parseIdentifierName() {
        var s0, s1, s2, s3

        peg$silentFails++
        s0 = peg$currPos
        s1 = peg$parseIdentifierStart()
        if (s1 !== peg$FAILED) {
            s2 = []
            s3 = peg$parseIdentifierPart()
            while (s3 !== peg$FAILED) {
                s2.push(s3)
                s3 = peg$parseIdentifierPart()
            }
            if (s2 !== peg$FAILED) {
                peg$savedPos = s0
                s1 = peg$c37(s1, s2)
                s0 = s1
            } else {
                peg$currPos = s0
                s0 = peg$FAILED
            }
        } else {
            peg$currPos = s0
            s0 = peg$FAILED
        }
        peg$silentFails--
        if (s0 === peg$FAILED) {
            s1 = peg$FAILED
            if (peg$silentFails === 0) {
                peg$fail(peg$c36)
            }
        }

        return s0
    }

    function peg$parseIdentifierStart() {
        var s0, s1, s2

        s0 = peg$parseUnicodeLetter()
        if (s0 === peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 36) {
                s0 = peg$c38
                peg$currPos++
            } else {
                s0 = peg$FAILED
                if (peg$silentFails === 0) {
                    peg$fail(peg$c39)
                }
            }
            if (s0 === peg$FAILED) {
                if (input.charCodeAt(peg$currPos) === 95) {
                    s0 = peg$c40
                    peg$currPos++
                } else {
                    s0 = peg$FAILED
                    if (peg$silentFails === 0) {
                        peg$fail(peg$c41)
                    }
                }
                if (s0 === peg$FAILED) {
                    s0 = peg$currPos
                    if (input.charCodeAt(peg$currPos) === 92) {
                        s1 = peg$c42
                        peg$currPos++
                    } else {
                        s1 = peg$FAILED
                        if (peg$silentFails === 0) {
                            peg$fail(peg$c43)
                        }
                    }
                    if (s1 !== peg$FAILED) {
                        s2 = peg$parseUnicodeEscapeSequence()
                        if (s2 !== peg$FAILED) {
                            peg$savedPos = s0
                            s1 = peg$c44(s2)
                            s0 = s1
                        } else {
                            peg$currPos = s0
                            s0 = peg$FAILED
                        }
                    } else {
                        peg$currPos = s0
                        s0 = peg$FAILED
                    }
                }
            }
        }

        return s0
    }

    function peg$parseIdentifierPart() {
        var s0

        s0 = peg$parseIdentifierStart()
        if (s0 === peg$FAILED) {
            s0 = peg$parseUnicodeCombiningMark()
            if (s0 === peg$FAILED) {
                s0 = peg$parseNd()
                if (s0 === peg$FAILED) {
                    s0 = peg$parsePc()
                    if (s0 === peg$FAILED) {
                        if (input.charCodeAt(peg$currPos) === 8204) {
                            s0 = peg$c45
                            peg$currPos++
                        } else {
                            s0 = peg$FAILED
                            if (peg$silentFails === 0) {
                                peg$fail(peg$c46)
                            }
                        }
                        if (s0 === peg$FAILED) {
                            if (input.charCodeAt(peg$currPos) === 8205) {
                                s0 = peg$c47
                                peg$currPos++
                            } else {
                                s0 = peg$FAILED
                                if (peg$silentFails === 0) {
                                    peg$fail(peg$c48)
                                }
                            }
                        }
                    }
                }
            }
        }

        return s0
    }

    function peg$parseUnicodeLetter() {
        var s0

        s0 = peg$parseLu()
        if (s0 === peg$FAILED) {
            s0 = peg$parseLl()
            if (s0 === peg$FAILED) {
                s0 = peg$parseLt()
                if (s0 === peg$FAILED) {
                    s0 = peg$parseLm()
                    if (s0 === peg$FAILED) {
                        s0 = peg$parseLo()
                        if (s0 === peg$FAILED) {
                            s0 = peg$parseNl()
                        }
                    }
                }
            }
        }

        return s0
    }

    function peg$parseUnicodeCombiningMark() {
        var s0

        s0 = peg$parseMn()
        if (s0 === peg$FAILED) {
            s0 = peg$parseMc()
        }

        return s0
    }

    function peg$parseReservedWord() {
        var s0

        s0 = peg$parseKeyword()
        if (s0 === peg$FAILED) {
            s0 = peg$parseFutureReservedWord()
            if (s0 === peg$FAILED) {
                s0 = peg$parseNullLiteral()
                if (s0 === peg$FAILED) {
                    s0 = peg$parseBooleanLiteral()
                }
            }
        }

        return s0
    }

    function peg$parseKeyword() {
        var s0

        s0 = peg$parseBreakToken()
        if (s0 === peg$FAILED) {
            s0 = peg$parseCaseToken()
            if (s0 === peg$FAILED) {
                s0 = peg$parseCatchToken()
                if (s0 === peg$FAILED) {
                    s0 = peg$parseContinueToken()
                    if (s0 === peg$FAILED) {
                        s0 = peg$parseDebuggerToken()
                        if (s0 === peg$FAILED) {
                            s0 = peg$parseDefaultToken()
                            if (s0 === peg$FAILED) {
                                s0 = peg$parseDeleteToken()
                                if (s0 === peg$FAILED) {
                                    s0 = peg$parseDoToken()
                                    if (s0 === peg$FAILED) {
                                        s0 = peg$parseElseToken()
                                        if (s0 === peg$FAILED) {
                                            s0 = peg$parseFinallyToken()
                                            if (s0 === peg$FAILED) {
                                                s0 = peg$parseForToken()
                                                if (s0 === peg$FAILED) {
                                                    s0 = peg$parseFunctionToken()
                                                    if (s0 === peg$FAILED) {
                                                        s0 = peg$parseIfToken()
                                                        if (s0 === peg$FAILED) {
                                                            s0 = peg$parseInstanceofToken()
                                                            if (
                                                                s0 ===
                                                                peg$FAILED
                                                            ) {
                                                                s0 = peg$parseInToken()
                                                                if (
                                                                    s0 ===
                                                                    peg$FAILED
                                                                ) {
                                                                    s0 = peg$parseNewToken()
                                                                    if (
                                                                        s0 ===
                                                                        peg$FAILED
                                                                    ) {
                                                                        s0 = peg$parseReturnToken()
                                                                        if (
                                                                            s0 ===
                                                                            peg$FAILED
                                                                        ) {
                                                                            s0 = peg$parseSwitchToken()
                                                                            if (
                                                                                s0 ===
                                                                                peg$FAILED
                                                                            ) {
                                                                                s0 = peg$parseThisToken()
                                                                                if (
                                                                                    s0 ===
                                                                                    peg$FAILED
                                                                                ) {
                                                                                    s0 = peg$parseThrowToken()
                                                                                    if (
                                                                                        s0 ===
                                                                                        peg$FAILED
                                                                                    ) {
                                                                                        s0 = peg$parseTryToken()
                                                                                        if (
                                                                                            s0 ===
                                                                                            peg$FAILED
                                                                                        ) {
                                                                                            s0 = peg$parseTypeofToken()
                                                                                            if (
                                                                                                s0 ===
                                                                                                peg$FAILED
                                                                                            ) {
                                                                                                s0 = peg$parseVarToken()
                                                                                                if (
                                                                                                    s0 ===
                                                                                                    peg$FAILED
                                                                                                ) {
                                                                                                    s0 = peg$parseVoidToken()
                                                                                                    if (
                                                                                                        s0 ===
                                                                                                        peg$FAILED
                                                                                                    ) {
                                                                                                        s0 = peg$parseWhileToken()
                                                                                                        if (
                                                                                                            s0 ===
                                                                                                            peg$FAILED
                                                                                                        ) {
                                                                                                            s0 = peg$parseWithToken()
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }

        return s0
    }

    function peg$parseFutureReservedWord() {
        var s0

        s0 = peg$parseClassToken()
        if (s0 === peg$FAILED) {
            s0 = peg$parseConstToken()
            if (s0 === peg$FAILED) {
                s0 = peg$parseEnumToken()
                if (s0 === peg$FAILED) {
                    s0 = peg$parseExportToken()
                    if (s0 === peg$FAILED) {
                        s0 = peg$parseExtendsToken()
                        if (s0 === peg$FAILED) {
                            s0 = peg$parseImportToken()
                            if (s0 === peg$FAILED) {
                                s0 = peg$parseSuperToken()
                            }
                        }
                    }
                }
            }
        }

        return s0
    }

    function peg$parseLiteral() {
        var s0

        s0 = peg$parseNullLiteral()
        if (s0 === peg$FAILED) {
            s0 = peg$parseBooleanLiteral()
            if (s0 === peg$FAILED) {
                s0 = peg$parseNumericLiteral()
                if (s0 === peg$FAILED) {
                    s0 = peg$parseStringLiteral()
                    if (s0 === peg$FAILED) {
                        s0 = peg$parseRegularExpressionLiteral()
                    }
                }
            }
        }

        return s0
    }

    function peg$parseNullLiteral() {
        var s0, s1

        s0 = peg$currPos
        s1 = peg$parseNullToken()
        if (s1 !== peg$FAILED) {
            peg$savedPos = s0
            s1 = peg$c49()
        }
        s0 = s1

        return s0
    }

    function peg$parseBooleanLiteral() {
        var s0, s1

        s0 = peg$currPos
        s1 = peg$parseTrueToken()
        if (s1 !== peg$FAILED) {
            peg$savedPos = s0
            s1 = peg$c50()
        }
        s0 = s1
        if (s0 === peg$FAILED) {
            s0 = peg$currPos
            s1 = peg$parseFalseToken()
            if (s1 !== peg$FAILED) {
                peg$savedPos = s0
                s1 = peg$c51()
            }
            s0 = s1
        }

        return s0
    }

    function peg$parseNumericLiteral() {
        var s0, s1, s2, s3

        peg$silentFails++
        s0 = peg$currPos
        s1 = peg$parseHexIntegerLiteral()
        if (s1 !== peg$FAILED) {
            s2 = peg$currPos
            peg$silentFails++
            s3 = peg$parseIdentifierStart()
            if (s3 === peg$FAILED) {
                s3 = peg$parseDecimalDigit()
            }
            peg$silentFails--
            if (s3 === peg$FAILED) {
                s2 = void 0
            } else {
                peg$currPos = s2
                s2 = peg$FAILED
            }
            if (s2 !== peg$FAILED) {
                peg$savedPos = s0
                s1 = peg$c53(s1)
                s0 = s1
            } else {
                peg$currPos = s0
                s0 = peg$FAILED
            }
        } else {
            peg$currPos = s0
            s0 = peg$FAILED
        }
        if (s0 === peg$FAILED) {
            s0 = peg$currPos
            s1 = peg$parseDecimalLiteral()
            if (s1 !== peg$FAILED) {
                s2 = peg$currPos
                peg$silentFails++
                s3 = peg$parseIdentifierStart()
                if (s3 === peg$FAILED) {
                    s3 = peg$parseDecimalDigit()
                }
                peg$silentFails--
                if (s3 === peg$FAILED) {
                    s2 = void 0
                } else {
                    peg$currPos = s2
                    s2 = peg$FAILED
                }
                if (s2 !== peg$FAILED) {
                    peg$savedPos = s0
                    s1 = peg$c53(s1)
                    s0 = s1
                } else {
                    peg$currPos = s0
                    s0 = peg$FAILED
                }
            } else {
                peg$currPos = s0
                s0 = peg$FAILED
            }
        }
        peg$silentFails--
        if (s0 === peg$FAILED) {
            s1 = peg$FAILED
            if (peg$silentFails === 0) {
                peg$fail(peg$c52)
            }
        }

        return s0
    }

    function peg$parseDecimalLiteral() {
        var s0, s1, s2, s3, s4

        s0 = peg$currPos
        s1 = peg$parseDecimalIntegerLiteral()
        if (s1 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 46) {
                s2 = peg$c54
                peg$currPos++
            } else {
                s2 = peg$FAILED
                if (peg$silentFails === 0) {
                    peg$fail(peg$c55)
                }
            }
            if (s2 !== peg$FAILED) {
                s3 = []
                s4 = peg$parseDecimalDigit()
                while (s4 !== peg$FAILED) {
                    s3.push(s4)
                    s4 = peg$parseDecimalDigit()
                }
                if (s3 !== peg$FAILED) {
                    s4 = peg$parseExponentPart()
                    if (s4 === peg$FAILED) {
                        s4 = null
                    }
                    if (s4 !== peg$FAILED) {
                        peg$savedPos = s0
                        s1 = peg$c56()
                        s0 = s1
                    } else {
                        peg$currPos = s0
                        s0 = peg$FAILED
                    }
                } else {
                    peg$currPos = s0
                    s0 = peg$FAILED
                }
            } else {
                peg$currPos = s0
                s0 = peg$FAILED
            }
        } else {
            peg$currPos = s0
            s0 = peg$FAILED
        }
        if (s0 === peg$FAILED) {
            s0 = peg$currPos
            if (input.charCodeAt(peg$currPos) === 46) {
                s1 = peg$c54
                peg$currPos++
            } else {
                s1 = peg$FAILED
                if (peg$silentFails === 0) {
                    peg$fail(peg$c55)
                }
            }
            if (s1 !== peg$FAILED) {
                s2 = []
                s3 = peg$parseDecimalDigit()
                if (s3 !== peg$FAILED) {
                    while (s3 !== peg$FAILED) {
                        s2.push(s3)
                        s3 = peg$parseDecimalDigit()
                    }
                } else {
                    s2 = peg$FAILED
                }
                if (s2 !== peg$FAILED) {
                    s3 = peg$parseExponentPart()
                    if (s3 === peg$FAILED) {
                        s3 = null
                    }
                    if (s3 !== peg$FAILED) {
                        peg$savedPos = s0
                        s1 = peg$c56()
                        s0 = s1
                    } else {
                        peg$currPos = s0
                        s0 = peg$FAILED
                    }
                } else {
                    peg$currPos = s0
                    s0 = peg$FAILED
                }
            } else {
                peg$currPos = s0
                s0 = peg$FAILED
            }
            if (s0 === peg$FAILED) {
                s0 = peg$currPos
                s1 = peg$parseDecimalIntegerLiteral()
                if (s1 !== peg$FAILED) {
                    s2 = peg$parseExponentPart()
                    if (s2 === peg$FAILED) {
                        s2 = null
                    }
                    if (s2 !== peg$FAILED) {
                        peg$savedPos = s0
                        s1 = peg$c56()
                        s0 = s1
                    } else {
                        peg$currPos = s0
                        s0 = peg$FAILED
                    }
                } else {
                    peg$currPos = s0
                    s0 = peg$FAILED
                }
            }
        }

        return s0
    }

    function peg$parseDecimalIntegerLiteral() {
        var s0, s1, s2, s3

        if (input.charCodeAt(peg$currPos) === 48) {
            s0 = peg$c57
            peg$currPos++
        } else {
            s0 = peg$FAILED
            if (peg$silentFails === 0) {
                peg$fail(peg$c58)
            }
        }
        if (s0 === peg$FAILED) {
            s0 = peg$currPos
            s1 = peg$parseNonZeroDigit()
            if (s1 !== peg$FAILED) {
                s2 = []
                s3 = peg$parseDecimalDigit()
                while (s3 !== peg$FAILED) {
                    s2.push(s3)
                    s3 = peg$parseDecimalDigit()
                }
                if (s2 !== peg$FAILED) {
                    s1 = [s1, s2]
                    s0 = s1
                } else {
                    peg$currPos = s0
                    s0 = peg$FAILED
                }
            } else {
                peg$currPos = s0
                s0 = peg$FAILED
            }
        }

        return s0
    }

    function peg$parseDecimalDigit() {
        var s0

        if (peg$c59.test(input.charAt(peg$currPos))) {
            s0 = input.charAt(peg$currPos)
            peg$currPos++
        } else {
            s0 = peg$FAILED
            if (peg$silentFails === 0) {
                peg$fail(peg$c60)
            }
        }

        return s0
    }

    function peg$parseNonZeroDigit() {
        var s0

        if (peg$c61.test(input.charAt(peg$currPos))) {
            s0 = input.charAt(peg$currPos)
            peg$currPos++
        } else {
            s0 = peg$FAILED
            if (peg$silentFails === 0) {
                peg$fail(peg$c62)
            }
        }

        return s0
    }

    function peg$parseExponentPart() {
        var s0, s1, s2

        s0 = peg$currPos
        s1 = peg$parseExponentIndicator()
        if (s1 !== peg$FAILED) {
            s2 = peg$parseSignedInteger()
            if (s2 !== peg$FAILED) {
                s1 = [s1, s2]
                s0 = s1
            } else {
                peg$currPos = s0
                s0 = peg$FAILED
            }
        } else {
            peg$currPos = s0
            s0 = peg$FAILED
        }

        return s0
    }

    function peg$parseExponentIndicator() {
        var s0

        if (input.substr(peg$currPos, 1).toLowerCase() === peg$c63) {
            s0 = input.charAt(peg$currPos)
            peg$currPos++
        } else {
            s0 = peg$FAILED
            if (peg$silentFails === 0) {
                peg$fail(peg$c64)
            }
        }

        return s0
    }

    function peg$parseSignedInteger() {
        var s0, s1, s2, s3

        s0 = peg$currPos
        if (peg$c65.test(input.charAt(peg$currPos))) {
            s1 = input.charAt(peg$currPos)
            peg$currPos++
        } else {
            s1 = peg$FAILED
            if (peg$silentFails === 0) {
                peg$fail(peg$c66)
            }
        }
        if (s1 === peg$FAILED) {
            s1 = null
        }
        if (s1 !== peg$FAILED) {
            s2 = []
            s3 = peg$parseDecimalDigit()
            if (s3 !== peg$FAILED) {
                while (s3 !== peg$FAILED) {
                    s2.push(s3)
                    s3 = peg$parseDecimalDigit()
                }
            } else {
                s2 = peg$FAILED
            }
            if (s2 !== peg$FAILED) {
                s1 = [s1, s2]
                s0 = s1
            } else {
                peg$currPos = s0
                s0 = peg$FAILED
            }
        } else {
            peg$currPos = s0
            s0 = peg$FAILED
        }

        return s0
    }

    function peg$parseHexIntegerLiteral() {
        var s0, s1, s2, s3, s4

        s0 = peg$currPos
        if (input.substr(peg$currPos, 2).toLowerCase() === peg$c67) {
            s1 = input.substr(peg$currPos, 2)
            peg$currPos += 2
        } else {
            s1 = peg$FAILED
            if (peg$silentFails === 0) {
                peg$fail(peg$c68)
            }
        }
        if (s1 !== peg$FAILED) {
            s2 = peg$currPos
            s3 = []
            s4 = peg$parseHexDigit()
            if (s4 !== peg$FAILED) {
                while (s4 !== peg$FAILED) {
                    s3.push(s4)
                    s4 = peg$parseHexDigit()
                }
            } else {
                s3 = peg$FAILED
            }
            if (s3 !== peg$FAILED) {
                s2 = input.substring(s2, peg$currPos)
            } else {
                s2 = s3
            }
            if (s2 !== peg$FAILED) {
                peg$savedPos = s0
                s1 = peg$c69(s2)
                s0 = s1
            } else {
                peg$currPos = s0
                s0 = peg$FAILED
            }
        } else {
            peg$currPos = s0
            s0 = peg$FAILED
        }

        return s0
    }

    function peg$parseHexDigit() {
        var s0

        if (peg$c70.test(input.charAt(peg$currPos))) {
            s0 = input.charAt(peg$currPos)
            peg$currPos++
        } else {
            s0 = peg$FAILED
            if (peg$silentFails === 0) {
                peg$fail(peg$c71)
            }
        }

        return s0
    }

    function peg$parseStringLiteral() {
        var s0, s1, s2, s3

        peg$silentFails++
        s0 = peg$currPos
        if (input.charCodeAt(peg$currPos) === 34) {
            s1 = peg$c73
            peg$currPos++
        } else {
            s1 = peg$FAILED
            if (peg$silentFails === 0) {
                peg$fail(peg$c74)
            }
        }
        if (s1 !== peg$FAILED) {
            s2 = []
            s3 = peg$parseDoubleStringCharacter()
            while (s3 !== peg$FAILED) {
                s2.push(s3)
                s3 = peg$parseDoubleStringCharacter()
            }
            if (s2 !== peg$FAILED) {
                if (input.charCodeAt(peg$currPos) === 34) {
                    s3 = peg$c73
                    peg$currPos++
                } else {
                    s3 = peg$FAILED
                    if (peg$silentFails === 0) {
                        peg$fail(peg$c74)
                    }
                }
                if (s3 !== peg$FAILED) {
                    peg$savedPos = s0
                    s1 = peg$c75(s2)
                    s0 = s1
                } else {
                    peg$currPos = s0
                    s0 = peg$FAILED
                }
            } else {
                peg$currPos = s0
                s0 = peg$FAILED
            }
        } else {
            peg$currPos = s0
            s0 = peg$FAILED
        }
        if (s0 === peg$FAILED) {
            s0 = peg$currPos
            if (input.charCodeAt(peg$currPos) === 39) {
                s1 = peg$c76
                peg$currPos++
            } else {
                s1 = peg$FAILED
                if (peg$silentFails === 0) {
                    peg$fail(peg$c77)
                }
            }
            if (s1 !== peg$FAILED) {
                s2 = []
                s3 = peg$parseSingleStringCharacter()
                while (s3 !== peg$FAILED) {
                    s2.push(s3)
                    s3 = peg$parseSingleStringCharacter()
                }
                if (s2 !== peg$FAILED) {
                    if (input.charCodeAt(peg$currPos) === 39) {
                        s3 = peg$c76
                        peg$currPos++
                    } else {
                        s3 = peg$FAILED
                        if (peg$silentFails === 0) {
                            peg$fail(peg$c77)
                        }
                    }
                    if (s3 !== peg$FAILED) {
                        peg$savedPos = s0
                        s1 = peg$c75(s2)
                        s0 = s1
                    } else {
                        peg$currPos = s0
                        s0 = peg$FAILED
                    }
                } else {
                    peg$currPos = s0
                    s0 = peg$FAILED
                }
            } else {
                peg$currPos = s0
                s0 = peg$FAILED
            }
        }
        peg$silentFails--
        if (s0 === peg$FAILED) {
            s1 = peg$FAILED
            if (peg$silentFails === 0) {
                peg$fail(peg$c72)
            }
        }

        return s0
    }

    function peg$parseDoubleStringCharacter() {
        var s0, s1, s2

        s0 = peg$currPos
        s1 = peg$currPos
        peg$silentFails++
        if (input.charCodeAt(peg$currPos) === 34) {
            s2 = peg$c73
            peg$currPos++
        } else {
            s2 = peg$FAILED
            if (peg$silentFails === 0) {
                peg$fail(peg$c74)
            }
        }
        if (s2 === peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 92) {
                s2 = peg$c42
                peg$currPos++
            } else {
                s2 = peg$FAILED
                if (peg$silentFails === 0) {
                    peg$fail(peg$c43)
                }
            }
            if (s2 === peg$FAILED) {
                s2 = peg$parseLineTerminator()
            }
        }
        peg$silentFails--
        if (s2 === peg$FAILED) {
            s1 = void 0
        } else {
            peg$currPos = s1
            s1 = peg$FAILED
        }
        if (s1 !== peg$FAILED) {
            s2 = peg$parseSourceCharacter()
            if (s2 !== peg$FAILED) {
                peg$savedPos = s0
                s1 = peg$c78()
                s0 = s1
            } else {
                peg$currPos = s0
                s0 = peg$FAILED
            }
        } else {
            peg$currPos = s0
            s0 = peg$FAILED
        }
        if (s0 === peg$FAILED) {
            s0 = peg$currPos
            if (input.charCodeAt(peg$currPos) === 92) {
                s1 = peg$c42
                peg$currPos++
            } else {
                s1 = peg$FAILED
                if (peg$silentFails === 0) {
                    peg$fail(peg$c43)
                }
            }
            if (s1 !== peg$FAILED) {
                s2 = peg$parseEscapeSequence()
                if (s2 !== peg$FAILED) {
                    peg$savedPos = s0
                    s1 = peg$c44(s2)
                    s0 = s1
                } else {
                    peg$currPos = s0
                    s0 = peg$FAILED
                }
            } else {
                peg$currPos = s0
                s0 = peg$FAILED
            }
            if (s0 === peg$FAILED) {
                s0 = peg$parseLineContinuation()
            }
        }

        return s0
    }

    function peg$parseSingleStringCharacter() {
        var s0, s1, s2

        s0 = peg$currPos
        s1 = peg$currPos
        peg$silentFails++
        if (input.charCodeAt(peg$currPos) === 39) {
            s2 = peg$c76
            peg$currPos++
        } else {
            s2 = peg$FAILED
            if (peg$silentFails === 0) {
                peg$fail(peg$c77)
            }
        }
        if (s2 === peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 92) {
                s2 = peg$c42
                peg$currPos++
            } else {
                s2 = peg$FAILED
                if (peg$silentFails === 0) {
                    peg$fail(peg$c43)
                }
            }
            if (s2 === peg$FAILED) {
                s2 = peg$parseLineTerminator()
            }
        }
        peg$silentFails--
        if (s2 === peg$FAILED) {
            s1 = void 0
        } else {
            peg$currPos = s1
            s1 = peg$FAILED
        }
        if (s1 !== peg$FAILED) {
            s2 = peg$parseSourceCharacter()
            if (s2 !== peg$FAILED) {
                peg$savedPos = s0
                s1 = peg$c78()
                s0 = s1
            } else {
                peg$currPos = s0
                s0 = peg$FAILED
            }
        } else {
            peg$currPos = s0
            s0 = peg$FAILED
        }
        if (s0 === peg$FAILED) {
            s0 = peg$currPos
            if (input.charCodeAt(peg$currPos) === 92) {
                s1 = peg$c42
                peg$currPos++
            } else {
                s1 = peg$FAILED
                if (peg$silentFails === 0) {
                    peg$fail(peg$c43)
                }
            }
            if (s1 !== peg$FAILED) {
                s2 = peg$parseEscapeSequence()
                if (s2 !== peg$FAILED) {
                    peg$savedPos = s0
                    s1 = peg$c44(s2)
                    s0 = s1
                } else {
                    peg$currPos = s0
                    s0 = peg$FAILED
                }
            } else {
                peg$currPos = s0
                s0 = peg$FAILED
            }
            if (s0 === peg$FAILED) {
                s0 = peg$parseLineContinuation()
            }
        }

        return s0
    }

    function peg$parseLineContinuation() {
        var s0, s1, s2

        s0 = peg$currPos
        if (input.charCodeAt(peg$currPos) === 92) {
            s1 = peg$c42
            peg$currPos++
        } else {
            s1 = peg$FAILED
            if (peg$silentFails === 0) {
                peg$fail(peg$c43)
            }
        }
        if (s1 !== peg$FAILED) {
            s2 = peg$parseLineTerminatorSequence()
            if (s2 !== peg$FAILED) {
                peg$savedPos = s0
                s1 = peg$c79()
                s0 = s1
            } else {
                peg$currPos = s0
                s0 = peg$FAILED
            }
        } else {
            peg$currPos = s0
            s0 = peg$FAILED
        }

        return s0
    }

    function peg$parseEscapeSequence() {
        var s0, s1, s2, s3

        s0 = peg$parseCharacterEscapeSequence()
        if (s0 === peg$FAILED) {
            s0 = peg$currPos
            if (input.charCodeAt(peg$currPos) === 48) {
                s1 = peg$c57
                peg$currPos++
            } else {
                s1 = peg$FAILED
                if (peg$silentFails === 0) {
                    peg$fail(peg$c58)
                }
            }
            if (s1 !== peg$FAILED) {
                s2 = peg$currPos
                peg$silentFails++
                s3 = peg$parseDecimalDigit()
                peg$silentFails--
                if (s3 === peg$FAILED) {
                    s2 = void 0
                } else {
                    peg$currPos = s2
                    s2 = peg$FAILED
                }
                if (s2 !== peg$FAILED) {
                    peg$savedPos = s0
                    s1 = peg$c80()
                    s0 = s1
                } else {
                    peg$currPos = s0
                    s0 = peg$FAILED
                }
            } else {
                peg$currPos = s0
                s0 = peg$FAILED
            }
            if (s0 === peg$FAILED) {
                s0 = peg$parseHexEscapeSequence()
                if (s0 === peg$FAILED) {
                    s0 = peg$parseUnicodeEscapeSequence()
                }
            }
        }

        return s0
    }

    function peg$parseCharacterEscapeSequence() {
        var s0

        s0 = peg$parseSingleEscapeCharacter()
        if (s0 === peg$FAILED) {
            s0 = peg$parseNonEscapeCharacter()
        }

        return s0
    }

    function peg$parseSingleEscapeCharacter() {
        var s0, s1

        if (input.charCodeAt(peg$currPos) === 39) {
            s0 = peg$c76
            peg$currPos++
        } else {
            s0 = peg$FAILED
            if (peg$silentFails === 0) {
                peg$fail(peg$c77)
            }
        }
        if (s0 === peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 34) {
                s0 = peg$c73
                peg$currPos++
            } else {
                s0 = peg$FAILED
                if (peg$silentFails === 0) {
                    peg$fail(peg$c74)
                }
            }
            if (s0 === peg$FAILED) {
                if (input.charCodeAt(peg$currPos) === 92) {
                    s0 = peg$c42
                    peg$currPos++
                } else {
                    s0 = peg$FAILED
                    if (peg$silentFails === 0) {
                        peg$fail(peg$c43)
                    }
                }
                if (s0 === peg$FAILED) {
                    s0 = peg$currPos
                    if (input.charCodeAt(peg$currPos) === 98) {
                        s1 = peg$c81
                        peg$currPos++
                    } else {
                        s1 = peg$FAILED
                        if (peg$silentFails === 0) {
                            peg$fail(peg$c82)
                        }
                    }
                    if (s1 !== peg$FAILED) {
                        peg$savedPos = s0
                        s1 = peg$c83()
                    }
                    s0 = s1
                    if (s0 === peg$FAILED) {
                        s0 = peg$currPos
                        if (input.charCodeAt(peg$currPos) === 102) {
                            s1 = peg$c84
                            peg$currPos++
                        } else {
                            s1 = peg$FAILED
                            if (peg$silentFails === 0) {
                                peg$fail(peg$c85)
                            }
                        }
                        if (s1 !== peg$FAILED) {
                            peg$savedPos = s0
                            s1 = peg$c86()
                        }
                        s0 = s1
                        if (s0 === peg$FAILED) {
                            s0 = peg$currPos
                            if (input.charCodeAt(peg$currPos) === 110) {
                                s1 = peg$c87
                                peg$currPos++
                            } else {
                                s1 = peg$FAILED
                                if (peg$silentFails === 0) {
                                    peg$fail(peg$c88)
                                }
                            }
                            if (s1 !== peg$FAILED) {
                                peg$savedPos = s0
                                s1 = peg$c89()
                            }
                            s0 = s1
                            if (s0 === peg$FAILED) {
                                s0 = peg$currPos
                                if (input.charCodeAt(peg$currPos) === 114) {
                                    s1 = peg$c90
                                    peg$currPos++
                                } else {
                                    s1 = peg$FAILED
                                    if (peg$silentFails === 0) {
                                        peg$fail(peg$c91)
                                    }
                                }
                                if (s1 !== peg$FAILED) {
                                    peg$savedPos = s0
                                    s1 = peg$c92()
                                }
                                s0 = s1
                                if (s0 === peg$FAILED) {
                                    s0 = peg$currPos
                                    if (input.charCodeAt(peg$currPos) === 116) {
                                        s1 = peg$c93
                                        peg$currPos++
                                    } else {
                                        s1 = peg$FAILED
                                        if (peg$silentFails === 0) {
                                            peg$fail(peg$c94)
                                        }
                                    }
                                    if (s1 !== peg$FAILED) {
                                        peg$savedPos = s0
                                        s1 = peg$c95()
                                    }
                                    s0 = s1
                                    if (s0 === peg$FAILED) {
                                        s0 = peg$currPos
                                        if (
                                            input.charCodeAt(peg$currPos) ===
                                            118
                                        ) {
                                            s1 = peg$c96
                                            peg$currPos++
                                        } else {
                                            s1 = peg$FAILED
                                            if (peg$silentFails === 0) {
                                                peg$fail(peg$c97)
                                            }
                                        }
                                        if (s1 !== peg$FAILED) {
                                            peg$savedPos = s0
                                            s1 = peg$c98()
                                        }
                                        s0 = s1
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }

        return s0
    }

    function peg$parseNonEscapeCharacter() {
        var s0, s1, s2

        s0 = peg$currPos
        s1 = peg$currPos
        peg$silentFails++
        s2 = peg$parseEscapeCharacter()
        if (s2 === peg$FAILED) {
            s2 = peg$parseLineTerminator()
        }
        peg$silentFails--
        if (s2 === peg$FAILED) {
            s1 = void 0
        } else {
            peg$currPos = s1
            s1 = peg$FAILED
        }
        if (s1 !== peg$FAILED) {
            s2 = peg$parseSourceCharacter()
            if (s2 !== peg$FAILED) {
                peg$savedPos = s0
                s1 = peg$c78()
                s0 = s1
            } else {
                peg$currPos = s0
                s0 = peg$FAILED
            }
        } else {
            peg$currPos = s0
            s0 = peg$FAILED
        }

        return s0
    }

    function peg$parseEscapeCharacter() {
        var s0

        s0 = peg$parseSingleEscapeCharacter()
        if (s0 === peg$FAILED) {
            s0 = peg$parseDecimalDigit()
            if (s0 === peg$FAILED) {
                if (input.charCodeAt(peg$currPos) === 120) {
                    s0 = peg$c99
                    peg$currPos++
                } else {
                    s0 = peg$FAILED
                    if (peg$silentFails === 0) {
                        peg$fail(peg$c100)
                    }
                }
                if (s0 === peg$FAILED) {
                    if (input.charCodeAt(peg$currPos) === 117) {
                        s0 = peg$c101
                        peg$currPos++
                    } else {
                        s0 = peg$FAILED
                        if (peg$silentFails === 0) {
                            peg$fail(peg$c102)
                        }
                    }
                }
            }
        }

        return s0
    }

    function peg$parseHexEscapeSequence() {
        var s0, s1, s2, s3, s4, s5

        s0 = peg$currPos
        if (input.charCodeAt(peg$currPos) === 120) {
            s1 = peg$c99
            peg$currPos++
        } else {
            s1 = peg$FAILED
            if (peg$silentFails === 0) {
                peg$fail(peg$c100)
            }
        }
        if (s1 !== peg$FAILED) {
            s2 = peg$currPos
            s3 = peg$currPos
            s4 = peg$parseHexDigit()
            if (s4 !== peg$FAILED) {
                s5 = peg$parseHexDigit()
                if (s5 !== peg$FAILED) {
                    s4 = [s4, s5]
                    s3 = s4
                } else {
                    peg$currPos = s3
                    s3 = peg$FAILED
                }
            } else {
                peg$currPos = s3
                s3 = peg$FAILED
            }
            if (s3 !== peg$FAILED) {
                s2 = input.substring(s2, peg$currPos)
            } else {
                s2 = s3
            }
            if (s2 !== peg$FAILED) {
                peg$savedPos = s0
                s1 = peg$c103(s2)
                s0 = s1
            } else {
                peg$currPos = s0
                s0 = peg$FAILED
            }
        } else {
            peg$currPos = s0
            s0 = peg$FAILED
        }

        return s0
    }

    function peg$parseUnicodeEscapeSequence() {
        var s0, s1, s2, s3, s4, s5, s6, s7

        s0 = peg$currPos
        if (input.charCodeAt(peg$currPos) === 117) {
            s1 = peg$c101
            peg$currPos++
        } else {
            s1 = peg$FAILED
            if (peg$silentFails === 0) {
                peg$fail(peg$c102)
            }
        }
        if (s1 !== peg$FAILED) {
            s2 = peg$currPos
            s3 = peg$currPos
            s4 = peg$parseHexDigit()
            if (s4 !== peg$FAILED) {
                s5 = peg$parseHexDigit()
                if (s5 !== peg$FAILED) {
                    s6 = peg$parseHexDigit()
                    if (s6 !== peg$FAILED) {
                        s7 = peg$parseHexDigit()
                        if (s7 !== peg$FAILED) {
                            s4 = [s4, s5, s6, s7]
                            s3 = s4
                        } else {
                            peg$currPos = s3
                            s3 = peg$FAILED
                        }
                    } else {
                        peg$currPos = s3
                        s3 = peg$FAILED
                    }
                } else {
                    peg$currPos = s3
                    s3 = peg$FAILED
                }
            } else {
                peg$currPos = s3
                s3 = peg$FAILED
            }
            if (s3 !== peg$FAILED) {
                s2 = input.substring(s2, peg$currPos)
            } else {
                s2 = s3
            }
            if (s2 !== peg$FAILED) {
                peg$savedPos = s0
                s1 = peg$c103(s2)
                s0 = s1
            } else {
                peg$currPos = s0
                s0 = peg$FAILED
            }
        } else {
            peg$currPos = s0
            s0 = peg$FAILED
        }

        return s0
    }

    function peg$parseRegularExpressionLiteral() {
        var s0, s1, s2, s3, s4, s5

        peg$silentFails++
        s0 = peg$currPos
        if (input.charCodeAt(peg$currPos) === 47) {
            s1 = peg$c105
            peg$currPos++
        } else {
            s1 = peg$FAILED
            if (peg$silentFails === 0) {
                peg$fail(peg$c106)
            }
        }
        if (s1 !== peg$FAILED) {
            s2 = peg$currPos
            s3 = peg$parseRegularExpressionBody()
            if (s3 !== peg$FAILED) {
                s2 = input.substring(s2, peg$currPos)
            } else {
                s2 = s3
            }
            if (s2 !== peg$FAILED) {
                if (input.charCodeAt(peg$currPos) === 47) {
                    s3 = peg$c105
                    peg$currPos++
                } else {
                    s3 = peg$FAILED
                    if (peg$silentFails === 0) {
                        peg$fail(peg$c106)
                    }
                }
                if (s3 !== peg$FAILED) {
                    s4 = peg$currPos
                    s5 = peg$parseRegularExpressionFlags()
                    if (s5 !== peg$FAILED) {
                        s4 = input.substring(s4, peg$currPos)
                    } else {
                        s4 = s5
                    }
                    if (s4 !== peg$FAILED) {
                        peg$savedPos = s0
                        s1 = peg$c107(s2, s4)
                        s0 = s1
                    } else {
                        peg$currPos = s0
                        s0 = peg$FAILED
                    }
                } else {
                    peg$currPos = s0
                    s0 = peg$FAILED
                }
            } else {
                peg$currPos = s0
                s0 = peg$FAILED
            }
        } else {
            peg$currPos = s0
            s0 = peg$FAILED
        }
        peg$silentFails--
        if (s0 === peg$FAILED) {
            s1 = peg$FAILED
            if (peg$silentFails === 0) {
                peg$fail(peg$c104)
            }
        }

        return s0
    }

    function peg$parseRegularExpressionBody() {
        var s0, s1, s2, s3

        s0 = peg$currPos
        s1 = peg$parseRegularExpressionFirstChar()
        if (s1 !== peg$FAILED) {
            s2 = []
            s3 = peg$parseRegularExpressionChar()
            while (s3 !== peg$FAILED) {
                s2.push(s3)
                s3 = peg$parseRegularExpressionChar()
            }
            if (s2 !== peg$FAILED) {
                s1 = [s1, s2]
                s0 = s1
            } else {
                peg$currPos = s0
                s0 = peg$FAILED
            }
        } else {
            peg$currPos = s0
            s0 = peg$FAILED
        }

        return s0
    }

    function peg$parseRegularExpressionFirstChar() {
        var s0, s1, s2

        s0 = peg$currPos
        s1 = peg$currPos
        peg$silentFails++
        if (peg$c108.test(input.charAt(peg$currPos))) {
            s2 = input.charAt(peg$currPos)
            peg$currPos++
        } else {
            s2 = peg$FAILED
            if (peg$silentFails === 0) {
                peg$fail(peg$c109)
            }
        }
        peg$silentFails--
        if (s2 === peg$FAILED) {
            s1 = void 0
        } else {
            peg$currPos = s1
            s1 = peg$FAILED
        }
        if (s1 !== peg$FAILED) {
            s2 = peg$parseRegularExpressionNonTerminator()
            if (s2 !== peg$FAILED) {
                s1 = [s1, s2]
                s0 = s1
            } else {
                peg$currPos = s0
                s0 = peg$FAILED
            }
        } else {
            peg$currPos = s0
            s0 = peg$FAILED
        }
        if (s0 === peg$FAILED) {
            s0 = peg$parseRegularExpressionBackslashSequence()
            if (s0 === peg$FAILED) {
                s0 = peg$parseRegularExpressionClass()
            }
        }

        return s0
    }

    function peg$parseRegularExpressionChar() {
        var s0, s1, s2

        s0 = peg$currPos
        s1 = peg$currPos
        peg$silentFails++
        if (peg$c110.test(input.charAt(peg$currPos))) {
            s2 = input.charAt(peg$currPos)
            peg$currPos++
        } else {
            s2 = peg$FAILED
            if (peg$silentFails === 0) {
                peg$fail(peg$c111)
            }
        }
        peg$silentFails--
        if (s2 === peg$FAILED) {
            s1 = void 0
        } else {
            peg$currPos = s1
            s1 = peg$FAILED
        }
        if (s1 !== peg$FAILED) {
            s2 = peg$parseRegularExpressionNonTerminator()
            if (s2 !== peg$FAILED) {
                s1 = [s1, s2]
                s0 = s1
            } else {
                peg$currPos = s0
                s0 = peg$FAILED
            }
        } else {
            peg$currPos = s0
            s0 = peg$FAILED
        }
        if (s0 === peg$FAILED) {
            s0 = peg$parseRegularExpressionBackslashSequence()
            if (s0 === peg$FAILED) {
                s0 = peg$parseRegularExpressionClass()
            }
        }

        return s0
    }

    function peg$parseRegularExpressionBackslashSequence() {
        var s0, s1, s2

        s0 = peg$currPos
        if (input.charCodeAt(peg$currPos) === 92) {
            s1 = peg$c42
            peg$currPos++
        } else {
            s1 = peg$FAILED
            if (peg$silentFails === 0) {
                peg$fail(peg$c43)
            }
        }
        if (s1 !== peg$FAILED) {
            s2 = peg$parseRegularExpressionNonTerminator()
            if (s2 !== peg$FAILED) {
                s1 = [s1, s2]
                s0 = s1
            } else {
                peg$currPos = s0
                s0 = peg$FAILED
            }
        } else {
            peg$currPos = s0
            s0 = peg$FAILED
        }

        return s0
    }

    function peg$parseRegularExpressionNonTerminator() {
        var s0, s1, s2

        s0 = peg$currPos
        s1 = peg$currPos
        peg$silentFails++
        s2 = peg$parseLineTerminator()
        peg$silentFails--
        if (s2 === peg$FAILED) {
            s1 = void 0
        } else {
            peg$currPos = s1
            s1 = peg$FAILED
        }
        if (s1 !== peg$FAILED) {
            s2 = peg$parseSourceCharacter()
            if (s2 !== peg$FAILED) {
                s1 = [s1, s2]
                s0 = s1
            } else {
                peg$currPos = s0
                s0 = peg$FAILED
            }
        } else {
            peg$currPos = s0
            s0 = peg$FAILED
        }

        return s0
    }

    function peg$parseRegularExpressionClass() {
        var s0, s1, s2, s3

        s0 = peg$currPos
        if (input.charCodeAt(peg$currPos) === 91) {
            s1 = peg$c112
            peg$currPos++
        } else {
            s1 = peg$FAILED
            if (peg$silentFails === 0) {
                peg$fail(peg$c113)
            }
        }
        if (s1 !== peg$FAILED) {
            s2 = []
            s3 = peg$parseRegularExpressionClassChar()
            while (s3 !== peg$FAILED) {
                s2.push(s3)
                s3 = peg$parseRegularExpressionClassChar()
            }
            if (s2 !== peg$FAILED) {
                if (input.charCodeAt(peg$currPos) === 93) {
                    s3 = peg$c114
                    peg$currPos++
                } else {
                    s3 = peg$FAILED
                    if (peg$silentFails === 0) {
                        peg$fail(peg$c115)
                    }
                }
                if (s3 !== peg$FAILED) {
                    s1 = [s1, s2, s3]
                    s0 = s1
                } else {
                    peg$currPos = s0
                    s0 = peg$FAILED
                }
            } else {
                peg$currPos = s0
                s0 = peg$FAILED
            }
        } else {
            peg$currPos = s0
            s0 = peg$FAILED
        }

        return s0
    }

    function peg$parseRegularExpressionClassChar() {
        var s0, s1, s2

        s0 = peg$currPos
        s1 = peg$currPos
        peg$silentFails++
        if (peg$c116.test(input.charAt(peg$currPos))) {
            s2 = input.charAt(peg$currPos)
            peg$currPos++
        } else {
            s2 = peg$FAILED
            if (peg$silentFails === 0) {
                peg$fail(peg$c117)
            }
        }
        peg$silentFails--
        if (s2 === peg$FAILED) {
            s1 = void 0
        } else {
            peg$currPos = s1
            s1 = peg$FAILED
        }
        if (s1 !== peg$FAILED) {
            s2 = peg$parseRegularExpressionNonTerminator()
            if (s2 !== peg$FAILED) {
                s1 = [s1, s2]
                s0 = s1
            } else {
                peg$currPos = s0
                s0 = peg$FAILED
            }
        } else {
            peg$currPos = s0
            s0 = peg$FAILED
        }
        if (s0 === peg$FAILED) {
            s0 = peg$parseRegularExpressionBackslashSequence()
        }

        return s0
    }

    function peg$parseRegularExpressionFlags() {
        var s0, s1

        s0 = []
        s1 = peg$parseIdentifierPart()
        while (s1 !== peg$FAILED) {
            s0.push(s1)
            s1 = peg$parseIdentifierPart()
        }

        return s0
    }

    function peg$parseLl() {
        var s0

        if (peg$c118.test(input.charAt(peg$currPos))) {
            s0 = input.charAt(peg$currPos)
            peg$currPos++
        } else {
            s0 = peg$FAILED
            if (peg$silentFails === 0) {
                peg$fail(peg$c119)
            }
        }

        return s0
    }

    function peg$parseLm() {
        var s0

        if (peg$c120.test(input.charAt(peg$currPos))) {
            s0 = input.charAt(peg$currPos)
            peg$currPos++
        } else {
            s0 = peg$FAILED
            if (peg$silentFails === 0) {
                peg$fail(peg$c121)
            }
        }

        return s0
    }

    function peg$parseLo() {
        var s0

        if (peg$c122.test(input.charAt(peg$currPos))) {
            s0 = input.charAt(peg$currPos)
            peg$currPos++
        } else {
            s0 = peg$FAILED
            if (peg$silentFails === 0) {
                peg$fail(peg$c123)
            }
        }

        return s0
    }

    function peg$parseLt() {
        var s0

        if (peg$c124.test(input.charAt(peg$currPos))) {
            s0 = input.charAt(peg$currPos)
            peg$currPos++
        } else {
            s0 = peg$FAILED
            if (peg$silentFails === 0) {
                peg$fail(peg$c125)
            }
        }

        return s0
    }

    function peg$parseLu() {
        var s0

        if (peg$c126.test(input.charAt(peg$currPos))) {
            s0 = input.charAt(peg$currPos)
            peg$currPos++
        } else {
            s0 = peg$FAILED
            if (peg$silentFails === 0) {
                peg$fail(peg$c127)
            }
        }

        return s0
    }

    function peg$parseMc() {
        var s0

        if (peg$c128.test(input.charAt(peg$currPos))) {
            s0 = input.charAt(peg$currPos)
            peg$currPos++
        } else {
            s0 = peg$FAILED
            if (peg$silentFails === 0) {
                peg$fail(peg$c129)
            }
        }

        return s0
    }

    function peg$parseMn() {
        var s0

        if (peg$c130.test(input.charAt(peg$currPos))) {
            s0 = input.charAt(peg$currPos)
            peg$currPos++
        } else {
            s0 = peg$FAILED
            if (peg$silentFails === 0) {
                peg$fail(peg$c131)
            }
        }

        return s0
    }

    function peg$parseNd() {
        var s0

        if (peg$c132.test(input.charAt(peg$currPos))) {
            s0 = input.charAt(peg$currPos)
            peg$currPos++
        } else {
            s0 = peg$FAILED
            if (peg$silentFails === 0) {
                peg$fail(peg$c133)
            }
        }

        return s0
    }

    function peg$parseNl() {
        var s0

        if (peg$c134.test(input.charAt(peg$currPos))) {
            s0 = input.charAt(peg$currPos)
            peg$currPos++
        } else {
            s0 = peg$FAILED
            if (peg$silentFails === 0) {
                peg$fail(peg$c135)
            }
        }

        return s0
    }

    function peg$parsePc() {
        var s0

        if (peg$c136.test(input.charAt(peg$currPos))) {
            s0 = input.charAt(peg$currPos)
            peg$currPos++
        } else {
            s0 = peg$FAILED
            if (peg$silentFails === 0) {
                peg$fail(peg$c137)
            }
        }

        return s0
    }

    function peg$parseZs() {
        var s0

        if (peg$c138.test(input.charAt(peg$currPos))) {
            s0 = input.charAt(peg$currPos)
            peg$currPos++
        } else {
            s0 = peg$FAILED
            if (peg$silentFails === 0) {
                peg$fail(peg$c139)
            }
        }

        return s0
    }

    function peg$parseBreakToken() {
        var s0, s1, s2, s3

        s0 = peg$currPos
        if (input.substr(peg$currPos, 5) === peg$c140) {
            s1 = peg$c140
            peg$currPos += 5
        } else {
            s1 = peg$FAILED
            if (peg$silentFails === 0) {
                peg$fail(peg$c141)
            }
        }
        if (s1 !== peg$FAILED) {
            s2 = peg$currPos
            peg$silentFails++
            s3 = peg$parseIdentifierPart()
            peg$silentFails--
            if (s3 === peg$FAILED) {
                s2 = void 0
            } else {
                peg$currPos = s2
                s2 = peg$FAILED
            }
            if (s2 !== peg$FAILED) {
                s1 = [s1, s2]
                s0 = s1
            } else {
                peg$currPos = s0
                s0 = peg$FAILED
            }
        } else {
            peg$currPos = s0
            s0 = peg$FAILED
        }

        return s0
    }

    function peg$parseCaseToken() {
        var s0, s1, s2, s3

        s0 = peg$currPos
        if (input.substr(peg$currPos, 4) === peg$c142) {
            s1 = peg$c142
            peg$currPos += 4
        } else {
            s1 = peg$FAILED
            if (peg$silentFails === 0) {
                peg$fail(peg$c143)
            }
        }
        if (s1 !== peg$FAILED) {
            s2 = peg$currPos
            peg$silentFails++
            s3 = peg$parseIdentifierPart()
            peg$silentFails--
            if (s3 === peg$FAILED) {
                s2 = void 0
            } else {
                peg$currPos = s2
                s2 = peg$FAILED
            }
            if (s2 !== peg$FAILED) {
                s1 = [s1, s2]
                s0 = s1
            } else {
                peg$currPos = s0
                s0 = peg$FAILED
            }
        } else {
            peg$currPos = s0
            s0 = peg$FAILED
        }

        return s0
    }

    function peg$parseCatchToken() {
        var s0, s1, s2, s3

        s0 = peg$currPos
        if (input.substr(peg$currPos, 5) === peg$c144) {
            s1 = peg$c144
            peg$currPos += 5
        } else {
            s1 = peg$FAILED
            if (peg$silentFails === 0) {
                peg$fail(peg$c145)
            }
        }
        if (s1 !== peg$FAILED) {
            s2 = peg$currPos
            peg$silentFails++
            s3 = peg$parseIdentifierPart()
            peg$silentFails--
            if (s3 === peg$FAILED) {
                s2 = void 0
            } else {
                peg$currPos = s2
                s2 = peg$FAILED
            }
            if (s2 !== peg$FAILED) {
                s1 = [s1, s2]
                s0 = s1
            } else {
                peg$currPos = s0
                s0 = peg$FAILED
            }
        } else {
            peg$currPos = s0
            s0 = peg$FAILED
        }

        return s0
    }

    function peg$parseClassToken() {
        var s0, s1, s2, s3

        s0 = peg$currPos
        if (input.substr(peg$currPos, 5) === peg$c146) {
            s1 = peg$c146
            peg$currPos += 5
        } else {
            s1 = peg$FAILED
            if (peg$silentFails === 0) {
                peg$fail(peg$c147)
            }
        }
        if (s1 !== peg$FAILED) {
            s2 = peg$currPos
            peg$silentFails++
            s3 = peg$parseIdentifierPart()
            peg$silentFails--
            if (s3 === peg$FAILED) {
                s2 = void 0
            } else {
                peg$currPos = s2
                s2 = peg$FAILED
            }
            if (s2 !== peg$FAILED) {
                s1 = [s1, s2]
                s0 = s1
            } else {
                peg$currPos = s0
                s0 = peg$FAILED
            }
        } else {
            peg$currPos = s0
            s0 = peg$FAILED
        }

        return s0
    }

    function peg$parseConstToken() {
        var s0, s1, s2, s3

        s0 = peg$currPos
        if (input.substr(peg$currPos, 5) === peg$c148) {
            s1 = peg$c148
            peg$currPos += 5
        } else {
            s1 = peg$FAILED
            if (peg$silentFails === 0) {
                peg$fail(peg$c149)
            }
        }
        if (s1 !== peg$FAILED) {
            s2 = peg$currPos
            peg$silentFails++
            s3 = peg$parseIdentifierPart()
            peg$silentFails--
            if (s3 === peg$FAILED) {
                s2 = void 0
            } else {
                peg$currPos = s2
                s2 = peg$FAILED
            }
            if (s2 !== peg$FAILED) {
                s1 = [s1, s2]
                s0 = s1
            } else {
                peg$currPos = s0
                s0 = peg$FAILED
            }
        } else {
            peg$currPos = s0
            s0 = peg$FAILED
        }

        return s0
    }

    function peg$parseContinueToken() {
        var s0, s1, s2, s3

        s0 = peg$currPos
        if (input.substr(peg$currPos, 8) === peg$c150) {
            s1 = peg$c150
            peg$currPos += 8
        } else {
            s1 = peg$FAILED
            if (peg$silentFails === 0) {
                peg$fail(peg$c151)
            }
        }
        if (s1 !== peg$FAILED) {
            s2 = peg$currPos
            peg$silentFails++
            s3 = peg$parseIdentifierPart()
            peg$silentFails--
            if (s3 === peg$FAILED) {
                s2 = void 0
            } else {
                peg$currPos = s2
                s2 = peg$FAILED
            }
            if (s2 !== peg$FAILED) {
                s1 = [s1, s2]
                s0 = s1
            } else {
                peg$currPos = s0
                s0 = peg$FAILED
            }
        } else {
            peg$currPos = s0
            s0 = peg$FAILED
        }

        return s0
    }

    function peg$parseDebuggerToken() {
        var s0, s1, s2, s3

        s0 = peg$currPos
        if (input.substr(peg$currPos, 8) === peg$c152) {
            s1 = peg$c152
            peg$currPos += 8
        } else {
            s1 = peg$FAILED
            if (peg$silentFails === 0) {
                peg$fail(peg$c153)
            }
        }
        if (s1 !== peg$FAILED) {
            s2 = peg$currPos
            peg$silentFails++
            s3 = peg$parseIdentifierPart()
            peg$silentFails--
            if (s3 === peg$FAILED) {
                s2 = void 0
            } else {
                peg$currPos = s2
                s2 = peg$FAILED
            }
            if (s2 !== peg$FAILED) {
                s1 = [s1, s2]
                s0 = s1
            } else {
                peg$currPos = s0
                s0 = peg$FAILED
            }
        } else {
            peg$currPos = s0
            s0 = peg$FAILED
        }

        return s0
    }

    function peg$parseDefaultToken() {
        var s0, s1, s2, s3

        s0 = peg$currPos
        if (input.substr(peg$currPos, 7) === peg$c154) {
            s1 = peg$c154
            peg$currPos += 7
        } else {
            s1 = peg$FAILED
            if (peg$silentFails === 0) {
                peg$fail(peg$c155)
            }
        }
        if (s1 !== peg$FAILED) {
            s2 = peg$currPos
            peg$silentFails++
            s3 = peg$parseIdentifierPart()
            peg$silentFails--
            if (s3 === peg$FAILED) {
                s2 = void 0
            } else {
                peg$currPos = s2
                s2 = peg$FAILED
            }
            if (s2 !== peg$FAILED) {
                s1 = [s1, s2]
                s0 = s1
            } else {
                peg$currPos = s0
                s0 = peg$FAILED
            }
        } else {
            peg$currPos = s0
            s0 = peg$FAILED
        }

        return s0
    }

    function peg$parseDeleteToken() {
        var s0, s1, s2, s3

        s0 = peg$currPos
        if (input.substr(peg$currPos, 6) === peg$c156) {
            s1 = peg$c156
            peg$currPos += 6
        } else {
            s1 = peg$FAILED
            if (peg$silentFails === 0) {
                peg$fail(peg$c157)
            }
        }
        if (s1 !== peg$FAILED) {
            s2 = peg$currPos
            peg$silentFails++
            s3 = peg$parseIdentifierPart()
            peg$silentFails--
            if (s3 === peg$FAILED) {
                s2 = void 0
            } else {
                peg$currPos = s2
                s2 = peg$FAILED
            }
            if (s2 !== peg$FAILED) {
                s1 = [s1, s2]
                s0 = s1
            } else {
                peg$currPos = s0
                s0 = peg$FAILED
            }
        } else {
            peg$currPos = s0
            s0 = peg$FAILED
        }

        return s0
    }

    function peg$parseDoToken() {
        var s0, s1, s2, s3

        s0 = peg$currPos
        if (input.substr(peg$currPos, 2) === peg$c158) {
            s1 = peg$c158
            peg$currPos += 2
        } else {
            s1 = peg$FAILED
            if (peg$silentFails === 0) {
                peg$fail(peg$c159)
            }
        }
        if (s1 !== peg$FAILED) {
            s2 = peg$currPos
            peg$silentFails++
            s3 = peg$parseIdentifierPart()
            peg$silentFails--
            if (s3 === peg$FAILED) {
                s2 = void 0
            } else {
                peg$currPos = s2
                s2 = peg$FAILED
            }
            if (s2 !== peg$FAILED) {
                s1 = [s1, s2]
                s0 = s1
            } else {
                peg$currPos = s0
                s0 = peg$FAILED
            }
        } else {
            peg$currPos = s0
            s0 = peg$FAILED
        }

        return s0
    }

    function peg$parseElseToken() {
        var s0, s1, s2, s3

        s0 = peg$currPos
        if (input.substr(peg$currPos, 4) === peg$c160) {
            s1 = peg$c160
            peg$currPos += 4
        } else {
            s1 = peg$FAILED
            if (peg$silentFails === 0) {
                peg$fail(peg$c161)
            }
        }
        if (s1 !== peg$FAILED) {
            s2 = peg$currPos
            peg$silentFails++
            s3 = peg$parseIdentifierPart()
            peg$silentFails--
            if (s3 === peg$FAILED) {
                s2 = void 0
            } else {
                peg$currPos = s2
                s2 = peg$FAILED
            }
            if (s2 !== peg$FAILED) {
                s1 = [s1, s2]
                s0 = s1
            } else {
                peg$currPos = s0
                s0 = peg$FAILED
            }
        } else {
            peg$currPos = s0
            s0 = peg$FAILED
        }

        return s0
    }

    function peg$parseEnumToken() {
        var s0, s1, s2, s3

        s0 = peg$currPos
        if (input.substr(peg$currPos, 4) === peg$c162) {
            s1 = peg$c162
            peg$currPos += 4
        } else {
            s1 = peg$FAILED
            if (peg$silentFails === 0) {
                peg$fail(peg$c163)
            }
        }
        if (s1 !== peg$FAILED) {
            s2 = peg$currPos
            peg$silentFails++
            s3 = peg$parseIdentifierPart()
            peg$silentFails--
            if (s3 === peg$FAILED) {
                s2 = void 0
            } else {
                peg$currPos = s2
                s2 = peg$FAILED
            }
            if (s2 !== peg$FAILED) {
                s1 = [s1, s2]
                s0 = s1
            } else {
                peg$currPos = s0
                s0 = peg$FAILED
            }
        } else {
            peg$currPos = s0
            s0 = peg$FAILED
        }

        return s0
    }

    function peg$parseExportToken() {
        var s0, s1, s2, s3

        s0 = peg$currPos
        if (input.substr(peg$currPos, 6) === peg$c164) {
            s1 = peg$c164
            peg$currPos += 6
        } else {
            s1 = peg$FAILED
            if (peg$silentFails === 0) {
                peg$fail(peg$c165)
            }
        }
        if (s1 !== peg$FAILED) {
            s2 = peg$currPos
            peg$silentFails++
            s3 = peg$parseIdentifierPart()
            peg$silentFails--
            if (s3 === peg$FAILED) {
                s2 = void 0
            } else {
                peg$currPos = s2
                s2 = peg$FAILED
            }
            if (s2 !== peg$FAILED) {
                s1 = [s1, s2]
                s0 = s1
            } else {
                peg$currPos = s0
                s0 = peg$FAILED
            }
        } else {
            peg$currPos = s0
            s0 = peg$FAILED
        }

        return s0
    }

    function peg$parseExtendsToken() {
        var s0, s1, s2, s3

        s0 = peg$currPos
        if (input.substr(peg$currPos, 7) === peg$c166) {
            s1 = peg$c166
            peg$currPos += 7
        } else {
            s1 = peg$FAILED
            if (peg$silentFails === 0) {
                peg$fail(peg$c167)
            }
        }
        if (s1 !== peg$FAILED) {
            s2 = peg$currPos
            peg$silentFails++
            s3 = peg$parseIdentifierPart()
            peg$silentFails--
            if (s3 === peg$FAILED) {
                s2 = void 0
            } else {
                peg$currPos = s2
                s2 = peg$FAILED
            }
            if (s2 !== peg$FAILED) {
                s1 = [s1, s2]
                s0 = s1
            } else {
                peg$currPos = s0
                s0 = peg$FAILED
            }
        } else {
            peg$currPos = s0
            s0 = peg$FAILED
        }

        return s0
    }

    function peg$parseFalseToken() {
        var s0, s1, s2, s3

        s0 = peg$currPos
        if (input.substr(peg$currPos, 5) === peg$c168) {
            s1 = peg$c168
            peg$currPos += 5
        } else {
            s1 = peg$FAILED
            if (peg$silentFails === 0) {
                peg$fail(peg$c169)
            }
        }
        if (s1 !== peg$FAILED) {
            s2 = peg$currPos
            peg$silentFails++
            s3 = peg$parseIdentifierPart()
            peg$silentFails--
            if (s3 === peg$FAILED) {
                s2 = void 0
            } else {
                peg$currPos = s2
                s2 = peg$FAILED
            }
            if (s2 !== peg$FAILED) {
                s1 = [s1, s2]
                s0 = s1
            } else {
                peg$currPos = s0
                s0 = peg$FAILED
            }
        } else {
            peg$currPos = s0
            s0 = peg$FAILED
        }

        return s0
    }

    function peg$parseFinallyToken() {
        var s0, s1, s2, s3

        s0 = peg$currPos
        if (input.substr(peg$currPos, 7) === peg$c170) {
            s1 = peg$c170
            peg$currPos += 7
        } else {
            s1 = peg$FAILED
            if (peg$silentFails === 0) {
                peg$fail(peg$c171)
            }
        }
        if (s1 !== peg$FAILED) {
            s2 = peg$currPos
            peg$silentFails++
            s3 = peg$parseIdentifierPart()
            peg$silentFails--
            if (s3 === peg$FAILED) {
                s2 = void 0
            } else {
                peg$currPos = s2
                s2 = peg$FAILED
            }
            if (s2 !== peg$FAILED) {
                s1 = [s1, s2]
                s0 = s1
            } else {
                peg$currPos = s0
                s0 = peg$FAILED
            }
        } else {
            peg$currPos = s0
            s0 = peg$FAILED
        }

        return s0
    }

    function peg$parseForToken() {
        var s0, s1, s2, s3

        s0 = peg$currPos
        if (input.substr(peg$currPos, 3) === peg$c172) {
            s1 = peg$c172
            peg$currPos += 3
        } else {
            s1 = peg$FAILED
            if (peg$silentFails === 0) {
                peg$fail(peg$c173)
            }
        }
        if (s1 !== peg$FAILED) {
            s2 = peg$currPos
            peg$silentFails++
            s3 = peg$parseIdentifierPart()
            peg$silentFails--
            if (s3 === peg$FAILED) {
                s2 = void 0
            } else {
                peg$currPos = s2
                s2 = peg$FAILED
            }
            if (s2 !== peg$FAILED) {
                s1 = [s1, s2]
                s0 = s1
            } else {
                peg$currPos = s0
                s0 = peg$FAILED
            }
        } else {
            peg$currPos = s0
            s0 = peg$FAILED
        }

        return s0
    }

    function peg$parseFunctionToken() {
        var s0, s1, s2, s3

        s0 = peg$currPos
        if (input.substr(peg$currPos, 8) === peg$c174) {
            s1 = peg$c174
            peg$currPos += 8
        } else {
            s1 = peg$FAILED
            if (peg$silentFails === 0) {
                peg$fail(peg$c175)
            }
        }
        if (s1 !== peg$FAILED) {
            s2 = peg$currPos
            peg$silentFails++
            s3 = peg$parseIdentifierPart()
            peg$silentFails--
            if (s3 === peg$FAILED) {
                s2 = void 0
            } else {
                peg$currPos = s2
                s2 = peg$FAILED
            }
            if (s2 !== peg$FAILED) {
                s1 = [s1, s2]
                s0 = s1
            } else {
                peg$currPos = s0
                s0 = peg$FAILED
            }
        } else {
            peg$currPos = s0
            s0 = peg$FAILED
        }

        return s0
    }

    function peg$parseGetToken() {
        var s0, s1, s2, s3

        s0 = peg$currPos
        if (input.substr(peg$currPos, 3) === peg$c176) {
            s1 = peg$c176
            peg$currPos += 3
        } else {
            s1 = peg$FAILED
            if (peg$silentFails === 0) {
                peg$fail(peg$c177)
            }
        }
        if (s1 !== peg$FAILED) {
            s2 = peg$currPos
            peg$silentFails++
            s3 = peg$parseIdentifierPart()
            peg$silentFails--
            if (s3 === peg$FAILED) {
                s2 = void 0
            } else {
                peg$currPos = s2
                s2 = peg$FAILED
            }
            if (s2 !== peg$FAILED) {
                s1 = [s1, s2]
                s0 = s1
            } else {
                peg$currPos = s0
                s0 = peg$FAILED
            }
        } else {
            peg$currPos = s0
            s0 = peg$FAILED
        }

        return s0
    }

    function peg$parseIfToken() {
        var s0, s1, s2, s3

        s0 = peg$currPos
        if (input.substr(peg$currPos, 2) === peg$c178) {
            s1 = peg$c178
            peg$currPos += 2
        } else {
            s1 = peg$FAILED
            if (peg$silentFails === 0) {
                peg$fail(peg$c179)
            }
        }
        if (s1 !== peg$FAILED) {
            s2 = peg$currPos
            peg$silentFails++
            s3 = peg$parseIdentifierPart()
            peg$silentFails--
            if (s3 === peg$FAILED) {
                s2 = void 0
            } else {
                peg$currPos = s2
                s2 = peg$FAILED
            }
            if (s2 !== peg$FAILED) {
                s1 = [s1, s2]
                s0 = s1
            } else {
                peg$currPos = s0
                s0 = peg$FAILED
            }
        } else {
            peg$currPos = s0
            s0 = peg$FAILED
        }

        return s0
    }

    function peg$parseImportToken() {
        var s0, s1, s2, s3

        s0 = peg$currPos
        if (input.substr(peg$currPos, 6) === peg$c180) {
            s1 = peg$c180
            peg$currPos += 6
        } else {
            s1 = peg$FAILED
            if (peg$silentFails === 0) {
                peg$fail(peg$c181)
            }
        }
        if (s1 !== peg$FAILED) {
            s2 = peg$currPos
            peg$silentFails++
            s3 = peg$parseIdentifierPart()
            peg$silentFails--
            if (s3 === peg$FAILED) {
                s2 = void 0
            } else {
                peg$currPos = s2
                s2 = peg$FAILED
            }
            if (s2 !== peg$FAILED) {
                s1 = [s1, s2]
                s0 = s1
            } else {
                peg$currPos = s0
                s0 = peg$FAILED
            }
        } else {
            peg$currPos = s0
            s0 = peg$FAILED
        }

        return s0
    }

    function peg$parseInstanceofToken() {
        var s0, s1, s2, s3

        s0 = peg$currPos
        if (input.substr(peg$currPos, 10) === peg$c182) {
            s1 = peg$c182
            peg$currPos += 10
        } else {
            s1 = peg$FAILED
            if (peg$silentFails === 0) {
                peg$fail(peg$c183)
            }
        }
        if (s1 !== peg$FAILED) {
            s2 = peg$currPos
            peg$silentFails++
            s3 = peg$parseIdentifierPart()
            peg$silentFails--
            if (s3 === peg$FAILED) {
                s2 = void 0
            } else {
                peg$currPos = s2
                s2 = peg$FAILED
            }
            if (s2 !== peg$FAILED) {
                s1 = [s1, s2]
                s0 = s1
            } else {
                peg$currPos = s0
                s0 = peg$FAILED
            }
        } else {
            peg$currPos = s0
            s0 = peg$FAILED
        }

        return s0
    }

    function peg$parseInToken() {
        var s0, s1, s2, s3

        s0 = peg$currPos
        if (input.substr(peg$currPos, 2) === peg$c184) {
            s1 = peg$c184
            peg$currPos += 2
        } else {
            s1 = peg$FAILED
            if (peg$silentFails === 0) {
                peg$fail(peg$c185)
            }
        }
        if (s1 !== peg$FAILED) {
            s2 = peg$currPos
            peg$silentFails++
            s3 = peg$parseIdentifierPart()
            peg$silentFails--
            if (s3 === peg$FAILED) {
                s2 = void 0
            } else {
                peg$currPos = s2
                s2 = peg$FAILED
            }
            if (s2 !== peg$FAILED) {
                s1 = [s1, s2]
                s0 = s1
            } else {
                peg$currPos = s0
                s0 = peg$FAILED
            }
        } else {
            peg$currPos = s0
            s0 = peg$FAILED
        }

        return s0
    }

    function peg$parseNewToken() {
        var s0, s1, s2, s3

        s0 = peg$currPos
        if (input.substr(peg$currPos, 3) === peg$c186) {
            s1 = peg$c186
            peg$currPos += 3
        } else {
            s1 = peg$FAILED
            if (peg$silentFails === 0) {
                peg$fail(peg$c187)
            }
        }
        if (s1 !== peg$FAILED) {
            s2 = peg$currPos
            peg$silentFails++
            s3 = peg$parseIdentifierPart()
            peg$silentFails--
            if (s3 === peg$FAILED) {
                s2 = void 0
            } else {
                peg$currPos = s2
                s2 = peg$FAILED
            }
            if (s2 !== peg$FAILED) {
                s1 = [s1, s2]
                s0 = s1
            } else {
                peg$currPos = s0
                s0 = peg$FAILED
            }
        } else {
            peg$currPos = s0
            s0 = peg$FAILED
        }

        return s0
    }

    function peg$parseNullToken() {
        var s0, s1, s2, s3

        s0 = peg$currPos
        if (input.substr(peg$currPos, 4) === peg$c188) {
            s1 = peg$c188
            peg$currPos += 4
        } else {
            s1 = peg$FAILED
            if (peg$silentFails === 0) {
                peg$fail(peg$c189)
            }
        }
        if (s1 !== peg$FAILED) {
            s2 = peg$currPos
            peg$silentFails++
            s3 = peg$parseIdentifierPart()
            peg$silentFails--
            if (s3 === peg$FAILED) {
                s2 = void 0
            } else {
                peg$currPos = s2
                s2 = peg$FAILED
            }
            if (s2 !== peg$FAILED) {
                s1 = [s1, s2]
                s0 = s1
            } else {
                peg$currPos = s0
                s0 = peg$FAILED
            }
        } else {
            peg$currPos = s0
            s0 = peg$FAILED
        }

        return s0
    }

    function peg$parseReturnToken() {
        var s0, s1, s2, s3

        s0 = peg$currPos
        if (input.substr(peg$currPos, 6) === peg$c190) {
            s1 = peg$c190
            peg$currPos += 6
        } else {
            s1 = peg$FAILED
            if (peg$silentFails === 0) {
                peg$fail(peg$c191)
            }
        }
        if (s1 !== peg$FAILED) {
            s2 = peg$currPos
            peg$silentFails++
            s3 = peg$parseIdentifierPart()
            peg$silentFails--
            if (s3 === peg$FAILED) {
                s2 = void 0
            } else {
                peg$currPos = s2
                s2 = peg$FAILED
            }
            if (s2 !== peg$FAILED) {
                s1 = [s1, s2]
                s0 = s1
            } else {
                peg$currPos = s0
                s0 = peg$FAILED
            }
        } else {
            peg$currPos = s0
            s0 = peg$FAILED
        }

        return s0
    }

    function peg$parseSetToken() {
        var s0, s1, s2, s3

        s0 = peg$currPos
        if (input.substr(peg$currPos, 3) === peg$c192) {
            s1 = peg$c192
            peg$currPos += 3
        } else {
            s1 = peg$FAILED
            if (peg$silentFails === 0) {
                peg$fail(peg$c193)
            }
        }
        if (s1 !== peg$FAILED) {
            s2 = peg$currPos
            peg$silentFails++
            s3 = peg$parseIdentifierPart()
            peg$silentFails--
            if (s3 === peg$FAILED) {
                s2 = void 0
            } else {
                peg$currPos = s2
                s2 = peg$FAILED
            }
            if (s2 !== peg$FAILED) {
                s1 = [s1, s2]
                s0 = s1
            } else {
                peg$currPos = s0
                s0 = peg$FAILED
            }
        } else {
            peg$currPos = s0
            s0 = peg$FAILED
        }

        return s0
    }

    function peg$parseSuperToken() {
        var s0, s1, s2, s3

        s0 = peg$currPos
        if (input.substr(peg$currPos, 5) === peg$c194) {
            s1 = peg$c194
            peg$currPos += 5
        } else {
            s1 = peg$FAILED
            if (peg$silentFails === 0) {
                peg$fail(peg$c195)
            }
        }
        if (s1 !== peg$FAILED) {
            s2 = peg$currPos
            peg$silentFails++
            s3 = peg$parseIdentifierPart()
            peg$silentFails--
            if (s3 === peg$FAILED) {
                s2 = void 0
            } else {
                peg$currPos = s2
                s2 = peg$FAILED
            }
            if (s2 !== peg$FAILED) {
                s1 = [s1, s2]
                s0 = s1
            } else {
                peg$currPos = s0
                s0 = peg$FAILED
            }
        } else {
            peg$currPos = s0
            s0 = peg$FAILED
        }

        return s0
    }

    function peg$parseSwitchToken() {
        var s0, s1, s2, s3

        s0 = peg$currPos
        if (input.substr(peg$currPos, 6) === peg$c196) {
            s1 = peg$c196
            peg$currPos += 6
        } else {
            s1 = peg$FAILED
            if (peg$silentFails === 0) {
                peg$fail(peg$c197)
            }
        }
        if (s1 !== peg$FAILED) {
            s2 = peg$currPos
            peg$silentFails++
            s3 = peg$parseIdentifierPart()
            peg$silentFails--
            if (s3 === peg$FAILED) {
                s2 = void 0
            } else {
                peg$currPos = s2
                s2 = peg$FAILED
            }
            if (s2 !== peg$FAILED) {
                s1 = [s1, s2]
                s0 = s1
            } else {
                peg$currPos = s0
                s0 = peg$FAILED
            }
        } else {
            peg$currPos = s0
            s0 = peg$FAILED
        }

        return s0
    }

    function peg$parseThisToken() {
        var s0, s1, s2, s3

        s0 = peg$currPos
        if (input.substr(peg$currPos, 4) === peg$c198) {
            s1 = peg$c198
            peg$currPos += 4
        } else {
            s1 = peg$FAILED
            if (peg$silentFails === 0) {
                peg$fail(peg$c199)
            }
        }
        if (s1 !== peg$FAILED) {
            s2 = peg$currPos
            peg$silentFails++
            s3 = peg$parseIdentifierPart()
            peg$silentFails--
            if (s3 === peg$FAILED) {
                s2 = void 0
            } else {
                peg$currPos = s2
                s2 = peg$FAILED
            }
            if (s2 !== peg$FAILED) {
                s1 = [s1, s2]
                s0 = s1
            } else {
                peg$currPos = s0
                s0 = peg$FAILED
            }
        } else {
            peg$currPos = s0
            s0 = peg$FAILED
        }

        return s0
    }

    function peg$parseThrowToken() {
        var s0, s1, s2, s3

        s0 = peg$currPos
        if (input.substr(peg$currPos, 5) === peg$c200) {
            s1 = peg$c200
            peg$currPos += 5
        } else {
            s1 = peg$FAILED
            if (peg$silentFails === 0) {
                peg$fail(peg$c201)
            }
        }
        if (s1 !== peg$FAILED) {
            s2 = peg$currPos
            peg$silentFails++
            s3 = peg$parseIdentifierPart()
            peg$silentFails--
            if (s3 === peg$FAILED) {
                s2 = void 0
            } else {
                peg$currPos = s2
                s2 = peg$FAILED
            }
            if (s2 !== peg$FAILED) {
                s1 = [s1, s2]
                s0 = s1
            } else {
                peg$currPos = s0
                s0 = peg$FAILED
            }
        } else {
            peg$currPos = s0
            s0 = peg$FAILED
        }

        return s0
    }

    function peg$parseTrueToken() {
        var s0, s1, s2, s3

        s0 = peg$currPos
        if (input.substr(peg$currPos, 4) === peg$c202) {
            s1 = peg$c202
            peg$currPos += 4
        } else {
            s1 = peg$FAILED
            if (peg$silentFails === 0) {
                peg$fail(peg$c203)
            }
        }
        if (s1 !== peg$FAILED) {
            s2 = peg$currPos
            peg$silentFails++
            s3 = peg$parseIdentifierPart()
            peg$silentFails--
            if (s3 === peg$FAILED) {
                s2 = void 0
            } else {
                peg$currPos = s2
                s2 = peg$FAILED
            }
            if (s2 !== peg$FAILED) {
                s1 = [s1, s2]
                s0 = s1
            } else {
                peg$currPos = s0
                s0 = peg$FAILED
            }
        } else {
            peg$currPos = s0
            s0 = peg$FAILED
        }

        return s0
    }

    function peg$parseTryToken() {
        var s0, s1, s2, s3

        s0 = peg$currPos
        if (input.substr(peg$currPos, 3) === peg$c204) {
            s1 = peg$c204
            peg$currPos += 3
        } else {
            s1 = peg$FAILED
            if (peg$silentFails === 0) {
                peg$fail(peg$c205)
            }
        }
        if (s1 !== peg$FAILED) {
            s2 = peg$currPos
            peg$silentFails++
            s3 = peg$parseIdentifierPart()
            peg$silentFails--
            if (s3 === peg$FAILED) {
                s2 = void 0
            } else {
                peg$currPos = s2
                s2 = peg$FAILED
            }
            if (s2 !== peg$FAILED) {
                s1 = [s1, s2]
                s0 = s1
            } else {
                peg$currPos = s0
                s0 = peg$FAILED
            }
        } else {
            peg$currPos = s0
            s0 = peg$FAILED
        }

        return s0
    }

    function peg$parseTypeofToken() {
        var s0, s1, s2, s3

        s0 = peg$currPos
        if (input.substr(peg$currPos, 6) === peg$c206) {
            s1 = peg$c206
            peg$currPos += 6
        } else {
            s1 = peg$FAILED
            if (peg$silentFails === 0) {
                peg$fail(peg$c207)
            }
        }
        if (s1 !== peg$FAILED) {
            s2 = peg$currPos
            peg$silentFails++
            s3 = peg$parseIdentifierPart()
            peg$silentFails--
            if (s3 === peg$FAILED) {
                s2 = void 0
            } else {
                peg$currPos = s2
                s2 = peg$FAILED
            }
            if (s2 !== peg$FAILED) {
                s1 = [s1, s2]
                s0 = s1
            } else {
                peg$currPos = s0
                s0 = peg$FAILED
            }
        } else {
            peg$currPos = s0
            s0 = peg$FAILED
        }

        return s0
    }

    function peg$parseVarToken() {
        var s0, s1, s2, s3

        s0 = peg$currPos
        if (input.substr(peg$currPos, 3) === peg$c208) {
            s1 = peg$c208
            peg$currPos += 3
        } else {
            s1 = peg$FAILED
            if (peg$silentFails === 0) {
                peg$fail(peg$c209)
            }
        }
        if (s1 !== peg$FAILED) {
            s2 = peg$currPos
            peg$silentFails++
            s3 = peg$parseIdentifierPart()
            peg$silentFails--
            if (s3 === peg$FAILED) {
                s2 = void 0
            } else {
                peg$currPos = s2
                s2 = peg$FAILED
            }
            if (s2 !== peg$FAILED) {
                s1 = [s1, s2]
                s0 = s1
            } else {
                peg$currPos = s0
                s0 = peg$FAILED
            }
        } else {
            peg$currPos = s0
            s0 = peg$FAILED
        }

        return s0
    }

    function peg$parseVoidToken() {
        var s0, s1, s2, s3

        s0 = peg$currPos
        if (input.substr(peg$currPos, 4) === peg$c210) {
            s1 = peg$c210
            peg$currPos += 4
        } else {
            s1 = peg$FAILED
            if (peg$silentFails === 0) {
                peg$fail(peg$c211)
            }
        }
        if (s1 !== peg$FAILED) {
            s2 = peg$currPos
            peg$silentFails++
            s3 = peg$parseIdentifierPart()
            peg$silentFails--
            if (s3 === peg$FAILED) {
                s2 = void 0
            } else {
                peg$currPos = s2
                s2 = peg$FAILED
            }
            if (s2 !== peg$FAILED) {
                s1 = [s1, s2]
                s0 = s1
            } else {
                peg$currPos = s0
                s0 = peg$FAILED
            }
        } else {
            peg$currPos = s0
            s0 = peg$FAILED
        }

        return s0
    }

    function peg$parseWhileToken() {
        var s0, s1, s2, s3

        s0 = peg$currPos
        if (input.substr(peg$currPos, 5) === peg$c212) {
            s1 = peg$c212
            peg$currPos += 5
        } else {
            s1 = peg$FAILED
            if (peg$silentFails === 0) {
                peg$fail(peg$c213)
            }
        }
        if (s1 !== peg$FAILED) {
            s2 = peg$currPos
            peg$silentFails++
            s3 = peg$parseIdentifierPart()
            peg$silentFails--
            if (s3 === peg$FAILED) {
                s2 = void 0
            } else {
                peg$currPos = s2
                s2 = peg$FAILED
            }
            if (s2 !== peg$FAILED) {
                s1 = [s1, s2]
                s0 = s1
            } else {
                peg$currPos = s0
                s0 = peg$FAILED
            }
        } else {
            peg$currPos = s0
            s0 = peg$FAILED
        }

        return s0
    }

    function peg$parseWithToken() {
        var s0, s1, s2, s3

        s0 = peg$currPos
        if (input.substr(peg$currPos, 4) === peg$c214) {
            s1 = peg$c214
            peg$currPos += 4
        } else {
            s1 = peg$FAILED
            if (peg$silentFails === 0) {
                peg$fail(peg$c215)
            }
        }
        if (s1 !== peg$FAILED) {
            s2 = peg$currPos
            peg$silentFails++
            s3 = peg$parseIdentifierPart()
            peg$silentFails--
            if (s3 === peg$FAILED) {
                s2 = void 0
            } else {
                peg$currPos = s2
                s2 = peg$FAILED
            }
            if (s2 !== peg$FAILED) {
                s1 = [s1, s2]
                s0 = s1
            } else {
                peg$currPos = s0
                s0 = peg$FAILED
            }
        } else {
            peg$currPos = s0
            s0 = peg$FAILED
        }

        return s0
    }

    function peg$parse__() {
        var s0, s1

        s0 = []
        s1 = peg$parseWhiteSpace()
        if (s1 === peg$FAILED) {
            s1 = peg$parseLineTerminatorSequence()
            if (s1 === peg$FAILED) {
                s1 = peg$parseComment()
            }
        }
        while (s1 !== peg$FAILED) {
            s0.push(s1)
            s1 = peg$parseWhiteSpace()
            if (s1 === peg$FAILED) {
                s1 = peg$parseLineTerminatorSequence()
                if (s1 === peg$FAILED) {
                    s1 = peg$parseComment()
                }
            }
        }

        return s0
    }

    function peg$parse_() {
        var s0, s1

        s0 = []
        s1 = peg$parseWhiteSpace()
        if (s1 === peg$FAILED) {
            s1 = peg$parseMultiLineCommentNoLineTerminator()
        }
        while (s1 !== peg$FAILED) {
            s0.push(s1)
            s1 = peg$parseWhiteSpace()
            if (s1 === peg$FAILED) {
                s1 = peg$parseMultiLineCommentNoLineTerminator()
            }
        }

        return s0
    }

    function peg$parseEOS() {
        var s0, s1, s2, s3

        s0 = peg$currPos
        s1 = peg$parse__()
        if (s1 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 59) {
                s2 = peg$c216
                peg$currPos++
            } else {
                s2 = peg$FAILED
                if (peg$silentFails === 0) {
                    peg$fail(peg$c217)
                }
            }
            if (s2 !== peg$FAILED) {
                s1 = [s1, s2]
                s0 = s1
            } else {
                peg$currPos = s0
                s0 = peg$FAILED
            }
        } else {
            peg$currPos = s0
            s0 = peg$FAILED
        }
        if (s0 === peg$FAILED) {
            s0 = peg$currPos
            s1 = peg$parse_()
            if (s1 !== peg$FAILED) {
                s2 = peg$parseSingleLineComment()
                if (s2 === peg$FAILED) {
                    s2 = null
                }
                if (s2 !== peg$FAILED) {
                    s3 = peg$parseLineTerminatorSequence()
                    if (s3 !== peg$FAILED) {
                        s1 = [s1, s2, s3]
                        s0 = s1
                    } else {
                        peg$currPos = s0
                        s0 = peg$FAILED
                    }
                } else {
                    peg$currPos = s0
                    s0 = peg$FAILED
                }
            } else {
                peg$currPos = s0
                s0 = peg$FAILED
            }
            if (s0 === peg$FAILED) {
                s0 = peg$currPos
                s1 = peg$parse_()
                if (s1 !== peg$FAILED) {
                    s2 = peg$currPos
                    peg$silentFails++
                    if (input.charCodeAt(peg$currPos) === 125) {
                        s3 = peg$c218
                        peg$currPos++
                    } else {
                        s3 = peg$FAILED
                        if (peg$silentFails === 0) {
                            peg$fail(peg$c219)
                        }
                    }
                    peg$silentFails--
                    if (s3 !== peg$FAILED) {
                        peg$currPos = s2
                        s2 = void 0
                    } else {
                        s2 = peg$FAILED
                    }
                    if (s2 !== peg$FAILED) {
                        s1 = [s1, s2]
                        s0 = s1
                    } else {
                        peg$currPos = s0
                        s0 = peg$FAILED
                    }
                } else {
                    peg$currPos = s0
                    s0 = peg$FAILED
                }
                if (s0 === peg$FAILED) {
                    s0 = peg$currPos
                    s1 = peg$parse__()
                    if (s1 !== peg$FAILED) {
                        s2 = peg$parseEOF()
                        if (s2 !== peg$FAILED) {
                            s1 = [s1, s2]
                            s0 = s1
                        } else {
                            peg$currPos = s0
                            s0 = peg$FAILED
                        }
                    } else {
                        peg$currPos = s0
                        s0 = peg$FAILED
                    }
                }
            }
        }

        return s0
    }

    function peg$parseEOF() {
        var s0, s1

        s0 = peg$currPos
        peg$silentFails++
        if (input.length > peg$currPos) {
            s1 = input.charAt(peg$currPos)
            peg$currPos++
        } else {
            s1 = peg$FAILED
            if (peg$silentFails === 0) {
                peg$fail(peg$c1)
            }
        }
        peg$silentFails--
        if (s1 === peg$FAILED) {
            s0 = void 0
        } else {
            peg$currPos = s0
            s0 = peg$FAILED
        }

        return s0
    }

    function peg$parsePrimaryExpression() {
        var s0, s1, s2, s3, s4, s5

        s0 = peg$currPos
        s1 = peg$parseThisToken()
        if (s1 !== peg$FAILED) {
            peg$savedPos = s0
            s1 = peg$c220()
        }
        s0 = s1
        if (s0 === peg$FAILED) {
            s0 = peg$parseIdentifier()
            if (s0 === peg$FAILED) {
                s0 = peg$parseLiteral()
                if (s0 === peg$FAILED) {
                    s0 = peg$parseArrayLiteral()
                    if (s0 === peg$FAILED) {
                        s0 = peg$parseObjectLiteral()
                        if (s0 === peg$FAILED) {
                            s0 = peg$currPos
                            if (input.charCodeAt(peg$currPos) === 40) {
                                s1 = peg$c221
                                peg$currPos++
                            } else {
                                s1 = peg$FAILED
                                if (peg$silentFails === 0) {
                                    peg$fail(peg$c222)
                                }
                            }
                            if (s1 !== peg$FAILED) {
                                s2 = peg$parse__()
                                if (s2 !== peg$FAILED) {
                                    s3 = peg$parseExpression()
                                    if (s3 !== peg$FAILED) {
                                        s4 = peg$parse__()
                                        if (s4 !== peg$FAILED) {
                                            if (
                                                input.charCodeAt(
                                                    peg$currPos
                                                ) === 41
                                            ) {
                                                s5 = peg$c223
                                                peg$currPos++
                                            } else {
                                                s5 = peg$FAILED
                                                if (peg$silentFails === 0) {
                                                    peg$fail(peg$c224)
                                                }
                                            }
                                            if (s5 !== peg$FAILED) {
                                                peg$savedPos = s0
                                                s1 = peg$c225(s3)
                                                s0 = s1
                                            } else {
                                                peg$currPos = s0
                                                s0 = peg$FAILED
                                            }
                                        } else {
                                            peg$currPos = s0
                                            s0 = peg$FAILED
                                        }
                                    } else {
                                        peg$currPos = s0
                                        s0 = peg$FAILED
                                    }
                                } else {
                                    peg$currPos = s0
                                    s0 = peg$FAILED
                                }
                            } else {
                                peg$currPos = s0
                                s0 = peg$FAILED
                            }
                        }
                    }
                }
            }
        }

        return s0
    }

    function peg$parseArrayLiteral() {
        var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9

        s0 = peg$currPos
        if (input.charCodeAt(peg$currPos) === 91) {
            s1 = peg$c112
            peg$currPos++
        } else {
            s1 = peg$FAILED
            if (peg$silentFails === 0) {
                peg$fail(peg$c113)
            }
        }
        if (s1 !== peg$FAILED) {
            s2 = peg$parse__()
            if (s2 !== peg$FAILED) {
                s3 = peg$currPos
                s4 = peg$parseElision()
                if (s4 !== peg$FAILED) {
                    s5 = peg$parse__()
                    if (s5 !== peg$FAILED) {
                        s4 = [s4, s5]
                        s3 = s4
                    } else {
                        peg$currPos = s3
                        s3 = peg$FAILED
                    }
                } else {
                    peg$currPos = s3
                    s3 = peg$FAILED
                }
                if (s3 === peg$FAILED) {
                    s3 = null
                }
                if (s3 !== peg$FAILED) {
                    if (input.charCodeAt(peg$currPos) === 93) {
                        s4 = peg$c114
                        peg$currPos++
                    } else {
                        s4 = peg$FAILED
                        if (peg$silentFails === 0) {
                            peg$fail(peg$c115)
                        }
                    }
                    if (s4 !== peg$FAILED) {
                        peg$savedPos = s0
                        s1 = peg$c226(s3)
                        s0 = s1
                    } else {
                        peg$currPos = s0
                        s0 = peg$FAILED
                    }
                } else {
                    peg$currPos = s0
                    s0 = peg$FAILED
                }
            } else {
                peg$currPos = s0
                s0 = peg$FAILED
            }
        } else {
            peg$currPos = s0
            s0 = peg$FAILED
        }
        if (s0 === peg$FAILED) {
            s0 = peg$currPos
            if (input.charCodeAt(peg$currPos) === 91) {
                s1 = peg$c112
                peg$currPos++
            } else {
                s1 = peg$FAILED
                if (peg$silentFails === 0) {
                    peg$fail(peg$c113)
                }
            }
            if (s1 !== peg$FAILED) {
                s2 = peg$parse__()
                if (s2 !== peg$FAILED) {
                    s3 = peg$parseElementList()
                    if (s3 !== peg$FAILED) {
                        s4 = peg$parse__()
                        if (s4 !== peg$FAILED) {
                            if (input.charCodeAt(peg$currPos) === 93) {
                                s5 = peg$c114
                                peg$currPos++
                            } else {
                                s5 = peg$FAILED
                                if (peg$silentFails === 0) {
                                    peg$fail(peg$c115)
                                }
                            }
                            if (s5 !== peg$FAILED) {
                                peg$savedPos = s0
                                s1 = peg$c227(s3)
                                s0 = s1
                            } else {
                                peg$currPos = s0
                                s0 = peg$FAILED
                            }
                        } else {
                            peg$currPos = s0
                            s0 = peg$FAILED
                        }
                    } else {
                        peg$currPos = s0
                        s0 = peg$FAILED
                    }
                } else {
                    peg$currPos = s0
                    s0 = peg$FAILED
                }
            } else {
                peg$currPos = s0
                s0 = peg$FAILED
            }
            if (s0 === peg$FAILED) {
                s0 = peg$currPos
                if (input.charCodeAt(peg$currPos) === 91) {
                    s1 = peg$c112
                    peg$currPos++
                } else {
                    s1 = peg$FAILED
                    if (peg$silentFails === 0) {
                        peg$fail(peg$c113)
                    }
                }
                if (s1 !== peg$FAILED) {
                    s2 = peg$parse__()
                    if (s2 !== peg$FAILED) {
                        s3 = peg$parseElementList()
                        if (s3 !== peg$FAILED) {
                            s4 = peg$parse__()
                            if (s4 !== peg$FAILED) {
                                if (input.charCodeAt(peg$currPos) === 44) {
                                    s5 = peg$c228
                                    peg$currPos++
                                } else {
                                    s5 = peg$FAILED
                                    if (peg$silentFails === 0) {
                                        peg$fail(peg$c229)
                                    }
                                }
                                if (s5 !== peg$FAILED) {
                                    s6 = peg$parse__()
                                    if (s6 !== peg$FAILED) {
                                        s7 = peg$currPos
                                        s8 = peg$parseElision()
                                        if (s8 !== peg$FAILED) {
                                            s9 = peg$parse__()
                                            if (s9 !== peg$FAILED) {
                                                s8 = [s8, s9]
                                                s7 = s8
                                            } else {
                                                peg$currPos = s7
                                                s7 = peg$FAILED
                                            }
                                        } else {
                                            peg$currPos = s7
                                            s7 = peg$FAILED
                                        }
                                        if (s7 === peg$FAILED) {
                                            s7 = null
                                        }
                                        if (s7 !== peg$FAILED) {
                                            if (
                                                input.charCodeAt(
                                                    peg$currPos
                                                ) === 93
                                            ) {
                                                s8 = peg$c114
                                                peg$currPos++
                                            } else {
                                                s8 = peg$FAILED
                                                if (peg$silentFails === 0) {
                                                    peg$fail(peg$c115)
                                                }
                                            }
                                            if (s8 !== peg$FAILED) {
                                                peg$savedPos = s0
                                                s1 = peg$c230(s3, s7)
                                                s0 = s1
                                            } else {
                                                peg$currPos = s0
                                                s0 = peg$FAILED
                                            }
                                        } else {
                                            peg$currPos = s0
                                            s0 = peg$FAILED
                                        }
                                    } else {
                                        peg$currPos = s0
                                        s0 = peg$FAILED
                                    }
                                } else {
                                    peg$currPos = s0
                                    s0 = peg$FAILED
                                }
                            } else {
                                peg$currPos = s0
                                s0 = peg$FAILED
                            }
                        } else {
                            peg$currPos = s0
                            s0 = peg$FAILED
                        }
                    } else {
                        peg$currPos = s0
                        s0 = peg$FAILED
                    }
                } else {
                    peg$currPos = s0
                    s0 = peg$FAILED
                }
            }
        }

        return s0
    }

    function peg$parseElementList() {
        var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9

        s0 = peg$currPos
        s1 = peg$currPos
        s2 = peg$currPos
        s3 = peg$parseElision()
        if (s3 !== peg$FAILED) {
            s4 = peg$parse__()
            if (s4 !== peg$FAILED) {
                s3 = [s3, s4]
                s2 = s3
            } else {
                peg$currPos = s2
                s2 = peg$FAILED
            }
        } else {
            peg$currPos = s2
            s2 = peg$FAILED
        }
        if (s2 === peg$FAILED) {
            s2 = null
        }
        if (s2 !== peg$FAILED) {
            s3 = peg$parseAssignmentExpression()
            if (s3 !== peg$FAILED) {
                peg$savedPos = s1
                s2 = peg$c231(s2, s3)
                s1 = s2
            } else {
                peg$currPos = s1
                s1 = peg$FAILED
            }
        } else {
            peg$currPos = s1
            s1 = peg$FAILED
        }
        if (s1 !== peg$FAILED) {
            s2 = []
            s3 = peg$currPos
            s4 = peg$parse__()
            if (s4 !== peg$FAILED) {
                if (input.charCodeAt(peg$currPos) === 44) {
                    s5 = peg$c228
                    peg$currPos++
                } else {
                    s5 = peg$FAILED
                    if (peg$silentFails === 0) {
                        peg$fail(peg$c229)
                    }
                }
                if (s5 !== peg$FAILED) {
                    s6 = peg$parse__()
                    if (s6 !== peg$FAILED) {
                        s7 = peg$currPos
                        s8 = peg$parseElision()
                        if (s8 !== peg$FAILED) {
                            s9 = peg$parse__()
                            if (s9 !== peg$FAILED) {
                                s8 = [s8, s9]
                                s7 = s8
                            } else {
                                peg$currPos = s7
                                s7 = peg$FAILED
                            }
                        } else {
                            peg$currPos = s7
                            s7 = peg$FAILED
                        }
                        if (s7 === peg$FAILED) {
                            s7 = null
                        }
                        if (s7 !== peg$FAILED) {
                            s8 = peg$parseAssignmentExpression()
                            if (s8 !== peg$FAILED) {
                                peg$savedPos = s3
                                s4 = peg$c232(s1, s7, s8)
                                s3 = s4
                            } else {
                                peg$currPos = s3
                                s3 = peg$FAILED
                            }
                        } else {
                            peg$currPos = s3
                            s3 = peg$FAILED
                        }
                    } else {
                        peg$currPos = s3
                        s3 = peg$FAILED
                    }
                } else {
                    peg$currPos = s3
                    s3 = peg$FAILED
                }
            } else {
                peg$currPos = s3
                s3 = peg$FAILED
            }
            while (s3 !== peg$FAILED) {
                s2.push(s3)
                s3 = peg$currPos
                s4 = peg$parse__()
                if (s4 !== peg$FAILED) {
                    if (input.charCodeAt(peg$currPos) === 44) {
                        s5 = peg$c228
                        peg$currPos++
                    } else {
                        s5 = peg$FAILED
                        if (peg$silentFails === 0) {
                            peg$fail(peg$c229)
                        }
                    }
                    if (s5 !== peg$FAILED) {
                        s6 = peg$parse__()
                        if (s6 !== peg$FAILED) {
                            s7 = peg$currPos
                            s8 = peg$parseElision()
                            if (s8 !== peg$FAILED) {
                                s9 = peg$parse__()
                                if (s9 !== peg$FAILED) {
                                    s8 = [s8, s9]
                                    s7 = s8
                                } else {
                                    peg$currPos = s7
                                    s7 = peg$FAILED
                                }
                            } else {
                                peg$currPos = s7
                                s7 = peg$FAILED
                            }
                            if (s7 === peg$FAILED) {
                                s7 = null
                            }
                            if (s7 !== peg$FAILED) {
                                s8 = peg$parseAssignmentExpression()
                                if (s8 !== peg$FAILED) {
                                    peg$savedPos = s3
                                    s4 = peg$c232(s1, s7, s8)
                                    s3 = s4
                                } else {
                                    peg$currPos = s3
                                    s3 = peg$FAILED
                                }
                            } else {
                                peg$currPos = s3
                                s3 = peg$FAILED
                            }
                        } else {
                            peg$currPos = s3
                            s3 = peg$FAILED
                        }
                    } else {
                        peg$currPos = s3
                        s3 = peg$FAILED
                    }
                } else {
                    peg$currPos = s3
                    s3 = peg$FAILED
                }
            }
            if (s2 !== peg$FAILED) {
                peg$savedPos = s0
                s1 = peg$c233(s1, s2)
                s0 = s1
            } else {
                peg$currPos = s0
                s0 = peg$FAILED
            }
        } else {
            peg$currPos = s0
            s0 = peg$FAILED
        }

        return s0
    }

    function peg$parseElision() {
        var s0, s1, s2, s3, s4, s5

        s0 = peg$currPos
        if (input.charCodeAt(peg$currPos) === 44) {
            s1 = peg$c228
            peg$currPos++
        } else {
            s1 = peg$FAILED
            if (peg$silentFails === 0) {
                peg$fail(peg$c229)
            }
        }
        if (s1 !== peg$FAILED) {
            s2 = []
            s3 = peg$currPos
            s4 = peg$parse__()
            if (s4 !== peg$FAILED) {
                if (input.charCodeAt(peg$currPos) === 44) {
                    s5 = peg$c228
                    peg$currPos++
                } else {
                    s5 = peg$FAILED
                    if (peg$silentFails === 0) {
                        peg$fail(peg$c229)
                    }
                }
                if (s5 !== peg$FAILED) {
                    s4 = [s4, s5]
                    s3 = s4
                } else {
                    peg$currPos = s3
                    s3 = peg$FAILED
                }
            } else {
                peg$currPos = s3
                s3 = peg$FAILED
            }
            while (s3 !== peg$FAILED) {
                s2.push(s3)
                s3 = peg$currPos
                s4 = peg$parse__()
                if (s4 !== peg$FAILED) {
                    if (input.charCodeAt(peg$currPos) === 44) {
                        s5 = peg$c228
                        peg$currPos++
                    } else {
                        s5 = peg$FAILED
                        if (peg$silentFails === 0) {
                            peg$fail(peg$c229)
                        }
                    }
                    if (s5 !== peg$FAILED) {
                        s4 = [s4, s5]
                        s3 = s4
                    } else {
                        peg$currPos = s3
                        s3 = peg$FAILED
                    }
                } else {
                    peg$currPos = s3
                    s3 = peg$FAILED
                }
            }
            if (s2 !== peg$FAILED) {
                peg$savedPos = s0
                s1 = peg$c234(s2)
                s0 = s1
            } else {
                peg$currPos = s0
                s0 = peg$FAILED
            }
        } else {
            peg$currPos = s0
            s0 = peg$FAILED
        }

        return s0
    }

    function peg$parseObjectLiteral() {
        var s0, s1, s2, s3, s4, s5, s6, s7

        s0 = peg$currPos
        if (input.charCodeAt(peg$currPos) === 123) {
            s1 = peg$c235
            peg$currPos++
        } else {
            s1 = peg$FAILED
            if (peg$silentFails === 0) {
                peg$fail(peg$c236)
            }
        }
        if (s1 !== peg$FAILED) {
            s2 = peg$parse__()
            if (s2 !== peg$FAILED) {
                if (input.charCodeAt(peg$currPos) === 125) {
                    s3 = peg$c218
                    peg$currPos++
                } else {
                    s3 = peg$FAILED
                    if (peg$silentFails === 0) {
                        peg$fail(peg$c219)
                    }
                }
                if (s3 !== peg$FAILED) {
                    peg$savedPos = s0
                    s1 = peg$c237()
                    s0 = s1
                } else {
                    peg$currPos = s0
                    s0 = peg$FAILED
                }
            } else {
                peg$currPos = s0
                s0 = peg$FAILED
            }
        } else {
            peg$currPos = s0
            s0 = peg$FAILED
        }
        if (s0 === peg$FAILED) {
            s0 = peg$currPos
            if (input.charCodeAt(peg$currPos) === 123) {
                s1 = peg$c235
                peg$currPos++
            } else {
                s1 = peg$FAILED
                if (peg$silentFails === 0) {
                    peg$fail(peg$c236)
                }
            }
            if (s1 !== peg$FAILED) {
                s2 = peg$parse__()
                if (s2 !== peg$FAILED) {
                    s3 = peg$parsePropertyNameAndValueList()
                    if (s3 !== peg$FAILED) {
                        s4 = peg$parse__()
                        if (s4 !== peg$FAILED) {
                            if (input.charCodeAt(peg$currPos) === 125) {
                                s5 = peg$c218
                                peg$currPos++
                            } else {
                                s5 = peg$FAILED
                                if (peg$silentFails === 0) {
                                    peg$fail(peg$c219)
                                }
                            }
                            if (s5 !== peg$FAILED) {
                                peg$savedPos = s0
                                s1 = peg$c238(s3)
                                s0 = s1
                            } else {
                                peg$currPos = s0
                                s0 = peg$FAILED
                            }
                        } else {
                            peg$currPos = s0
                            s0 = peg$FAILED
                        }
                    } else {
                        peg$currPos = s0
                        s0 = peg$FAILED
                    }
                } else {
                    peg$currPos = s0
                    s0 = peg$FAILED
                }
            } else {
                peg$currPos = s0
                s0 = peg$FAILED
            }
            if (s0 === peg$FAILED) {
                s0 = peg$currPos
                if (input.charCodeAt(peg$currPos) === 123) {
                    s1 = peg$c235
                    peg$currPos++
                } else {
                    s1 = peg$FAILED
                    if (peg$silentFails === 0) {
                        peg$fail(peg$c236)
                    }
                }
                if (s1 !== peg$FAILED) {
                    s2 = peg$parse__()
                    if (s2 !== peg$FAILED) {
                        s3 = peg$parsePropertyNameAndValueList()
                        if (s3 !== peg$FAILED) {
                            s4 = peg$parse__()
                            if (s4 !== peg$FAILED) {
                                if (input.charCodeAt(peg$currPos) === 44) {
                                    s5 = peg$c228
                                    peg$currPos++
                                } else {
                                    s5 = peg$FAILED
                                    if (peg$silentFails === 0) {
                                        peg$fail(peg$c229)
                                    }
                                }
                                if (s5 !== peg$FAILED) {
                                    s6 = peg$parse__()
                                    if (s6 !== peg$FAILED) {
                                        if (
                                            input.charCodeAt(peg$currPos) ===
                                            125
                                        ) {
                                            s7 = peg$c218
                                            peg$currPos++
                                        } else {
                                            s7 = peg$FAILED
                                            if (peg$silentFails === 0) {
                                                peg$fail(peg$c219)
                                            }
                                        }
                                        if (s7 !== peg$FAILED) {
                                            peg$savedPos = s0
                                            s1 = peg$c238(s3)
                                            s0 = s1
                                        } else {
                                            peg$currPos = s0
                                            s0 = peg$FAILED
                                        }
                                    } else {
                                        peg$currPos = s0
                                        s0 = peg$FAILED
                                    }
                                } else {
                                    peg$currPos = s0
                                    s0 = peg$FAILED
                                }
                            } else {
                                peg$currPos = s0
                                s0 = peg$FAILED
                            }
                        } else {
                            peg$currPos = s0
                            s0 = peg$FAILED
                        }
                    } else {
                        peg$currPos = s0
                        s0 = peg$FAILED
                    }
                } else {
                    peg$currPos = s0
                    s0 = peg$FAILED
                }
            }
        }

        return s0
    }

    function peg$parsePropertyNameAndValueList() {
        var s0, s1, s2, s3, s4, s5, s6, s7

        s0 = peg$currPos
        s1 = peg$parsePropertyAssignment()
        if (s1 !== peg$FAILED) {
            s2 = []
            s3 = peg$currPos
            s4 = peg$parse__()
            if (s4 !== peg$FAILED) {
                if (input.charCodeAt(peg$currPos) === 44) {
                    s5 = peg$c228
                    peg$currPos++
                } else {
                    s5 = peg$FAILED
                    if (peg$silentFails === 0) {
                        peg$fail(peg$c229)
                    }
                }
                if (s5 !== peg$FAILED) {
                    s6 = peg$parse__()
                    if (s6 !== peg$FAILED) {
                        s7 = peg$parsePropertyAssignment()
                        if (s7 !== peg$FAILED) {
                            s4 = [s4, s5, s6, s7]
                            s3 = s4
                        } else {
                            peg$currPos = s3
                            s3 = peg$FAILED
                        }
                    } else {
                        peg$currPos = s3
                        s3 = peg$FAILED
                    }
                } else {
                    peg$currPos = s3
                    s3 = peg$FAILED
                }
            } else {
                peg$currPos = s3
                s3 = peg$FAILED
            }
            while (s3 !== peg$FAILED) {
                s2.push(s3)
                s3 = peg$currPos
                s4 = peg$parse__()
                if (s4 !== peg$FAILED) {
                    if (input.charCodeAt(peg$currPos) === 44) {
                        s5 = peg$c228
                        peg$currPos++
                    } else {
                        s5 = peg$FAILED
                        if (peg$silentFails === 0) {
                            peg$fail(peg$c229)
                        }
                    }
                    if (s5 !== peg$FAILED) {
                        s6 = peg$parse__()
                        if (s6 !== peg$FAILED) {
                            s7 = peg$parsePropertyAssignment()
                            if (s7 !== peg$FAILED) {
                                s4 = [s4, s5, s6, s7]
                                s3 = s4
                            } else {
                                peg$currPos = s3
                                s3 = peg$FAILED
                            }
                        } else {
                            peg$currPos = s3
                            s3 = peg$FAILED
                        }
                    } else {
                        peg$currPos = s3
                        s3 = peg$FAILED
                    }
                } else {
                    peg$currPos = s3
                    s3 = peg$FAILED
                }
            }
            if (s2 !== peg$FAILED) {
                peg$savedPos = s0
                s1 = peg$c239(s1, s2)
                s0 = s1
            } else {
                peg$currPos = s0
                s0 = peg$FAILED
            }
        } else {
            peg$currPos = s0
            s0 = peg$FAILED
        }

        return s0
    }

    function peg$parsePropertyAssignment() {
        var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15

        s0 = peg$currPos
        s1 = peg$parsePropertyName()
        if (s1 !== peg$FAILED) {
            s2 = peg$parse__()
            if (s2 !== peg$FAILED) {
                if (input.charCodeAt(peg$currPos) === 58) {
                    s3 = peg$c240
                    peg$currPos++
                } else {
                    s3 = peg$FAILED
                    if (peg$silentFails === 0) {
                        peg$fail(peg$c241)
                    }
                }
                if (s3 !== peg$FAILED) {
                    s4 = peg$parse__()
                    if (s4 !== peg$FAILED) {
                        s5 = peg$parseAssignmentExpression()
                        if (s5 !== peg$FAILED) {
                            peg$savedPos = s0
                            s1 = peg$c242(s1, s5)
                            s0 = s1
                        } else {
                            peg$currPos = s0
                            s0 = peg$FAILED
                        }
                    } else {
                        peg$currPos = s0
                        s0 = peg$FAILED
                    }
                } else {
                    peg$currPos = s0
                    s0 = peg$FAILED
                }
            } else {
                peg$currPos = s0
                s0 = peg$FAILED
            }
        } else {
            peg$currPos = s0
            s0 = peg$FAILED
        }
        if (s0 === peg$FAILED) {
            s0 = peg$currPos
            s1 = peg$parseGetToken()
            if (s1 !== peg$FAILED) {
                s2 = peg$parse__()
                if (s2 !== peg$FAILED) {
                    s3 = peg$parsePropertyName()
                    if (s3 !== peg$FAILED) {
                        s4 = peg$parse__()
                        if (s4 !== peg$FAILED) {
                            if (input.charCodeAt(peg$currPos) === 40) {
                                s5 = peg$c221
                                peg$currPos++
                            } else {
                                s5 = peg$FAILED
                                if (peg$silentFails === 0) {
                                    peg$fail(peg$c222)
                                }
                            }
                            if (s5 !== peg$FAILED) {
                                s6 = peg$parse__()
                                if (s6 !== peg$FAILED) {
                                    if (input.charCodeAt(peg$currPos) === 41) {
                                        s7 = peg$c223
                                        peg$currPos++
                                    } else {
                                        s7 = peg$FAILED
                                        if (peg$silentFails === 0) {
                                            peg$fail(peg$c224)
                                        }
                                    }
                                    if (s7 !== peg$FAILED) {
                                        s8 = peg$parse__()
                                        if (s8 !== peg$FAILED) {
                                            if (
                                                input.charCodeAt(
                                                    peg$currPos
                                                ) === 123
                                            ) {
                                                s9 = peg$c235
                                                peg$currPos++
                                            } else {
                                                s9 = peg$FAILED
                                                if (peg$silentFails === 0) {
                                                    peg$fail(peg$c236)
                                                }
                                            }
                                            if (s9 !== peg$FAILED) {
                                                s10 = peg$parse__()
                                                if (s10 !== peg$FAILED) {
                                                    s11 = peg$parseFunctionBody()
                                                    if (s11 !== peg$FAILED) {
                                                        s12 = peg$parse__()
                                                        if (
                                                            s12 !== peg$FAILED
                                                        ) {
                                                            if (
                                                                input.charCodeAt(
                                                                    peg$currPos
                                                                ) === 125
                                                            ) {
                                                                s13 = peg$c218
                                                                peg$currPos++
                                                            } else {
                                                                s13 = peg$FAILED
                                                                if (
                                                                    peg$silentFails ===
                                                                    0
                                                                ) {
                                                                    peg$fail(
                                                                        peg$c219
                                                                    )
                                                                }
                                                            }
                                                            if (
                                                                s13 !==
                                                                peg$FAILED
                                                            ) {
                                                                peg$savedPos = s0
                                                                s1 = peg$c243(
                                                                    s3,
                                                                    s11
                                                                )
                                                                s0 = s1
                                                            } else {
                                                                peg$currPos = s0
                                                                s0 = peg$FAILED
                                                            }
                                                        } else {
                                                            peg$currPos = s0
                                                            s0 = peg$FAILED
                                                        }
                                                    } else {
                                                        peg$currPos = s0
                                                        s0 = peg$FAILED
                                                    }
                                                } else {
                                                    peg$currPos = s0
                                                    s0 = peg$FAILED
                                                }
                                            } else {
                                                peg$currPos = s0
                                                s0 = peg$FAILED
                                            }
                                        } else {
                                            peg$currPos = s0
                                            s0 = peg$FAILED
                                        }
                                    } else {
                                        peg$currPos = s0
                                        s0 = peg$FAILED
                                    }
                                } else {
                                    peg$currPos = s0
                                    s0 = peg$FAILED
                                }
                            } else {
                                peg$currPos = s0
                                s0 = peg$FAILED
                            }
                        } else {
                            peg$currPos = s0
                            s0 = peg$FAILED
                        }
                    } else {
                        peg$currPos = s0
                        s0 = peg$FAILED
                    }
                } else {
                    peg$currPos = s0
                    s0 = peg$FAILED
                }
            } else {
                peg$currPos = s0
                s0 = peg$FAILED
            }
            if (s0 === peg$FAILED) {
                s0 = peg$currPos
                s1 = peg$parseSetToken()
                if (s1 !== peg$FAILED) {
                    s2 = peg$parse__()
                    if (s2 !== peg$FAILED) {
                        s3 = peg$parsePropertyName()
                        if (s3 !== peg$FAILED) {
                            s4 = peg$parse__()
                            if (s4 !== peg$FAILED) {
                                if (input.charCodeAt(peg$currPos) === 40) {
                                    s5 = peg$c221
                                    peg$currPos++
                                } else {
                                    s5 = peg$FAILED
                                    if (peg$silentFails === 0) {
                                        peg$fail(peg$c222)
                                    }
                                }
                                if (s5 !== peg$FAILED) {
                                    s6 = peg$parse__()
                                    if (s6 !== peg$FAILED) {
                                        s7 = peg$parsePropertySetParameterList()
                                        if (s7 !== peg$FAILED) {
                                            s8 = peg$parse__()
                                            if (s8 !== peg$FAILED) {
                                                if (
                                                    input.charCodeAt(
                                                        peg$currPos
                                                    ) === 41
                                                ) {
                                                    s9 = peg$c223
                                                    peg$currPos++
                                                } else {
                                                    s9 = peg$FAILED
                                                    if (peg$silentFails === 0) {
                                                        peg$fail(peg$c224)
                                                    }
                                                }
                                                if (s9 !== peg$FAILED) {
                                                    s10 = peg$parse__()
                                                    if (s10 !== peg$FAILED) {
                                                        if (
                                                            input.charCodeAt(
                                                                peg$currPos
                                                            ) === 123
                                                        ) {
                                                            s11 = peg$c235
                                                            peg$currPos++
                                                        } else {
                                                            s11 = peg$FAILED
                                                            if (
                                                                peg$silentFails ===
                                                                0
                                                            ) {
                                                                peg$fail(
                                                                    peg$c236
                                                                )
                                                            }
                                                        }
                                                        if (
                                                            s11 !== peg$FAILED
                                                        ) {
                                                            s12 = peg$parse__()
                                                            if (
                                                                s12 !==
                                                                peg$FAILED
                                                            ) {
                                                                s13 = peg$parseFunctionBody()
                                                                if (
                                                                    s13 !==
                                                                    peg$FAILED
                                                                ) {
                                                                    s14 = peg$parse__()
                                                                    if (
                                                                        s14 !==
                                                                        peg$FAILED
                                                                    ) {
                                                                        if (
                                                                            input.charCodeAt(
                                                                                peg$currPos
                                                                            ) ===
                                                                            125
                                                                        ) {
                                                                            s15 = peg$c218
                                                                            peg$currPos++
                                                                        } else {
                                                                            s15 = peg$FAILED
                                                                            if (
                                                                                peg$silentFails ===
                                                                                0
                                                                            ) {
                                                                                peg$fail(
                                                                                    peg$c219
                                                                                )
                                                                            }
                                                                        }
                                                                        if (
                                                                            s15 !==
                                                                            peg$FAILED
                                                                        ) {
                                                                            peg$savedPos = s0
                                                                            s1 = peg$c244(
                                                                                s3,
                                                                                s7,
                                                                                s13
                                                                            )
                                                                            s0 = s1
                                                                        } else {
                                                                            peg$currPos = s0
                                                                            s0 = peg$FAILED
                                                                        }
                                                                    } else {
                                                                        peg$currPos = s0
                                                                        s0 = peg$FAILED
                                                                    }
                                                                } else {
                                                                    peg$currPos = s0
                                                                    s0 = peg$FAILED
                                                                }
                                                            } else {
                                                                peg$currPos = s0
                                                                s0 = peg$FAILED
                                                            }
                                                        } else {
                                                            peg$currPos = s0
                                                            s0 = peg$FAILED
                                                        }
                                                    } else {
                                                        peg$currPos = s0
                                                        s0 = peg$FAILED
                                                    }
                                                } else {
                                                    peg$currPos = s0
                                                    s0 = peg$FAILED
                                                }
                                            } else {
                                                peg$currPos = s0
                                                s0 = peg$FAILED
                                            }
                                        } else {
                                            peg$currPos = s0
                                            s0 = peg$FAILED
                                        }
                                    } else {
                                        peg$currPos = s0
                                        s0 = peg$FAILED
                                    }
                                } else {
                                    peg$currPos = s0
                                    s0 = peg$FAILED
                                }
                            } else {
                                peg$currPos = s0
                                s0 = peg$FAILED
                            }
                        } else {
                            peg$currPos = s0
                            s0 = peg$FAILED
                        }
                    } else {
                        peg$currPos = s0
                        s0 = peg$FAILED
                    }
                } else {
                    peg$currPos = s0
                    s0 = peg$FAILED
                }
            }
        }

        return s0
    }

    function peg$parsePropertyName() {
        var s0

        s0 = peg$parseIdentifierName()
        if (s0 === peg$FAILED) {
            s0 = peg$parseStringLiteral()
            if (s0 === peg$FAILED) {
                s0 = peg$parseNumericLiteral()
            }
        }

        return s0
    }

    function peg$parsePropertySetParameterList() {
        var s0, s1

        s0 = peg$currPos
        s1 = peg$parseIdentifier()
        if (s1 !== peg$FAILED) {
            peg$savedPos = s0
            s1 = peg$c245(s1)
        }
        s0 = s1

        return s0
    }

    function peg$parseMemberExpression() {
        var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9

        s0 = peg$currPos
        s1 = peg$parsePrimaryExpression()
        if (s1 === peg$FAILED) {
            s1 = peg$parseFunctionExpression()
            if (s1 === peg$FAILED) {
                s1 = peg$currPos
                s2 = peg$parseNewToken()
                if (s2 !== peg$FAILED) {
                    s3 = peg$parse__()
                    if (s3 !== peg$FAILED) {
                        s4 = peg$parseMemberExpression()
                        if (s4 !== peg$FAILED) {
                            s5 = peg$parse__()
                            if (s5 !== peg$FAILED) {
                                s6 = peg$parseArguments()
                                if (s6 !== peg$FAILED) {
                                    peg$savedPos = s1
                                    s2 = peg$c246(s4, s6)
                                    s1 = s2
                                } else {
                                    peg$currPos = s1
                                    s1 = peg$FAILED
                                }
                            } else {
                                peg$currPos = s1
                                s1 = peg$FAILED
                            }
                        } else {
                            peg$currPos = s1
                            s1 = peg$FAILED
                        }
                    } else {
                        peg$currPos = s1
                        s1 = peg$FAILED
                    }
                } else {
                    peg$currPos = s1
                    s1 = peg$FAILED
                }
            }
        }
        if (s1 !== peg$FAILED) {
            s2 = []
            s3 = peg$currPos
            s4 = peg$parse__()
            if (s4 !== peg$FAILED) {
                if (input.charCodeAt(peg$currPos) === 91) {
                    s5 = peg$c112
                    peg$currPos++
                } else {
                    s5 = peg$FAILED
                    if (peg$silentFails === 0) {
                        peg$fail(peg$c113)
                    }
                }
                if (s5 !== peg$FAILED) {
                    s6 = peg$parse__()
                    if (s6 !== peg$FAILED) {
                        s7 = peg$parseExpression()
                        if (s7 !== peg$FAILED) {
                            s8 = peg$parse__()
                            if (s8 !== peg$FAILED) {
                                if (input.charCodeAt(peg$currPos) === 93) {
                                    s9 = peg$c114
                                    peg$currPos++
                                } else {
                                    s9 = peg$FAILED
                                    if (peg$silentFails === 0) {
                                        peg$fail(peg$c115)
                                    }
                                }
                                if (s9 !== peg$FAILED) {
                                    peg$savedPos = s3
                                    s4 = peg$c247(s1, s7)
                                    s3 = s4
                                } else {
                                    peg$currPos = s3
                                    s3 = peg$FAILED
                                }
                            } else {
                                peg$currPos = s3
                                s3 = peg$FAILED
                            }
                        } else {
                            peg$currPos = s3
                            s3 = peg$FAILED
                        }
                    } else {
                        peg$currPos = s3
                        s3 = peg$FAILED
                    }
                } else {
                    peg$currPos = s3
                    s3 = peg$FAILED
                }
            } else {
                peg$currPos = s3
                s3 = peg$FAILED
            }
            if (s3 === peg$FAILED) {
                s3 = peg$currPos
                s4 = peg$parse__()
                if (s4 !== peg$FAILED) {
                    if (input.charCodeAt(peg$currPos) === 46) {
                        s5 = peg$c54
                        peg$currPos++
                    } else {
                        s5 = peg$FAILED
                        if (peg$silentFails === 0) {
                            peg$fail(peg$c55)
                        }
                    }
                    if (s5 !== peg$FAILED) {
                        s6 = peg$parse__()
                        if (s6 !== peg$FAILED) {
                            s7 = peg$parseIdentifierName()
                            if (s7 !== peg$FAILED) {
                                peg$savedPos = s3
                                s4 = peg$c248(s1, s7)
                                s3 = s4
                            } else {
                                peg$currPos = s3
                                s3 = peg$FAILED
                            }
                        } else {
                            peg$currPos = s3
                            s3 = peg$FAILED
                        }
                    } else {
                        peg$currPos = s3
                        s3 = peg$FAILED
                    }
                } else {
                    peg$currPos = s3
                    s3 = peg$FAILED
                }
            }
            while (s3 !== peg$FAILED) {
                s2.push(s3)
                s3 = peg$currPos
                s4 = peg$parse__()
                if (s4 !== peg$FAILED) {
                    if (input.charCodeAt(peg$currPos) === 91) {
                        s5 = peg$c112
                        peg$currPos++
                    } else {
                        s5 = peg$FAILED
                        if (peg$silentFails === 0) {
                            peg$fail(peg$c113)
                        }
                    }
                    if (s5 !== peg$FAILED) {
                        s6 = peg$parse__()
                        if (s6 !== peg$FAILED) {
                            s7 = peg$parseExpression()
                            if (s7 !== peg$FAILED) {
                                s8 = peg$parse__()
                                if (s8 !== peg$FAILED) {
                                    if (input.charCodeAt(peg$currPos) === 93) {
                                        s9 = peg$c114
                                        peg$currPos++
                                    } else {
                                        s9 = peg$FAILED
                                        if (peg$silentFails === 0) {
                                            peg$fail(peg$c115)
                                        }
                                    }
                                    if (s9 !== peg$FAILED) {
                                        peg$savedPos = s3
                                        s4 = peg$c247(s1, s7)
                                        s3 = s4
                                    } else {
                                        peg$currPos = s3
                                        s3 = peg$FAILED
                                    }
                                } else {
                                    peg$currPos = s3
                                    s3 = peg$FAILED
                                }
                            } else {
                                peg$currPos = s3
                                s3 = peg$FAILED
                            }
                        } else {
                            peg$currPos = s3
                            s3 = peg$FAILED
                        }
                    } else {
                        peg$currPos = s3
                        s3 = peg$FAILED
                    }
                } else {
                    peg$currPos = s3
                    s3 = peg$FAILED
                }
                if (s3 === peg$FAILED) {
                    s3 = peg$currPos
                    s4 = peg$parse__()
                    if (s4 !== peg$FAILED) {
                        if (input.charCodeAt(peg$currPos) === 46) {
                            s5 = peg$c54
                            peg$currPos++
                        } else {
                            s5 = peg$FAILED
                            if (peg$silentFails === 0) {
                                peg$fail(peg$c55)
                            }
                        }
                        if (s5 !== peg$FAILED) {
                            s6 = peg$parse__()
                            if (s6 !== peg$FAILED) {
                                s7 = peg$parseIdentifierName()
                                if (s7 !== peg$FAILED) {
                                    peg$savedPos = s3
                                    s4 = peg$c248(s1, s7)
                                    s3 = s4
                                } else {
                                    peg$currPos = s3
                                    s3 = peg$FAILED
                                }
                            } else {
                                peg$currPos = s3
                                s3 = peg$FAILED
                            }
                        } else {
                            peg$currPos = s3
                            s3 = peg$FAILED
                        }
                    } else {
                        peg$currPos = s3
                        s3 = peg$FAILED
                    }
                }
            }
            if (s2 !== peg$FAILED) {
                peg$savedPos = s0
                s1 = peg$c249(s1, s2)
                s0 = s1
            } else {
                peg$currPos = s0
                s0 = peg$FAILED
            }
        } else {
            peg$currPos = s0
            s0 = peg$FAILED
        }

        return s0
    }

    function peg$parseNewExpression() {
        var s0, s1, s2, s3

        s0 = peg$parseMemberExpression()
        if (s0 === peg$FAILED) {
            s0 = peg$currPos
            s1 = peg$parseNewToken()
            if (s1 !== peg$FAILED) {
                s2 = peg$parse__()
                if (s2 !== peg$FAILED) {
                    s3 = peg$parseNewExpression()
                    if (s3 !== peg$FAILED) {
                        peg$savedPos = s0
                        s1 = peg$c250(s3)
                        s0 = s1
                    } else {
                        peg$currPos = s0
                        s0 = peg$FAILED
                    }
                } else {
                    peg$currPos = s0
                    s0 = peg$FAILED
                }
            } else {
                peg$currPos = s0
                s0 = peg$FAILED
            }
        }

        return s0
    }

    function peg$parseCallExpression() {
        var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9

        s0 = peg$currPos
        s1 = peg$currPos
        s2 = peg$parseMemberExpression()
        if (s2 !== peg$FAILED) {
            s3 = peg$parse__()
            if (s3 !== peg$FAILED) {
                s4 = peg$parseArguments()
                if (s4 !== peg$FAILED) {
                    peg$savedPos = s1
                    s2 = peg$c251(s2, s4)
                    s1 = s2
                } else {
                    peg$currPos = s1
                    s1 = peg$FAILED
                }
            } else {
                peg$currPos = s1
                s1 = peg$FAILED
            }
        } else {
            peg$currPos = s1
            s1 = peg$FAILED
        }
        if (s1 !== peg$FAILED) {
            s2 = []
            s3 = peg$currPos
            s4 = peg$parse__()
            if (s4 !== peg$FAILED) {
                s5 = peg$parseArguments()
                if (s5 !== peg$FAILED) {
                    peg$savedPos = s3
                    s4 = peg$c252(s1, s5)
                    s3 = s4
                } else {
                    peg$currPos = s3
                    s3 = peg$FAILED
                }
            } else {
                peg$currPos = s3
                s3 = peg$FAILED
            }
            if (s3 === peg$FAILED) {
                s3 = peg$currPos
                s4 = peg$parse__()
                if (s4 !== peg$FAILED) {
                    if (input.charCodeAt(peg$currPos) === 91) {
                        s5 = peg$c112
                        peg$currPos++
                    } else {
                        s5 = peg$FAILED
                        if (peg$silentFails === 0) {
                            peg$fail(peg$c113)
                        }
                    }
                    if (s5 !== peg$FAILED) {
                        s6 = peg$parse__()
                        if (s6 !== peg$FAILED) {
                            s7 = peg$parseExpression()
                            if (s7 !== peg$FAILED) {
                                s8 = peg$parse__()
                                if (s8 !== peg$FAILED) {
                                    if (input.charCodeAt(peg$currPos) === 93) {
                                        s9 = peg$c114
                                        peg$currPos++
                                    } else {
                                        s9 = peg$FAILED
                                        if (peg$silentFails === 0) {
                                            peg$fail(peg$c115)
                                        }
                                    }
                                    if (s9 !== peg$FAILED) {
                                        peg$savedPos = s3
                                        s4 = peg$c253(s1, s7)
                                        s3 = s4
                                    } else {
                                        peg$currPos = s3
                                        s3 = peg$FAILED
                                    }
                                } else {
                                    peg$currPos = s3
                                    s3 = peg$FAILED
                                }
                            } else {
                                peg$currPos = s3
                                s3 = peg$FAILED
                            }
                        } else {
                            peg$currPos = s3
                            s3 = peg$FAILED
                        }
                    } else {
                        peg$currPos = s3
                        s3 = peg$FAILED
                    }
                } else {
                    peg$currPos = s3
                    s3 = peg$FAILED
                }
                if (s3 === peg$FAILED) {
                    s3 = peg$currPos
                    s4 = peg$parse__()
                    if (s4 !== peg$FAILED) {
                        if (input.charCodeAt(peg$currPos) === 46) {
                            s5 = peg$c54
                            peg$currPos++
                        } else {
                            s5 = peg$FAILED
                            if (peg$silentFails === 0) {
                                peg$fail(peg$c55)
                            }
                        }
                        if (s5 !== peg$FAILED) {
                            s6 = peg$parse__()
                            if (s6 !== peg$FAILED) {
                                s7 = peg$parseIdentifierName()
                                if (s7 !== peg$FAILED) {
                                    peg$savedPos = s3
                                    s4 = peg$c254(s1, s7)
                                    s3 = s4
                                } else {
                                    peg$currPos = s3
                                    s3 = peg$FAILED
                                }
                            } else {
                                peg$currPos = s3
                                s3 = peg$FAILED
                            }
                        } else {
                            peg$currPos = s3
                            s3 = peg$FAILED
                        }
                    } else {
                        peg$currPos = s3
                        s3 = peg$FAILED
                    }
                }
            }
            while (s3 !== peg$FAILED) {
                s2.push(s3)
                s3 = peg$currPos
                s4 = peg$parse__()
                if (s4 !== peg$FAILED) {
                    s5 = peg$parseArguments()
                    if (s5 !== peg$FAILED) {
                        peg$savedPos = s3
                        s4 = peg$c252(s1, s5)
                        s3 = s4
                    } else {
                        peg$currPos = s3
                        s3 = peg$FAILED
                    }
                } else {
                    peg$currPos = s3
                    s3 = peg$FAILED
                }
                if (s3 === peg$FAILED) {
                    s3 = peg$currPos
                    s4 = peg$parse__()
                    if (s4 !== peg$FAILED) {
                        if (input.charCodeAt(peg$currPos) === 91) {
                            s5 = peg$c112
                            peg$currPos++
                        } else {
                            s5 = peg$FAILED
                            if (peg$silentFails === 0) {
                                peg$fail(peg$c113)
                            }
                        }
                        if (s5 !== peg$FAILED) {
                            s6 = peg$parse__()
                            if (s6 !== peg$FAILED) {
                                s7 = peg$parseExpression()
                                if (s7 !== peg$FAILED) {
                                    s8 = peg$parse__()
                                    if (s8 !== peg$FAILED) {
                                        if (
                                            input.charCodeAt(peg$currPos) === 93
                                        ) {
                                            s9 = peg$c114
                                            peg$currPos++
                                        } else {
                                            s9 = peg$FAILED
                                            if (peg$silentFails === 0) {
                                                peg$fail(peg$c115)
                                            }
                                        }
                                        if (s9 !== peg$FAILED) {
                                            peg$savedPos = s3
                                            s4 = peg$c253(s1, s7)
                                            s3 = s4
                                        } else {
                                            peg$currPos = s3
                                            s3 = peg$FAILED
                                        }
                                    } else {
                                        peg$currPos = s3
                                        s3 = peg$FAILED
                                    }
                                } else {
                                    peg$currPos = s3
                                    s3 = peg$FAILED
                                }
                            } else {
                                peg$currPos = s3
                                s3 = peg$FAILED
                            }
                        } else {
                            peg$currPos = s3
                            s3 = peg$FAILED
                        }
                    } else {
                        peg$currPos = s3
                        s3 = peg$FAILED
                    }
                    if (s3 === peg$FAILED) {
                        s3 = peg$currPos
                        s4 = peg$parse__()
                        if (s4 !== peg$FAILED) {
                            if (input.charCodeAt(peg$currPos) === 46) {
                                s5 = peg$c54
                                peg$currPos++
                            } else {
                                s5 = peg$FAILED
                                if (peg$silentFails === 0) {
                                    peg$fail(peg$c55)
                                }
                            }
                            if (s5 !== peg$FAILED) {
                                s6 = peg$parse__()
                                if (s6 !== peg$FAILED) {
                                    s7 = peg$parseIdentifierName()
                                    if (s7 !== peg$FAILED) {
                                        peg$savedPos = s3
                                        s4 = peg$c254(s1, s7)
                                        s3 = s4
                                    } else {
                                        peg$currPos = s3
                                        s3 = peg$FAILED
                                    }
                                } else {
                                    peg$currPos = s3
                                    s3 = peg$FAILED
                                }
                            } else {
                                peg$currPos = s3
                                s3 = peg$FAILED
                            }
                        } else {
                            peg$currPos = s3
                            s3 = peg$FAILED
                        }
                    }
                }
            }
            if (s2 !== peg$FAILED) {
                peg$savedPos = s0
                s1 = peg$c255(s1, s2)
                s0 = s1
            } else {
                peg$currPos = s0
                s0 = peg$FAILED
            }
        } else {
            peg$currPos = s0
            s0 = peg$FAILED
        }

        return s0
    }

    function peg$parseArguments() {
        var s0, s1, s2, s3, s4, s5

        s0 = peg$currPos
        if (input.charCodeAt(peg$currPos) === 40) {
            s1 = peg$c221
            peg$currPos++
        } else {
            s1 = peg$FAILED
            if (peg$silentFails === 0) {
                peg$fail(peg$c222)
            }
        }
        if (s1 !== peg$FAILED) {
            s2 = peg$parse__()
            if (s2 !== peg$FAILED) {
                s3 = peg$currPos
                s4 = peg$parseArgumentList()
                if (s4 !== peg$FAILED) {
                    s5 = peg$parse__()
                    if (s5 !== peg$FAILED) {
                        s4 = [s4, s5]
                        s3 = s4
                    } else {
                        peg$currPos = s3
                        s3 = peg$FAILED
                    }
                } else {
                    peg$currPos = s3
                    s3 = peg$FAILED
                }
                if (s3 === peg$FAILED) {
                    s3 = null
                }
                if (s3 !== peg$FAILED) {
                    if (input.charCodeAt(peg$currPos) === 41) {
                        s4 = peg$c223
                        peg$currPos++
                    } else {
                        s4 = peg$FAILED
                        if (peg$silentFails === 0) {
                            peg$fail(peg$c224)
                        }
                    }
                    if (s4 !== peg$FAILED) {
                        peg$savedPos = s0
                        s1 = peg$c256(s3)
                        s0 = s1
                    } else {
                        peg$currPos = s0
                        s0 = peg$FAILED
                    }
                } else {
                    peg$currPos = s0
                    s0 = peg$FAILED
                }
            } else {
                peg$currPos = s0
                s0 = peg$FAILED
            }
        } else {
            peg$currPos = s0
            s0 = peg$FAILED
        }

        return s0
    }

    function peg$parseArgumentList() {
        var s0, s1, s2, s3, s4, s5, s6, s7

        s0 = peg$currPos
        s1 = peg$parseAssignmentExpression()
        if (s1 !== peg$FAILED) {
            s2 = []
            s3 = peg$currPos
            s4 = peg$parse__()
            if (s4 !== peg$FAILED) {
                if (input.charCodeAt(peg$currPos) === 44) {
                    s5 = peg$c228
                    peg$currPos++
                } else {
                    s5 = peg$FAILED
                    if (peg$silentFails === 0) {
                        peg$fail(peg$c229)
                    }
                }
                if (s5 !== peg$FAILED) {
                    s6 = peg$parse__()
                    if (s6 !== peg$FAILED) {
                        s7 = peg$parseAssignmentExpression()
                        if (s7 !== peg$FAILED) {
                            s4 = [s4, s5, s6, s7]
                            s3 = s4
                        } else {
                            peg$currPos = s3
                            s3 = peg$FAILED
                        }
                    } else {
                        peg$currPos = s3
                        s3 = peg$FAILED
                    }
                } else {
                    peg$currPos = s3
                    s3 = peg$FAILED
                }
            } else {
                peg$currPos = s3
                s3 = peg$FAILED
            }
            while (s3 !== peg$FAILED) {
                s2.push(s3)
                s3 = peg$currPos
                s4 = peg$parse__()
                if (s4 !== peg$FAILED) {
                    if (input.charCodeAt(peg$currPos) === 44) {
                        s5 = peg$c228
                        peg$currPos++
                    } else {
                        s5 = peg$FAILED
                        if (peg$silentFails === 0) {
                            peg$fail(peg$c229)
                        }
                    }
                    if (s5 !== peg$FAILED) {
                        s6 = peg$parse__()
                        if (s6 !== peg$FAILED) {
                            s7 = peg$parseAssignmentExpression()
                            if (s7 !== peg$FAILED) {
                                s4 = [s4, s5, s6, s7]
                                s3 = s4
                            } else {
                                peg$currPos = s3
                                s3 = peg$FAILED
                            }
                        } else {
                            peg$currPos = s3
                            s3 = peg$FAILED
                        }
                    } else {
                        peg$currPos = s3
                        s3 = peg$FAILED
                    }
                } else {
                    peg$currPos = s3
                    s3 = peg$FAILED
                }
            }
            if (s2 !== peg$FAILED) {
                peg$savedPos = s0
                s1 = peg$c239(s1, s2)
                s0 = s1
            } else {
                peg$currPos = s0
                s0 = peg$FAILED
            }
        } else {
            peg$currPos = s0
            s0 = peg$FAILED
        }

        return s0
    }

    function peg$parseLeftHandSideExpression() {
        var s0

        s0 = peg$parseCallExpression()
        if (s0 === peg$FAILED) {
            s0 = peg$parseNewExpression()
        }

        return s0
    }

    function peg$parsePostfixExpression() {
        var s0, s1, s2, s3

        s0 = peg$currPos
        s1 = peg$parseLeftHandSideExpression()
        if (s1 !== peg$FAILED) {
            s2 = peg$parse_()
            if (s2 !== peg$FAILED) {
                s3 = peg$parsePostfixOperator()
                if (s3 !== peg$FAILED) {
                    peg$savedPos = s0
                    s1 = peg$c257(s1, s3)
                    s0 = s1
                } else {
                    peg$currPos = s0
                    s0 = peg$FAILED
                }
            } else {
                peg$currPos = s0
                s0 = peg$FAILED
            }
        } else {
            peg$currPos = s0
            s0 = peg$FAILED
        }
        if (s0 === peg$FAILED) {
            s0 = peg$parseLeftHandSideExpression()
        }

        return s0
    }

    function peg$parsePostfixOperator() {
        var s0

        if (input.substr(peg$currPos, 2) === peg$c258) {
            s0 = peg$c258
            peg$currPos += 2
        } else {
            s0 = peg$FAILED
            if (peg$silentFails === 0) {
                peg$fail(peg$c259)
            }
        }
        if (s0 === peg$FAILED) {
            if (input.substr(peg$currPos, 2) === peg$c260) {
                s0 = peg$c260
                peg$currPos += 2
            } else {
                s0 = peg$FAILED
                if (peg$silentFails === 0) {
                    peg$fail(peg$c261)
                }
            }
        }

        return s0
    }

    function peg$parseUnaryExpression() {
        var s0, s1, s2, s3

        s0 = peg$parsePostfixExpression()
        if (s0 === peg$FAILED) {
            s0 = peg$currPos
            s1 = peg$parseUnaryOperator()
            if (s1 !== peg$FAILED) {
                s2 = peg$parse__()
                if (s2 !== peg$FAILED) {
                    s3 = peg$parseUnaryExpression()
                    if (s3 !== peg$FAILED) {
                        peg$savedPos = s0
                        s1 = peg$c262(s1, s3)
                        s0 = s1
                    } else {
                        peg$currPos = s0
                        s0 = peg$FAILED
                    }
                } else {
                    peg$currPos = s0
                    s0 = peg$FAILED
                }
            } else {
                peg$currPos = s0
                s0 = peg$FAILED
            }
        }

        return s0
    }

    function peg$parseUnaryOperator() {
        var s0, s1, s2, s3, s4

        s0 = peg$currPos
        s1 = peg$parseDeleteToken()
        if (s1 !== peg$FAILED) {
            s0 = input.substring(s0, peg$currPos)
        } else {
            s0 = s1
        }
        if (s0 === peg$FAILED) {
            s0 = peg$currPos
            s1 = peg$parseVoidToken()
            if (s1 !== peg$FAILED) {
                s0 = input.substring(s0, peg$currPos)
            } else {
                s0 = s1
            }
            if (s0 === peg$FAILED) {
                s0 = peg$currPos
                s1 = peg$parseTypeofToken()
                if (s1 !== peg$FAILED) {
                    s0 = input.substring(s0, peg$currPos)
                } else {
                    s0 = s1
                }
                if (s0 === peg$FAILED) {
                    if (input.substr(peg$currPos, 2) === peg$c258) {
                        s0 = peg$c258
                        peg$currPos += 2
                    } else {
                        s0 = peg$FAILED
                        if (peg$silentFails === 0) {
                            peg$fail(peg$c259)
                        }
                    }
                    if (s0 === peg$FAILED) {
                        if (input.substr(peg$currPos, 2) === peg$c260) {
                            s0 = peg$c260
                            peg$currPos += 2
                        } else {
                            s0 = peg$FAILED
                            if (peg$silentFails === 0) {
                                peg$fail(peg$c261)
                            }
                        }
                        if (s0 === peg$FAILED) {
                            s0 = peg$currPos
                            s1 = peg$currPos
                            if (input.charCodeAt(peg$currPos) === 43) {
                                s2 = peg$c263
                                peg$currPos++
                            } else {
                                s2 = peg$FAILED
                                if (peg$silentFails === 0) {
                                    peg$fail(peg$c264)
                                }
                            }
                            if (s2 !== peg$FAILED) {
                                s3 = peg$currPos
                                peg$silentFails++
                                if (input.charCodeAt(peg$currPos) === 61) {
                                    s4 = peg$c265
                                    peg$currPos++
                                } else {
                                    s4 = peg$FAILED
                                    if (peg$silentFails === 0) {
                                        peg$fail(peg$c266)
                                    }
                                }
                                peg$silentFails--
                                if (s4 === peg$FAILED) {
                                    s3 = void 0
                                } else {
                                    peg$currPos = s3
                                    s3 = peg$FAILED
                                }
                                if (s3 !== peg$FAILED) {
                                    s2 = [s2, s3]
                                    s1 = s2
                                } else {
                                    peg$currPos = s1
                                    s1 = peg$FAILED
                                }
                            } else {
                                peg$currPos = s1
                                s1 = peg$FAILED
                            }
                            if (s1 !== peg$FAILED) {
                                s0 = input.substring(s0, peg$currPos)
                            } else {
                                s0 = s1
                            }
                            if (s0 === peg$FAILED) {
                                s0 = peg$currPos
                                s1 = peg$currPos
                                if (input.charCodeAt(peg$currPos) === 45) {
                                    s2 = peg$c267
                                    peg$currPos++
                                } else {
                                    s2 = peg$FAILED
                                    if (peg$silentFails === 0) {
                                        peg$fail(peg$c268)
                                    }
                                }
                                if (s2 !== peg$FAILED) {
                                    s3 = peg$currPos
                                    peg$silentFails++
                                    if (input.charCodeAt(peg$currPos) === 61) {
                                        s4 = peg$c265
                                        peg$currPos++
                                    } else {
                                        s4 = peg$FAILED
                                        if (peg$silentFails === 0) {
                                            peg$fail(peg$c266)
                                        }
                                    }
                                    peg$silentFails--
                                    if (s4 === peg$FAILED) {
                                        s3 = void 0
                                    } else {
                                        peg$currPos = s3
                                        s3 = peg$FAILED
                                    }
                                    if (s3 !== peg$FAILED) {
                                        s2 = [s2, s3]
                                        s1 = s2
                                    } else {
                                        peg$currPos = s1
                                        s1 = peg$FAILED
                                    }
                                } else {
                                    peg$currPos = s1
                                    s1 = peg$FAILED
                                }
                                if (s1 !== peg$FAILED) {
                                    s0 = input.substring(s0, peg$currPos)
                                } else {
                                    s0 = s1
                                }
                                if (s0 === peg$FAILED) {
                                    if (input.charCodeAt(peg$currPos) === 126) {
                                        s0 = peg$c269
                                        peg$currPos++
                                    } else {
                                        s0 = peg$FAILED
                                        if (peg$silentFails === 0) {
                                            peg$fail(peg$c270)
                                        }
                                    }
                                    if (s0 === peg$FAILED) {
                                        if (
                                            input.charCodeAt(peg$currPos) === 33
                                        ) {
                                            s0 = peg$c271
                                            peg$currPos++
                                        } else {
                                            s0 = peg$FAILED
                                            if (peg$silentFails === 0) {
                                                peg$fail(peg$c272)
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }

        return s0
    }

    function peg$parseMultiplicativeExpression() {
        var s0, s1, s2, s3, s4, s5, s6, s7

        s0 = peg$currPos
        s1 = peg$parseUnaryExpression()
        if (s1 !== peg$FAILED) {
            s2 = []
            s3 = peg$currPos
            s4 = peg$parse__()
            if (s4 !== peg$FAILED) {
                s5 = peg$parseMultiplicativeOperator()
                if (s5 !== peg$FAILED) {
                    s6 = peg$parse__()
                    if (s6 !== peg$FAILED) {
                        s7 = peg$parseUnaryExpression()
                        if (s7 !== peg$FAILED) {
                            s4 = [s4, s5, s6, s7]
                            s3 = s4
                        } else {
                            peg$currPos = s3
                            s3 = peg$FAILED
                        }
                    } else {
                        peg$currPos = s3
                        s3 = peg$FAILED
                    }
                } else {
                    peg$currPos = s3
                    s3 = peg$FAILED
                }
            } else {
                peg$currPos = s3
                s3 = peg$FAILED
            }
            while (s3 !== peg$FAILED) {
                s2.push(s3)
                s3 = peg$currPos
                s4 = peg$parse__()
                if (s4 !== peg$FAILED) {
                    s5 = peg$parseMultiplicativeOperator()
                    if (s5 !== peg$FAILED) {
                        s6 = peg$parse__()
                        if (s6 !== peg$FAILED) {
                            s7 = peg$parseUnaryExpression()
                            if (s7 !== peg$FAILED) {
                                s4 = [s4, s5, s6, s7]
                                s3 = s4
                            } else {
                                peg$currPos = s3
                                s3 = peg$FAILED
                            }
                        } else {
                            peg$currPos = s3
                            s3 = peg$FAILED
                        }
                    } else {
                        peg$currPos = s3
                        s3 = peg$FAILED
                    }
                } else {
                    peg$currPos = s3
                    s3 = peg$FAILED
                }
            }
            if (s2 !== peg$FAILED) {
                peg$savedPos = s0
                s1 = peg$c273(s1, s2)
                s0 = s1
            } else {
                peg$currPos = s0
                s0 = peg$FAILED
            }
        } else {
            peg$currPos = s0
            s0 = peg$FAILED
        }

        return s0
    }

    function peg$parseMultiplicativeOperator() {
        var s0, s1, s2, s3, s4

        s0 = peg$currPos
        s1 = peg$currPos
        if (input.charCodeAt(peg$currPos) === 42) {
            s2 = peg$c274
            peg$currPos++
        } else {
            s2 = peg$FAILED
            if (peg$silentFails === 0) {
                peg$fail(peg$c275)
            }
        }
        if (s2 !== peg$FAILED) {
            s3 = peg$currPos
            peg$silentFails++
            if (input.charCodeAt(peg$currPos) === 61) {
                s4 = peg$c265
                peg$currPos++
            } else {
                s4 = peg$FAILED
                if (peg$silentFails === 0) {
                    peg$fail(peg$c266)
                }
            }
            peg$silentFails--
            if (s4 === peg$FAILED) {
                s3 = void 0
            } else {
                peg$currPos = s3
                s3 = peg$FAILED
            }
            if (s3 !== peg$FAILED) {
                s2 = [s2, s3]
                s1 = s2
            } else {
                peg$currPos = s1
                s1 = peg$FAILED
            }
        } else {
            peg$currPos = s1
            s1 = peg$FAILED
        }
        if (s1 !== peg$FAILED) {
            s0 = input.substring(s0, peg$currPos)
        } else {
            s0 = s1
        }
        if (s0 === peg$FAILED) {
            s0 = peg$currPos
            s1 = peg$currPos
            if (input.charCodeAt(peg$currPos) === 47) {
                s2 = peg$c105
                peg$currPos++
            } else {
                s2 = peg$FAILED
                if (peg$silentFails === 0) {
                    peg$fail(peg$c106)
                }
            }
            if (s2 !== peg$FAILED) {
                s3 = peg$currPos
                peg$silentFails++
                if (input.charCodeAt(peg$currPos) === 61) {
                    s4 = peg$c265
                    peg$currPos++
                } else {
                    s4 = peg$FAILED
                    if (peg$silentFails === 0) {
                        peg$fail(peg$c266)
                    }
                }
                peg$silentFails--
                if (s4 === peg$FAILED) {
                    s3 = void 0
                } else {
                    peg$currPos = s3
                    s3 = peg$FAILED
                }
                if (s3 !== peg$FAILED) {
                    s2 = [s2, s3]
                    s1 = s2
                } else {
                    peg$currPos = s1
                    s1 = peg$FAILED
                }
            } else {
                peg$currPos = s1
                s1 = peg$FAILED
            }
            if (s1 !== peg$FAILED) {
                s0 = input.substring(s0, peg$currPos)
            } else {
                s0 = s1
            }
            if (s0 === peg$FAILED) {
                s0 = peg$currPos
                s1 = peg$currPos
                if (input.charCodeAt(peg$currPos) === 37) {
                    s2 = peg$c276
                    peg$currPos++
                } else {
                    s2 = peg$FAILED
                    if (peg$silentFails === 0) {
                        peg$fail(peg$c277)
                    }
                }
                if (s2 !== peg$FAILED) {
                    s3 = peg$currPos
                    peg$silentFails++
                    if (input.charCodeAt(peg$currPos) === 61) {
                        s4 = peg$c265
                        peg$currPos++
                    } else {
                        s4 = peg$FAILED
                        if (peg$silentFails === 0) {
                            peg$fail(peg$c266)
                        }
                    }
                    peg$silentFails--
                    if (s4 === peg$FAILED) {
                        s3 = void 0
                    } else {
                        peg$currPos = s3
                        s3 = peg$FAILED
                    }
                    if (s3 !== peg$FAILED) {
                        s2 = [s2, s3]
                        s1 = s2
                    } else {
                        peg$currPos = s1
                        s1 = peg$FAILED
                    }
                } else {
                    peg$currPos = s1
                    s1 = peg$FAILED
                }
                if (s1 !== peg$FAILED) {
                    s0 = input.substring(s0, peg$currPos)
                } else {
                    s0 = s1
                }
            }
        }

        return s0
    }

    function peg$parseAdditiveExpression() {
        var s0, s1, s2, s3, s4, s5, s6, s7

        s0 = peg$currPos
        s1 = peg$parseMultiplicativeExpression()
        if (s1 !== peg$FAILED) {
            s2 = []
            s3 = peg$currPos
            s4 = peg$parse__()
            if (s4 !== peg$FAILED) {
                s5 = peg$parseAdditiveOperator()
                if (s5 !== peg$FAILED) {
                    s6 = peg$parse__()
                    if (s6 !== peg$FAILED) {
                        s7 = peg$parseMultiplicativeExpression()
                        if (s7 !== peg$FAILED) {
                            s4 = [s4, s5, s6, s7]
                            s3 = s4
                        } else {
                            peg$currPos = s3
                            s3 = peg$FAILED
                        }
                    } else {
                        peg$currPos = s3
                        s3 = peg$FAILED
                    }
                } else {
                    peg$currPos = s3
                    s3 = peg$FAILED
                }
            } else {
                peg$currPos = s3
                s3 = peg$FAILED
            }
            while (s3 !== peg$FAILED) {
                s2.push(s3)
                s3 = peg$currPos
                s4 = peg$parse__()
                if (s4 !== peg$FAILED) {
                    s5 = peg$parseAdditiveOperator()
                    if (s5 !== peg$FAILED) {
                        s6 = peg$parse__()
                        if (s6 !== peg$FAILED) {
                            s7 = peg$parseMultiplicativeExpression()
                            if (s7 !== peg$FAILED) {
                                s4 = [s4, s5, s6, s7]
                                s3 = s4
                            } else {
                                peg$currPos = s3
                                s3 = peg$FAILED
                            }
                        } else {
                            peg$currPos = s3
                            s3 = peg$FAILED
                        }
                    } else {
                        peg$currPos = s3
                        s3 = peg$FAILED
                    }
                } else {
                    peg$currPos = s3
                    s3 = peg$FAILED
                }
            }
            if (s2 !== peg$FAILED) {
                peg$savedPos = s0
                s1 = peg$c273(s1, s2)
                s0 = s1
            } else {
                peg$currPos = s0
                s0 = peg$FAILED
            }
        } else {
            peg$currPos = s0
            s0 = peg$FAILED
        }

        return s0
    }

    function peg$parseAdditiveOperator() {
        var s0, s1, s2, s3, s4

        s0 = peg$currPos
        s1 = peg$currPos
        if (input.charCodeAt(peg$currPos) === 43) {
            s2 = peg$c263
            peg$currPos++
        } else {
            s2 = peg$FAILED
            if (peg$silentFails === 0) {
                peg$fail(peg$c264)
            }
        }
        if (s2 !== peg$FAILED) {
            s3 = peg$currPos
            peg$silentFails++
            if (peg$c278.test(input.charAt(peg$currPos))) {
                s4 = input.charAt(peg$currPos)
                peg$currPos++
            } else {
                s4 = peg$FAILED
                if (peg$silentFails === 0) {
                    peg$fail(peg$c279)
                }
            }
            peg$silentFails--
            if (s4 === peg$FAILED) {
                s3 = void 0
            } else {
                peg$currPos = s3
                s3 = peg$FAILED
            }
            if (s3 !== peg$FAILED) {
                s2 = [s2, s3]
                s1 = s2
            } else {
                peg$currPos = s1
                s1 = peg$FAILED
            }
        } else {
            peg$currPos = s1
            s1 = peg$FAILED
        }
        if (s1 !== peg$FAILED) {
            s0 = input.substring(s0, peg$currPos)
        } else {
            s0 = s1
        }
        if (s0 === peg$FAILED) {
            s0 = peg$currPos
            s1 = peg$currPos
            if (input.charCodeAt(peg$currPos) === 45) {
                s2 = peg$c267
                peg$currPos++
            } else {
                s2 = peg$FAILED
                if (peg$silentFails === 0) {
                    peg$fail(peg$c268)
                }
            }
            if (s2 !== peg$FAILED) {
                s3 = peg$currPos
                peg$silentFails++
                if (peg$c280.test(input.charAt(peg$currPos))) {
                    s4 = input.charAt(peg$currPos)
                    peg$currPos++
                } else {
                    s4 = peg$FAILED
                    if (peg$silentFails === 0) {
                        peg$fail(peg$c281)
                    }
                }
                peg$silentFails--
                if (s4 === peg$FAILED) {
                    s3 = void 0
                } else {
                    peg$currPos = s3
                    s3 = peg$FAILED
                }
                if (s3 !== peg$FAILED) {
                    s2 = [s2, s3]
                    s1 = s2
                } else {
                    peg$currPos = s1
                    s1 = peg$FAILED
                }
            } else {
                peg$currPos = s1
                s1 = peg$FAILED
            }
            if (s1 !== peg$FAILED) {
                s0 = input.substring(s0, peg$currPos)
            } else {
                s0 = s1
            }
        }

        return s0
    }

    function peg$parseShiftExpression() {
        var s0, s1, s2, s3, s4, s5, s6, s7

        s0 = peg$currPos
        s1 = peg$parseAdditiveExpression()
        if (s1 !== peg$FAILED) {
            s2 = []
            s3 = peg$currPos
            s4 = peg$parse__()
            if (s4 !== peg$FAILED) {
                s5 = peg$parseShiftOperator()
                if (s5 !== peg$FAILED) {
                    s6 = peg$parse__()
                    if (s6 !== peg$FAILED) {
                        s7 = peg$parseAdditiveExpression()
                        if (s7 !== peg$FAILED) {
                            s4 = [s4, s5, s6, s7]
                            s3 = s4
                        } else {
                            peg$currPos = s3
                            s3 = peg$FAILED
                        }
                    } else {
                        peg$currPos = s3
                        s3 = peg$FAILED
                    }
                } else {
                    peg$currPos = s3
                    s3 = peg$FAILED
                }
            } else {
                peg$currPos = s3
                s3 = peg$FAILED
            }
            while (s3 !== peg$FAILED) {
                s2.push(s3)
                s3 = peg$currPos
                s4 = peg$parse__()
                if (s4 !== peg$FAILED) {
                    s5 = peg$parseShiftOperator()
                    if (s5 !== peg$FAILED) {
                        s6 = peg$parse__()
                        if (s6 !== peg$FAILED) {
                            s7 = peg$parseAdditiveExpression()
                            if (s7 !== peg$FAILED) {
                                s4 = [s4, s5, s6, s7]
                                s3 = s4
                            } else {
                                peg$currPos = s3
                                s3 = peg$FAILED
                            }
                        } else {
                            peg$currPos = s3
                            s3 = peg$FAILED
                        }
                    } else {
                        peg$currPos = s3
                        s3 = peg$FAILED
                    }
                } else {
                    peg$currPos = s3
                    s3 = peg$FAILED
                }
            }
            if (s2 !== peg$FAILED) {
                peg$savedPos = s0
                s1 = peg$c273(s1, s2)
                s0 = s1
            } else {
                peg$currPos = s0
                s0 = peg$FAILED
            }
        } else {
            peg$currPos = s0
            s0 = peg$FAILED
        }

        return s0
    }

    function peg$parseShiftOperator() {
        var s0, s1, s2, s3, s4

        s0 = peg$currPos
        s1 = peg$currPos
        if (input.substr(peg$currPos, 2) === peg$c282) {
            s2 = peg$c282
            peg$currPos += 2
        } else {
            s2 = peg$FAILED
            if (peg$silentFails === 0) {
                peg$fail(peg$c283)
            }
        }
        if (s2 !== peg$FAILED) {
            s3 = peg$currPos
            peg$silentFails++
            if (input.charCodeAt(peg$currPos) === 61) {
                s4 = peg$c265
                peg$currPos++
            } else {
                s4 = peg$FAILED
                if (peg$silentFails === 0) {
                    peg$fail(peg$c266)
                }
            }
            peg$silentFails--
            if (s4 === peg$FAILED) {
                s3 = void 0
            } else {
                peg$currPos = s3
                s3 = peg$FAILED
            }
            if (s3 !== peg$FAILED) {
                s2 = [s2, s3]
                s1 = s2
            } else {
                peg$currPos = s1
                s1 = peg$FAILED
            }
        } else {
            peg$currPos = s1
            s1 = peg$FAILED
        }
        if (s1 !== peg$FAILED) {
            s0 = input.substring(s0, peg$currPos)
        } else {
            s0 = s1
        }
        if (s0 === peg$FAILED) {
            s0 = peg$currPos
            s1 = peg$currPos
            if (input.substr(peg$currPos, 3) === peg$c284) {
                s2 = peg$c284
                peg$currPos += 3
            } else {
                s2 = peg$FAILED
                if (peg$silentFails === 0) {
                    peg$fail(peg$c285)
                }
            }
            if (s2 !== peg$FAILED) {
                s3 = peg$currPos
                peg$silentFails++
                if (input.charCodeAt(peg$currPos) === 61) {
                    s4 = peg$c265
                    peg$currPos++
                } else {
                    s4 = peg$FAILED
                    if (peg$silentFails === 0) {
                        peg$fail(peg$c266)
                    }
                }
                peg$silentFails--
                if (s4 === peg$FAILED) {
                    s3 = void 0
                } else {
                    peg$currPos = s3
                    s3 = peg$FAILED
                }
                if (s3 !== peg$FAILED) {
                    s2 = [s2, s3]
                    s1 = s2
                } else {
                    peg$currPos = s1
                    s1 = peg$FAILED
                }
            } else {
                peg$currPos = s1
                s1 = peg$FAILED
            }
            if (s1 !== peg$FAILED) {
                s0 = input.substring(s0, peg$currPos)
            } else {
                s0 = s1
            }
            if (s0 === peg$FAILED) {
                s0 = peg$currPos
                s1 = peg$currPos
                if (input.substr(peg$currPos, 2) === peg$c286) {
                    s2 = peg$c286
                    peg$currPos += 2
                } else {
                    s2 = peg$FAILED
                    if (peg$silentFails === 0) {
                        peg$fail(peg$c287)
                    }
                }
                if (s2 !== peg$FAILED) {
                    s3 = peg$currPos
                    peg$silentFails++
                    if (input.charCodeAt(peg$currPos) === 61) {
                        s4 = peg$c265
                        peg$currPos++
                    } else {
                        s4 = peg$FAILED
                        if (peg$silentFails === 0) {
                            peg$fail(peg$c266)
                        }
                    }
                    peg$silentFails--
                    if (s4 === peg$FAILED) {
                        s3 = void 0
                    } else {
                        peg$currPos = s3
                        s3 = peg$FAILED
                    }
                    if (s3 !== peg$FAILED) {
                        s2 = [s2, s3]
                        s1 = s2
                    } else {
                        peg$currPos = s1
                        s1 = peg$FAILED
                    }
                } else {
                    peg$currPos = s1
                    s1 = peg$FAILED
                }
                if (s1 !== peg$FAILED) {
                    s0 = input.substring(s0, peg$currPos)
                } else {
                    s0 = s1
                }
            }
        }

        return s0
    }

    function peg$parseRelationalExpression() {
        var s0, s1, s2, s3, s4, s5, s6, s7

        s0 = peg$currPos
        s1 = peg$parseShiftExpression()
        if (s1 !== peg$FAILED) {
            s2 = []
            s3 = peg$currPos
            s4 = peg$parse__()
            if (s4 !== peg$FAILED) {
                s5 = peg$parseRelationalOperator()
                if (s5 !== peg$FAILED) {
                    s6 = peg$parse__()
                    if (s6 !== peg$FAILED) {
                        s7 = peg$parseShiftExpression()
                        if (s7 !== peg$FAILED) {
                            s4 = [s4, s5, s6, s7]
                            s3 = s4
                        } else {
                            peg$currPos = s3
                            s3 = peg$FAILED
                        }
                    } else {
                        peg$currPos = s3
                        s3 = peg$FAILED
                    }
                } else {
                    peg$currPos = s3
                    s3 = peg$FAILED
                }
            } else {
                peg$currPos = s3
                s3 = peg$FAILED
            }
            while (s3 !== peg$FAILED) {
                s2.push(s3)
                s3 = peg$currPos
                s4 = peg$parse__()
                if (s4 !== peg$FAILED) {
                    s5 = peg$parseRelationalOperator()
                    if (s5 !== peg$FAILED) {
                        s6 = peg$parse__()
                        if (s6 !== peg$FAILED) {
                            s7 = peg$parseShiftExpression()
                            if (s7 !== peg$FAILED) {
                                s4 = [s4, s5, s6, s7]
                                s3 = s4
                            } else {
                                peg$currPos = s3
                                s3 = peg$FAILED
                            }
                        } else {
                            peg$currPos = s3
                            s3 = peg$FAILED
                        }
                    } else {
                        peg$currPos = s3
                        s3 = peg$FAILED
                    }
                } else {
                    peg$currPos = s3
                    s3 = peg$FAILED
                }
            }
            if (s2 !== peg$FAILED) {
                peg$savedPos = s0
                s1 = peg$c273(s1, s2)
                s0 = s1
            } else {
                peg$currPos = s0
                s0 = peg$FAILED
            }
        } else {
            peg$currPos = s0
            s0 = peg$FAILED
        }

        return s0
    }

    function peg$parseRelationalOperator() {
        var s0, s1, s2, s3, s4

        if (input.substr(peg$currPos, 2) === peg$c288) {
            s0 = peg$c288
            peg$currPos += 2
        } else {
            s0 = peg$FAILED
            if (peg$silentFails === 0) {
                peg$fail(peg$c289)
            }
        }
        if (s0 === peg$FAILED) {
            if (input.substr(peg$currPos, 2) === peg$c290) {
                s0 = peg$c290
                peg$currPos += 2
            } else {
                s0 = peg$FAILED
                if (peg$silentFails === 0) {
                    peg$fail(peg$c291)
                }
            }
            if (s0 === peg$FAILED) {
                s0 = peg$currPos
                s1 = peg$currPos
                if (input.charCodeAt(peg$currPos) === 60) {
                    s2 = peg$c292
                    peg$currPos++
                } else {
                    s2 = peg$FAILED
                    if (peg$silentFails === 0) {
                        peg$fail(peg$c293)
                    }
                }
                if (s2 !== peg$FAILED) {
                    s3 = peg$currPos
                    peg$silentFails++
                    if (input.charCodeAt(peg$currPos) === 60) {
                        s4 = peg$c292
                        peg$currPos++
                    } else {
                        s4 = peg$FAILED
                        if (peg$silentFails === 0) {
                            peg$fail(peg$c293)
                        }
                    }
                    peg$silentFails--
                    if (s4 === peg$FAILED) {
                        s3 = void 0
                    } else {
                        peg$currPos = s3
                        s3 = peg$FAILED
                    }
                    if (s3 !== peg$FAILED) {
                        s2 = [s2, s3]
                        s1 = s2
                    } else {
                        peg$currPos = s1
                        s1 = peg$FAILED
                    }
                } else {
                    peg$currPos = s1
                    s1 = peg$FAILED
                }
                if (s1 !== peg$FAILED) {
                    s0 = input.substring(s0, peg$currPos)
                } else {
                    s0 = s1
                }
                if (s0 === peg$FAILED) {
                    s0 = peg$currPos
                    s1 = peg$currPos
                    if (input.charCodeAt(peg$currPos) === 62) {
                        s2 = peg$c294
                        peg$currPos++
                    } else {
                        s2 = peg$FAILED
                        if (peg$silentFails === 0) {
                            peg$fail(peg$c295)
                        }
                    }
                    if (s2 !== peg$FAILED) {
                        s3 = peg$currPos
                        peg$silentFails++
                        if (input.charCodeAt(peg$currPos) === 62) {
                            s4 = peg$c294
                            peg$currPos++
                        } else {
                            s4 = peg$FAILED
                            if (peg$silentFails === 0) {
                                peg$fail(peg$c295)
                            }
                        }
                        peg$silentFails--
                        if (s4 === peg$FAILED) {
                            s3 = void 0
                        } else {
                            peg$currPos = s3
                            s3 = peg$FAILED
                        }
                        if (s3 !== peg$FAILED) {
                            s2 = [s2, s3]
                            s1 = s2
                        } else {
                            peg$currPos = s1
                            s1 = peg$FAILED
                        }
                    } else {
                        peg$currPos = s1
                        s1 = peg$FAILED
                    }
                    if (s1 !== peg$FAILED) {
                        s0 = input.substring(s0, peg$currPos)
                    } else {
                        s0 = s1
                    }
                    if (s0 === peg$FAILED) {
                        s0 = peg$currPos
                        s1 = peg$parseInstanceofToken()
                        if (s1 !== peg$FAILED) {
                            s0 = input.substring(s0, peg$currPos)
                        } else {
                            s0 = s1
                        }
                        if (s0 === peg$FAILED) {
                            s0 = peg$currPos
                            s1 = peg$parseInToken()
                            if (s1 !== peg$FAILED) {
                                s0 = input.substring(s0, peg$currPos)
                            } else {
                                s0 = s1
                            }
                        }
                    }
                }
            }
        }

        return s0
    }

    function peg$parseRelationalExpressionNoIn() {
        var s0, s1, s2, s3, s4, s5, s6, s7

        s0 = peg$currPos
        s1 = peg$parseShiftExpression()
        if (s1 !== peg$FAILED) {
            s2 = []
            s3 = peg$currPos
            s4 = peg$parse__()
            if (s4 !== peg$FAILED) {
                s5 = peg$parseRelationalOperatorNoIn()
                if (s5 !== peg$FAILED) {
                    s6 = peg$parse__()
                    if (s6 !== peg$FAILED) {
                        s7 = peg$parseShiftExpression()
                        if (s7 !== peg$FAILED) {
                            s4 = [s4, s5, s6, s7]
                            s3 = s4
                        } else {
                            peg$currPos = s3
                            s3 = peg$FAILED
                        }
                    } else {
                        peg$currPos = s3
                        s3 = peg$FAILED
                    }
                } else {
                    peg$currPos = s3
                    s3 = peg$FAILED
                }
            } else {
                peg$currPos = s3
                s3 = peg$FAILED
            }
            while (s3 !== peg$FAILED) {
                s2.push(s3)
                s3 = peg$currPos
                s4 = peg$parse__()
                if (s4 !== peg$FAILED) {
                    s5 = peg$parseRelationalOperatorNoIn()
                    if (s5 !== peg$FAILED) {
                        s6 = peg$parse__()
                        if (s6 !== peg$FAILED) {
                            s7 = peg$parseShiftExpression()
                            if (s7 !== peg$FAILED) {
                                s4 = [s4, s5, s6, s7]
                                s3 = s4
                            } else {
                                peg$currPos = s3
                                s3 = peg$FAILED
                            }
                        } else {
                            peg$currPos = s3
                            s3 = peg$FAILED
                        }
                    } else {
                        peg$currPos = s3
                        s3 = peg$FAILED
                    }
                } else {
                    peg$currPos = s3
                    s3 = peg$FAILED
                }
            }
            if (s2 !== peg$FAILED) {
                peg$savedPos = s0
                s1 = peg$c273(s1, s2)
                s0 = s1
            } else {
                peg$currPos = s0
                s0 = peg$FAILED
            }
        } else {
            peg$currPos = s0
            s0 = peg$FAILED
        }

        return s0
    }

    function peg$parseRelationalOperatorNoIn() {
        var s0, s1, s2, s3, s4

        if (input.substr(peg$currPos, 2) === peg$c288) {
            s0 = peg$c288
            peg$currPos += 2
        } else {
            s0 = peg$FAILED
            if (peg$silentFails === 0) {
                peg$fail(peg$c289)
            }
        }
        if (s0 === peg$FAILED) {
            if (input.substr(peg$currPos, 2) === peg$c290) {
                s0 = peg$c290
                peg$currPos += 2
            } else {
                s0 = peg$FAILED
                if (peg$silentFails === 0) {
                    peg$fail(peg$c291)
                }
            }
            if (s0 === peg$FAILED) {
                s0 = peg$currPos
                s1 = peg$currPos
                if (input.charCodeAt(peg$currPos) === 60) {
                    s2 = peg$c292
                    peg$currPos++
                } else {
                    s2 = peg$FAILED
                    if (peg$silentFails === 0) {
                        peg$fail(peg$c293)
                    }
                }
                if (s2 !== peg$FAILED) {
                    s3 = peg$currPos
                    peg$silentFails++
                    if (input.charCodeAt(peg$currPos) === 60) {
                        s4 = peg$c292
                        peg$currPos++
                    } else {
                        s4 = peg$FAILED
                        if (peg$silentFails === 0) {
                            peg$fail(peg$c293)
                        }
                    }
                    peg$silentFails--
                    if (s4 === peg$FAILED) {
                        s3 = void 0
                    } else {
                        peg$currPos = s3
                        s3 = peg$FAILED
                    }
                    if (s3 !== peg$FAILED) {
                        s2 = [s2, s3]
                        s1 = s2
                    } else {
                        peg$currPos = s1
                        s1 = peg$FAILED
                    }
                } else {
                    peg$currPos = s1
                    s1 = peg$FAILED
                }
                if (s1 !== peg$FAILED) {
                    s0 = input.substring(s0, peg$currPos)
                } else {
                    s0 = s1
                }
                if (s0 === peg$FAILED) {
                    s0 = peg$currPos
                    s1 = peg$currPos
                    if (input.charCodeAt(peg$currPos) === 62) {
                        s2 = peg$c294
                        peg$currPos++
                    } else {
                        s2 = peg$FAILED
                        if (peg$silentFails === 0) {
                            peg$fail(peg$c295)
                        }
                    }
                    if (s2 !== peg$FAILED) {
                        s3 = peg$currPos
                        peg$silentFails++
                        if (input.charCodeAt(peg$currPos) === 62) {
                            s4 = peg$c294
                            peg$currPos++
                        } else {
                            s4 = peg$FAILED
                            if (peg$silentFails === 0) {
                                peg$fail(peg$c295)
                            }
                        }
                        peg$silentFails--
                        if (s4 === peg$FAILED) {
                            s3 = void 0
                        } else {
                            peg$currPos = s3
                            s3 = peg$FAILED
                        }
                        if (s3 !== peg$FAILED) {
                            s2 = [s2, s3]
                            s1 = s2
                        } else {
                            peg$currPos = s1
                            s1 = peg$FAILED
                        }
                    } else {
                        peg$currPos = s1
                        s1 = peg$FAILED
                    }
                    if (s1 !== peg$FAILED) {
                        s0 = input.substring(s0, peg$currPos)
                    } else {
                        s0 = s1
                    }
                    if (s0 === peg$FAILED) {
                        s0 = peg$currPos
                        s1 = peg$parseInstanceofToken()
                        if (s1 !== peg$FAILED) {
                            s0 = input.substring(s0, peg$currPos)
                        } else {
                            s0 = s1
                        }
                    }
                }
            }
        }

        return s0
    }

    function peg$parseEqualityExpression() {
        var s0, s1, s2, s3, s4, s5, s6, s7

        s0 = peg$currPos
        s1 = peg$parseRelationalExpression()
        if (s1 !== peg$FAILED) {
            s2 = []
            s3 = peg$currPos
            s4 = peg$parse__()
            if (s4 !== peg$FAILED) {
                s5 = peg$parseEqualityOperator()
                if (s5 !== peg$FAILED) {
                    s6 = peg$parse__()
                    if (s6 !== peg$FAILED) {
                        s7 = peg$parseRelationalExpression()
                        if (s7 !== peg$FAILED) {
                            s4 = [s4, s5, s6, s7]
                            s3 = s4
                        } else {
                            peg$currPos = s3
                            s3 = peg$FAILED
                        }
                    } else {
                        peg$currPos = s3
                        s3 = peg$FAILED
                    }
                } else {
                    peg$currPos = s3
                    s3 = peg$FAILED
                }
            } else {
                peg$currPos = s3
                s3 = peg$FAILED
            }
            while (s3 !== peg$FAILED) {
                s2.push(s3)
                s3 = peg$currPos
                s4 = peg$parse__()
                if (s4 !== peg$FAILED) {
                    s5 = peg$parseEqualityOperator()
                    if (s5 !== peg$FAILED) {
                        s6 = peg$parse__()
                        if (s6 !== peg$FAILED) {
                            s7 = peg$parseRelationalExpression()
                            if (s7 !== peg$FAILED) {
                                s4 = [s4, s5, s6, s7]
                                s3 = s4
                            } else {
                                peg$currPos = s3
                                s3 = peg$FAILED
                            }
                        } else {
                            peg$currPos = s3
                            s3 = peg$FAILED
                        }
                    } else {
                        peg$currPos = s3
                        s3 = peg$FAILED
                    }
                } else {
                    peg$currPos = s3
                    s3 = peg$FAILED
                }
            }
            if (s2 !== peg$FAILED) {
                peg$savedPos = s0
                s1 = peg$c273(s1, s2)
                s0 = s1
            } else {
                peg$currPos = s0
                s0 = peg$FAILED
            }
        } else {
            peg$currPos = s0
            s0 = peg$FAILED
        }

        return s0
    }

    function peg$parseEqualityExpressionNoIn() {
        var s0, s1, s2, s3, s4, s5, s6, s7

        s0 = peg$currPos
        s1 = peg$parseRelationalExpressionNoIn()
        if (s1 !== peg$FAILED) {
            s2 = []
            s3 = peg$currPos
            s4 = peg$parse__()
            if (s4 !== peg$FAILED) {
                s5 = peg$parseEqualityOperator()
                if (s5 !== peg$FAILED) {
                    s6 = peg$parse__()
                    if (s6 !== peg$FAILED) {
                        s7 = peg$parseRelationalExpressionNoIn()
                        if (s7 !== peg$FAILED) {
                            s4 = [s4, s5, s6, s7]
                            s3 = s4
                        } else {
                            peg$currPos = s3
                            s3 = peg$FAILED
                        }
                    } else {
                        peg$currPos = s3
                        s3 = peg$FAILED
                    }
                } else {
                    peg$currPos = s3
                    s3 = peg$FAILED
                }
            } else {
                peg$currPos = s3
                s3 = peg$FAILED
            }
            while (s3 !== peg$FAILED) {
                s2.push(s3)
                s3 = peg$currPos
                s4 = peg$parse__()
                if (s4 !== peg$FAILED) {
                    s5 = peg$parseEqualityOperator()
                    if (s5 !== peg$FAILED) {
                        s6 = peg$parse__()
                        if (s6 !== peg$FAILED) {
                            s7 = peg$parseRelationalExpressionNoIn()
                            if (s7 !== peg$FAILED) {
                                s4 = [s4, s5, s6, s7]
                                s3 = s4
                            } else {
                                peg$currPos = s3
                                s3 = peg$FAILED
                            }
                        } else {
                            peg$currPos = s3
                            s3 = peg$FAILED
                        }
                    } else {
                        peg$currPos = s3
                        s3 = peg$FAILED
                    }
                } else {
                    peg$currPos = s3
                    s3 = peg$FAILED
                }
            }
            if (s2 !== peg$FAILED) {
                peg$savedPos = s0
                s1 = peg$c273(s1, s2)
                s0 = s1
            } else {
                peg$currPos = s0
                s0 = peg$FAILED
            }
        } else {
            peg$currPos = s0
            s0 = peg$FAILED
        }

        return s0
    }

    function peg$parseEqualityOperator() {
        var s0

        if (input.substr(peg$currPos, 3) === peg$c296) {
            s0 = peg$c296
            peg$currPos += 3
        } else {
            s0 = peg$FAILED
            if (peg$silentFails === 0) {
                peg$fail(peg$c297)
            }
        }
        if (s0 === peg$FAILED) {
            if (input.substr(peg$currPos, 3) === peg$c298) {
                s0 = peg$c298
                peg$currPos += 3
            } else {
                s0 = peg$FAILED
                if (peg$silentFails === 0) {
                    peg$fail(peg$c299)
                }
            }
            if (s0 === peg$FAILED) {
                if (input.substr(peg$currPos, 2) === peg$c300) {
                    s0 = peg$c300
                    peg$currPos += 2
                } else {
                    s0 = peg$FAILED
                    if (peg$silentFails === 0) {
                        peg$fail(peg$c301)
                    }
                }
                if (s0 === peg$FAILED) {
                    if (input.substr(peg$currPos, 2) === peg$c302) {
                        s0 = peg$c302
                        peg$currPos += 2
                    } else {
                        s0 = peg$FAILED
                        if (peg$silentFails === 0) {
                            peg$fail(peg$c303)
                        }
                    }
                }
            }
        }

        return s0
    }

    function peg$parseBitwiseANDExpression() {
        var s0, s1, s2, s3, s4, s5, s6, s7

        s0 = peg$currPos
        s1 = peg$parseEqualityExpression()
        if (s1 !== peg$FAILED) {
            s2 = []
            s3 = peg$currPos
            s4 = peg$parse__()
            if (s4 !== peg$FAILED) {
                s5 = peg$parseBitwiseANDOperator()
                if (s5 !== peg$FAILED) {
                    s6 = peg$parse__()
                    if (s6 !== peg$FAILED) {
                        s7 = peg$parseEqualityExpression()
                        if (s7 !== peg$FAILED) {
                            s4 = [s4, s5, s6, s7]
                            s3 = s4
                        } else {
                            peg$currPos = s3
                            s3 = peg$FAILED
                        }
                    } else {
                        peg$currPos = s3
                        s3 = peg$FAILED
                    }
                } else {
                    peg$currPos = s3
                    s3 = peg$FAILED
                }
            } else {
                peg$currPos = s3
                s3 = peg$FAILED
            }
            while (s3 !== peg$FAILED) {
                s2.push(s3)
                s3 = peg$currPos
                s4 = peg$parse__()
                if (s4 !== peg$FAILED) {
                    s5 = peg$parseBitwiseANDOperator()
                    if (s5 !== peg$FAILED) {
                        s6 = peg$parse__()
                        if (s6 !== peg$FAILED) {
                            s7 = peg$parseEqualityExpression()
                            if (s7 !== peg$FAILED) {
                                s4 = [s4, s5, s6, s7]
                                s3 = s4
                            } else {
                                peg$currPos = s3
                                s3 = peg$FAILED
                            }
                        } else {
                            peg$currPos = s3
                            s3 = peg$FAILED
                        }
                    } else {
                        peg$currPos = s3
                        s3 = peg$FAILED
                    }
                } else {
                    peg$currPos = s3
                    s3 = peg$FAILED
                }
            }
            if (s2 !== peg$FAILED) {
                peg$savedPos = s0
                s1 = peg$c273(s1, s2)
                s0 = s1
            } else {
                peg$currPos = s0
                s0 = peg$FAILED
            }
        } else {
            peg$currPos = s0
            s0 = peg$FAILED
        }

        return s0
    }

    function peg$parseBitwiseANDExpressionNoIn() {
        var s0, s1, s2, s3, s4, s5, s6, s7

        s0 = peg$currPos
        s1 = peg$parseEqualityExpressionNoIn()
        if (s1 !== peg$FAILED) {
            s2 = []
            s3 = peg$currPos
            s4 = peg$parse__()
            if (s4 !== peg$FAILED) {
                s5 = peg$parseBitwiseANDOperator()
                if (s5 !== peg$FAILED) {
                    s6 = peg$parse__()
                    if (s6 !== peg$FAILED) {
                        s7 = peg$parseEqualityExpressionNoIn()
                        if (s7 !== peg$FAILED) {
                            s4 = [s4, s5, s6, s7]
                            s3 = s4
                        } else {
                            peg$currPos = s3
                            s3 = peg$FAILED
                        }
                    } else {
                        peg$currPos = s3
                        s3 = peg$FAILED
                    }
                } else {
                    peg$currPos = s3
                    s3 = peg$FAILED
                }
            } else {
                peg$currPos = s3
                s3 = peg$FAILED
            }
            while (s3 !== peg$FAILED) {
                s2.push(s3)
                s3 = peg$currPos
                s4 = peg$parse__()
                if (s4 !== peg$FAILED) {
                    s5 = peg$parseBitwiseANDOperator()
                    if (s5 !== peg$FAILED) {
                        s6 = peg$parse__()
                        if (s6 !== peg$FAILED) {
                            s7 = peg$parseEqualityExpressionNoIn()
                            if (s7 !== peg$FAILED) {
                                s4 = [s4, s5, s6, s7]
                                s3 = s4
                            } else {
                                peg$currPos = s3
                                s3 = peg$FAILED
                            }
                        } else {
                            peg$currPos = s3
                            s3 = peg$FAILED
                        }
                    } else {
                        peg$currPos = s3
                        s3 = peg$FAILED
                    }
                } else {
                    peg$currPos = s3
                    s3 = peg$FAILED
                }
            }
            if (s2 !== peg$FAILED) {
                peg$savedPos = s0
                s1 = peg$c273(s1, s2)
                s0 = s1
            } else {
                peg$currPos = s0
                s0 = peg$FAILED
            }
        } else {
            peg$currPos = s0
            s0 = peg$FAILED
        }

        return s0
    }

    function peg$parseBitwiseANDOperator() {
        var s0, s1, s2, s3, s4

        s0 = peg$currPos
        s1 = peg$currPos
        if (input.charCodeAt(peg$currPos) === 38) {
            s2 = peg$c304
            peg$currPos++
        } else {
            s2 = peg$FAILED
            if (peg$silentFails === 0) {
                peg$fail(peg$c305)
            }
        }
        if (s2 !== peg$FAILED) {
            s3 = peg$currPos
            peg$silentFails++
            if (peg$c306.test(input.charAt(peg$currPos))) {
                s4 = input.charAt(peg$currPos)
                peg$currPos++
            } else {
                s4 = peg$FAILED
                if (peg$silentFails === 0) {
                    peg$fail(peg$c307)
                }
            }
            peg$silentFails--
            if (s4 === peg$FAILED) {
                s3 = void 0
            } else {
                peg$currPos = s3
                s3 = peg$FAILED
            }
            if (s3 !== peg$FAILED) {
                s2 = [s2, s3]
                s1 = s2
            } else {
                peg$currPos = s1
                s1 = peg$FAILED
            }
        } else {
            peg$currPos = s1
            s1 = peg$FAILED
        }
        if (s1 !== peg$FAILED) {
            s0 = input.substring(s0, peg$currPos)
        } else {
            s0 = s1
        }

        return s0
    }

    function peg$parseBitwiseXORExpression() {
        var s0, s1, s2, s3, s4, s5, s6, s7

        s0 = peg$currPos
        s1 = peg$parseBitwiseANDExpression()
        if (s1 !== peg$FAILED) {
            s2 = []
            s3 = peg$currPos
            s4 = peg$parse__()
            if (s4 !== peg$FAILED) {
                s5 = peg$parseBitwiseXOROperator()
                if (s5 !== peg$FAILED) {
                    s6 = peg$parse__()
                    if (s6 !== peg$FAILED) {
                        s7 = peg$parseBitwiseANDExpression()
                        if (s7 !== peg$FAILED) {
                            s4 = [s4, s5, s6, s7]
                            s3 = s4
                        } else {
                            peg$currPos = s3
                            s3 = peg$FAILED
                        }
                    } else {
                        peg$currPos = s3
                        s3 = peg$FAILED
                    }
                } else {
                    peg$currPos = s3
                    s3 = peg$FAILED
                }
            } else {
                peg$currPos = s3
                s3 = peg$FAILED
            }
            while (s3 !== peg$FAILED) {
                s2.push(s3)
                s3 = peg$currPos
                s4 = peg$parse__()
                if (s4 !== peg$FAILED) {
                    s5 = peg$parseBitwiseXOROperator()
                    if (s5 !== peg$FAILED) {
                        s6 = peg$parse__()
                        if (s6 !== peg$FAILED) {
                            s7 = peg$parseBitwiseANDExpression()
                            if (s7 !== peg$FAILED) {
                                s4 = [s4, s5, s6, s7]
                                s3 = s4
                            } else {
                                peg$currPos = s3
                                s3 = peg$FAILED
                            }
                        } else {
                            peg$currPos = s3
                            s3 = peg$FAILED
                        }
                    } else {
                        peg$currPos = s3
                        s3 = peg$FAILED
                    }
                } else {
                    peg$currPos = s3
                    s3 = peg$FAILED
                }
            }
            if (s2 !== peg$FAILED) {
                peg$savedPos = s0
                s1 = peg$c273(s1, s2)
                s0 = s1
            } else {
                peg$currPos = s0
                s0 = peg$FAILED
            }
        } else {
            peg$currPos = s0
            s0 = peg$FAILED
        }

        return s0
    }

    function peg$parseBitwiseXORExpressionNoIn() {
        var s0, s1, s2, s3, s4, s5, s6, s7

        s0 = peg$currPos
        s1 = peg$parseBitwiseANDExpressionNoIn()
        if (s1 !== peg$FAILED) {
            s2 = []
            s3 = peg$currPos
            s4 = peg$parse__()
            if (s4 !== peg$FAILED) {
                s5 = peg$parseBitwiseXOROperator()
                if (s5 !== peg$FAILED) {
                    s6 = peg$parse__()
                    if (s6 !== peg$FAILED) {
                        s7 = peg$parseBitwiseANDExpressionNoIn()
                        if (s7 !== peg$FAILED) {
                            s4 = [s4, s5, s6, s7]
                            s3 = s4
                        } else {
                            peg$currPos = s3
                            s3 = peg$FAILED
                        }
                    } else {
                        peg$currPos = s3
                        s3 = peg$FAILED
                    }
                } else {
                    peg$currPos = s3
                    s3 = peg$FAILED
                }
            } else {
                peg$currPos = s3
                s3 = peg$FAILED
            }
            while (s3 !== peg$FAILED) {
                s2.push(s3)
                s3 = peg$currPos
                s4 = peg$parse__()
                if (s4 !== peg$FAILED) {
                    s5 = peg$parseBitwiseXOROperator()
                    if (s5 !== peg$FAILED) {
                        s6 = peg$parse__()
                        if (s6 !== peg$FAILED) {
                            s7 = peg$parseBitwiseANDExpressionNoIn()
                            if (s7 !== peg$FAILED) {
                                s4 = [s4, s5, s6, s7]
                                s3 = s4
                            } else {
                                peg$currPos = s3
                                s3 = peg$FAILED
                            }
                        } else {
                            peg$currPos = s3
                            s3 = peg$FAILED
                        }
                    } else {
                        peg$currPos = s3
                        s3 = peg$FAILED
                    }
                } else {
                    peg$currPos = s3
                    s3 = peg$FAILED
                }
            }
            if (s2 !== peg$FAILED) {
                peg$savedPos = s0
                s1 = peg$c273(s1, s2)
                s0 = s1
            } else {
                peg$currPos = s0
                s0 = peg$FAILED
            }
        } else {
            peg$currPos = s0
            s0 = peg$FAILED
        }

        return s0
    }

    function peg$parseBitwiseXOROperator() {
        var s0, s1, s2, s3, s4

        s0 = peg$currPos
        s1 = peg$currPos
        if (input.charCodeAt(peg$currPos) === 94) {
            s2 = peg$c308
            peg$currPos++
        } else {
            s2 = peg$FAILED
            if (peg$silentFails === 0) {
                peg$fail(peg$c309)
            }
        }
        if (s2 !== peg$FAILED) {
            s3 = peg$currPos
            peg$silentFails++
            if (input.charCodeAt(peg$currPos) === 61) {
                s4 = peg$c265
                peg$currPos++
            } else {
                s4 = peg$FAILED
                if (peg$silentFails === 0) {
                    peg$fail(peg$c266)
                }
            }
            peg$silentFails--
            if (s4 === peg$FAILED) {
                s3 = void 0
            } else {
                peg$currPos = s3
                s3 = peg$FAILED
            }
            if (s3 !== peg$FAILED) {
                s2 = [s2, s3]
                s1 = s2
            } else {
                peg$currPos = s1
                s1 = peg$FAILED
            }
        } else {
            peg$currPos = s1
            s1 = peg$FAILED
        }
        if (s1 !== peg$FAILED) {
            s0 = input.substring(s0, peg$currPos)
        } else {
            s0 = s1
        }

        return s0
    }

    function peg$parseBitwiseORExpression() {
        var s0, s1, s2, s3, s4, s5, s6, s7

        s0 = peg$currPos
        s1 = peg$parseBitwiseXORExpression()
        if (s1 !== peg$FAILED) {
            s2 = []
            s3 = peg$currPos
            s4 = peg$parse__()
            if (s4 !== peg$FAILED) {
                s5 = peg$parseBitwiseOROperator()
                if (s5 !== peg$FAILED) {
                    s6 = peg$parse__()
                    if (s6 !== peg$FAILED) {
                        s7 = peg$parseBitwiseXORExpression()
                        if (s7 !== peg$FAILED) {
                            s4 = [s4, s5, s6, s7]
                            s3 = s4
                        } else {
                            peg$currPos = s3
                            s3 = peg$FAILED
                        }
                    } else {
                        peg$currPos = s3
                        s3 = peg$FAILED
                    }
                } else {
                    peg$currPos = s3
                    s3 = peg$FAILED
                }
            } else {
                peg$currPos = s3
                s3 = peg$FAILED
            }
            while (s3 !== peg$FAILED) {
                s2.push(s3)
                s3 = peg$currPos
                s4 = peg$parse__()
                if (s4 !== peg$FAILED) {
                    s5 = peg$parseBitwiseOROperator()
                    if (s5 !== peg$FAILED) {
                        s6 = peg$parse__()
                        if (s6 !== peg$FAILED) {
                            s7 = peg$parseBitwiseXORExpression()
                            if (s7 !== peg$FAILED) {
                                s4 = [s4, s5, s6, s7]
                                s3 = s4
                            } else {
                                peg$currPos = s3
                                s3 = peg$FAILED
                            }
                        } else {
                            peg$currPos = s3
                            s3 = peg$FAILED
                        }
                    } else {
                        peg$currPos = s3
                        s3 = peg$FAILED
                    }
                } else {
                    peg$currPos = s3
                    s3 = peg$FAILED
                }
            }
            if (s2 !== peg$FAILED) {
                peg$savedPos = s0
                s1 = peg$c273(s1, s2)
                s0 = s1
            } else {
                peg$currPos = s0
                s0 = peg$FAILED
            }
        } else {
            peg$currPos = s0
            s0 = peg$FAILED
        }

        return s0
    }

    function peg$parseBitwiseORExpressionNoIn() {
        var s0, s1, s2, s3, s4, s5, s6, s7

        s0 = peg$currPos
        s1 = peg$parseBitwiseXORExpressionNoIn()
        if (s1 !== peg$FAILED) {
            s2 = []
            s3 = peg$currPos
            s4 = peg$parse__()
            if (s4 !== peg$FAILED) {
                s5 = peg$parseBitwiseOROperator()
                if (s5 !== peg$FAILED) {
                    s6 = peg$parse__()
                    if (s6 !== peg$FAILED) {
                        s7 = peg$parseBitwiseXORExpressionNoIn()
                        if (s7 !== peg$FAILED) {
                            s4 = [s4, s5, s6, s7]
                            s3 = s4
                        } else {
                            peg$currPos = s3
                            s3 = peg$FAILED
                        }
                    } else {
                        peg$currPos = s3
                        s3 = peg$FAILED
                    }
                } else {
                    peg$currPos = s3
                    s3 = peg$FAILED
                }
            } else {
                peg$currPos = s3
                s3 = peg$FAILED
            }
            while (s3 !== peg$FAILED) {
                s2.push(s3)
                s3 = peg$currPos
                s4 = peg$parse__()
                if (s4 !== peg$FAILED) {
                    s5 = peg$parseBitwiseOROperator()
                    if (s5 !== peg$FAILED) {
                        s6 = peg$parse__()
                        if (s6 !== peg$FAILED) {
                            s7 = peg$parseBitwiseXORExpressionNoIn()
                            if (s7 !== peg$FAILED) {
                                s4 = [s4, s5, s6, s7]
                                s3 = s4
                            } else {
                                peg$currPos = s3
                                s3 = peg$FAILED
                            }
                        } else {
                            peg$currPos = s3
                            s3 = peg$FAILED
                        }
                    } else {
                        peg$currPos = s3
                        s3 = peg$FAILED
                    }
                } else {
                    peg$currPos = s3
                    s3 = peg$FAILED
                }
            }
            if (s2 !== peg$FAILED) {
                peg$savedPos = s0
                s1 = peg$c273(s1, s2)
                s0 = s1
            } else {
                peg$currPos = s0
                s0 = peg$FAILED
            }
        } else {
            peg$currPos = s0
            s0 = peg$FAILED
        }

        return s0
    }

    function peg$parseBitwiseOROperator() {
        var s0, s1, s2, s3, s4

        s0 = peg$currPos
        s1 = peg$currPos
        if (input.charCodeAt(peg$currPos) === 124) {
            s2 = peg$c310
            peg$currPos++
        } else {
            s2 = peg$FAILED
            if (peg$silentFails === 0) {
                peg$fail(peg$c311)
            }
        }
        if (s2 !== peg$FAILED) {
            s3 = peg$currPos
            peg$silentFails++
            if (peg$c312.test(input.charAt(peg$currPos))) {
                s4 = input.charAt(peg$currPos)
                peg$currPos++
            } else {
                s4 = peg$FAILED
                if (peg$silentFails === 0) {
                    peg$fail(peg$c313)
                }
            }
            peg$silentFails--
            if (s4 === peg$FAILED) {
                s3 = void 0
            } else {
                peg$currPos = s3
                s3 = peg$FAILED
            }
            if (s3 !== peg$FAILED) {
                s2 = [s2, s3]
                s1 = s2
            } else {
                peg$currPos = s1
                s1 = peg$FAILED
            }
        } else {
            peg$currPos = s1
            s1 = peg$FAILED
        }
        if (s1 !== peg$FAILED) {
            s0 = input.substring(s0, peg$currPos)
        } else {
            s0 = s1
        }

        return s0
    }

    function peg$parseLogicalANDExpression() {
        var s0, s1, s2, s3, s4, s5, s6, s7

        s0 = peg$currPos
        s1 = peg$parseBitwiseORExpression()
        if (s1 !== peg$FAILED) {
            s2 = []
            s3 = peg$currPos
            s4 = peg$parse__()
            if (s4 !== peg$FAILED) {
                s5 = peg$parseLogicalANDOperator()
                if (s5 !== peg$FAILED) {
                    s6 = peg$parse__()
                    if (s6 !== peg$FAILED) {
                        s7 = peg$parseBitwiseORExpression()
                        if (s7 !== peg$FAILED) {
                            s4 = [s4, s5, s6, s7]
                            s3 = s4
                        } else {
                            peg$currPos = s3
                            s3 = peg$FAILED
                        }
                    } else {
                        peg$currPos = s3
                        s3 = peg$FAILED
                    }
                } else {
                    peg$currPos = s3
                    s3 = peg$FAILED
                }
            } else {
                peg$currPos = s3
                s3 = peg$FAILED
            }
            while (s3 !== peg$FAILED) {
                s2.push(s3)
                s3 = peg$currPos
                s4 = peg$parse__()
                if (s4 !== peg$FAILED) {
                    s5 = peg$parseLogicalANDOperator()
                    if (s5 !== peg$FAILED) {
                        s6 = peg$parse__()
                        if (s6 !== peg$FAILED) {
                            s7 = peg$parseBitwiseORExpression()
                            if (s7 !== peg$FAILED) {
                                s4 = [s4, s5, s6, s7]
                                s3 = s4
                            } else {
                                peg$currPos = s3
                                s3 = peg$FAILED
                            }
                        } else {
                            peg$currPos = s3
                            s3 = peg$FAILED
                        }
                    } else {
                        peg$currPos = s3
                        s3 = peg$FAILED
                    }
                } else {
                    peg$currPos = s3
                    s3 = peg$FAILED
                }
            }
            if (s2 !== peg$FAILED) {
                peg$savedPos = s0
                s1 = peg$c314(s1, s2)
                s0 = s1
            } else {
                peg$currPos = s0
                s0 = peg$FAILED
            }
        } else {
            peg$currPos = s0
            s0 = peg$FAILED
        }

        return s0
    }

    function peg$parseLogicalANDExpressionNoIn() {
        var s0, s1, s2, s3, s4, s5, s6, s7

        s0 = peg$currPos
        s1 = peg$parseBitwiseORExpressionNoIn()
        if (s1 !== peg$FAILED) {
            s2 = []
            s3 = peg$currPos
            s4 = peg$parse__()
            if (s4 !== peg$FAILED) {
                s5 = peg$parseLogicalANDOperator()
                if (s5 !== peg$FAILED) {
                    s6 = peg$parse__()
                    if (s6 !== peg$FAILED) {
                        s7 = peg$parseBitwiseORExpressionNoIn()
                        if (s7 !== peg$FAILED) {
                            s4 = [s4, s5, s6, s7]
                            s3 = s4
                        } else {
                            peg$currPos = s3
                            s3 = peg$FAILED
                        }
                    } else {
                        peg$currPos = s3
                        s3 = peg$FAILED
                    }
                } else {
                    peg$currPos = s3
                    s3 = peg$FAILED
                }
            } else {
                peg$currPos = s3
                s3 = peg$FAILED
            }
            while (s3 !== peg$FAILED) {
                s2.push(s3)
                s3 = peg$currPos
                s4 = peg$parse__()
                if (s4 !== peg$FAILED) {
                    s5 = peg$parseLogicalANDOperator()
                    if (s5 !== peg$FAILED) {
                        s6 = peg$parse__()
                        if (s6 !== peg$FAILED) {
                            s7 = peg$parseBitwiseORExpressionNoIn()
                            if (s7 !== peg$FAILED) {
                                s4 = [s4, s5, s6, s7]
                                s3 = s4
                            } else {
                                peg$currPos = s3
                                s3 = peg$FAILED
                            }
                        } else {
                            peg$currPos = s3
                            s3 = peg$FAILED
                        }
                    } else {
                        peg$currPos = s3
                        s3 = peg$FAILED
                    }
                } else {
                    peg$currPos = s3
                    s3 = peg$FAILED
                }
            }
            if (s2 !== peg$FAILED) {
                peg$savedPos = s0
                s1 = peg$c314(s1, s2)
                s0 = s1
            } else {
                peg$currPos = s0
                s0 = peg$FAILED
            }
        } else {
            peg$currPos = s0
            s0 = peg$FAILED
        }

        return s0
    }

    function peg$parseLogicalANDOperator() {
        var s0

        if (input.substr(peg$currPos, 2) === peg$c315) {
            s0 = peg$c315
            peg$currPos += 2
        } else {
            s0 = peg$FAILED
            if (peg$silentFails === 0) {
                peg$fail(peg$c316)
            }
        }

        return s0
    }

    function peg$parseLogicalORExpression() {
        var s0, s1, s2, s3, s4, s5, s6, s7

        s0 = peg$currPos
        s1 = peg$parseLogicalANDExpression()
        if (s1 !== peg$FAILED) {
            s2 = []
            s3 = peg$currPos
            s4 = peg$parse__()
            if (s4 !== peg$FAILED) {
                s5 = peg$parseLogicalOROperator()
                if (s5 !== peg$FAILED) {
                    s6 = peg$parse__()
                    if (s6 !== peg$FAILED) {
                        s7 = peg$parseLogicalANDExpression()
                        if (s7 !== peg$FAILED) {
                            s4 = [s4, s5, s6, s7]
                            s3 = s4
                        } else {
                            peg$currPos = s3
                            s3 = peg$FAILED
                        }
                    } else {
                        peg$currPos = s3
                        s3 = peg$FAILED
                    }
                } else {
                    peg$currPos = s3
                    s3 = peg$FAILED
                }
            } else {
                peg$currPos = s3
                s3 = peg$FAILED
            }
            while (s3 !== peg$FAILED) {
                s2.push(s3)
                s3 = peg$currPos
                s4 = peg$parse__()
                if (s4 !== peg$FAILED) {
                    s5 = peg$parseLogicalOROperator()
                    if (s5 !== peg$FAILED) {
                        s6 = peg$parse__()
                        if (s6 !== peg$FAILED) {
                            s7 = peg$parseLogicalANDExpression()
                            if (s7 !== peg$FAILED) {
                                s4 = [s4, s5, s6, s7]
                                s3 = s4
                            } else {
                                peg$currPos = s3
                                s3 = peg$FAILED
                            }
                        } else {
                            peg$currPos = s3
                            s3 = peg$FAILED
                        }
                    } else {
                        peg$currPos = s3
                        s3 = peg$FAILED
                    }
                } else {
                    peg$currPos = s3
                    s3 = peg$FAILED
                }
            }
            if (s2 !== peg$FAILED) {
                peg$savedPos = s0
                s1 = peg$c314(s1, s2)
                s0 = s1
            } else {
                peg$currPos = s0
                s0 = peg$FAILED
            }
        } else {
            peg$currPos = s0
            s0 = peg$FAILED
        }

        return s0
    }

    function peg$parseLogicalORExpressionNoIn() {
        var s0, s1, s2, s3, s4, s5, s6, s7

        s0 = peg$currPos
        s1 = peg$parseLogicalANDExpressionNoIn()
        if (s1 !== peg$FAILED) {
            s2 = []
            s3 = peg$currPos
            s4 = peg$parse__()
            if (s4 !== peg$FAILED) {
                s5 = peg$parseLogicalOROperator()
                if (s5 !== peg$FAILED) {
                    s6 = peg$parse__()
                    if (s6 !== peg$FAILED) {
                        s7 = peg$parseLogicalANDExpressionNoIn()
                        if (s7 !== peg$FAILED) {
                            s4 = [s4, s5, s6, s7]
                            s3 = s4
                        } else {
                            peg$currPos = s3
                            s3 = peg$FAILED
                        }
                    } else {
                        peg$currPos = s3
                        s3 = peg$FAILED
                    }
                } else {
                    peg$currPos = s3
                    s3 = peg$FAILED
                }
            } else {
                peg$currPos = s3
                s3 = peg$FAILED
            }
            while (s3 !== peg$FAILED) {
                s2.push(s3)
                s3 = peg$currPos
                s4 = peg$parse__()
                if (s4 !== peg$FAILED) {
                    s5 = peg$parseLogicalOROperator()
                    if (s5 !== peg$FAILED) {
                        s6 = peg$parse__()
                        if (s6 !== peg$FAILED) {
                            s7 = peg$parseLogicalANDExpressionNoIn()
                            if (s7 !== peg$FAILED) {
                                s4 = [s4, s5, s6, s7]
                                s3 = s4
                            } else {
                                peg$currPos = s3
                                s3 = peg$FAILED
                            }
                        } else {
                            peg$currPos = s3
                            s3 = peg$FAILED
                        }
                    } else {
                        peg$currPos = s3
                        s3 = peg$FAILED
                    }
                } else {
                    peg$currPos = s3
                    s3 = peg$FAILED
                }
            }
            if (s2 !== peg$FAILED) {
                peg$savedPos = s0
                s1 = peg$c314(s1, s2)
                s0 = s1
            } else {
                peg$currPos = s0
                s0 = peg$FAILED
            }
        } else {
            peg$currPos = s0
            s0 = peg$FAILED
        }

        return s0
    }

    function peg$parseLogicalOROperator() {
        var s0

        if (input.substr(peg$currPos, 2) === peg$c317) {
            s0 = peg$c317
            peg$currPos += 2
        } else {
            s0 = peg$FAILED
            if (peg$silentFails === 0) {
                peg$fail(peg$c318)
            }
        }

        return s0
    }

    function peg$parseConditionalExpression() {
        var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9

        s0 = peg$currPos
        s1 = peg$parseLogicalORExpression()
        if (s1 !== peg$FAILED) {
            s2 = peg$parse__()
            if (s2 !== peg$FAILED) {
                if (input.charCodeAt(peg$currPos) === 63) {
                    s3 = peg$c319
                    peg$currPos++
                } else {
                    s3 = peg$FAILED
                    if (peg$silentFails === 0) {
                        peg$fail(peg$c320)
                    }
                }
                if (s3 !== peg$FAILED) {
                    s4 = peg$parse__()
                    if (s4 !== peg$FAILED) {
                        s5 = peg$parseAssignmentExpression()
                        if (s5 !== peg$FAILED) {
                            s6 = peg$parse__()
                            if (s6 !== peg$FAILED) {
                                if (input.charCodeAt(peg$currPos) === 58) {
                                    s7 = peg$c240
                                    peg$currPos++
                                } else {
                                    s7 = peg$FAILED
                                    if (peg$silentFails === 0) {
                                        peg$fail(peg$c241)
                                    }
                                }
                                if (s7 !== peg$FAILED) {
                                    s8 = peg$parse__()
                                    if (s8 !== peg$FAILED) {
                                        s9 = peg$parseAssignmentExpression()
                                        if (s9 !== peg$FAILED) {
                                            peg$savedPos = s0
                                            s1 = peg$c321(s1, s5, s9)
                                            s0 = s1
                                        } else {
                                            peg$currPos = s0
                                            s0 = peg$FAILED
                                        }
                                    } else {
                                        peg$currPos = s0
                                        s0 = peg$FAILED
                                    }
                                } else {
                                    peg$currPos = s0
                                    s0 = peg$FAILED
                                }
                            } else {
                                peg$currPos = s0
                                s0 = peg$FAILED
                            }
                        } else {
                            peg$currPos = s0
                            s0 = peg$FAILED
                        }
                    } else {
                        peg$currPos = s0
                        s0 = peg$FAILED
                    }
                } else {
                    peg$currPos = s0
                    s0 = peg$FAILED
                }
            } else {
                peg$currPos = s0
                s0 = peg$FAILED
            }
        } else {
            peg$currPos = s0
            s0 = peg$FAILED
        }
        if (s0 === peg$FAILED) {
            s0 = peg$parseLogicalORExpression()
        }

        return s0
    }

    function peg$parseConditionalExpressionNoIn() {
        var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9

        s0 = peg$currPos
        s1 = peg$parseLogicalORExpressionNoIn()
        if (s1 !== peg$FAILED) {
            s2 = peg$parse__()
            if (s2 !== peg$FAILED) {
                if (input.charCodeAt(peg$currPos) === 63) {
                    s3 = peg$c319
                    peg$currPos++
                } else {
                    s3 = peg$FAILED
                    if (peg$silentFails === 0) {
                        peg$fail(peg$c320)
                    }
                }
                if (s3 !== peg$FAILED) {
                    s4 = peg$parse__()
                    if (s4 !== peg$FAILED) {
                        s5 = peg$parseAssignmentExpression()
                        if (s5 !== peg$FAILED) {
                            s6 = peg$parse__()
                            if (s6 !== peg$FAILED) {
                                if (input.charCodeAt(peg$currPos) === 58) {
                                    s7 = peg$c240
                                    peg$currPos++
                                } else {
                                    s7 = peg$FAILED
                                    if (peg$silentFails === 0) {
                                        peg$fail(peg$c241)
                                    }
                                }
                                if (s7 !== peg$FAILED) {
                                    s8 = peg$parse__()
                                    if (s8 !== peg$FAILED) {
                                        s9 = peg$parseAssignmentExpressionNoIn()
                                        if (s9 !== peg$FAILED) {
                                            peg$savedPos = s0
                                            s1 = peg$c321(s1, s5, s9)
                                            s0 = s1
                                        } else {
                                            peg$currPos = s0
                                            s0 = peg$FAILED
                                        }
                                    } else {
                                        peg$currPos = s0
                                        s0 = peg$FAILED
                                    }
                                } else {
                                    peg$currPos = s0
                                    s0 = peg$FAILED
                                }
                            } else {
                                peg$currPos = s0
                                s0 = peg$FAILED
                            }
                        } else {
                            peg$currPos = s0
                            s0 = peg$FAILED
                        }
                    } else {
                        peg$currPos = s0
                        s0 = peg$FAILED
                    }
                } else {
                    peg$currPos = s0
                    s0 = peg$FAILED
                }
            } else {
                peg$currPos = s0
                s0 = peg$FAILED
            }
        } else {
            peg$currPos = s0
            s0 = peg$FAILED
        }
        if (s0 === peg$FAILED) {
            s0 = peg$parseLogicalORExpressionNoIn()
        }

        return s0
    }

    function peg$parseAssignmentExpression() {
        var s0, s1, s2, s3, s4, s5, s6

        s0 = peg$currPos
        s1 = peg$parseLeftHandSideExpression()
        if (s1 !== peg$FAILED) {
            s2 = peg$parse__()
            if (s2 !== peg$FAILED) {
                if (input.charCodeAt(peg$currPos) === 61) {
                    s3 = peg$c265
                    peg$currPos++
                } else {
                    s3 = peg$FAILED
                    if (peg$silentFails === 0) {
                        peg$fail(peg$c266)
                    }
                }
                if (s3 !== peg$FAILED) {
                    s4 = peg$currPos
                    peg$silentFails++
                    if (input.charCodeAt(peg$currPos) === 61) {
                        s5 = peg$c265
                        peg$currPos++
                    } else {
                        s5 = peg$FAILED
                        if (peg$silentFails === 0) {
                            peg$fail(peg$c266)
                        }
                    }
                    peg$silentFails--
                    if (s5 === peg$FAILED) {
                        s4 = void 0
                    } else {
                        peg$currPos = s4
                        s4 = peg$FAILED
                    }
                    if (s4 !== peg$FAILED) {
                        s5 = peg$parse__()
                        if (s5 !== peg$FAILED) {
                            s6 = peg$parseAssignmentExpression()
                            if (s6 !== peg$FAILED) {
                                peg$savedPos = s0
                                s1 = peg$c322(s1, s6)
                                s0 = s1
                            } else {
                                peg$currPos = s0
                                s0 = peg$FAILED
                            }
                        } else {
                            peg$currPos = s0
                            s0 = peg$FAILED
                        }
                    } else {
                        peg$currPos = s0
                        s0 = peg$FAILED
                    }
                } else {
                    peg$currPos = s0
                    s0 = peg$FAILED
                }
            } else {
                peg$currPos = s0
                s0 = peg$FAILED
            }
        } else {
            peg$currPos = s0
            s0 = peg$FAILED
        }
        if (s0 === peg$FAILED) {
            s0 = peg$currPos
            s1 = peg$parseLeftHandSideExpression()
            if (s1 !== peg$FAILED) {
                s2 = peg$parse__()
                if (s2 !== peg$FAILED) {
                    s3 = peg$parseAssignmentOperator()
                    if (s3 !== peg$FAILED) {
                        s4 = peg$parse__()
                        if (s4 !== peg$FAILED) {
                            s5 = peg$parseAssignmentExpression()
                            if (s5 !== peg$FAILED) {
                                peg$savedPos = s0
                                s1 = peg$c323(s1, s3, s5)
                                s0 = s1
                            } else {
                                peg$currPos = s0
                                s0 = peg$FAILED
                            }
                        } else {
                            peg$currPos = s0
                            s0 = peg$FAILED
                        }
                    } else {
                        peg$currPos = s0
                        s0 = peg$FAILED
                    }
                } else {
                    peg$currPos = s0
                    s0 = peg$FAILED
                }
            } else {
                peg$currPos = s0
                s0 = peg$FAILED
            }
            if (s0 === peg$FAILED) {
                s0 = peg$parseConditionalExpression()
            }
        }

        return s0
    }

    function peg$parseAssignmentExpressionNoIn() {
        var s0, s1, s2, s3, s4, s5, s6

        s0 = peg$currPos
        s1 = peg$parseLeftHandSideExpression()
        if (s1 !== peg$FAILED) {
            s2 = peg$parse__()
            if (s2 !== peg$FAILED) {
                if (input.charCodeAt(peg$currPos) === 61) {
                    s3 = peg$c265
                    peg$currPos++
                } else {
                    s3 = peg$FAILED
                    if (peg$silentFails === 0) {
                        peg$fail(peg$c266)
                    }
                }
                if (s3 !== peg$FAILED) {
                    s4 = peg$currPos
                    peg$silentFails++
                    if (input.charCodeAt(peg$currPos) === 61) {
                        s5 = peg$c265
                        peg$currPos++
                    } else {
                        s5 = peg$FAILED
                        if (peg$silentFails === 0) {
                            peg$fail(peg$c266)
                        }
                    }
                    peg$silentFails--
                    if (s5 === peg$FAILED) {
                        s4 = void 0
                    } else {
                        peg$currPos = s4
                        s4 = peg$FAILED
                    }
                    if (s4 !== peg$FAILED) {
                        s5 = peg$parse__()
                        if (s5 !== peg$FAILED) {
                            s6 = peg$parseAssignmentExpressionNoIn()
                            if (s6 !== peg$FAILED) {
                                peg$savedPos = s0
                                s1 = peg$c322(s1, s6)
                                s0 = s1
                            } else {
                                peg$currPos = s0
                                s0 = peg$FAILED
                            }
                        } else {
                            peg$currPos = s0
                            s0 = peg$FAILED
                        }
                    } else {
                        peg$currPos = s0
                        s0 = peg$FAILED
                    }
                } else {
                    peg$currPos = s0
                    s0 = peg$FAILED
                }
            } else {
                peg$currPos = s0
                s0 = peg$FAILED
            }
        } else {
            peg$currPos = s0
            s0 = peg$FAILED
        }
        if (s0 === peg$FAILED) {
            s0 = peg$currPos
            s1 = peg$parseLeftHandSideExpression()
            if (s1 !== peg$FAILED) {
                s2 = peg$parse__()
                if (s2 !== peg$FAILED) {
                    s3 = peg$parseAssignmentOperator()
                    if (s3 !== peg$FAILED) {
                        s4 = peg$parse__()
                        if (s4 !== peg$FAILED) {
                            s5 = peg$parseAssignmentExpressionNoIn()
                            if (s5 !== peg$FAILED) {
                                peg$savedPos = s0
                                s1 = peg$c323(s1, s3, s5)
                                s0 = s1
                            } else {
                                peg$currPos = s0
                                s0 = peg$FAILED
                            }
                        } else {
                            peg$currPos = s0
                            s0 = peg$FAILED
                        }
                    } else {
                        peg$currPos = s0
                        s0 = peg$FAILED
                    }
                } else {
                    peg$currPos = s0
                    s0 = peg$FAILED
                }
            } else {
                peg$currPos = s0
                s0 = peg$FAILED
            }
            if (s0 === peg$FAILED) {
                s0 = peg$parseConditionalExpressionNoIn()
            }
        }

        return s0
    }

    function peg$parseAssignmentOperator() {
        var s0

        if (input.substr(peg$currPos, 2) === peg$c324) {
            s0 = peg$c324
            peg$currPos += 2
        } else {
            s0 = peg$FAILED
            if (peg$silentFails === 0) {
                peg$fail(peg$c325)
            }
        }
        if (s0 === peg$FAILED) {
            if (input.substr(peg$currPos, 2) === peg$c326) {
                s0 = peg$c326
                peg$currPos += 2
            } else {
                s0 = peg$FAILED
                if (peg$silentFails === 0) {
                    peg$fail(peg$c327)
                }
            }
            if (s0 === peg$FAILED) {
                if (input.substr(peg$currPos, 2) === peg$c328) {
                    s0 = peg$c328
                    peg$currPos += 2
                } else {
                    s0 = peg$FAILED
                    if (peg$silentFails === 0) {
                        peg$fail(peg$c329)
                    }
                }
                if (s0 === peg$FAILED) {
                    if (input.substr(peg$currPos, 2) === peg$c330) {
                        s0 = peg$c330
                        peg$currPos += 2
                    } else {
                        s0 = peg$FAILED
                        if (peg$silentFails === 0) {
                            peg$fail(peg$c331)
                        }
                    }
                    if (s0 === peg$FAILED) {
                        if (input.substr(peg$currPos, 2) === peg$c332) {
                            s0 = peg$c332
                            peg$currPos += 2
                        } else {
                            s0 = peg$FAILED
                            if (peg$silentFails === 0) {
                                peg$fail(peg$c333)
                            }
                        }
                        if (s0 === peg$FAILED) {
                            if (input.substr(peg$currPos, 3) === peg$c334) {
                                s0 = peg$c334
                                peg$currPos += 3
                            } else {
                                s0 = peg$FAILED
                                if (peg$silentFails === 0) {
                                    peg$fail(peg$c335)
                                }
                            }
                            if (s0 === peg$FAILED) {
                                if (input.substr(peg$currPos, 3) === peg$c336) {
                                    s0 = peg$c336
                                    peg$currPos += 3
                                } else {
                                    s0 = peg$FAILED
                                    if (peg$silentFails === 0) {
                                        peg$fail(peg$c337)
                                    }
                                }
                                if (s0 === peg$FAILED) {
                                    if (
                                        input.substr(peg$currPos, 4) ===
                                        peg$c338
                                    ) {
                                        s0 = peg$c338
                                        peg$currPos += 4
                                    } else {
                                        s0 = peg$FAILED
                                        if (peg$silentFails === 0) {
                                            peg$fail(peg$c339)
                                        }
                                    }
                                    if (s0 === peg$FAILED) {
                                        if (
                                            input.substr(peg$currPos, 2) ===
                                            peg$c340
                                        ) {
                                            s0 = peg$c340
                                            peg$currPos += 2
                                        } else {
                                            s0 = peg$FAILED
                                            if (peg$silentFails === 0) {
                                                peg$fail(peg$c341)
                                            }
                                        }
                                        if (s0 === peg$FAILED) {
                                            if (
                                                input.substr(peg$currPos, 2) ===
                                                peg$c342
                                            ) {
                                                s0 = peg$c342
                                                peg$currPos += 2
                                            } else {
                                                s0 = peg$FAILED
                                                if (peg$silentFails === 0) {
                                                    peg$fail(peg$c343)
                                                }
                                            }
                                            if (s0 === peg$FAILED) {
                                                if (
                                                    input.substr(
                                                        peg$currPos,
                                                        2
                                                    ) === peg$c344
                                                ) {
                                                    s0 = peg$c344
                                                    peg$currPos += 2
                                                } else {
                                                    s0 = peg$FAILED
                                                    if (peg$silentFails === 0) {
                                                        peg$fail(peg$c345)
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }

        return s0
    }

    function peg$parseExpression() {
        var s0, s1, s2, s3, s4, s5, s6, s7

        s0 = peg$currPos
        s1 = peg$parseAssignmentExpression()
        if (s1 !== peg$FAILED) {
            s2 = []
            s3 = peg$currPos
            s4 = peg$parse__()
            if (s4 !== peg$FAILED) {
                if (input.charCodeAt(peg$currPos) === 44) {
                    s5 = peg$c228
                    peg$currPos++
                } else {
                    s5 = peg$FAILED
                    if (peg$silentFails === 0) {
                        peg$fail(peg$c229)
                    }
                }
                if (s5 !== peg$FAILED) {
                    s6 = peg$parse__()
                    if (s6 !== peg$FAILED) {
                        s7 = peg$parseAssignmentExpression()
                        if (s7 !== peg$FAILED) {
                            s4 = [s4, s5, s6, s7]
                            s3 = s4
                        } else {
                            peg$currPos = s3
                            s3 = peg$FAILED
                        }
                    } else {
                        peg$currPos = s3
                        s3 = peg$FAILED
                    }
                } else {
                    peg$currPos = s3
                    s3 = peg$FAILED
                }
            } else {
                peg$currPos = s3
                s3 = peg$FAILED
            }
            while (s3 !== peg$FAILED) {
                s2.push(s3)
                s3 = peg$currPos
                s4 = peg$parse__()
                if (s4 !== peg$FAILED) {
                    if (input.charCodeAt(peg$currPos) === 44) {
                        s5 = peg$c228
                        peg$currPos++
                    } else {
                        s5 = peg$FAILED
                        if (peg$silentFails === 0) {
                            peg$fail(peg$c229)
                        }
                    }
                    if (s5 !== peg$FAILED) {
                        s6 = peg$parse__()
                        if (s6 !== peg$FAILED) {
                            s7 = peg$parseAssignmentExpression()
                            if (s7 !== peg$FAILED) {
                                s4 = [s4, s5, s6, s7]
                                s3 = s4
                            } else {
                                peg$currPos = s3
                                s3 = peg$FAILED
                            }
                        } else {
                            peg$currPos = s3
                            s3 = peg$FAILED
                        }
                    } else {
                        peg$currPos = s3
                        s3 = peg$FAILED
                    }
                } else {
                    peg$currPos = s3
                    s3 = peg$FAILED
                }
            }
            if (s2 !== peg$FAILED) {
                peg$savedPos = s0
                s1 = peg$c346(s1, s2)
                s0 = s1
            } else {
                peg$currPos = s0
                s0 = peg$FAILED
            }
        } else {
            peg$currPos = s0
            s0 = peg$FAILED
        }

        return s0
    }

    function peg$parseExpressionNoIn() {
        var s0, s1, s2, s3, s4, s5, s6, s7

        s0 = peg$currPos
        s1 = peg$parseAssignmentExpressionNoIn()
        if (s1 !== peg$FAILED) {
            s2 = []
            s3 = peg$currPos
            s4 = peg$parse__()
            if (s4 !== peg$FAILED) {
                if (input.charCodeAt(peg$currPos) === 44) {
                    s5 = peg$c228
                    peg$currPos++
                } else {
                    s5 = peg$FAILED
                    if (peg$silentFails === 0) {
                        peg$fail(peg$c229)
                    }
                }
                if (s5 !== peg$FAILED) {
                    s6 = peg$parse__()
                    if (s6 !== peg$FAILED) {
                        s7 = peg$parseAssignmentExpressionNoIn()
                        if (s7 !== peg$FAILED) {
                            s4 = [s4, s5, s6, s7]
                            s3 = s4
                        } else {
                            peg$currPos = s3
                            s3 = peg$FAILED
                        }
                    } else {
                        peg$currPos = s3
                        s3 = peg$FAILED
                    }
                } else {
                    peg$currPos = s3
                    s3 = peg$FAILED
                }
            } else {
                peg$currPos = s3
                s3 = peg$FAILED
            }
            while (s3 !== peg$FAILED) {
                s2.push(s3)
                s3 = peg$currPos
                s4 = peg$parse__()
                if (s4 !== peg$FAILED) {
                    if (input.charCodeAt(peg$currPos) === 44) {
                        s5 = peg$c228
                        peg$currPos++
                    } else {
                        s5 = peg$FAILED
                        if (peg$silentFails === 0) {
                            peg$fail(peg$c229)
                        }
                    }
                    if (s5 !== peg$FAILED) {
                        s6 = peg$parse__()
                        if (s6 !== peg$FAILED) {
                            s7 = peg$parseAssignmentExpressionNoIn()
                            if (s7 !== peg$FAILED) {
                                s4 = [s4, s5, s6, s7]
                                s3 = s4
                            } else {
                                peg$currPos = s3
                                s3 = peg$FAILED
                            }
                        } else {
                            peg$currPos = s3
                            s3 = peg$FAILED
                        }
                    } else {
                        peg$currPos = s3
                        s3 = peg$FAILED
                    }
                } else {
                    peg$currPos = s3
                    s3 = peg$FAILED
                }
            }
            if (s2 !== peg$FAILED) {
                peg$savedPos = s0
                s1 = peg$c346(s1, s2)
                s0 = s1
            } else {
                peg$currPos = s0
                s0 = peg$FAILED
            }
        } else {
            peg$currPos = s0
            s0 = peg$FAILED
        }

        return s0
    }

    function peg$parseStatement() {
        var s0

        s0 = peg$parseBlock()
        if (s0 === peg$FAILED) {
            s0 = peg$parseVariableStatement()
            if (s0 === peg$FAILED) {
                s0 = peg$parseEmptyStatement()
                if (s0 === peg$FAILED) {
                    s0 = peg$parseExpressionStatement()
                    if (s0 === peg$FAILED) {
                        s0 = peg$parseIfStatement()
                        if (s0 === peg$FAILED) {
                            s0 = peg$parseIterationStatement()
                            if (s0 === peg$FAILED) {
                                s0 = peg$parseContinueStatement()
                                if (s0 === peg$FAILED) {
                                    s0 = peg$parseBreakStatement()
                                    if (s0 === peg$FAILED) {
                                        s0 = peg$parseReturnStatement()
                                        if (s0 === peg$FAILED) {
                                            s0 = peg$parseWithStatement()
                                            if (s0 === peg$FAILED) {
                                                s0 = peg$parseLabelledStatement()
                                                if (s0 === peg$FAILED) {
                                                    s0 = peg$parseSwitchStatement()
                                                    if (s0 === peg$FAILED) {
                                                        s0 = peg$parseThrowStatement()
                                                        if (s0 === peg$FAILED) {
                                                            s0 = peg$parseTryStatement()
                                                            if (
                                                                s0 ===
                                                                peg$FAILED
                                                            ) {
                                                                s0 = peg$parseDebuggerStatement()
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }

        return s0
    }

    function peg$parseBlock() {
        var s0, s1, s2, s3, s4, s5

        s0 = peg$currPos
        if (input.charCodeAt(peg$currPos) === 123) {
            s1 = peg$c235
            peg$currPos++
        } else {
            s1 = peg$FAILED
            if (peg$silentFails === 0) {
                peg$fail(peg$c236)
            }
        }
        if (s1 !== peg$FAILED) {
            s2 = peg$parse__()
            if (s2 !== peg$FAILED) {
                s3 = peg$currPos
                s4 = peg$parseStatementList()
                if (s4 !== peg$FAILED) {
                    s5 = peg$parse__()
                    if (s5 !== peg$FAILED) {
                        s4 = [s4, s5]
                        s3 = s4
                    } else {
                        peg$currPos = s3
                        s3 = peg$FAILED
                    }
                } else {
                    peg$currPos = s3
                    s3 = peg$FAILED
                }
                if (s3 === peg$FAILED) {
                    s3 = null
                }
                if (s3 !== peg$FAILED) {
                    if (input.charCodeAt(peg$currPos) === 125) {
                        s4 = peg$c218
                        peg$currPos++
                    } else {
                        s4 = peg$FAILED
                        if (peg$silentFails === 0) {
                            peg$fail(peg$c219)
                        }
                    }
                    if (s4 !== peg$FAILED) {
                        peg$savedPos = s0
                        s1 = peg$c347(s3)
                        s0 = s1
                    } else {
                        peg$currPos = s0
                        s0 = peg$FAILED
                    }
                } else {
                    peg$currPos = s0
                    s0 = peg$FAILED
                }
            } else {
                peg$currPos = s0
                s0 = peg$FAILED
            }
        } else {
            peg$currPos = s0
            s0 = peg$FAILED
        }

        return s0
    }

    function peg$parseStatementList() {
        var s0, s1, s2, s3, s4, s5

        s0 = peg$currPos
        s1 = peg$parseStatement()
        if (s1 !== peg$FAILED) {
            s2 = []
            s3 = peg$currPos
            s4 = peg$parse__()
            if (s4 !== peg$FAILED) {
                s5 = peg$parseStatement()
                if (s5 !== peg$FAILED) {
                    s4 = [s4, s5]
                    s3 = s4
                } else {
                    peg$currPos = s3
                    s3 = peg$FAILED
                }
            } else {
                peg$currPos = s3
                s3 = peg$FAILED
            }
            while (s3 !== peg$FAILED) {
                s2.push(s3)
                s3 = peg$currPos
                s4 = peg$parse__()
                if (s4 !== peg$FAILED) {
                    s5 = peg$parseStatement()
                    if (s5 !== peg$FAILED) {
                        s4 = [s4, s5]
                        s3 = s4
                    } else {
                        peg$currPos = s3
                        s3 = peg$FAILED
                    }
                } else {
                    peg$currPos = s3
                    s3 = peg$FAILED
                }
            }
            if (s2 !== peg$FAILED) {
                peg$savedPos = s0
                s1 = peg$c348(s1, s2)
                s0 = s1
            } else {
                peg$currPos = s0
                s0 = peg$FAILED
            }
        } else {
            peg$currPos = s0
            s0 = peg$FAILED
        }

        return s0
    }

    function peg$parseVariableStatement() {
        var s0, s1, s2, s3, s4

        s0 = peg$currPos
        s1 = peg$parseVarToken()
        if (s1 !== peg$FAILED) {
            s2 = peg$parse__()
            if (s2 !== peg$FAILED) {
                s3 = peg$parseVariableDeclarationList()
                if (s3 !== peg$FAILED) {
                    s4 = peg$parseEOS()
                    if (s4 !== peg$FAILED) {
                        peg$savedPos = s0
                        s1 = peg$c349(s3)
                        s0 = s1
                    } else {
                        peg$currPos = s0
                        s0 = peg$FAILED
                    }
                } else {
                    peg$currPos = s0
                    s0 = peg$FAILED
                }
            } else {
                peg$currPos = s0
                s0 = peg$FAILED
            }
        } else {
            peg$currPos = s0
            s0 = peg$FAILED
        }

        return s0
    }

    function peg$parseVariableDeclarationList() {
        var s0, s1, s2, s3, s4, s5, s6, s7

        s0 = peg$currPos
        s1 = peg$parseVariableDeclaration()
        if (s1 !== peg$FAILED) {
            s2 = []
            s3 = peg$currPos
            s4 = peg$parse__()
            if (s4 !== peg$FAILED) {
                if (input.charCodeAt(peg$currPos) === 44) {
                    s5 = peg$c228
                    peg$currPos++
                } else {
                    s5 = peg$FAILED
                    if (peg$silentFails === 0) {
                        peg$fail(peg$c229)
                    }
                }
                if (s5 !== peg$FAILED) {
                    s6 = peg$parse__()
                    if (s6 !== peg$FAILED) {
                        s7 = peg$parseVariableDeclaration()
                        if (s7 !== peg$FAILED) {
                            s4 = [s4, s5, s6, s7]
                            s3 = s4
                        } else {
                            peg$currPos = s3
                            s3 = peg$FAILED
                        }
                    } else {
                        peg$currPos = s3
                        s3 = peg$FAILED
                    }
                } else {
                    peg$currPos = s3
                    s3 = peg$FAILED
                }
            } else {
                peg$currPos = s3
                s3 = peg$FAILED
            }
            while (s3 !== peg$FAILED) {
                s2.push(s3)
                s3 = peg$currPos
                s4 = peg$parse__()
                if (s4 !== peg$FAILED) {
                    if (input.charCodeAt(peg$currPos) === 44) {
                        s5 = peg$c228
                        peg$currPos++
                    } else {
                        s5 = peg$FAILED
                        if (peg$silentFails === 0) {
                            peg$fail(peg$c229)
                        }
                    }
                    if (s5 !== peg$FAILED) {
                        s6 = peg$parse__()
                        if (s6 !== peg$FAILED) {
                            s7 = peg$parseVariableDeclaration()
                            if (s7 !== peg$FAILED) {
                                s4 = [s4, s5, s6, s7]
                                s3 = s4
                            } else {
                                peg$currPos = s3
                                s3 = peg$FAILED
                            }
                        } else {
                            peg$currPos = s3
                            s3 = peg$FAILED
                        }
                    } else {
                        peg$currPos = s3
                        s3 = peg$FAILED
                    }
                } else {
                    peg$currPos = s3
                    s3 = peg$FAILED
                }
            }
            if (s2 !== peg$FAILED) {
                peg$savedPos = s0
                s1 = peg$c239(s1, s2)
                s0 = s1
            } else {
                peg$currPos = s0
                s0 = peg$FAILED
            }
        } else {
            peg$currPos = s0
            s0 = peg$FAILED
        }

        return s0
    }

    function peg$parseVariableDeclarationListNoIn() {
        var s0, s1, s2, s3, s4, s5, s6, s7

        s0 = peg$currPos
        s1 = peg$parseVariableDeclarationNoIn()
        if (s1 !== peg$FAILED) {
            s2 = []
            s3 = peg$currPos
            s4 = peg$parse__()
            if (s4 !== peg$FAILED) {
                if (input.charCodeAt(peg$currPos) === 44) {
                    s5 = peg$c228
                    peg$currPos++
                } else {
                    s5 = peg$FAILED
                    if (peg$silentFails === 0) {
                        peg$fail(peg$c229)
                    }
                }
                if (s5 !== peg$FAILED) {
                    s6 = peg$parse__()
                    if (s6 !== peg$FAILED) {
                        s7 = peg$parseVariableDeclarationNoIn()
                        if (s7 !== peg$FAILED) {
                            s4 = [s4, s5, s6, s7]
                            s3 = s4
                        } else {
                            peg$currPos = s3
                            s3 = peg$FAILED
                        }
                    } else {
                        peg$currPos = s3
                        s3 = peg$FAILED
                    }
                } else {
                    peg$currPos = s3
                    s3 = peg$FAILED
                }
            } else {
                peg$currPos = s3
                s3 = peg$FAILED
            }
            while (s3 !== peg$FAILED) {
                s2.push(s3)
                s3 = peg$currPos
                s4 = peg$parse__()
                if (s4 !== peg$FAILED) {
                    if (input.charCodeAt(peg$currPos) === 44) {
                        s5 = peg$c228
                        peg$currPos++
                    } else {
                        s5 = peg$FAILED
                        if (peg$silentFails === 0) {
                            peg$fail(peg$c229)
                        }
                    }
                    if (s5 !== peg$FAILED) {
                        s6 = peg$parse__()
                        if (s6 !== peg$FAILED) {
                            s7 = peg$parseVariableDeclarationNoIn()
                            if (s7 !== peg$FAILED) {
                                s4 = [s4, s5, s6, s7]
                                s3 = s4
                            } else {
                                peg$currPos = s3
                                s3 = peg$FAILED
                            }
                        } else {
                            peg$currPos = s3
                            s3 = peg$FAILED
                        }
                    } else {
                        peg$currPos = s3
                        s3 = peg$FAILED
                    }
                } else {
                    peg$currPos = s3
                    s3 = peg$FAILED
                }
            }
            if (s2 !== peg$FAILED) {
                peg$savedPos = s0
                s1 = peg$c239(s1, s2)
                s0 = s1
            } else {
                peg$currPos = s0
                s0 = peg$FAILED
            }
        } else {
            peg$currPos = s0
            s0 = peg$FAILED
        }

        return s0
    }

    function peg$parseVariableDeclaration() {
        var s0, s1, s2, s3, s4

        s0 = peg$currPos
        s1 = peg$parseIdentifier()
        if (s1 !== peg$FAILED) {
            s2 = peg$currPos
            s3 = peg$parse__()
            if (s3 !== peg$FAILED) {
                s4 = peg$parseInitialiser()
                if (s4 !== peg$FAILED) {
                    s3 = [s3, s4]
                    s2 = s3
                } else {
                    peg$currPos = s2
                    s2 = peg$FAILED
                }
            } else {
                peg$currPos = s2
                s2 = peg$FAILED
            }
            if (s2 === peg$FAILED) {
                s2 = null
            }
            if (s2 !== peg$FAILED) {
                peg$savedPos = s0
                s1 = peg$c350(s1, s2)
                s0 = s1
            } else {
                peg$currPos = s0
                s0 = peg$FAILED
            }
        } else {
            peg$currPos = s0
            s0 = peg$FAILED
        }

        return s0
    }

    function peg$parseVariableDeclarationNoIn() {
        var s0, s1, s2, s3, s4

        s0 = peg$currPos
        s1 = peg$parseIdentifier()
        if (s1 !== peg$FAILED) {
            s2 = peg$currPos
            s3 = peg$parse__()
            if (s3 !== peg$FAILED) {
                s4 = peg$parseInitialiserNoIn()
                if (s4 !== peg$FAILED) {
                    s3 = [s3, s4]
                    s2 = s3
                } else {
                    peg$currPos = s2
                    s2 = peg$FAILED
                }
            } else {
                peg$currPos = s2
                s2 = peg$FAILED
            }
            if (s2 === peg$FAILED) {
                s2 = null
            }
            if (s2 !== peg$FAILED) {
                peg$savedPos = s0
                s1 = peg$c350(s1, s2)
                s0 = s1
            } else {
                peg$currPos = s0
                s0 = peg$FAILED
            }
        } else {
            peg$currPos = s0
            s0 = peg$FAILED
        }

        return s0
    }

    function peg$parseInitialiser() {
        var s0, s1, s2, s3, s4

        s0 = peg$currPos
        if (input.charCodeAt(peg$currPos) === 61) {
            s1 = peg$c265
            peg$currPos++
        } else {
            s1 = peg$FAILED
            if (peg$silentFails === 0) {
                peg$fail(peg$c266)
            }
        }
        if (s1 !== peg$FAILED) {
            s2 = peg$currPos
            peg$silentFails++
            if (input.charCodeAt(peg$currPos) === 61) {
                s3 = peg$c265
                peg$currPos++
            } else {
                s3 = peg$FAILED
                if (peg$silentFails === 0) {
                    peg$fail(peg$c266)
                }
            }
            peg$silentFails--
            if (s3 === peg$FAILED) {
                s2 = void 0
            } else {
                peg$currPos = s2
                s2 = peg$FAILED
            }
            if (s2 !== peg$FAILED) {
                s3 = peg$parse__()
                if (s3 !== peg$FAILED) {
                    s4 = peg$parseAssignmentExpression()
                    if (s4 !== peg$FAILED) {
                        peg$savedPos = s0
                        s1 = peg$c225(s4)
                        s0 = s1
                    } else {
                        peg$currPos = s0
                        s0 = peg$FAILED
                    }
                } else {
                    peg$currPos = s0
                    s0 = peg$FAILED
                }
            } else {
                peg$currPos = s0
                s0 = peg$FAILED
            }
        } else {
            peg$currPos = s0
            s0 = peg$FAILED
        }

        return s0
    }

    function peg$parseInitialiserNoIn() {
        var s0, s1, s2, s3, s4

        s0 = peg$currPos
        if (input.charCodeAt(peg$currPos) === 61) {
            s1 = peg$c265
            peg$currPos++
        } else {
            s1 = peg$FAILED
            if (peg$silentFails === 0) {
                peg$fail(peg$c266)
            }
        }
        if (s1 !== peg$FAILED) {
            s2 = peg$currPos
            peg$silentFails++
            if (input.charCodeAt(peg$currPos) === 61) {
                s3 = peg$c265
                peg$currPos++
            } else {
                s3 = peg$FAILED
                if (peg$silentFails === 0) {
                    peg$fail(peg$c266)
                }
            }
            peg$silentFails--
            if (s3 === peg$FAILED) {
                s2 = void 0
            } else {
                peg$currPos = s2
                s2 = peg$FAILED
            }
            if (s2 !== peg$FAILED) {
                s3 = peg$parse__()
                if (s3 !== peg$FAILED) {
                    s4 = peg$parseAssignmentExpressionNoIn()
                    if (s4 !== peg$FAILED) {
                        peg$savedPos = s0
                        s1 = peg$c225(s4)
                        s0 = s1
                    } else {
                        peg$currPos = s0
                        s0 = peg$FAILED
                    }
                } else {
                    peg$currPos = s0
                    s0 = peg$FAILED
                }
            } else {
                peg$currPos = s0
                s0 = peg$FAILED
            }
        } else {
            peg$currPos = s0
            s0 = peg$FAILED
        }

        return s0
    }

    function peg$parseEmptyStatement() {
        var s0, s1

        s0 = peg$currPos
        if (input.charCodeAt(peg$currPos) === 59) {
            s1 = peg$c216
            peg$currPos++
        } else {
            s1 = peg$FAILED
            if (peg$silentFails === 0) {
                peg$fail(peg$c217)
            }
        }
        if (s1 !== peg$FAILED) {
            peg$savedPos = s0
            s1 = peg$c351()
        }
        s0 = s1

        return s0
    }

    function peg$parseExpressionStatement() {
        var s0, s1, s2, s3

        s0 = peg$currPos
        s1 = peg$currPos
        peg$silentFails++
        if (input.charCodeAt(peg$currPos) === 123) {
            s2 = peg$c235
            peg$currPos++
        } else {
            s2 = peg$FAILED
            if (peg$silentFails === 0) {
                peg$fail(peg$c236)
            }
        }
        if (s2 === peg$FAILED) {
            s2 = peg$parseFunctionToken()
        }
        peg$silentFails--
        if (s2 === peg$FAILED) {
            s1 = void 0
        } else {
            peg$currPos = s1
            s1 = peg$FAILED
        }
        if (s1 !== peg$FAILED) {
            s2 = peg$parseExpression()
            if (s2 !== peg$FAILED) {
                s3 = peg$parseEOS()
                if (s3 !== peg$FAILED) {
                    peg$savedPos = s0
                    s1 = peg$c352(s2)
                    s0 = s1
                } else {
                    peg$currPos = s0
                    s0 = peg$FAILED
                }
            } else {
                peg$currPos = s0
                s0 = peg$FAILED
            }
        } else {
            peg$currPos = s0
            s0 = peg$FAILED
        }

        return s0
    }

    function peg$parseIfStatement() {
        var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13

        s0 = peg$currPos
        s1 = peg$parseIfToken()
        if (s1 !== peg$FAILED) {
            s2 = peg$parse__()
            if (s2 !== peg$FAILED) {
                if (input.charCodeAt(peg$currPos) === 40) {
                    s3 = peg$c221
                    peg$currPos++
                } else {
                    s3 = peg$FAILED
                    if (peg$silentFails === 0) {
                        peg$fail(peg$c222)
                    }
                }
                if (s3 !== peg$FAILED) {
                    s4 = peg$parse__()
                    if (s4 !== peg$FAILED) {
                        s5 = peg$parseExpression()
                        if (s5 !== peg$FAILED) {
                            s6 = peg$parse__()
                            if (s6 !== peg$FAILED) {
                                if (input.charCodeAt(peg$currPos) === 41) {
                                    s7 = peg$c223
                                    peg$currPos++
                                } else {
                                    s7 = peg$FAILED
                                    if (peg$silentFails === 0) {
                                        peg$fail(peg$c224)
                                    }
                                }
                                if (s7 !== peg$FAILED) {
                                    s8 = peg$parse__()
                                    if (s8 !== peg$FAILED) {
                                        s9 = peg$parseStatement()
                                        if (s9 !== peg$FAILED) {
                                            s10 = peg$parse__()
                                            if (s10 !== peg$FAILED) {
                                                s11 = peg$parseElseToken()
                                                if (s11 !== peg$FAILED) {
                                                    s12 = peg$parse__()
                                                    if (s12 !== peg$FAILED) {
                                                        s13 = peg$parseStatement()
                                                        if (
                                                            s13 !== peg$FAILED
                                                        ) {
                                                            peg$savedPos = s0
                                                            s1 = peg$c353(
                                                                s5,
                                                                s9,
                                                                s13
                                                            )
                                                            s0 = s1
                                                        } else {
                                                            peg$currPos = s0
                                                            s0 = peg$FAILED
                                                        }
                                                    } else {
                                                        peg$currPos = s0
                                                        s0 = peg$FAILED
                                                    }
                                                } else {
                                                    peg$currPos = s0
                                                    s0 = peg$FAILED
                                                }
                                            } else {
                                                peg$currPos = s0
                                                s0 = peg$FAILED
                                            }
                                        } else {
                                            peg$currPos = s0
                                            s0 = peg$FAILED
                                        }
                                    } else {
                                        peg$currPos = s0
                                        s0 = peg$FAILED
                                    }
                                } else {
                                    peg$currPos = s0
                                    s0 = peg$FAILED
                                }
                            } else {
                                peg$currPos = s0
                                s0 = peg$FAILED
                            }
                        } else {
                            peg$currPos = s0
                            s0 = peg$FAILED
                        }
                    } else {
                        peg$currPos = s0
                        s0 = peg$FAILED
                    }
                } else {
                    peg$currPos = s0
                    s0 = peg$FAILED
                }
            } else {
                peg$currPos = s0
                s0 = peg$FAILED
            }
        } else {
            peg$currPos = s0
            s0 = peg$FAILED
        }
        if (s0 === peg$FAILED) {
            s0 = peg$currPos
            s1 = peg$parseIfToken()
            if (s1 !== peg$FAILED) {
                s2 = peg$parse__()
                if (s2 !== peg$FAILED) {
                    if (input.charCodeAt(peg$currPos) === 40) {
                        s3 = peg$c221
                        peg$currPos++
                    } else {
                        s3 = peg$FAILED
                        if (peg$silentFails === 0) {
                            peg$fail(peg$c222)
                        }
                    }
                    if (s3 !== peg$FAILED) {
                        s4 = peg$parse__()
                        if (s4 !== peg$FAILED) {
                            s5 = peg$parseExpression()
                            if (s5 !== peg$FAILED) {
                                s6 = peg$parse__()
                                if (s6 !== peg$FAILED) {
                                    if (input.charCodeAt(peg$currPos) === 41) {
                                        s7 = peg$c223
                                        peg$currPos++
                                    } else {
                                        s7 = peg$FAILED
                                        if (peg$silentFails === 0) {
                                            peg$fail(peg$c224)
                                        }
                                    }
                                    if (s7 !== peg$FAILED) {
                                        s8 = peg$parse__()
                                        if (s8 !== peg$FAILED) {
                                            s9 = peg$parseStatement()
                                            if (s9 !== peg$FAILED) {
                                                peg$savedPos = s0
                                                s1 = peg$c354(s5, s9)
                                                s0 = s1
                                            } else {
                                                peg$currPos = s0
                                                s0 = peg$FAILED
                                            }
                                        } else {
                                            peg$currPos = s0
                                            s0 = peg$FAILED
                                        }
                                    } else {
                                        peg$currPos = s0
                                        s0 = peg$FAILED
                                    }
                                } else {
                                    peg$currPos = s0
                                    s0 = peg$FAILED
                                }
                            } else {
                                peg$currPos = s0
                                s0 = peg$FAILED
                            }
                        } else {
                            peg$currPos = s0
                            s0 = peg$FAILED
                        }
                    } else {
                        peg$currPos = s0
                        s0 = peg$FAILED
                    }
                } else {
                    peg$currPos = s0
                    s0 = peg$FAILED
                }
            } else {
                peg$currPos = s0
                s0 = peg$FAILED
            }
        }

        return s0
    }

    function peg$parseIterationStatement() {
        var s0,
            s1,
            s2,
            s3,
            s4,
            s5,
            s6,
            s7,
            s8,
            s9,
            s10,
            s11,
            s12,
            s13,
            s14,
            s15,
            s16,
            s17

        s0 = peg$currPos
        s1 = peg$parseDoToken()
        if (s1 !== peg$FAILED) {
            s2 = peg$parse__()
            if (s2 !== peg$FAILED) {
                s3 = peg$parseStatement()
                if (s3 !== peg$FAILED) {
                    s4 = peg$parse__()
                    if (s4 !== peg$FAILED) {
                        s5 = peg$parseWhileToken()
                        if (s5 !== peg$FAILED) {
                            s6 = peg$parse__()
                            if (s6 !== peg$FAILED) {
                                if (input.charCodeAt(peg$currPos) === 40) {
                                    s7 = peg$c221
                                    peg$currPos++
                                } else {
                                    s7 = peg$FAILED
                                    if (peg$silentFails === 0) {
                                        peg$fail(peg$c222)
                                    }
                                }
                                if (s7 !== peg$FAILED) {
                                    s8 = peg$parse__()
                                    if (s8 !== peg$FAILED) {
                                        s9 = peg$parseExpression()
                                        if (s9 !== peg$FAILED) {
                                            s10 = peg$parse__()
                                            if (s10 !== peg$FAILED) {
                                                if (
                                                    input.charCodeAt(
                                                        peg$currPos
                                                    ) === 41
                                                ) {
                                                    s11 = peg$c223
                                                    peg$currPos++
                                                } else {
                                                    s11 = peg$FAILED
                                                    if (peg$silentFails === 0) {
                                                        peg$fail(peg$c224)
                                                    }
                                                }
                                                if (s11 !== peg$FAILED) {
                                                    s12 = peg$parseEOS()
                                                    if (s12 !== peg$FAILED) {
                                                        peg$savedPos = s0
                                                        s1 = peg$c355(s3, s9)
                                                        s0 = s1
                                                    } else {
                                                        peg$currPos = s0
                                                        s0 = peg$FAILED
                                                    }
                                                } else {
                                                    peg$currPos = s0
                                                    s0 = peg$FAILED
                                                }
                                            } else {
                                                peg$currPos = s0
                                                s0 = peg$FAILED
                                            }
                                        } else {
                                            peg$currPos = s0
                                            s0 = peg$FAILED
                                        }
                                    } else {
                                        peg$currPos = s0
                                        s0 = peg$FAILED
                                    }
                                } else {
                                    peg$currPos = s0
                                    s0 = peg$FAILED
                                }
                            } else {
                                peg$currPos = s0
                                s0 = peg$FAILED
                            }
                        } else {
                            peg$currPos = s0
                            s0 = peg$FAILED
                        }
                    } else {
                        peg$currPos = s0
                        s0 = peg$FAILED
                    }
                } else {
                    peg$currPos = s0
                    s0 = peg$FAILED
                }
            } else {
                peg$currPos = s0
                s0 = peg$FAILED
            }
        } else {
            peg$currPos = s0
            s0 = peg$FAILED
        }
        if (s0 === peg$FAILED) {
            s0 = peg$currPos
            s1 = peg$parseWhileToken()
            if (s1 !== peg$FAILED) {
                s2 = peg$parse__()
                if (s2 !== peg$FAILED) {
                    if (input.charCodeAt(peg$currPos) === 40) {
                        s3 = peg$c221
                        peg$currPos++
                    } else {
                        s3 = peg$FAILED
                        if (peg$silentFails === 0) {
                            peg$fail(peg$c222)
                        }
                    }
                    if (s3 !== peg$FAILED) {
                        s4 = peg$parse__()
                        if (s4 !== peg$FAILED) {
                            s5 = peg$parseExpression()
                            if (s5 !== peg$FAILED) {
                                s6 = peg$parse__()
                                if (s6 !== peg$FAILED) {
                                    if (input.charCodeAt(peg$currPos) === 41) {
                                        s7 = peg$c223
                                        peg$currPos++
                                    } else {
                                        s7 = peg$FAILED
                                        if (peg$silentFails === 0) {
                                            peg$fail(peg$c224)
                                        }
                                    }
                                    if (s7 !== peg$FAILED) {
                                        s8 = peg$parse__()
                                        if (s8 !== peg$FAILED) {
                                            s9 = peg$parseStatement()
                                            if (s9 !== peg$FAILED) {
                                                peg$savedPos = s0
                                                s1 = peg$c356(s5, s9)
                                                s0 = s1
                                            } else {
                                                peg$currPos = s0
                                                s0 = peg$FAILED
                                            }
                                        } else {
                                            peg$currPos = s0
                                            s0 = peg$FAILED
                                        }
                                    } else {
                                        peg$currPos = s0
                                        s0 = peg$FAILED
                                    }
                                } else {
                                    peg$currPos = s0
                                    s0 = peg$FAILED
                                }
                            } else {
                                peg$currPos = s0
                                s0 = peg$FAILED
                            }
                        } else {
                            peg$currPos = s0
                            s0 = peg$FAILED
                        }
                    } else {
                        peg$currPos = s0
                        s0 = peg$FAILED
                    }
                } else {
                    peg$currPos = s0
                    s0 = peg$FAILED
                }
            } else {
                peg$currPos = s0
                s0 = peg$FAILED
            }
            if (s0 === peg$FAILED) {
                s0 = peg$currPos
                s1 = peg$parseForToken()
                if (s1 !== peg$FAILED) {
                    s2 = peg$parse__()
                    if (s2 !== peg$FAILED) {
                        if (input.charCodeAt(peg$currPos) === 40) {
                            s3 = peg$c221
                            peg$currPos++
                        } else {
                            s3 = peg$FAILED
                            if (peg$silentFails === 0) {
                                peg$fail(peg$c222)
                            }
                        }
                        if (s3 !== peg$FAILED) {
                            s4 = peg$parse__()
                            if (s4 !== peg$FAILED) {
                                s5 = peg$currPos
                                s6 = peg$parseExpressionNoIn()
                                if (s6 !== peg$FAILED) {
                                    s7 = peg$parse__()
                                    if (s7 !== peg$FAILED) {
                                        s6 = [s6, s7]
                                        s5 = s6
                                    } else {
                                        peg$currPos = s5
                                        s5 = peg$FAILED
                                    }
                                } else {
                                    peg$currPos = s5
                                    s5 = peg$FAILED
                                }
                                if (s5 === peg$FAILED) {
                                    s5 = null
                                }
                                if (s5 !== peg$FAILED) {
                                    if (input.charCodeAt(peg$currPos) === 59) {
                                        s6 = peg$c216
                                        peg$currPos++
                                    } else {
                                        s6 = peg$FAILED
                                        if (peg$silentFails === 0) {
                                            peg$fail(peg$c217)
                                        }
                                    }
                                    if (s6 !== peg$FAILED) {
                                        s7 = peg$parse__()
                                        if (s7 !== peg$FAILED) {
                                            s8 = peg$currPos
                                            s9 = peg$parseExpression()
                                            if (s9 !== peg$FAILED) {
                                                s10 = peg$parse__()
                                                if (s10 !== peg$FAILED) {
                                                    s9 = [s9, s10]
                                                    s8 = s9
                                                } else {
                                                    peg$currPos = s8
                                                    s8 = peg$FAILED
                                                }
                                            } else {
                                                peg$currPos = s8
                                                s8 = peg$FAILED
                                            }
                                            if (s8 === peg$FAILED) {
                                                s8 = null
                                            }
                                            if (s8 !== peg$FAILED) {
                                                if (
                                                    input.charCodeAt(
                                                        peg$currPos
                                                    ) === 59
                                                ) {
                                                    s9 = peg$c216
                                                    peg$currPos++
                                                } else {
                                                    s9 = peg$FAILED
                                                    if (peg$silentFails === 0) {
                                                        peg$fail(peg$c217)
                                                    }
                                                }
                                                if (s9 !== peg$FAILED) {
                                                    s10 = peg$parse__()
                                                    if (s10 !== peg$FAILED) {
                                                        s11 = peg$currPos
                                                        s12 = peg$parseExpression()
                                                        if (
                                                            s12 !== peg$FAILED
                                                        ) {
                                                            s13 = peg$parse__()
                                                            if (
                                                                s13 !==
                                                                peg$FAILED
                                                            ) {
                                                                s12 = [s12, s13]
                                                                s11 = s12
                                                            } else {
                                                                peg$currPos = s11
                                                                s11 = peg$FAILED
                                                            }
                                                        } else {
                                                            peg$currPos = s11
                                                            s11 = peg$FAILED
                                                        }
                                                        if (
                                                            s11 === peg$FAILED
                                                        ) {
                                                            s11 = null
                                                        }
                                                        if (
                                                            s11 !== peg$FAILED
                                                        ) {
                                                            if (
                                                                input.charCodeAt(
                                                                    peg$currPos
                                                                ) === 41
                                                            ) {
                                                                s12 = peg$c223
                                                                peg$currPos++
                                                            } else {
                                                                s12 = peg$FAILED
                                                                if (
                                                                    peg$silentFails ===
                                                                    0
                                                                ) {
                                                                    peg$fail(
                                                                        peg$c224
                                                                    )
                                                                }
                                                            }
                                                            if (
                                                                s12 !==
                                                                peg$FAILED
                                                            ) {
                                                                s13 = peg$parse__()
                                                                if (
                                                                    s13 !==
                                                                    peg$FAILED
                                                                ) {
                                                                    s14 = peg$parseStatement()
                                                                    if (
                                                                        s14 !==
                                                                        peg$FAILED
                                                                    ) {
                                                                        peg$savedPos = s0
                                                                        s1 = peg$c357(
                                                                            s5,
                                                                            s8,
                                                                            s11,
                                                                            s14
                                                                        )
                                                                        s0 = s1
                                                                    } else {
                                                                        peg$currPos = s0
                                                                        s0 = peg$FAILED
                                                                    }
                                                                } else {
                                                                    peg$currPos = s0
                                                                    s0 = peg$FAILED
                                                                }
                                                            } else {
                                                                peg$currPos = s0
                                                                s0 = peg$FAILED
                                                            }
                                                        } else {
                                                            peg$currPos = s0
                                                            s0 = peg$FAILED
                                                        }
                                                    } else {
                                                        peg$currPos = s0
                                                        s0 = peg$FAILED
                                                    }
                                                } else {
                                                    peg$currPos = s0
                                                    s0 = peg$FAILED
                                                }
                                            } else {
                                                peg$currPos = s0
                                                s0 = peg$FAILED
                                            }
                                        } else {
                                            peg$currPos = s0
                                            s0 = peg$FAILED
                                        }
                                    } else {
                                        peg$currPos = s0
                                        s0 = peg$FAILED
                                    }
                                } else {
                                    peg$currPos = s0
                                    s0 = peg$FAILED
                                }
                            } else {
                                peg$currPos = s0
                                s0 = peg$FAILED
                            }
                        } else {
                            peg$currPos = s0
                            s0 = peg$FAILED
                        }
                    } else {
                        peg$currPos = s0
                        s0 = peg$FAILED
                    }
                } else {
                    peg$currPos = s0
                    s0 = peg$FAILED
                }
                if (s0 === peg$FAILED) {
                    s0 = peg$currPos
                    s1 = peg$parseForToken()
                    if (s1 !== peg$FAILED) {
                        s2 = peg$parse__()
                        if (s2 !== peg$FAILED) {
                            if (input.charCodeAt(peg$currPos) === 40) {
                                s3 = peg$c221
                                peg$currPos++
                            } else {
                                s3 = peg$FAILED
                                if (peg$silentFails === 0) {
                                    peg$fail(peg$c222)
                                }
                            }
                            if (s3 !== peg$FAILED) {
                                s4 = peg$parse__()
                                if (s4 !== peg$FAILED) {
                                    s5 = peg$parseVarToken()
                                    if (s5 !== peg$FAILED) {
                                        s6 = peg$parse__()
                                        if (s6 !== peg$FAILED) {
                                            s7 = peg$parseVariableDeclarationListNoIn()
                                            if (s7 !== peg$FAILED) {
                                                s8 = peg$parse__()
                                                if (s8 !== peg$FAILED) {
                                                    if (
                                                        input.charCodeAt(
                                                            peg$currPos
                                                        ) === 59
                                                    ) {
                                                        s9 = peg$c216
                                                        peg$currPos++
                                                    } else {
                                                        s9 = peg$FAILED
                                                        if (
                                                            peg$silentFails ===
                                                            0
                                                        ) {
                                                            peg$fail(peg$c217)
                                                        }
                                                    }
                                                    if (s9 !== peg$FAILED) {
                                                        s10 = peg$parse__()
                                                        if (
                                                            s10 !== peg$FAILED
                                                        ) {
                                                            s11 = peg$currPos
                                                            s12 = peg$parseExpression()
                                                            if (
                                                                s12 !==
                                                                peg$FAILED
                                                            ) {
                                                                s13 = peg$parse__()
                                                                if (
                                                                    s13 !==
                                                                    peg$FAILED
                                                                ) {
                                                                    s12 = [
                                                                        s12,
                                                                        s13
                                                                    ]
                                                                    s11 = s12
                                                                } else {
                                                                    peg$currPos = s11
                                                                    s11 = peg$FAILED
                                                                }
                                                            } else {
                                                                peg$currPos = s11
                                                                s11 = peg$FAILED
                                                            }
                                                            if (
                                                                s11 ===
                                                                peg$FAILED
                                                            ) {
                                                                s11 = null
                                                            }
                                                            if (
                                                                s11 !==
                                                                peg$FAILED
                                                            ) {
                                                                if (
                                                                    input.charCodeAt(
                                                                        peg$currPos
                                                                    ) === 59
                                                                ) {
                                                                    s12 = peg$c216
                                                                    peg$currPos++
                                                                } else {
                                                                    s12 = peg$FAILED
                                                                    if (
                                                                        peg$silentFails ===
                                                                        0
                                                                    ) {
                                                                        peg$fail(
                                                                            peg$c217
                                                                        )
                                                                    }
                                                                }
                                                                if (
                                                                    s12 !==
                                                                    peg$FAILED
                                                                ) {
                                                                    s13 = peg$parse__()
                                                                    if (
                                                                        s13 !==
                                                                        peg$FAILED
                                                                    ) {
                                                                        s14 = peg$currPos
                                                                        s15 = peg$parseExpression()
                                                                        if (
                                                                            s15 !==
                                                                            peg$FAILED
                                                                        ) {
                                                                            s16 = peg$parse__()
                                                                            if (
                                                                                s16 !==
                                                                                peg$FAILED
                                                                            ) {
                                                                                s15 = [
                                                                                    s15,
                                                                                    s16
                                                                                ]
                                                                                s14 = s15
                                                                            } else {
                                                                                peg$currPos = s14
                                                                                s14 = peg$FAILED
                                                                            }
                                                                        } else {
                                                                            peg$currPos = s14
                                                                            s14 = peg$FAILED
                                                                        }
                                                                        if (
                                                                            s14 ===
                                                                            peg$FAILED
                                                                        ) {
                                                                            s14 = null
                                                                        }
                                                                        if (
                                                                            s14 !==
                                                                            peg$FAILED
                                                                        ) {
                                                                            if (
                                                                                input.charCodeAt(
                                                                                    peg$currPos
                                                                                ) ===
                                                                                41
                                                                            ) {
                                                                                s15 = peg$c223
                                                                                peg$currPos++
                                                                            } else {
                                                                                s15 = peg$FAILED
                                                                                if (
                                                                                    peg$silentFails ===
                                                                                    0
                                                                                ) {
                                                                                    peg$fail(
                                                                                        peg$c224
                                                                                    )
                                                                                }
                                                                            }
                                                                            if (
                                                                                s15 !==
                                                                                peg$FAILED
                                                                            ) {
                                                                                s16 = peg$parse__()
                                                                                if (
                                                                                    s16 !==
                                                                                    peg$FAILED
                                                                                ) {
                                                                                    s17 = peg$parseStatement()
                                                                                    if (
                                                                                        s17 !==
                                                                                        peg$FAILED
                                                                                    ) {
                                                                                        peg$savedPos = s0
                                                                                        s1 = peg$c358(
                                                                                            s7,
                                                                                            s11,
                                                                                            s14,
                                                                                            s17
                                                                                        )
                                                                                        s0 = s1
                                                                                    } else {
                                                                                        peg$currPos = s0
                                                                                        s0 = peg$FAILED
                                                                                    }
                                                                                } else {
                                                                                    peg$currPos = s0
                                                                                    s0 = peg$FAILED
                                                                                }
                                                                            } else {
                                                                                peg$currPos = s0
                                                                                s0 = peg$FAILED
                                                                            }
                                                                        } else {
                                                                            peg$currPos = s0
                                                                            s0 = peg$FAILED
                                                                        }
                                                                    } else {
                                                                        peg$currPos = s0
                                                                        s0 = peg$FAILED
                                                                    }
                                                                } else {
                                                                    peg$currPos = s0
                                                                    s0 = peg$FAILED
                                                                }
                                                            } else {
                                                                peg$currPos = s0
                                                                s0 = peg$FAILED
                                                            }
                                                        } else {
                                                            peg$currPos = s0
                                                            s0 = peg$FAILED
                                                        }
                                                    } else {
                                                        peg$currPos = s0
                                                        s0 = peg$FAILED
                                                    }
                                                } else {
                                                    peg$currPos = s0
                                                    s0 = peg$FAILED
                                                }
                                            } else {
                                                peg$currPos = s0
                                                s0 = peg$FAILED
                                            }
                                        } else {
                                            peg$currPos = s0
                                            s0 = peg$FAILED
                                        }
                                    } else {
                                        peg$currPos = s0
                                        s0 = peg$FAILED
                                    }
                                } else {
                                    peg$currPos = s0
                                    s0 = peg$FAILED
                                }
                            } else {
                                peg$currPos = s0
                                s0 = peg$FAILED
                            }
                        } else {
                            peg$currPos = s0
                            s0 = peg$FAILED
                        }
                    } else {
                        peg$currPos = s0
                        s0 = peg$FAILED
                    }
                    if (s0 === peg$FAILED) {
                        s0 = peg$currPos
                        s1 = peg$parseForToken()
                        if (s1 !== peg$FAILED) {
                            s2 = peg$parse__()
                            if (s2 !== peg$FAILED) {
                                if (input.charCodeAt(peg$currPos) === 40) {
                                    s3 = peg$c221
                                    peg$currPos++
                                } else {
                                    s3 = peg$FAILED
                                    if (peg$silentFails === 0) {
                                        peg$fail(peg$c222)
                                    }
                                }
                                if (s3 !== peg$FAILED) {
                                    s4 = peg$parse__()
                                    if (s4 !== peg$FAILED) {
                                        s5 = peg$parseLeftHandSideExpression()
                                        if (s5 !== peg$FAILED) {
                                            s6 = peg$parse__()
                                            if (s6 !== peg$FAILED) {
                                                s7 = peg$parseInToken()
                                                if (s7 !== peg$FAILED) {
                                                    s8 = peg$parse__()
                                                    if (s8 !== peg$FAILED) {
                                                        s9 = peg$parseExpression()
                                                        if (s9 !== peg$FAILED) {
                                                            s10 = peg$parse__()
                                                            if (
                                                                s10 !==
                                                                peg$FAILED
                                                            ) {
                                                                if (
                                                                    input.charCodeAt(
                                                                        peg$currPos
                                                                    ) === 41
                                                                ) {
                                                                    s11 = peg$c223
                                                                    peg$currPos++
                                                                } else {
                                                                    s11 = peg$FAILED
                                                                    if (
                                                                        peg$silentFails ===
                                                                        0
                                                                    ) {
                                                                        peg$fail(
                                                                            peg$c224
                                                                        )
                                                                    }
                                                                }
                                                                if (
                                                                    s11 !==
                                                                    peg$FAILED
                                                                ) {
                                                                    s12 = peg$parse__()
                                                                    if (
                                                                        s12 !==
                                                                        peg$FAILED
                                                                    ) {
                                                                        s13 = peg$parseStatement()
                                                                        if (
                                                                            s13 !==
                                                                            peg$FAILED
                                                                        ) {
                                                                            peg$savedPos = s0
                                                                            s1 = peg$c359(
                                                                                s5,
                                                                                s9,
                                                                                s13
                                                                            )
                                                                            s0 = s1
                                                                        } else {
                                                                            peg$currPos = s0
                                                                            s0 = peg$FAILED
                                                                        }
                                                                    } else {
                                                                        peg$currPos = s0
                                                                        s0 = peg$FAILED
                                                                    }
                                                                } else {
                                                                    peg$currPos = s0
                                                                    s0 = peg$FAILED
                                                                }
                                                            } else {
                                                                peg$currPos = s0
                                                                s0 = peg$FAILED
                                                            }
                                                        } else {
                                                            peg$currPos = s0
                                                            s0 = peg$FAILED
                                                        }
                                                    } else {
                                                        peg$currPos = s0
                                                        s0 = peg$FAILED
                                                    }
                                                } else {
                                                    peg$currPos = s0
                                                    s0 = peg$FAILED
                                                }
                                            } else {
                                                peg$currPos = s0
                                                s0 = peg$FAILED
                                            }
                                        } else {
                                            peg$currPos = s0
                                            s0 = peg$FAILED
                                        }
                                    } else {
                                        peg$currPos = s0
                                        s0 = peg$FAILED
                                    }
                                } else {
                                    peg$currPos = s0
                                    s0 = peg$FAILED
                                }
                            } else {
                                peg$currPos = s0
                                s0 = peg$FAILED
                            }
                        } else {
                            peg$currPos = s0
                            s0 = peg$FAILED
                        }
                        if (s0 === peg$FAILED) {
                            s0 = peg$currPos
                            s1 = peg$parseForToken()
                            if (s1 !== peg$FAILED) {
                                s2 = peg$parse__()
                                if (s2 !== peg$FAILED) {
                                    if (input.charCodeAt(peg$currPos) === 40) {
                                        s3 = peg$c221
                                        peg$currPos++
                                    } else {
                                        s3 = peg$FAILED
                                        if (peg$silentFails === 0) {
                                            peg$fail(peg$c222)
                                        }
                                    }
                                    if (s3 !== peg$FAILED) {
                                        s4 = peg$parse__()
                                        if (s4 !== peg$FAILED) {
                                            s5 = peg$parseVarToken()
                                            if (s5 !== peg$FAILED) {
                                                s6 = peg$parse__()
                                                if (s6 !== peg$FAILED) {
                                                    s7 = peg$parseVariableDeclarationListNoIn()
                                                    if (s7 !== peg$FAILED) {
                                                        s8 = peg$parse__()
                                                        if (s8 !== peg$FAILED) {
                                                            s9 = peg$parseInToken()
                                                            if (
                                                                s9 !==
                                                                peg$FAILED
                                                            ) {
                                                                s10 = peg$parse__()
                                                                if (
                                                                    s10 !==
                                                                    peg$FAILED
                                                                ) {
                                                                    s11 = peg$parseExpression()
                                                                    if (
                                                                        s11 !==
                                                                        peg$FAILED
                                                                    ) {
                                                                        s12 = peg$parse__()
                                                                        if (
                                                                            s12 !==
                                                                            peg$FAILED
                                                                        ) {
                                                                            if (
                                                                                input.charCodeAt(
                                                                                    peg$currPos
                                                                                ) ===
                                                                                41
                                                                            ) {
                                                                                s13 = peg$c223
                                                                                peg$currPos++
                                                                            } else {
                                                                                s13 = peg$FAILED
                                                                                if (
                                                                                    peg$silentFails ===
                                                                                    0
                                                                                ) {
                                                                                    peg$fail(
                                                                                        peg$c224
                                                                                    )
                                                                                }
                                                                            }
                                                                            if (
                                                                                s13 !==
                                                                                peg$FAILED
                                                                            ) {
                                                                                s14 = peg$parse__()
                                                                                if (
                                                                                    s14 !==
                                                                                    peg$FAILED
                                                                                ) {
                                                                                    s15 = peg$parseStatement()
                                                                                    if (
                                                                                        s15 !==
                                                                                        peg$FAILED
                                                                                    ) {
                                                                                        peg$savedPos = s0
                                                                                        s1 = peg$c360(
                                                                                            s7,
                                                                                            s11,
                                                                                            s15
                                                                                        )
                                                                                        s0 = s1
                                                                                    } else {
                                                                                        peg$currPos = s0
                                                                                        s0 = peg$FAILED
                                                                                    }
                                                                                } else {
                                                                                    peg$currPos = s0
                                                                                    s0 = peg$FAILED
                                                                                }
                                                                            } else {
                                                                                peg$currPos = s0
                                                                                s0 = peg$FAILED
                                                                            }
                                                                        } else {
                                                                            peg$currPos = s0
                                                                            s0 = peg$FAILED
                                                                        }
                                                                    } else {
                                                                        peg$currPos = s0
                                                                        s0 = peg$FAILED
                                                                    }
                                                                } else {
                                                                    peg$currPos = s0
                                                                    s0 = peg$FAILED
                                                                }
                                                            } else {
                                                                peg$currPos = s0
                                                                s0 = peg$FAILED
                                                            }
                                                        } else {
                                                            peg$currPos = s0
                                                            s0 = peg$FAILED
                                                        }
                                                    } else {
                                                        peg$currPos = s0
                                                        s0 = peg$FAILED
                                                    }
                                                } else {
                                                    peg$currPos = s0
                                                    s0 = peg$FAILED
                                                }
                                            } else {
                                                peg$currPos = s0
                                                s0 = peg$FAILED
                                            }
                                        } else {
                                            peg$currPos = s0
                                            s0 = peg$FAILED
                                        }
                                    } else {
                                        peg$currPos = s0
                                        s0 = peg$FAILED
                                    }
                                } else {
                                    peg$currPos = s0
                                    s0 = peg$FAILED
                                }
                            } else {
                                peg$currPos = s0
                                s0 = peg$FAILED
                            }
                        }
                    }
                }
            }
        }

        return s0
    }

    function peg$parseContinueStatement() {
        var s0, s1, s2, s3, s4

        s0 = peg$currPos
        s1 = peg$parseContinueToken()
        if (s1 !== peg$FAILED) {
            s2 = peg$parseEOS()
            if (s2 !== peg$FAILED) {
                peg$savedPos = s0
                s1 = peg$c361()
                s0 = s1
            } else {
                peg$currPos = s0
                s0 = peg$FAILED
            }
        } else {
            peg$currPos = s0
            s0 = peg$FAILED
        }
        if (s0 === peg$FAILED) {
            s0 = peg$currPos
            s1 = peg$parseContinueToken()
            if (s1 !== peg$FAILED) {
                s2 = peg$parse_()
                if (s2 !== peg$FAILED) {
                    s3 = peg$parseIdentifier()
                    if (s3 !== peg$FAILED) {
                        s4 = peg$parseEOS()
                        if (s4 !== peg$FAILED) {
                            peg$savedPos = s0
                            s1 = peg$c362(s3)
                            s0 = s1
                        } else {
                            peg$currPos = s0
                            s0 = peg$FAILED
                        }
                    } else {
                        peg$currPos = s0
                        s0 = peg$FAILED
                    }
                } else {
                    peg$currPos = s0
                    s0 = peg$FAILED
                }
            } else {
                peg$currPos = s0
                s0 = peg$FAILED
            }
        }

        return s0
    }

    function peg$parseBreakStatement() {
        var s0, s1, s2, s3, s4

        s0 = peg$currPos
        s1 = peg$parseBreakToken()
        if (s1 !== peg$FAILED) {
            s2 = peg$parseEOS()
            if (s2 !== peg$FAILED) {
                peg$savedPos = s0
                s1 = peg$c363()
                s0 = s1
            } else {
                peg$currPos = s0
                s0 = peg$FAILED
            }
        } else {
            peg$currPos = s0
            s0 = peg$FAILED
        }
        if (s0 === peg$FAILED) {
            s0 = peg$currPos
            s1 = peg$parseBreakToken()
            if (s1 !== peg$FAILED) {
                s2 = peg$parse_()
                if (s2 !== peg$FAILED) {
                    s3 = peg$parseIdentifier()
                    if (s3 !== peg$FAILED) {
                        s4 = peg$parseEOS()
                        if (s4 !== peg$FAILED) {
                            peg$savedPos = s0
                            s1 = peg$c364(s3)
                            s0 = s1
                        } else {
                            peg$currPos = s0
                            s0 = peg$FAILED
                        }
                    } else {
                        peg$currPos = s0
                        s0 = peg$FAILED
                    }
                } else {
                    peg$currPos = s0
                    s0 = peg$FAILED
                }
            } else {
                peg$currPos = s0
                s0 = peg$FAILED
            }
        }

        return s0
    }

    function peg$parseReturnStatement() {
        var s0, s1, s2, s3, s4

        s0 = peg$currPos
        s1 = peg$parseReturnToken()
        if (s1 !== peg$FAILED) {
            s2 = peg$parseEOS()
            if (s2 !== peg$FAILED) {
                peg$savedPos = s0
                s1 = peg$c365()
                s0 = s1
            } else {
                peg$currPos = s0
                s0 = peg$FAILED
            }
        } else {
            peg$currPos = s0
            s0 = peg$FAILED
        }
        if (s0 === peg$FAILED) {
            s0 = peg$currPos
            s1 = peg$parseReturnToken()
            if (s1 !== peg$FAILED) {
                s2 = peg$parse_()
                if (s2 !== peg$FAILED) {
                    s3 = peg$parseExpression()
                    if (s3 !== peg$FAILED) {
                        s4 = peg$parseEOS()
                        if (s4 !== peg$FAILED) {
                            peg$savedPos = s0
                            s1 = peg$c366(s3)
                            s0 = s1
                        } else {
                            peg$currPos = s0
                            s0 = peg$FAILED
                        }
                    } else {
                        peg$currPos = s0
                        s0 = peg$FAILED
                    }
                } else {
                    peg$currPos = s0
                    s0 = peg$FAILED
                }
            } else {
                peg$currPos = s0
                s0 = peg$FAILED
            }
        }

        return s0
    }

    function peg$parseWithStatement() {
        var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9

        s0 = peg$currPos
        s1 = peg$parseWithToken()
        if (s1 !== peg$FAILED) {
            s2 = peg$parse__()
            if (s2 !== peg$FAILED) {
                if (input.charCodeAt(peg$currPos) === 40) {
                    s3 = peg$c221
                    peg$currPos++
                } else {
                    s3 = peg$FAILED
                    if (peg$silentFails === 0) {
                        peg$fail(peg$c222)
                    }
                }
                if (s3 !== peg$FAILED) {
                    s4 = peg$parse__()
                    if (s4 !== peg$FAILED) {
                        s5 = peg$parseExpression()
                        if (s5 !== peg$FAILED) {
                            s6 = peg$parse__()
                            if (s6 !== peg$FAILED) {
                                if (input.charCodeAt(peg$currPos) === 41) {
                                    s7 = peg$c223
                                    peg$currPos++
                                } else {
                                    s7 = peg$FAILED
                                    if (peg$silentFails === 0) {
                                        peg$fail(peg$c224)
                                    }
                                }
                                if (s7 !== peg$FAILED) {
                                    s8 = peg$parse__()
                                    if (s8 !== peg$FAILED) {
                                        s9 = peg$parseStatement()
                                        if (s9 !== peg$FAILED) {
                                            peg$savedPos = s0
                                            s1 = peg$c367(s5, s9)
                                            s0 = s1
                                        } else {
                                            peg$currPos = s0
                                            s0 = peg$FAILED
                                        }
                                    } else {
                                        peg$currPos = s0
                                        s0 = peg$FAILED
                                    }
                                } else {
                                    peg$currPos = s0
                                    s0 = peg$FAILED
                                }
                            } else {
                                peg$currPos = s0
                                s0 = peg$FAILED
                            }
                        } else {
                            peg$currPos = s0
                            s0 = peg$FAILED
                        }
                    } else {
                        peg$currPos = s0
                        s0 = peg$FAILED
                    }
                } else {
                    peg$currPos = s0
                    s0 = peg$FAILED
                }
            } else {
                peg$currPos = s0
                s0 = peg$FAILED
            }
        } else {
            peg$currPos = s0
            s0 = peg$FAILED
        }

        return s0
    }

    function peg$parseSwitchStatement() {
        var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9

        s0 = peg$currPos
        s1 = peg$parseSwitchToken()
        if (s1 !== peg$FAILED) {
            s2 = peg$parse__()
            if (s2 !== peg$FAILED) {
                if (input.charCodeAt(peg$currPos) === 40) {
                    s3 = peg$c221
                    peg$currPos++
                } else {
                    s3 = peg$FAILED
                    if (peg$silentFails === 0) {
                        peg$fail(peg$c222)
                    }
                }
                if (s3 !== peg$FAILED) {
                    s4 = peg$parse__()
                    if (s4 !== peg$FAILED) {
                        s5 = peg$parseExpression()
                        if (s5 !== peg$FAILED) {
                            s6 = peg$parse__()
                            if (s6 !== peg$FAILED) {
                                if (input.charCodeAt(peg$currPos) === 41) {
                                    s7 = peg$c223
                                    peg$currPos++
                                } else {
                                    s7 = peg$FAILED
                                    if (peg$silentFails === 0) {
                                        peg$fail(peg$c224)
                                    }
                                }
                                if (s7 !== peg$FAILED) {
                                    s8 = peg$parse__()
                                    if (s8 !== peg$FAILED) {
                                        s9 = peg$parseCaseBlock()
                                        if (s9 !== peg$FAILED) {
                                            peg$savedPos = s0
                                            s1 = peg$c368(s5, s9)
                                            s0 = s1
                                        } else {
                                            peg$currPos = s0
                                            s0 = peg$FAILED
                                        }
                                    } else {
                                        peg$currPos = s0
                                        s0 = peg$FAILED
                                    }
                                } else {
                                    peg$currPos = s0
                                    s0 = peg$FAILED
                                }
                            } else {
                                peg$currPos = s0
                                s0 = peg$FAILED
                            }
                        } else {
                            peg$currPos = s0
                            s0 = peg$FAILED
                        }
                    } else {
                        peg$currPos = s0
                        s0 = peg$FAILED
                    }
                } else {
                    peg$currPos = s0
                    s0 = peg$FAILED
                }
            } else {
                peg$currPos = s0
                s0 = peg$FAILED
            }
        } else {
            peg$currPos = s0
            s0 = peg$FAILED
        }

        return s0
    }

    function peg$parseCaseBlock() {
        var s0, s1, s2, s3, s4, s5, s6, s7, s8

        s0 = peg$currPos
        if (input.charCodeAt(peg$currPos) === 123) {
            s1 = peg$c235
            peg$currPos++
        } else {
            s1 = peg$FAILED
            if (peg$silentFails === 0) {
                peg$fail(peg$c236)
            }
        }
        if (s1 !== peg$FAILED) {
            s2 = peg$parse__()
            if (s2 !== peg$FAILED) {
                s3 = peg$currPos
                s4 = peg$parseCaseClauses()
                if (s4 !== peg$FAILED) {
                    s5 = peg$parse__()
                    if (s5 !== peg$FAILED) {
                        s4 = [s4, s5]
                        s3 = s4
                    } else {
                        peg$currPos = s3
                        s3 = peg$FAILED
                    }
                } else {
                    peg$currPos = s3
                    s3 = peg$FAILED
                }
                if (s3 === peg$FAILED) {
                    s3 = null
                }
                if (s3 !== peg$FAILED) {
                    if (input.charCodeAt(peg$currPos) === 125) {
                        s4 = peg$c218
                        peg$currPos++
                    } else {
                        s4 = peg$FAILED
                        if (peg$silentFails === 0) {
                            peg$fail(peg$c219)
                        }
                    }
                    if (s4 !== peg$FAILED) {
                        peg$savedPos = s0
                        s1 = peg$c369(s3)
                        s0 = s1
                    } else {
                        peg$currPos = s0
                        s0 = peg$FAILED
                    }
                } else {
                    peg$currPos = s0
                    s0 = peg$FAILED
                }
            } else {
                peg$currPos = s0
                s0 = peg$FAILED
            }
        } else {
            peg$currPos = s0
            s0 = peg$FAILED
        }
        if (s0 === peg$FAILED) {
            s0 = peg$currPos
            if (input.charCodeAt(peg$currPos) === 123) {
                s1 = peg$c235
                peg$currPos++
            } else {
                s1 = peg$FAILED
                if (peg$silentFails === 0) {
                    peg$fail(peg$c236)
                }
            }
            if (s1 !== peg$FAILED) {
                s2 = peg$parse__()
                if (s2 !== peg$FAILED) {
                    s3 = peg$currPos
                    s4 = peg$parseCaseClauses()
                    if (s4 !== peg$FAILED) {
                        s5 = peg$parse__()
                        if (s5 !== peg$FAILED) {
                            s4 = [s4, s5]
                            s3 = s4
                        } else {
                            peg$currPos = s3
                            s3 = peg$FAILED
                        }
                    } else {
                        peg$currPos = s3
                        s3 = peg$FAILED
                    }
                    if (s3 === peg$FAILED) {
                        s3 = null
                    }
                    if (s3 !== peg$FAILED) {
                        s4 = peg$parseDefaultClause()
                        if (s4 !== peg$FAILED) {
                            s5 = peg$parse__()
                            if (s5 !== peg$FAILED) {
                                s6 = peg$currPos
                                s7 = peg$parseCaseClauses()
                                if (s7 !== peg$FAILED) {
                                    s8 = peg$parse__()
                                    if (s8 !== peg$FAILED) {
                                        s7 = [s7, s8]
                                        s6 = s7
                                    } else {
                                        peg$currPos = s6
                                        s6 = peg$FAILED
                                    }
                                } else {
                                    peg$currPos = s6
                                    s6 = peg$FAILED
                                }
                                if (s6 === peg$FAILED) {
                                    s6 = null
                                }
                                if (s6 !== peg$FAILED) {
                                    if (input.charCodeAt(peg$currPos) === 125) {
                                        s7 = peg$c218
                                        peg$currPos++
                                    } else {
                                        s7 = peg$FAILED
                                        if (peg$silentFails === 0) {
                                            peg$fail(peg$c219)
                                        }
                                    }
                                    if (s7 !== peg$FAILED) {
                                        peg$savedPos = s0
                                        s1 = peg$c370(s3, s4, s6)
                                        s0 = s1
                                    } else {
                                        peg$currPos = s0
                                        s0 = peg$FAILED
                                    }
                                } else {
                                    peg$currPos = s0
                                    s0 = peg$FAILED
                                }
                            } else {
                                peg$currPos = s0
                                s0 = peg$FAILED
                            }
                        } else {
                            peg$currPos = s0
                            s0 = peg$FAILED
                        }
                    } else {
                        peg$currPos = s0
                        s0 = peg$FAILED
                    }
                } else {
                    peg$currPos = s0
                    s0 = peg$FAILED
                }
            } else {
                peg$currPos = s0
                s0 = peg$FAILED
            }
        }

        return s0
    }

    function peg$parseCaseClauses() {
        var s0, s1, s2, s3, s4, s5

        s0 = peg$currPos
        s1 = peg$parseCaseClause()
        if (s1 !== peg$FAILED) {
            s2 = []
            s3 = peg$currPos
            s4 = peg$parse__()
            if (s4 !== peg$FAILED) {
                s5 = peg$parseCaseClause()
                if (s5 !== peg$FAILED) {
                    s4 = [s4, s5]
                    s3 = s4
                } else {
                    peg$currPos = s3
                    s3 = peg$FAILED
                }
            } else {
                peg$currPos = s3
                s3 = peg$FAILED
            }
            while (s3 !== peg$FAILED) {
                s2.push(s3)
                s3 = peg$currPos
                s4 = peg$parse__()
                if (s4 !== peg$FAILED) {
                    s5 = peg$parseCaseClause()
                    if (s5 !== peg$FAILED) {
                        s4 = [s4, s5]
                        s3 = s4
                    } else {
                        peg$currPos = s3
                        s3 = peg$FAILED
                    }
                } else {
                    peg$currPos = s3
                    s3 = peg$FAILED
                }
            }
            if (s2 !== peg$FAILED) {
                peg$savedPos = s0
                s1 = peg$c348(s1, s2)
                s0 = s1
            } else {
                peg$currPos = s0
                s0 = peg$FAILED
            }
        } else {
            peg$currPos = s0
            s0 = peg$FAILED
        }

        return s0
    }

    function peg$parseCaseClause() {
        var s0, s1, s2, s3, s4, s5, s6, s7, s8

        s0 = peg$currPos
        s1 = peg$parseCaseToken()
        if (s1 !== peg$FAILED) {
            s2 = peg$parse__()
            if (s2 !== peg$FAILED) {
                s3 = peg$parseExpression()
                if (s3 !== peg$FAILED) {
                    s4 = peg$parse__()
                    if (s4 !== peg$FAILED) {
                        if (input.charCodeAt(peg$currPos) === 58) {
                            s5 = peg$c240
                            peg$currPos++
                        } else {
                            s5 = peg$FAILED
                            if (peg$silentFails === 0) {
                                peg$fail(peg$c241)
                            }
                        }
                        if (s5 !== peg$FAILED) {
                            s6 = peg$currPos
                            s7 = peg$parse__()
                            if (s7 !== peg$FAILED) {
                                s8 = peg$parseStatementList()
                                if (s8 !== peg$FAILED) {
                                    s7 = [s7, s8]
                                    s6 = s7
                                } else {
                                    peg$currPos = s6
                                    s6 = peg$FAILED
                                }
                            } else {
                                peg$currPos = s6
                                s6 = peg$FAILED
                            }
                            if (s6 === peg$FAILED) {
                                s6 = null
                            }
                            if (s6 !== peg$FAILED) {
                                peg$savedPos = s0
                                s1 = peg$c371(s3, s6)
                                s0 = s1
                            } else {
                                peg$currPos = s0
                                s0 = peg$FAILED
                            }
                        } else {
                            peg$currPos = s0
                            s0 = peg$FAILED
                        }
                    } else {
                        peg$currPos = s0
                        s0 = peg$FAILED
                    }
                } else {
                    peg$currPos = s0
                    s0 = peg$FAILED
                }
            } else {
                peg$currPos = s0
                s0 = peg$FAILED
            }
        } else {
            peg$currPos = s0
            s0 = peg$FAILED
        }

        return s0
    }

    function peg$parseDefaultClause() {
        var s0, s1, s2, s3, s4, s5, s6

        s0 = peg$currPos
        s1 = peg$parseDefaultToken()
        if (s1 !== peg$FAILED) {
            s2 = peg$parse__()
            if (s2 !== peg$FAILED) {
                if (input.charCodeAt(peg$currPos) === 58) {
                    s3 = peg$c240
                    peg$currPos++
                } else {
                    s3 = peg$FAILED
                    if (peg$silentFails === 0) {
                        peg$fail(peg$c241)
                    }
                }
                if (s3 !== peg$FAILED) {
                    s4 = peg$currPos
                    s5 = peg$parse__()
                    if (s5 !== peg$FAILED) {
                        s6 = peg$parseStatementList()
                        if (s6 !== peg$FAILED) {
                            s5 = [s5, s6]
                            s4 = s5
                        } else {
                            peg$currPos = s4
                            s4 = peg$FAILED
                        }
                    } else {
                        peg$currPos = s4
                        s4 = peg$FAILED
                    }
                    if (s4 === peg$FAILED) {
                        s4 = null
                    }
                    if (s4 !== peg$FAILED) {
                        peg$savedPos = s0
                        s1 = peg$c372(s4)
                        s0 = s1
                    } else {
                        peg$currPos = s0
                        s0 = peg$FAILED
                    }
                } else {
                    peg$currPos = s0
                    s0 = peg$FAILED
                }
            } else {
                peg$currPos = s0
                s0 = peg$FAILED
            }
        } else {
            peg$currPos = s0
            s0 = peg$FAILED
        }

        return s0
    }

    function peg$parseLabelledStatement() {
        var s0, s1, s2, s3, s4, s5

        s0 = peg$currPos
        s1 = peg$parseIdentifier()
        if (s1 !== peg$FAILED) {
            s2 = peg$parse__()
            if (s2 !== peg$FAILED) {
                if (input.charCodeAt(peg$currPos) === 58) {
                    s3 = peg$c240
                    peg$currPos++
                } else {
                    s3 = peg$FAILED
                    if (peg$silentFails === 0) {
                        peg$fail(peg$c241)
                    }
                }
                if (s3 !== peg$FAILED) {
                    s4 = peg$parse__()
                    if (s4 !== peg$FAILED) {
                        s5 = peg$parseStatement()
                        if (s5 !== peg$FAILED) {
                            peg$savedPos = s0
                            s1 = peg$c373(s1, s5)
                            s0 = s1
                        } else {
                            peg$currPos = s0
                            s0 = peg$FAILED
                        }
                    } else {
                        peg$currPos = s0
                        s0 = peg$FAILED
                    }
                } else {
                    peg$currPos = s0
                    s0 = peg$FAILED
                }
            } else {
                peg$currPos = s0
                s0 = peg$FAILED
            }
        } else {
            peg$currPos = s0
            s0 = peg$FAILED
        }

        return s0
    }

    function peg$parseThrowStatement() {
        var s0, s1, s2, s3, s4

        s0 = peg$currPos
        s1 = peg$parseThrowToken()
        if (s1 !== peg$FAILED) {
            s2 = peg$parse_()
            if (s2 !== peg$FAILED) {
                s3 = peg$parseExpression()
                if (s3 !== peg$FAILED) {
                    s4 = peg$parseEOS()
                    if (s4 !== peg$FAILED) {
                        peg$savedPos = s0
                        s1 = peg$c374(s3)
                        s0 = s1
                    } else {
                        peg$currPos = s0
                        s0 = peg$FAILED
                    }
                } else {
                    peg$currPos = s0
                    s0 = peg$FAILED
                }
            } else {
                peg$currPos = s0
                s0 = peg$FAILED
            }
        } else {
            peg$currPos = s0
            s0 = peg$FAILED
        }

        return s0
    }

    function peg$parseTryStatement() {
        var s0, s1, s2, s3, s4, s5, s6, s7

        s0 = peg$currPos
        s1 = peg$parseTryToken()
        if (s1 !== peg$FAILED) {
            s2 = peg$parse__()
            if (s2 !== peg$FAILED) {
                s3 = peg$parseBlock()
                if (s3 !== peg$FAILED) {
                    s4 = peg$parse__()
                    if (s4 !== peg$FAILED) {
                        s5 = peg$parseCatch()
                        if (s5 !== peg$FAILED) {
                            s6 = peg$parse__()
                            if (s6 !== peg$FAILED) {
                                s7 = peg$parseFinally()
                                if (s7 !== peg$FAILED) {
                                    peg$savedPos = s0
                                    s1 = peg$c375(s3, s5, s7)
                                    s0 = s1
                                } else {
                                    peg$currPos = s0
                                    s0 = peg$FAILED
                                }
                            } else {
                                peg$currPos = s0
                                s0 = peg$FAILED
                            }
                        } else {
                            peg$currPos = s0
                            s0 = peg$FAILED
                        }
                    } else {
                        peg$currPos = s0
                        s0 = peg$FAILED
                    }
                } else {
                    peg$currPos = s0
                    s0 = peg$FAILED
                }
            } else {
                peg$currPos = s0
                s0 = peg$FAILED
            }
        } else {
            peg$currPos = s0
            s0 = peg$FAILED
        }
        if (s0 === peg$FAILED) {
            s0 = peg$currPos
            s1 = peg$parseTryToken()
            if (s1 !== peg$FAILED) {
                s2 = peg$parse__()
                if (s2 !== peg$FAILED) {
                    s3 = peg$parseBlock()
                    if (s3 !== peg$FAILED) {
                        s4 = peg$parse__()
                        if (s4 !== peg$FAILED) {
                            s5 = peg$parseCatch()
                            if (s5 !== peg$FAILED) {
                                peg$savedPos = s0
                                s1 = peg$c376(s3, s5)
                                s0 = s1
                            } else {
                                peg$currPos = s0
                                s0 = peg$FAILED
                            }
                        } else {
                            peg$currPos = s0
                            s0 = peg$FAILED
                        }
                    } else {
                        peg$currPos = s0
                        s0 = peg$FAILED
                    }
                } else {
                    peg$currPos = s0
                    s0 = peg$FAILED
                }
            } else {
                peg$currPos = s0
                s0 = peg$FAILED
            }
            if (s0 === peg$FAILED) {
                s0 = peg$currPos
                s1 = peg$parseTryToken()
                if (s1 !== peg$FAILED) {
                    s2 = peg$parse__()
                    if (s2 !== peg$FAILED) {
                        s3 = peg$parseBlock()
                        if (s3 !== peg$FAILED) {
                            s4 = peg$parse__()
                            if (s4 !== peg$FAILED) {
                                s5 = peg$parseFinally()
                                if (s5 !== peg$FAILED) {
                                    peg$savedPos = s0
                                    s1 = peg$c377(s3, s5)
                                    s0 = s1
                                } else {
                                    peg$currPos = s0
                                    s0 = peg$FAILED
                                }
                            } else {
                                peg$currPos = s0
                                s0 = peg$FAILED
                            }
                        } else {
                            peg$currPos = s0
                            s0 = peg$FAILED
                        }
                    } else {
                        peg$currPos = s0
                        s0 = peg$FAILED
                    }
                } else {
                    peg$currPos = s0
                    s0 = peg$FAILED
                }
            }
        }

        return s0
    }

    function peg$parseCatch() {
        var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9

        s0 = peg$currPos
        s1 = peg$parseCatchToken()
        if (s1 !== peg$FAILED) {
            s2 = peg$parse__()
            if (s2 !== peg$FAILED) {
                if (input.charCodeAt(peg$currPos) === 40) {
                    s3 = peg$c221
                    peg$currPos++
                } else {
                    s3 = peg$FAILED
                    if (peg$silentFails === 0) {
                        peg$fail(peg$c222)
                    }
                }
                if (s3 !== peg$FAILED) {
                    s4 = peg$parse__()
                    if (s4 !== peg$FAILED) {
                        s5 = peg$parseIdentifier()
                        if (s5 !== peg$FAILED) {
                            s6 = peg$parse__()
                            if (s6 !== peg$FAILED) {
                                if (input.charCodeAt(peg$currPos) === 41) {
                                    s7 = peg$c223
                                    peg$currPos++
                                } else {
                                    s7 = peg$FAILED
                                    if (peg$silentFails === 0) {
                                        peg$fail(peg$c224)
                                    }
                                }
                                if (s7 !== peg$FAILED) {
                                    s8 = peg$parse__()
                                    if (s8 !== peg$FAILED) {
                                        s9 = peg$parseBlock()
                                        if (s9 !== peg$FAILED) {
                                            peg$savedPos = s0
                                            s1 = peg$c378(s5, s9)
                                            s0 = s1
                                        } else {
                                            peg$currPos = s0
                                            s0 = peg$FAILED
                                        }
                                    } else {
                                        peg$currPos = s0
                                        s0 = peg$FAILED
                                    }
                                } else {
                                    peg$currPos = s0
                                    s0 = peg$FAILED
                                }
                            } else {
                                peg$currPos = s0
                                s0 = peg$FAILED
                            }
                        } else {
                            peg$currPos = s0
                            s0 = peg$FAILED
                        }
                    } else {
                        peg$currPos = s0
                        s0 = peg$FAILED
                    }
                } else {
                    peg$currPos = s0
                    s0 = peg$FAILED
                }
            } else {
                peg$currPos = s0
                s0 = peg$FAILED
            }
        } else {
            peg$currPos = s0
            s0 = peg$FAILED
        }

        return s0
    }

    function peg$parseFinally() {
        var s0, s1, s2, s3

        s0 = peg$currPos
        s1 = peg$parseFinallyToken()
        if (s1 !== peg$FAILED) {
            s2 = peg$parse__()
            if (s2 !== peg$FAILED) {
                s3 = peg$parseBlock()
                if (s3 !== peg$FAILED) {
                    peg$savedPos = s0
                    s1 = peg$c379(s3)
                    s0 = s1
                } else {
                    peg$currPos = s0
                    s0 = peg$FAILED
                }
            } else {
                peg$currPos = s0
                s0 = peg$FAILED
            }
        } else {
            peg$currPos = s0
            s0 = peg$FAILED
        }

        return s0
    }

    function peg$parseDebuggerStatement() {
        var s0, s1, s2

        s0 = peg$currPos
        s1 = peg$parseDebuggerToken()
        if (s1 !== peg$FAILED) {
            s2 = peg$parseEOS()
            if (s2 !== peg$FAILED) {
                peg$savedPos = s0
                s1 = peg$c380()
                s0 = s1
            } else {
                peg$currPos = s0
                s0 = peg$FAILED
            }
        } else {
            peg$currPos = s0
            s0 = peg$FAILED
        }

        return s0
    }

    function peg$parseFunctionDeclaration() {
        var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14

        s0 = peg$currPos
        s1 = peg$parseFunctionToken()
        if (s1 !== peg$FAILED) {
            s2 = peg$parse__()
            if (s2 !== peg$FAILED) {
                s3 = peg$parseIdentifier()
                if (s3 !== peg$FAILED) {
                    s4 = peg$parse__()
                    if (s4 !== peg$FAILED) {
                        if (input.charCodeAt(peg$currPos) === 40) {
                            s5 = peg$c221
                            peg$currPos++
                        } else {
                            s5 = peg$FAILED
                            if (peg$silentFails === 0) {
                                peg$fail(peg$c222)
                            }
                        }
                        if (s5 !== peg$FAILED) {
                            s6 = peg$parse__()
                            if (s6 !== peg$FAILED) {
                                s7 = peg$currPos
                                s8 = peg$parseFormalParameterList()
                                if (s8 !== peg$FAILED) {
                                    s9 = peg$parse__()
                                    if (s9 !== peg$FAILED) {
                                        s8 = [s8, s9]
                                        s7 = s8
                                    } else {
                                        peg$currPos = s7
                                        s7 = peg$FAILED
                                    }
                                } else {
                                    peg$currPos = s7
                                    s7 = peg$FAILED
                                }
                                if (s7 === peg$FAILED) {
                                    s7 = null
                                }
                                if (s7 !== peg$FAILED) {
                                    if (input.charCodeAt(peg$currPos) === 41) {
                                        s8 = peg$c223
                                        peg$currPos++
                                    } else {
                                        s8 = peg$FAILED
                                        if (peg$silentFails === 0) {
                                            peg$fail(peg$c224)
                                        }
                                    }
                                    if (s8 !== peg$FAILED) {
                                        s9 = peg$parse__()
                                        if (s9 !== peg$FAILED) {
                                            if (
                                                input.charCodeAt(
                                                    peg$currPos
                                                ) === 123
                                            ) {
                                                s10 = peg$c235
                                                peg$currPos++
                                            } else {
                                                s10 = peg$FAILED
                                                if (peg$silentFails === 0) {
                                                    peg$fail(peg$c236)
                                                }
                                            }
                                            if (s10 !== peg$FAILED) {
                                                s11 = peg$parse__()
                                                if (s11 !== peg$FAILED) {
                                                    s12 = peg$parseFunctionBody()
                                                    if (s12 !== peg$FAILED) {
                                                        s13 = peg$parse__()
                                                        if (
                                                            s13 !== peg$FAILED
                                                        ) {
                                                            if (
                                                                input.charCodeAt(
                                                                    peg$currPos
                                                                ) === 125
                                                            ) {
                                                                s14 = peg$c218
                                                                peg$currPos++
                                                            } else {
                                                                s14 = peg$FAILED
                                                                if (
                                                                    peg$silentFails ===
                                                                    0
                                                                ) {
                                                                    peg$fail(
                                                                        peg$c219
                                                                    )
                                                                }
                                                            }
                                                            if (
                                                                s14 !==
                                                                peg$FAILED
                                                            ) {
                                                                peg$savedPos = s0
                                                                s1 = peg$c381(
                                                                    s3,
                                                                    s7,
                                                                    s12
                                                                )
                                                                s0 = s1
                                                            } else {
                                                                peg$currPos = s0
                                                                s0 = peg$FAILED
                                                            }
                                                        } else {
                                                            peg$currPos = s0
                                                            s0 = peg$FAILED
                                                        }
                                                    } else {
                                                        peg$currPos = s0
                                                        s0 = peg$FAILED
                                                    }
                                                } else {
                                                    peg$currPos = s0
                                                    s0 = peg$FAILED
                                                }
                                            } else {
                                                peg$currPos = s0
                                                s0 = peg$FAILED
                                            }
                                        } else {
                                            peg$currPos = s0
                                            s0 = peg$FAILED
                                        }
                                    } else {
                                        peg$currPos = s0
                                        s0 = peg$FAILED
                                    }
                                } else {
                                    peg$currPos = s0
                                    s0 = peg$FAILED
                                }
                            } else {
                                peg$currPos = s0
                                s0 = peg$FAILED
                            }
                        } else {
                            peg$currPos = s0
                            s0 = peg$FAILED
                        }
                    } else {
                        peg$currPos = s0
                        s0 = peg$FAILED
                    }
                } else {
                    peg$currPos = s0
                    s0 = peg$FAILED
                }
            } else {
                peg$currPos = s0
                s0 = peg$FAILED
            }
        } else {
            peg$currPos = s0
            s0 = peg$FAILED
        }

        return s0
    }

    function peg$parseFunctionExpression() {
        var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13

        s0 = peg$currPos
        s1 = peg$parseFunctionToken()
        if (s1 !== peg$FAILED) {
            s2 = peg$parse__()
            if (s2 !== peg$FAILED) {
                s3 = peg$currPos
                s4 = peg$parseIdentifier()
                if (s4 !== peg$FAILED) {
                    s5 = peg$parse__()
                    if (s5 !== peg$FAILED) {
                        s4 = [s4, s5]
                        s3 = s4
                    } else {
                        peg$currPos = s3
                        s3 = peg$FAILED
                    }
                } else {
                    peg$currPos = s3
                    s3 = peg$FAILED
                }
                if (s3 === peg$FAILED) {
                    s3 = null
                }
                if (s3 !== peg$FAILED) {
                    if (input.charCodeAt(peg$currPos) === 40) {
                        s4 = peg$c221
                        peg$currPos++
                    } else {
                        s4 = peg$FAILED
                        if (peg$silentFails === 0) {
                            peg$fail(peg$c222)
                        }
                    }
                    if (s4 !== peg$FAILED) {
                        s5 = peg$parse__()
                        if (s5 !== peg$FAILED) {
                            s6 = peg$currPos
                            s7 = peg$parseFormalParameterList()
                            if (s7 !== peg$FAILED) {
                                s8 = peg$parse__()
                                if (s8 !== peg$FAILED) {
                                    s7 = [s7, s8]
                                    s6 = s7
                                } else {
                                    peg$currPos = s6
                                    s6 = peg$FAILED
                                }
                            } else {
                                peg$currPos = s6
                                s6 = peg$FAILED
                            }
                            if (s6 === peg$FAILED) {
                                s6 = null
                            }
                            if (s6 !== peg$FAILED) {
                                if (input.charCodeAt(peg$currPos) === 41) {
                                    s7 = peg$c223
                                    peg$currPos++
                                } else {
                                    s7 = peg$FAILED
                                    if (peg$silentFails === 0) {
                                        peg$fail(peg$c224)
                                    }
                                }
                                if (s7 !== peg$FAILED) {
                                    s8 = peg$parse__()
                                    if (s8 !== peg$FAILED) {
                                        if (
                                            input.charCodeAt(peg$currPos) ===
                                            123
                                        ) {
                                            s9 = peg$c235
                                            peg$currPos++
                                        } else {
                                            s9 = peg$FAILED
                                            if (peg$silentFails === 0) {
                                                peg$fail(peg$c236)
                                            }
                                        }
                                        if (s9 !== peg$FAILED) {
                                            s10 = peg$parse__()
                                            if (s10 !== peg$FAILED) {
                                                s11 = peg$parseFunctionBody()
                                                if (s11 !== peg$FAILED) {
                                                    s12 = peg$parse__()
                                                    if (s12 !== peg$FAILED) {
                                                        if (
                                                            input.charCodeAt(
                                                                peg$currPos
                                                            ) === 125
                                                        ) {
                                                            s13 = peg$c218
                                                            peg$currPos++
                                                        } else {
                                                            s13 = peg$FAILED
                                                            if (
                                                                peg$silentFails ===
                                                                0
                                                            ) {
                                                                peg$fail(
                                                                    peg$c219
                                                                )
                                                            }
                                                        }
                                                        if (
                                                            s13 !== peg$FAILED
                                                        ) {
                                                            peg$savedPos = s0
                                                            s1 = peg$c382(
                                                                s3,
                                                                s6,
                                                                s11
                                                            )
                                                            s0 = s1
                                                        } else {
                                                            peg$currPos = s0
                                                            s0 = peg$FAILED
                                                        }
                                                    } else {
                                                        peg$currPos = s0
                                                        s0 = peg$FAILED
                                                    }
                                                } else {
                                                    peg$currPos = s0
                                                    s0 = peg$FAILED
                                                }
                                            } else {
                                                peg$currPos = s0
                                                s0 = peg$FAILED
                                            }
                                        } else {
                                            peg$currPos = s0
                                            s0 = peg$FAILED
                                        }
                                    } else {
                                        peg$currPos = s0
                                        s0 = peg$FAILED
                                    }
                                } else {
                                    peg$currPos = s0
                                    s0 = peg$FAILED
                                }
                            } else {
                                peg$currPos = s0
                                s0 = peg$FAILED
                            }
                        } else {
                            peg$currPos = s0
                            s0 = peg$FAILED
                        }
                    } else {
                        peg$currPos = s0
                        s0 = peg$FAILED
                    }
                } else {
                    peg$currPos = s0
                    s0 = peg$FAILED
                }
            } else {
                peg$currPos = s0
                s0 = peg$FAILED
            }
        } else {
            peg$currPos = s0
            s0 = peg$FAILED
        }

        return s0
    }

    function peg$parseFormalParameterList() {
        var s0, s1, s2, s3, s4, s5, s6, s7

        s0 = peg$currPos
        s1 = peg$parseIdentifier()
        if (s1 !== peg$FAILED) {
            s2 = []
            s3 = peg$currPos
            s4 = peg$parse__()
            if (s4 !== peg$FAILED) {
                if (input.charCodeAt(peg$currPos) === 44) {
                    s5 = peg$c228
                    peg$currPos++
                } else {
                    s5 = peg$FAILED
                    if (peg$silentFails === 0) {
                        peg$fail(peg$c229)
                    }
                }
                if (s5 !== peg$FAILED) {
                    s6 = peg$parse__()
                    if (s6 !== peg$FAILED) {
                        s7 = peg$parseIdentifier()
                        if (s7 !== peg$FAILED) {
                            s4 = [s4, s5, s6, s7]
                            s3 = s4
                        } else {
                            peg$currPos = s3
                            s3 = peg$FAILED
                        }
                    } else {
                        peg$currPos = s3
                        s3 = peg$FAILED
                    }
                } else {
                    peg$currPos = s3
                    s3 = peg$FAILED
                }
            } else {
                peg$currPos = s3
                s3 = peg$FAILED
            }
            while (s3 !== peg$FAILED) {
                s2.push(s3)
                s3 = peg$currPos
                s4 = peg$parse__()
                if (s4 !== peg$FAILED) {
                    if (input.charCodeAt(peg$currPos) === 44) {
                        s5 = peg$c228
                        peg$currPos++
                    } else {
                        s5 = peg$FAILED
                        if (peg$silentFails === 0) {
                            peg$fail(peg$c229)
                        }
                    }
                    if (s5 !== peg$FAILED) {
                        s6 = peg$parse__()
                        if (s6 !== peg$FAILED) {
                            s7 = peg$parseIdentifier()
                            if (s7 !== peg$FAILED) {
                                s4 = [s4, s5, s6, s7]
                                s3 = s4
                            } else {
                                peg$currPos = s3
                                s3 = peg$FAILED
                            }
                        } else {
                            peg$currPos = s3
                            s3 = peg$FAILED
                        }
                    } else {
                        peg$currPos = s3
                        s3 = peg$FAILED
                    }
                } else {
                    peg$currPos = s3
                    s3 = peg$FAILED
                }
            }
            if (s2 !== peg$FAILED) {
                peg$savedPos = s0
                s1 = peg$c239(s1, s2)
                s0 = s1
            } else {
                peg$currPos = s0
                s0 = peg$FAILED
            }
        } else {
            peg$currPos = s0
            s0 = peg$FAILED
        }

        return s0
    }

    function peg$parseFunctionBody() {
        var s0, s1

        s0 = peg$currPos
        s1 = peg$parseSourceElements()
        if (s1 === peg$FAILED) {
            s1 = null
        }
        if (s1 !== peg$FAILED) {
            peg$savedPos = s0
            s1 = peg$c383(s1)
        }
        s0 = s1

        return s0
    }

    function peg$parseProgram() {
        var s0, s1

        s0 = peg$currPos
        s1 = peg$parseSourceElements()
        if (s1 === peg$FAILED) {
            s1 = null
        }
        if (s1 !== peg$FAILED) {
            peg$savedPos = s0
            s1 = peg$c384(s1)
        }
        s0 = s1

        return s0
    }

    function peg$parseSourceElements() {
        var s0, s1, s2, s3, s4, s5

        s0 = peg$currPos
        s1 = peg$parseSourceElement()
        if (s1 !== peg$FAILED) {
            s2 = []
            s3 = peg$currPos
            s4 = peg$parse__()
            if (s4 !== peg$FAILED) {
                s5 = peg$parseSourceElement()
                if (s5 !== peg$FAILED) {
                    s4 = [s4, s5]
                    s3 = s4
                } else {
                    peg$currPos = s3
                    s3 = peg$FAILED
                }
            } else {
                peg$currPos = s3
                s3 = peg$FAILED
            }
            while (s3 !== peg$FAILED) {
                s2.push(s3)
                s3 = peg$currPos
                s4 = peg$parse__()
                if (s4 !== peg$FAILED) {
                    s5 = peg$parseSourceElement()
                    if (s5 !== peg$FAILED) {
                        s4 = [s4, s5]
                        s3 = s4
                    } else {
                        peg$currPos = s3
                        s3 = peg$FAILED
                    }
                } else {
                    peg$currPos = s3
                    s3 = peg$FAILED
                }
            }
            if (s2 !== peg$FAILED) {
                peg$savedPos = s0
                s1 = peg$c385(s1, s2)
                s0 = s1
            } else {
                peg$currPos = s0
                s0 = peg$FAILED
            }
        } else {
            peg$currPos = s0
            s0 = peg$FAILED
        }

        return s0
    }

    function peg$parseSourceElement() {
        var s0

        s0 = peg$parseStatement()
        if (s0 === peg$FAILED) {
            s0 = peg$parseFunctionDeclaration()
        }

        return s0
    }

    var TYPES_TO_PROPERTY_NAMES = {
        CallExpression: "callee",
        MemberExpression: "object"
    }

    function filledArray(count, value) {
        return Array.apply(null, new Array(count)).map(function() {
            return value
        })
    }

    function extractOptional(optional, index) {
        return optional ? optional[index] : null
    }

    function extractList(list, index) {
        return list.map(function(element) {
            return element[index]
        })
    }

    function buildList(head, tail, index) {
        return [head].concat(extractList(tail, index))
    }

    function buildBinaryExpression(head, tail) {
        return tail.reduce(function(result, element) {
            return {
                type: "BinaryExpression",
                operator: element[1],
                left: result,
                right: element[3]
            }
        }, head)
    }

    function buildLogicalExpression(head, tail) {
        return tail.reduce(function(result, element) {
            return {
                type: "LogicalExpression",
                operator: element[1],
                left: result,
                right: element[3]
            }
        }, head)
    }

    function optionalList(value) {
        return value !== null ? value : []
    }

    peg$result = peg$startRuleFunction()

    if (peg$result !== peg$FAILED && peg$currPos === input.length) {
        return peg$result
    } else {
        if (peg$result !== peg$FAILED && peg$currPos < input.length) {
            peg$fail(peg$endExpectation())
        }

        throw peg$buildStructuredError(
            peg$maxFailExpected,
            peg$maxFailPos < input.length ? input.charAt(peg$maxFailPos) : null,
            peg$maxFailPos < input.length
                ? peg$computeLocation(peg$maxFailPos, peg$maxFailPos + 1)
                : peg$computeLocation(peg$maxFailPos, peg$maxFailPos)
        )
    }
}

module.exports = {
    SyntaxError: peg$SyntaxError,
    parse: peg$parse
}
